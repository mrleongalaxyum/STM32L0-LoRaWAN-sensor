
STM32 LoRa node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7c8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001850  0800c888  0800c888  0001c888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0d8  0800e0d8  00020058  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0d8  0800e0d8  0001e0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0e0  0800e0e0  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0e0  0800e0e0  0001e0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e0e4  0800e0e4  0001e0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  0800e0e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000440  20000058  0800e140  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  0800e140  00020498  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc87  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003575  00000000  00000000  0003cd07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  00040280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001390  00000000  00000000  00041728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017acf  00000000  00000000  00042ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001886d  00000000  00000000  0005a587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e582  00000000  00000000  00072df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00101376  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c04  00000000  00000000  001013cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000058 	.word	0x20000058
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c870 	.word	0x0800c870

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000005c 	.word	0x2000005c
 8000104:	0800c870 	.word	0x0800c870

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_ldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d115      	bne.n	8000424 <__aeabi_ldivmod+0x30>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d113      	bne.n	8000424 <__aeabi_ldivmod+0x30>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	db06      	blt.n	800040e <__aeabi_ldivmod+0x1a>
 8000400:	dc01      	bgt.n	8000406 <__aeabi_ldivmod+0x12>
 8000402:	2800      	cmp	r0, #0
 8000404:	d006      	beq.n	8000414 <__aeabi_ldivmod+0x20>
 8000406:	2000      	movs	r0, #0
 8000408:	43c0      	mvns	r0, r0
 800040a:	0841      	lsrs	r1, r0, #1
 800040c:	e002      	b.n	8000414 <__aeabi_ldivmod+0x20>
 800040e:	2180      	movs	r1, #128	; 0x80
 8000410:	0609      	lsls	r1, r1, #24
 8000412:	2000      	movs	r0, #0
 8000414:	b407      	push	{r0, r1, r2}
 8000416:	4802      	ldr	r0, [pc, #8]	; (8000420 <__aeabi_ldivmod+0x2c>)
 8000418:	a101      	add	r1, pc, #4	; (adr r1, 8000420 <__aeabi_ldivmod+0x2c>)
 800041a:	1840      	adds	r0, r0, r1
 800041c:	9002      	str	r0, [sp, #8]
 800041e:	bd03      	pop	{r0, r1, pc}
 8000420:	ffffffd1 	.word	0xffffffd1
 8000424:	b403      	push	{r0, r1}
 8000426:	4668      	mov	r0, sp
 8000428:	b501      	push	{r0, lr}
 800042a:	9802      	ldr	r0, [sp, #8]
 800042c:	f000 f91a 	bl	8000664 <__gnu_ldivmod_helper>
 8000430:	9b01      	ldr	r3, [sp, #4]
 8000432:	469e      	mov	lr, r3
 8000434:	b002      	add	sp, #8
 8000436:	bc0c      	pop	{r2, r3}
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_uldivmod>:
 800043c:	2b00      	cmp	r3, #0
 800043e:	d111      	bne.n	8000464 <__aeabi_uldivmod+0x28>
 8000440:	2a00      	cmp	r2, #0
 8000442:	d10f      	bne.n	8000464 <__aeabi_uldivmod+0x28>
 8000444:	2900      	cmp	r1, #0
 8000446:	d100      	bne.n	800044a <__aeabi_uldivmod+0xe>
 8000448:	2800      	cmp	r0, #0
 800044a:	d002      	beq.n	8000452 <__aeabi_uldivmod+0x16>
 800044c:	2100      	movs	r1, #0
 800044e:	43c9      	mvns	r1, r1
 8000450:	1c08      	adds	r0, r1, #0
 8000452:	b407      	push	{r0, r1, r2}
 8000454:	4802      	ldr	r0, [pc, #8]	; (8000460 <__aeabi_uldivmod+0x24>)
 8000456:	a102      	add	r1, pc, #8	; (adr r1, 8000460 <__aeabi_uldivmod+0x24>)
 8000458:	1840      	adds	r0, r0, r1
 800045a:	9002      	str	r0, [sp, #8]
 800045c:	bd03      	pop	{r0, r1, pc}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	ffffff91 	.word	0xffffff91
 8000464:	b403      	push	{r0, r1}
 8000466:	4668      	mov	r0, sp
 8000468:	b501      	push	{r0, lr}
 800046a:	9802      	ldr	r0, [sp, #8]
 800046c:	f000 f82e 	bl	80004cc <__udivmoddi4>
 8000470:	9b01      	ldr	r3, [sp, #4]
 8000472:	469e      	mov	lr, r3
 8000474:	b002      	add	sp, #8
 8000476:	bc0c      	pop	{r2, r3}
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_lmul>:
 800047c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800047e:	0415      	lsls	r5, r2, #16
 8000480:	0c2d      	lsrs	r5, r5, #16
 8000482:	000f      	movs	r7, r1
 8000484:	0001      	movs	r1, r0
 8000486:	002e      	movs	r6, r5
 8000488:	46c6      	mov	lr, r8
 800048a:	4684      	mov	ip, r0
 800048c:	0400      	lsls	r0, r0, #16
 800048e:	0c14      	lsrs	r4, r2, #16
 8000490:	0c00      	lsrs	r0, r0, #16
 8000492:	0c09      	lsrs	r1, r1, #16
 8000494:	4346      	muls	r6, r0
 8000496:	434d      	muls	r5, r1
 8000498:	4360      	muls	r0, r4
 800049a:	4361      	muls	r1, r4
 800049c:	1940      	adds	r0, r0, r5
 800049e:	0c34      	lsrs	r4, r6, #16
 80004a0:	1824      	adds	r4, r4, r0
 80004a2:	b500      	push	{lr}
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	d903      	bls.n	80004b0 <__aeabi_lmul+0x34>
 80004a8:	2080      	movs	r0, #128	; 0x80
 80004aa:	0240      	lsls	r0, r0, #9
 80004ac:	4680      	mov	r8, r0
 80004ae:	4441      	add	r1, r8
 80004b0:	0c25      	lsrs	r5, r4, #16
 80004b2:	186d      	adds	r5, r5, r1
 80004b4:	4661      	mov	r1, ip
 80004b6:	4359      	muls	r1, r3
 80004b8:	437a      	muls	r2, r7
 80004ba:	0430      	lsls	r0, r6, #16
 80004bc:	1949      	adds	r1, r1, r5
 80004be:	0424      	lsls	r4, r4, #16
 80004c0:	0c00      	lsrs	r0, r0, #16
 80004c2:	1820      	adds	r0, r4, r0
 80004c4:	1889      	adds	r1, r1, r2
 80004c6:	bc80      	pop	{r7}
 80004c8:	46b8      	mov	r8, r7
 80004ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004cc <__udivmoddi4>:
 80004cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ce:	4657      	mov	r7, sl
 80004d0:	464e      	mov	r6, r9
 80004d2:	4645      	mov	r5, r8
 80004d4:	46de      	mov	lr, fp
 80004d6:	b5e0      	push	{r5, r6, r7, lr}
 80004d8:	0004      	movs	r4, r0
 80004da:	000d      	movs	r5, r1
 80004dc:	4692      	mov	sl, r2
 80004de:	4699      	mov	r9, r3
 80004e0:	b083      	sub	sp, #12
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d830      	bhi.n	8000548 <__udivmoddi4+0x7c>
 80004e6:	d02d      	beq.n	8000544 <__udivmoddi4+0x78>
 80004e8:	4649      	mov	r1, r9
 80004ea:	4650      	mov	r0, sl
 80004ec:	f000 faa4 	bl	8000a38 <__clzdi2>
 80004f0:	0029      	movs	r1, r5
 80004f2:	0006      	movs	r6, r0
 80004f4:	0020      	movs	r0, r4
 80004f6:	f000 fa9f 	bl	8000a38 <__clzdi2>
 80004fa:	1a33      	subs	r3, r6, r0
 80004fc:	4698      	mov	r8, r3
 80004fe:	3b20      	subs	r3, #32
 8000500:	469b      	mov	fp, r3
 8000502:	d433      	bmi.n	800056c <__udivmoddi4+0xa0>
 8000504:	465a      	mov	r2, fp
 8000506:	4653      	mov	r3, sl
 8000508:	4093      	lsls	r3, r2
 800050a:	4642      	mov	r2, r8
 800050c:	001f      	movs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d83a      	bhi.n	800058e <__udivmoddi4+0xc2>
 8000518:	42af      	cmp	r7, r5
 800051a:	d100      	bne.n	800051e <__udivmoddi4+0x52>
 800051c:	e078      	b.n	8000610 <__udivmoddi4+0x144>
 800051e:	465b      	mov	r3, fp
 8000520:	1ba4      	subs	r4, r4, r6
 8000522:	41bd      	sbcs	r5, r7
 8000524:	2b00      	cmp	r3, #0
 8000526:	da00      	bge.n	800052a <__udivmoddi4+0x5e>
 8000528:	e075      	b.n	8000616 <__udivmoddi4+0x14a>
 800052a:	2200      	movs	r2, #0
 800052c:	2300      	movs	r3, #0
 800052e:	9200      	str	r2, [sp, #0]
 8000530:	9301      	str	r3, [sp, #4]
 8000532:	2301      	movs	r3, #1
 8000534:	465a      	mov	r2, fp
 8000536:	4093      	lsls	r3, r2
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	2301      	movs	r3, #1
 800053c:	4642      	mov	r2, r8
 800053e:	4093      	lsls	r3, r2
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	e028      	b.n	8000596 <__udivmoddi4+0xca>
 8000544:	4282      	cmp	r2, r0
 8000546:	d9cf      	bls.n	80004e8 <__udivmoddi4+0x1c>
 8000548:	2200      	movs	r2, #0
 800054a:	2300      	movs	r3, #0
 800054c:	9200      	str	r2, [sp, #0]
 800054e:	9301      	str	r3, [sp, #4]
 8000550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <__udivmoddi4+0x8e>
 8000556:	601c      	str	r4, [r3, #0]
 8000558:	605d      	str	r5, [r3, #4]
 800055a:	9800      	ldr	r0, [sp, #0]
 800055c:	9901      	ldr	r1, [sp, #4]
 800055e:	b003      	add	sp, #12
 8000560:	bcf0      	pop	{r4, r5, r6, r7}
 8000562:	46bb      	mov	fp, r7
 8000564:	46b2      	mov	sl, r6
 8000566:	46a9      	mov	r9, r5
 8000568:	46a0      	mov	r8, r4
 800056a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056c:	4642      	mov	r2, r8
 800056e:	2320      	movs	r3, #32
 8000570:	1a9b      	subs	r3, r3, r2
 8000572:	4652      	mov	r2, sl
 8000574:	40da      	lsrs	r2, r3
 8000576:	4641      	mov	r1, r8
 8000578:	0013      	movs	r3, r2
 800057a:	464a      	mov	r2, r9
 800057c:	408a      	lsls	r2, r1
 800057e:	0017      	movs	r7, r2
 8000580:	4642      	mov	r2, r8
 8000582:	431f      	orrs	r7, r3
 8000584:	4653      	mov	r3, sl
 8000586:	4093      	lsls	r3, r2
 8000588:	001e      	movs	r6, r3
 800058a:	42af      	cmp	r7, r5
 800058c:	d9c4      	bls.n	8000518 <__udivmoddi4+0x4c>
 800058e:	2200      	movs	r2, #0
 8000590:	2300      	movs	r3, #0
 8000592:	9200      	str	r2, [sp, #0]
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	4643      	mov	r3, r8
 8000598:	2b00      	cmp	r3, #0
 800059a:	d0d9      	beq.n	8000550 <__udivmoddi4+0x84>
 800059c:	07fb      	lsls	r3, r7, #31
 800059e:	0872      	lsrs	r2, r6, #1
 80005a0:	431a      	orrs	r2, r3
 80005a2:	4646      	mov	r6, r8
 80005a4:	087b      	lsrs	r3, r7, #1
 80005a6:	e00e      	b.n	80005c6 <__udivmoddi4+0xfa>
 80005a8:	42ab      	cmp	r3, r5
 80005aa:	d101      	bne.n	80005b0 <__udivmoddi4+0xe4>
 80005ac:	42a2      	cmp	r2, r4
 80005ae:	d80c      	bhi.n	80005ca <__udivmoddi4+0xfe>
 80005b0:	1aa4      	subs	r4, r4, r2
 80005b2:	419d      	sbcs	r5, r3
 80005b4:	2001      	movs	r0, #1
 80005b6:	1924      	adds	r4, r4, r4
 80005b8:	416d      	adcs	r5, r5
 80005ba:	2100      	movs	r1, #0
 80005bc:	3e01      	subs	r6, #1
 80005be:	1824      	adds	r4, r4, r0
 80005c0:	414d      	adcs	r5, r1
 80005c2:	2e00      	cmp	r6, #0
 80005c4:	d006      	beq.n	80005d4 <__udivmoddi4+0x108>
 80005c6:	42ab      	cmp	r3, r5
 80005c8:	d9ee      	bls.n	80005a8 <__udivmoddi4+0xdc>
 80005ca:	3e01      	subs	r6, #1
 80005cc:	1924      	adds	r4, r4, r4
 80005ce:	416d      	adcs	r5, r5
 80005d0:	2e00      	cmp	r6, #0
 80005d2:	d1f8      	bne.n	80005c6 <__udivmoddi4+0xfa>
 80005d4:	9800      	ldr	r0, [sp, #0]
 80005d6:	9901      	ldr	r1, [sp, #4]
 80005d8:	465b      	mov	r3, fp
 80005da:	1900      	adds	r0, r0, r4
 80005dc:	4169      	adcs	r1, r5
 80005de:	2b00      	cmp	r3, #0
 80005e0:	db24      	blt.n	800062c <__udivmoddi4+0x160>
 80005e2:	002b      	movs	r3, r5
 80005e4:	465a      	mov	r2, fp
 80005e6:	4644      	mov	r4, r8
 80005e8:	40d3      	lsrs	r3, r2
 80005ea:	002a      	movs	r2, r5
 80005ec:	40e2      	lsrs	r2, r4
 80005ee:	001c      	movs	r4, r3
 80005f0:	465b      	mov	r3, fp
 80005f2:	0015      	movs	r5, r2
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	db2a      	blt.n	800064e <__udivmoddi4+0x182>
 80005f8:	0026      	movs	r6, r4
 80005fa:	409e      	lsls	r6, r3
 80005fc:	0033      	movs	r3, r6
 80005fe:	0026      	movs	r6, r4
 8000600:	4647      	mov	r7, r8
 8000602:	40be      	lsls	r6, r7
 8000604:	0032      	movs	r2, r6
 8000606:	1a80      	subs	r0, r0, r2
 8000608:	4199      	sbcs	r1, r3
 800060a:	9000      	str	r0, [sp, #0]
 800060c:	9101      	str	r1, [sp, #4]
 800060e:	e79f      	b.n	8000550 <__udivmoddi4+0x84>
 8000610:	42a3      	cmp	r3, r4
 8000612:	d8bc      	bhi.n	800058e <__udivmoddi4+0xc2>
 8000614:	e783      	b.n	800051e <__udivmoddi4+0x52>
 8000616:	4642      	mov	r2, r8
 8000618:	2320      	movs	r3, #32
 800061a:	2100      	movs	r1, #0
 800061c:	1a9b      	subs	r3, r3, r2
 800061e:	2200      	movs	r2, #0
 8000620:	9100      	str	r1, [sp, #0]
 8000622:	9201      	str	r2, [sp, #4]
 8000624:	2201      	movs	r2, #1
 8000626:	40da      	lsrs	r2, r3
 8000628:	9201      	str	r2, [sp, #4]
 800062a:	e786      	b.n	800053a <__udivmoddi4+0x6e>
 800062c:	4642      	mov	r2, r8
 800062e:	2320      	movs	r3, #32
 8000630:	1a9b      	subs	r3, r3, r2
 8000632:	002a      	movs	r2, r5
 8000634:	4646      	mov	r6, r8
 8000636:	409a      	lsls	r2, r3
 8000638:	0023      	movs	r3, r4
 800063a:	40f3      	lsrs	r3, r6
 800063c:	4644      	mov	r4, r8
 800063e:	4313      	orrs	r3, r2
 8000640:	002a      	movs	r2, r5
 8000642:	40e2      	lsrs	r2, r4
 8000644:	001c      	movs	r4, r3
 8000646:	465b      	mov	r3, fp
 8000648:	0015      	movs	r5, r2
 800064a:	2b00      	cmp	r3, #0
 800064c:	dad4      	bge.n	80005f8 <__udivmoddi4+0x12c>
 800064e:	4642      	mov	r2, r8
 8000650:	002f      	movs	r7, r5
 8000652:	2320      	movs	r3, #32
 8000654:	0026      	movs	r6, r4
 8000656:	4097      	lsls	r7, r2
 8000658:	1a9b      	subs	r3, r3, r2
 800065a:	40de      	lsrs	r6, r3
 800065c:	003b      	movs	r3, r7
 800065e:	4333      	orrs	r3, r6
 8000660:	e7cd      	b.n	80005fe <__udivmoddi4+0x132>
 8000662:	46c0      	nop			; (mov r8, r8)

08000664 <__gnu_ldivmod_helper>:
 8000664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000666:	46ce      	mov	lr, r9
 8000668:	4647      	mov	r7, r8
 800066a:	b580      	push	{r7, lr}
 800066c:	4691      	mov	r9, r2
 800066e:	4698      	mov	r8, r3
 8000670:	0004      	movs	r4, r0
 8000672:	000d      	movs	r5, r1
 8000674:	f000 f9ec 	bl	8000a50 <__divdi3>
 8000678:	0007      	movs	r7, r0
 800067a:	000e      	movs	r6, r1
 800067c:	0002      	movs	r2, r0
 800067e:	000b      	movs	r3, r1
 8000680:	4648      	mov	r0, r9
 8000682:	4641      	mov	r1, r8
 8000684:	f7ff fefa 	bl	800047c <__aeabi_lmul>
 8000688:	1a24      	subs	r4, r4, r0
 800068a:	418d      	sbcs	r5, r1
 800068c:	9b08      	ldr	r3, [sp, #32]
 800068e:	0038      	movs	r0, r7
 8000690:	0031      	movs	r1, r6
 8000692:	601c      	str	r4, [r3, #0]
 8000694:	605d      	str	r5, [r3, #4]
 8000696:	bcc0      	pop	{r6, r7}
 8000698:	46b9      	mov	r9, r7
 800069a:	46b0      	mov	r8, r6
 800069c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800069e:	46c0      	nop			; (mov r8, r8)

080006a0 <__aeabi_fdiv>:
 80006a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006a2:	464f      	mov	r7, r9
 80006a4:	4646      	mov	r6, r8
 80006a6:	46d6      	mov	lr, sl
 80006a8:	0245      	lsls	r5, r0, #9
 80006aa:	b5c0      	push	{r6, r7, lr}
 80006ac:	0047      	lsls	r7, r0, #1
 80006ae:	1c0c      	adds	r4, r1, #0
 80006b0:	0a6d      	lsrs	r5, r5, #9
 80006b2:	0e3f      	lsrs	r7, r7, #24
 80006b4:	0fc6      	lsrs	r6, r0, #31
 80006b6:	2f00      	cmp	r7, #0
 80006b8:	d066      	beq.n	8000788 <__aeabi_fdiv+0xe8>
 80006ba:	2fff      	cmp	r7, #255	; 0xff
 80006bc:	d06c      	beq.n	8000798 <__aeabi_fdiv+0xf8>
 80006be:	2300      	movs	r3, #0
 80006c0:	00ea      	lsls	r2, r5, #3
 80006c2:	2580      	movs	r5, #128	; 0x80
 80006c4:	4699      	mov	r9, r3
 80006c6:	469a      	mov	sl, r3
 80006c8:	04ed      	lsls	r5, r5, #19
 80006ca:	4315      	orrs	r5, r2
 80006cc:	3f7f      	subs	r7, #127	; 0x7f
 80006ce:	0260      	lsls	r0, r4, #9
 80006d0:	0061      	lsls	r1, r4, #1
 80006d2:	0a43      	lsrs	r3, r0, #9
 80006d4:	4698      	mov	r8, r3
 80006d6:	0e09      	lsrs	r1, r1, #24
 80006d8:	0fe4      	lsrs	r4, r4, #31
 80006da:	2900      	cmp	r1, #0
 80006dc:	d048      	beq.n	8000770 <__aeabi_fdiv+0xd0>
 80006de:	29ff      	cmp	r1, #255	; 0xff
 80006e0:	d010      	beq.n	8000704 <__aeabi_fdiv+0x64>
 80006e2:	2280      	movs	r2, #128	; 0x80
 80006e4:	00d8      	lsls	r0, r3, #3
 80006e6:	04d2      	lsls	r2, r2, #19
 80006e8:	4302      	orrs	r2, r0
 80006ea:	4690      	mov	r8, r2
 80006ec:	2000      	movs	r0, #0
 80006ee:	397f      	subs	r1, #127	; 0x7f
 80006f0:	464a      	mov	r2, r9
 80006f2:	0033      	movs	r3, r6
 80006f4:	1a7f      	subs	r7, r7, r1
 80006f6:	4302      	orrs	r2, r0
 80006f8:	496c      	ldr	r1, [pc, #432]	; (80008ac <__aeabi_fdiv+0x20c>)
 80006fa:	0092      	lsls	r2, r2, #2
 80006fc:	588a      	ldr	r2, [r1, r2]
 80006fe:	4063      	eors	r3, r4
 8000700:	b2db      	uxtb	r3, r3
 8000702:	4697      	mov	pc, r2
 8000704:	2b00      	cmp	r3, #0
 8000706:	d16d      	bne.n	80007e4 <__aeabi_fdiv+0x144>
 8000708:	2002      	movs	r0, #2
 800070a:	3fff      	subs	r7, #255	; 0xff
 800070c:	e033      	b.n	8000776 <__aeabi_fdiv+0xd6>
 800070e:	2300      	movs	r3, #0
 8000710:	4698      	mov	r8, r3
 8000712:	0026      	movs	r6, r4
 8000714:	4645      	mov	r5, r8
 8000716:	4682      	mov	sl, r0
 8000718:	4653      	mov	r3, sl
 800071a:	2b02      	cmp	r3, #2
 800071c:	d100      	bne.n	8000720 <__aeabi_fdiv+0x80>
 800071e:	e07f      	b.n	8000820 <__aeabi_fdiv+0x180>
 8000720:	2b03      	cmp	r3, #3
 8000722:	d100      	bne.n	8000726 <__aeabi_fdiv+0x86>
 8000724:	e094      	b.n	8000850 <__aeabi_fdiv+0x1b0>
 8000726:	2b01      	cmp	r3, #1
 8000728:	d017      	beq.n	800075a <__aeabi_fdiv+0xba>
 800072a:	0038      	movs	r0, r7
 800072c:	307f      	adds	r0, #127	; 0x7f
 800072e:	2800      	cmp	r0, #0
 8000730:	dd5f      	ble.n	80007f2 <__aeabi_fdiv+0x152>
 8000732:	076b      	lsls	r3, r5, #29
 8000734:	d004      	beq.n	8000740 <__aeabi_fdiv+0xa0>
 8000736:	230f      	movs	r3, #15
 8000738:	402b      	ands	r3, r5
 800073a:	2b04      	cmp	r3, #4
 800073c:	d000      	beq.n	8000740 <__aeabi_fdiv+0xa0>
 800073e:	3504      	adds	r5, #4
 8000740:	012b      	lsls	r3, r5, #4
 8000742:	d503      	bpl.n	800074c <__aeabi_fdiv+0xac>
 8000744:	0038      	movs	r0, r7
 8000746:	4b5a      	ldr	r3, [pc, #360]	; (80008b0 <__aeabi_fdiv+0x210>)
 8000748:	3080      	adds	r0, #128	; 0x80
 800074a:	401d      	ands	r5, r3
 800074c:	28fe      	cmp	r0, #254	; 0xfe
 800074e:	dc67      	bgt.n	8000820 <__aeabi_fdiv+0x180>
 8000750:	01ad      	lsls	r5, r5, #6
 8000752:	0a6d      	lsrs	r5, r5, #9
 8000754:	b2c0      	uxtb	r0, r0
 8000756:	e002      	b.n	800075e <__aeabi_fdiv+0xbe>
 8000758:	001e      	movs	r6, r3
 800075a:	2000      	movs	r0, #0
 800075c:	2500      	movs	r5, #0
 800075e:	05c0      	lsls	r0, r0, #23
 8000760:	4328      	orrs	r0, r5
 8000762:	07f6      	lsls	r6, r6, #31
 8000764:	4330      	orrs	r0, r6
 8000766:	bce0      	pop	{r5, r6, r7}
 8000768:	46ba      	mov	sl, r7
 800076a:	46b1      	mov	r9, r6
 800076c:	46a8      	mov	r8, r5
 800076e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000770:	2b00      	cmp	r3, #0
 8000772:	d12b      	bne.n	80007cc <__aeabi_fdiv+0x12c>
 8000774:	2001      	movs	r0, #1
 8000776:	464a      	mov	r2, r9
 8000778:	0033      	movs	r3, r6
 800077a:	494e      	ldr	r1, [pc, #312]	; (80008b4 <__aeabi_fdiv+0x214>)
 800077c:	4302      	orrs	r2, r0
 800077e:	0092      	lsls	r2, r2, #2
 8000780:	588a      	ldr	r2, [r1, r2]
 8000782:	4063      	eors	r3, r4
 8000784:	b2db      	uxtb	r3, r3
 8000786:	4697      	mov	pc, r2
 8000788:	2d00      	cmp	r5, #0
 800078a:	d113      	bne.n	80007b4 <__aeabi_fdiv+0x114>
 800078c:	2304      	movs	r3, #4
 800078e:	4699      	mov	r9, r3
 8000790:	3b03      	subs	r3, #3
 8000792:	2700      	movs	r7, #0
 8000794:	469a      	mov	sl, r3
 8000796:	e79a      	b.n	80006ce <__aeabi_fdiv+0x2e>
 8000798:	2d00      	cmp	r5, #0
 800079a:	d105      	bne.n	80007a8 <__aeabi_fdiv+0x108>
 800079c:	2308      	movs	r3, #8
 800079e:	4699      	mov	r9, r3
 80007a0:	3b06      	subs	r3, #6
 80007a2:	27ff      	movs	r7, #255	; 0xff
 80007a4:	469a      	mov	sl, r3
 80007a6:	e792      	b.n	80006ce <__aeabi_fdiv+0x2e>
 80007a8:	230c      	movs	r3, #12
 80007aa:	4699      	mov	r9, r3
 80007ac:	3b09      	subs	r3, #9
 80007ae:	27ff      	movs	r7, #255	; 0xff
 80007b0:	469a      	mov	sl, r3
 80007b2:	e78c      	b.n	80006ce <__aeabi_fdiv+0x2e>
 80007b4:	0028      	movs	r0, r5
 80007b6:	f000 f921 	bl	80009fc <__clzsi2>
 80007ba:	2776      	movs	r7, #118	; 0x76
 80007bc:	1f43      	subs	r3, r0, #5
 80007be:	409d      	lsls	r5, r3
 80007c0:	2300      	movs	r3, #0
 80007c2:	427f      	negs	r7, r7
 80007c4:	4699      	mov	r9, r3
 80007c6:	469a      	mov	sl, r3
 80007c8:	1a3f      	subs	r7, r7, r0
 80007ca:	e780      	b.n	80006ce <__aeabi_fdiv+0x2e>
 80007cc:	0018      	movs	r0, r3
 80007ce:	f000 f915 	bl	80009fc <__clzsi2>
 80007d2:	4642      	mov	r2, r8
 80007d4:	1f43      	subs	r3, r0, #5
 80007d6:	2176      	movs	r1, #118	; 0x76
 80007d8:	409a      	lsls	r2, r3
 80007da:	4249      	negs	r1, r1
 80007dc:	1a09      	subs	r1, r1, r0
 80007de:	4690      	mov	r8, r2
 80007e0:	2000      	movs	r0, #0
 80007e2:	e785      	b.n	80006f0 <__aeabi_fdiv+0x50>
 80007e4:	21ff      	movs	r1, #255	; 0xff
 80007e6:	2003      	movs	r0, #3
 80007e8:	e782      	b.n	80006f0 <__aeabi_fdiv+0x50>
 80007ea:	001e      	movs	r6, r3
 80007ec:	20ff      	movs	r0, #255	; 0xff
 80007ee:	2500      	movs	r5, #0
 80007f0:	e7b5      	b.n	800075e <__aeabi_fdiv+0xbe>
 80007f2:	2301      	movs	r3, #1
 80007f4:	1a1b      	subs	r3, r3, r0
 80007f6:	2b1b      	cmp	r3, #27
 80007f8:	dcaf      	bgt.n	800075a <__aeabi_fdiv+0xba>
 80007fa:	379e      	adds	r7, #158	; 0x9e
 80007fc:	0029      	movs	r1, r5
 80007fe:	40bd      	lsls	r5, r7
 8000800:	40d9      	lsrs	r1, r3
 8000802:	1e6a      	subs	r2, r5, #1
 8000804:	4195      	sbcs	r5, r2
 8000806:	430d      	orrs	r5, r1
 8000808:	076b      	lsls	r3, r5, #29
 800080a:	d004      	beq.n	8000816 <__aeabi_fdiv+0x176>
 800080c:	230f      	movs	r3, #15
 800080e:	402b      	ands	r3, r5
 8000810:	2b04      	cmp	r3, #4
 8000812:	d000      	beq.n	8000816 <__aeabi_fdiv+0x176>
 8000814:	3504      	adds	r5, #4
 8000816:	016b      	lsls	r3, r5, #5
 8000818:	d544      	bpl.n	80008a4 <__aeabi_fdiv+0x204>
 800081a:	2001      	movs	r0, #1
 800081c:	2500      	movs	r5, #0
 800081e:	e79e      	b.n	800075e <__aeabi_fdiv+0xbe>
 8000820:	20ff      	movs	r0, #255	; 0xff
 8000822:	2500      	movs	r5, #0
 8000824:	e79b      	b.n	800075e <__aeabi_fdiv+0xbe>
 8000826:	2580      	movs	r5, #128	; 0x80
 8000828:	2600      	movs	r6, #0
 800082a:	20ff      	movs	r0, #255	; 0xff
 800082c:	03ed      	lsls	r5, r5, #15
 800082e:	e796      	b.n	800075e <__aeabi_fdiv+0xbe>
 8000830:	2300      	movs	r3, #0
 8000832:	4698      	mov	r8, r3
 8000834:	2080      	movs	r0, #128	; 0x80
 8000836:	03c0      	lsls	r0, r0, #15
 8000838:	4205      	tst	r5, r0
 800083a:	d009      	beq.n	8000850 <__aeabi_fdiv+0x1b0>
 800083c:	4643      	mov	r3, r8
 800083e:	4203      	tst	r3, r0
 8000840:	d106      	bne.n	8000850 <__aeabi_fdiv+0x1b0>
 8000842:	4645      	mov	r5, r8
 8000844:	4305      	orrs	r5, r0
 8000846:	026d      	lsls	r5, r5, #9
 8000848:	0026      	movs	r6, r4
 800084a:	20ff      	movs	r0, #255	; 0xff
 800084c:	0a6d      	lsrs	r5, r5, #9
 800084e:	e786      	b.n	800075e <__aeabi_fdiv+0xbe>
 8000850:	2080      	movs	r0, #128	; 0x80
 8000852:	03c0      	lsls	r0, r0, #15
 8000854:	4305      	orrs	r5, r0
 8000856:	026d      	lsls	r5, r5, #9
 8000858:	20ff      	movs	r0, #255	; 0xff
 800085a:	0a6d      	lsrs	r5, r5, #9
 800085c:	e77f      	b.n	800075e <__aeabi_fdiv+0xbe>
 800085e:	4641      	mov	r1, r8
 8000860:	016a      	lsls	r2, r5, #5
 8000862:	0148      	lsls	r0, r1, #5
 8000864:	4282      	cmp	r2, r0
 8000866:	d219      	bcs.n	800089c <__aeabi_fdiv+0x1fc>
 8000868:	211b      	movs	r1, #27
 800086a:	2500      	movs	r5, #0
 800086c:	3f01      	subs	r7, #1
 800086e:	2601      	movs	r6, #1
 8000870:	0014      	movs	r4, r2
 8000872:	006d      	lsls	r5, r5, #1
 8000874:	0052      	lsls	r2, r2, #1
 8000876:	2c00      	cmp	r4, #0
 8000878:	db01      	blt.n	800087e <__aeabi_fdiv+0x1de>
 800087a:	4290      	cmp	r0, r2
 800087c:	d801      	bhi.n	8000882 <__aeabi_fdiv+0x1e2>
 800087e:	1a12      	subs	r2, r2, r0
 8000880:	4335      	orrs	r5, r6
 8000882:	3901      	subs	r1, #1
 8000884:	2900      	cmp	r1, #0
 8000886:	d1f3      	bne.n	8000870 <__aeabi_fdiv+0x1d0>
 8000888:	1e50      	subs	r0, r2, #1
 800088a:	4182      	sbcs	r2, r0
 800088c:	0038      	movs	r0, r7
 800088e:	307f      	adds	r0, #127	; 0x7f
 8000890:	001e      	movs	r6, r3
 8000892:	4315      	orrs	r5, r2
 8000894:	2800      	cmp	r0, #0
 8000896:	dd00      	ble.n	800089a <__aeabi_fdiv+0x1fa>
 8000898:	e74b      	b.n	8000732 <__aeabi_fdiv+0x92>
 800089a:	e7aa      	b.n	80007f2 <__aeabi_fdiv+0x152>
 800089c:	211a      	movs	r1, #26
 800089e:	2501      	movs	r5, #1
 80008a0:	1a12      	subs	r2, r2, r0
 80008a2:	e7e4      	b.n	800086e <__aeabi_fdiv+0x1ce>
 80008a4:	01ad      	lsls	r5, r5, #6
 80008a6:	2000      	movs	r0, #0
 80008a8:	0a6d      	lsrs	r5, r5, #9
 80008aa:	e758      	b.n	800075e <__aeabi_fdiv+0xbe>
 80008ac:	0800cd74 	.word	0x0800cd74
 80008b0:	f7ffffff 	.word	0xf7ffffff
 80008b4:	0800cdb4 	.word	0x0800cdb4

080008b8 <__aeabi_f2iz>:
 80008b8:	0241      	lsls	r1, r0, #9
 80008ba:	0042      	lsls	r2, r0, #1
 80008bc:	0fc3      	lsrs	r3, r0, #31
 80008be:	0a49      	lsrs	r1, r1, #9
 80008c0:	2000      	movs	r0, #0
 80008c2:	0e12      	lsrs	r2, r2, #24
 80008c4:	2a7e      	cmp	r2, #126	; 0x7e
 80008c6:	d903      	bls.n	80008d0 <__aeabi_f2iz+0x18>
 80008c8:	2a9d      	cmp	r2, #157	; 0x9d
 80008ca:	d902      	bls.n	80008d2 <__aeabi_f2iz+0x1a>
 80008cc:	4a09      	ldr	r2, [pc, #36]	; (80008f4 <__aeabi_f2iz+0x3c>)
 80008ce:	1898      	adds	r0, r3, r2
 80008d0:	4770      	bx	lr
 80008d2:	2080      	movs	r0, #128	; 0x80
 80008d4:	0400      	lsls	r0, r0, #16
 80008d6:	4301      	orrs	r1, r0
 80008d8:	2a95      	cmp	r2, #149	; 0x95
 80008da:	dc07      	bgt.n	80008ec <__aeabi_f2iz+0x34>
 80008dc:	2096      	movs	r0, #150	; 0x96
 80008de:	1a82      	subs	r2, r0, r2
 80008e0:	40d1      	lsrs	r1, r2
 80008e2:	4248      	negs	r0, r1
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d1f3      	bne.n	80008d0 <__aeabi_f2iz+0x18>
 80008e8:	0008      	movs	r0, r1
 80008ea:	e7f1      	b.n	80008d0 <__aeabi_f2iz+0x18>
 80008ec:	3a96      	subs	r2, #150	; 0x96
 80008ee:	4091      	lsls	r1, r2
 80008f0:	e7f7      	b.n	80008e2 <__aeabi_f2iz+0x2a>
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	7fffffff 	.word	0x7fffffff

080008f8 <__aeabi_i2f>:
 80008f8:	b570      	push	{r4, r5, r6, lr}
 80008fa:	2800      	cmp	r0, #0
 80008fc:	d013      	beq.n	8000926 <__aeabi_i2f+0x2e>
 80008fe:	17c3      	asrs	r3, r0, #31
 8000900:	18c5      	adds	r5, r0, r3
 8000902:	405d      	eors	r5, r3
 8000904:	0fc4      	lsrs	r4, r0, #31
 8000906:	0028      	movs	r0, r5
 8000908:	f000 f878 	bl	80009fc <__clzsi2>
 800090c:	239e      	movs	r3, #158	; 0x9e
 800090e:	0001      	movs	r1, r0
 8000910:	1a1b      	subs	r3, r3, r0
 8000912:	2b96      	cmp	r3, #150	; 0x96
 8000914:	dc0f      	bgt.n	8000936 <__aeabi_i2f+0x3e>
 8000916:	2808      	cmp	r0, #8
 8000918:	dd01      	ble.n	800091e <__aeabi_i2f+0x26>
 800091a:	3908      	subs	r1, #8
 800091c:	408d      	lsls	r5, r1
 800091e:	026d      	lsls	r5, r5, #9
 8000920:	0a6d      	lsrs	r5, r5, #9
 8000922:	b2d8      	uxtb	r0, r3
 8000924:	e002      	b.n	800092c <__aeabi_i2f+0x34>
 8000926:	2400      	movs	r4, #0
 8000928:	2000      	movs	r0, #0
 800092a:	2500      	movs	r5, #0
 800092c:	05c0      	lsls	r0, r0, #23
 800092e:	4328      	orrs	r0, r5
 8000930:	07e4      	lsls	r4, r4, #31
 8000932:	4320      	orrs	r0, r4
 8000934:	bd70      	pop	{r4, r5, r6, pc}
 8000936:	2b99      	cmp	r3, #153	; 0x99
 8000938:	dd0b      	ble.n	8000952 <__aeabi_i2f+0x5a>
 800093a:	2205      	movs	r2, #5
 800093c:	002e      	movs	r6, r5
 800093e:	1a12      	subs	r2, r2, r0
 8000940:	40d6      	lsrs	r6, r2
 8000942:	0002      	movs	r2, r0
 8000944:	321b      	adds	r2, #27
 8000946:	4095      	lsls	r5, r2
 8000948:	0028      	movs	r0, r5
 800094a:	1e45      	subs	r5, r0, #1
 800094c:	41a8      	sbcs	r0, r5
 800094e:	0035      	movs	r5, r6
 8000950:	4305      	orrs	r5, r0
 8000952:	2905      	cmp	r1, #5
 8000954:	dd01      	ble.n	800095a <__aeabi_i2f+0x62>
 8000956:	1f4a      	subs	r2, r1, #5
 8000958:	4095      	lsls	r5, r2
 800095a:	002a      	movs	r2, r5
 800095c:	4e08      	ldr	r6, [pc, #32]	; (8000980 <__aeabi_i2f+0x88>)
 800095e:	4032      	ands	r2, r6
 8000960:	0768      	lsls	r0, r5, #29
 8000962:	d009      	beq.n	8000978 <__aeabi_i2f+0x80>
 8000964:	200f      	movs	r0, #15
 8000966:	4028      	ands	r0, r5
 8000968:	2804      	cmp	r0, #4
 800096a:	d005      	beq.n	8000978 <__aeabi_i2f+0x80>
 800096c:	3204      	adds	r2, #4
 800096e:	0150      	lsls	r0, r2, #5
 8000970:	d502      	bpl.n	8000978 <__aeabi_i2f+0x80>
 8000972:	239f      	movs	r3, #159	; 0x9f
 8000974:	4032      	ands	r2, r6
 8000976:	1a5b      	subs	r3, r3, r1
 8000978:	0192      	lsls	r2, r2, #6
 800097a:	0a55      	lsrs	r5, r2, #9
 800097c:	b2d8      	uxtb	r0, r3
 800097e:	e7d5      	b.n	800092c <__aeabi_i2f+0x34>
 8000980:	fbffffff 	.word	0xfbffffff

08000984 <__aeabi_ui2f>:
 8000984:	b570      	push	{r4, r5, r6, lr}
 8000986:	1e05      	subs	r5, r0, #0
 8000988:	d00e      	beq.n	80009a8 <__aeabi_ui2f+0x24>
 800098a:	f000 f837 	bl	80009fc <__clzsi2>
 800098e:	239e      	movs	r3, #158	; 0x9e
 8000990:	0004      	movs	r4, r0
 8000992:	1a1b      	subs	r3, r3, r0
 8000994:	2b96      	cmp	r3, #150	; 0x96
 8000996:	dc0c      	bgt.n	80009b2 <__aeabi_ui2f+0x2e>
 8000998:	2808      	cmp	r0, #8
 800099a:	dd01      	ble.n	80009a0 <__aeabi_ui2f+0x1c>
 800099c:	3c08      	subs	r4, #8
 800099e:	40a5      	lsls	r5, r4
 80009a0:	026d      	lsls	r5, r5, #9
 80009a2:	0a6d      	lsrs	r5, r5, #9
 80009a4:	b2d8      	uxtb	r0, r3
 80009a6:	e001      	b.n	80009ac <__aeabi_ui2f+0x28>
 80009a8:	2000      	movs	r0, #0
 80009aa:	2500      	movs	r5, #0
 80009ac:	05c0      	lsls	r0, r0, #23
 80009ae:	4328      	orrs	r0, r5
 80009b0:	bd70      	pop	{r4, r5, r6, pc}
 80009b2:	2b99      	cmp	r3, #153	; 0x99
 80009b4:	dd09      	ble.n	80009ca <__aeabi_ui2f+0x46>
 80009b6:	0002      	movs	r2, r0
 80009b8:	0029      	movs	r1, r5
 80009ba:	321b      	adds	r2, #27
 80009bc:	4091      	lsls	r1, r2
 80009be:	1e4a      	subs	r2, r1, #1
 80009c0:	4191      	sbcs	r1, r2
 80009c2:	2205      	movs	r2, #5
 80009c4:	1a12      	subs	r2, r2, r0
 80009c6:	40d5      	lsrs	r5, r2
 80009c8:	430d      	orrs	r5, r1
 80009ca:	2c05      	cmp	r4, #5
 80009cc:	dd01      	ble.n	80009d2 <__aeabi_ui2f+0x4e>
 80009ce:	1f62      	subs	r2, r4, #5
 80009d0:	4095      	lsls	r5, r2
 80009d2:	0029      	movs	r1, r5
 80009d4:	4e08      	ldr	r6, [pc, #32]	; (80009f8 <__aeabi_ui2f+0x74>)
 80009d6:	4031      	ands	r1, r6
 80009d8:	076a      	lsls	r2, r5, #29
 80009da:	d009      	beq.n	80009f0 <__aeabi_ui2f+0x6c>
 80009dc:	200f      	movs	r0, #15
 80009de:	4028      	ands	r0, r5
 80009e0:	2804      	cmp	r0, #4
 80009e2:	d005      	beq.n	80009f0 <__aeabi_ui2f+0x6c>
 80009e4:	3104      	adds	r1, #4
 80009e6:	014a      	lsls	r2, r1, #5
 80009e8:	d502      	bpl.n	80009f0 <__aeabi_ui2f+0x6c>
 80009ea:	239f      	movs	r3, #159	; 0x9f
 80009ec:	4031      	ands	r1, r6
 80009ee:	1b1b      	subs	r3, r3, r4
 80009f0:	0189      	lsls	r1, r1, #6
 80009f2:	0a4d      	lsrs	r5, r1, #9
 80009f4:	b2d8      	uxtb	r0, r3
 80009f6:	e7d9      	b.n	80009ac <__aeabi_ui2f+0x28>
 80009f8:	fbffffff 	.word	0xfbffffff

080009fc <__clzsi2>:
 80009fc:	211c      	movs	r1, #28
 80009fe:	2301      	movs	r3, #1
 8000a00:	041b      	lsls	r3, r3, #16
 8000a02:	4298      	cmp	r0, r3
 8000a04:	d301      	bcc.n	8000a0a <__clzsi2+0xe>
 8000a06:	0c00      	lsrs	r0, r0, #16
 8000a08:	3910      	subs	r1, #16
 8000a0a:	0a1b      	lsrs	r3, r3, #8
 8000a0c:	4298      	cmp	r0, r3
 8000a0e:	d301      	bcc.n	8000a14 <__clzsi2+0x18>
 8000a10:	0a00      	lsrs	r0, r0, #8
 8000a12:	3908      	subs	r1, #8
 8000a14:	091b      	lsrs	r3, r3, #4
 8000a16:	4298      	cmp	r0, r3
 8000a18:	d301      	bcc.n	8000a1e <__clzsi2+0x22>
 8000a1a:	0900      	lsrs	r0, r0, #4
 8000a1c:	3904      	subs	r1, #4
 8000a1e:	a202      	add	r2, pc, #8	; (adr r2, 8000a28 <__clzsi2+0x2c>)
 8000a20:	5c10      	ldrb	r0, [r2, r0]
 8000a22:	1840      	adds	r0, r0, r1
 8000a24:	4770      	bx	lr
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	02020304 	.word	0x02020304
 8000a2c:	01010101 	.word	0x01010101
	...

08000a38 <__clzdi2>:
 8000a38:	b510      	push	{r4, lr}
 8000a3a:	2900      	cmp	r1, #0
 8000a3c:	d103      	bne.n	8000a46 <__clzdi2+0xe>
 8000a3e:	f7ff ffdd 	bl	80009fc <__clzsi2>
 8000a42:	3020      	adds	r0, #32
 8000a44:	e002      	b.n	8000a4c <__clzdi2+0x14>
 8000a46:	1c08      	adds	r0, r1, #0
 8000a48:	f7ff ffd8 	bl	80009fc <__clzsi2>
 8000a4c:	bd10      	pop	{r4, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)

08000a50 <__divdi3>:
 8000a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a52:	4657      	mov	r7, sl
 8000a54:	464e      	mov	r6, r9
 8000a56:	4645      	mov	r5, r8
 8000a58:	46de      	mov	lr, fp
 8000a5a:	b5e0      	push	{r5, r6, r7, lr}
 8000a5c:	000f      	movs	r7, r1
 8000a5e:	0019      	movs	r1, r3
 8000a60:	2300      	movs	r3, #0
 8000a62:	0006      	movs	r6, r0
 8000a64:	4698      	mov	r8, r3
 8000a66:	0010      	movs	r0, r2
 8000a68:	b083      	sub	sp, #12
 8000a6a:	2f00      	cmp	r7, #0
 8000a6c:	da07      	bge.n	8000a7e <__divdi3+0x2e>
 8000a6e:	0033      	movs	r3, r6
 8000a70:	003c      	movs	r4, r7
 8000a72:	2700      	movs	r7, #0
 8000a74:	425e      	negs	r6, r3
 8000a76:	41a7      	sbcs	r7, r4
 8000a78:	2301      	movs	r3, #1
 8000a7a:	425b      	negs	r3, r3
 8000a7c:	4698      	mov	r8, r3
 8000a7e:	2900      	cmp	r1, #0
 8000a80:	da07      	bge.n	8000a92 <__divdi3+0x42>
 8000a82:	4643      	mov	r3, r8
 8000a84:	43db      	mvns	r3, r3
 8000a86:	000c      	movs	r4, r1
 8000a88:	4698      	mov	r8, r3
 8000a8a:	0003      	movs	r3, r0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4258      	negs	r0, r3
 8000a90:	41a1      	sbcs	r1, r4
 8000a92:	0034      	movs	r4, r6
 8000a94:	003d      	movs	r5, r7
 8000a96:	4682      	mov	sl, r0
 8000a98:	4689      	mov	r9, r1
 8000a9a:	42b9      	cmp	r1, r7
 8000a9c:	d86a      	bhi.n	8000b74 <__divdi3+0x124>
 8000a9e:	d067      	beq.n	8000b70 <__divdi3+0x120>
 8000aa0:	4649      	mov	r1, r9
 8000aa2:	4650      	mov	r0, sl
 8000aa4:	f7ff ffc8 	bl	8000a38 <__clzdi2>
 8000aa8:	4683      	mov	fp, r0
 8000aaa:	0039      	movs	r1, r7
 8000aac:	0030      	movs	r0, r6
 8000aae:	f7ff ffc3 	bl	8000a38 <__clzdi2>
 8000ab2:	465b      	mov	r3, fp
 8000ab4:	1a1b      	subs	r3, r3, r0
 8000ab6:	469c      	mov	ip, r3
 8000ab8:	3b20      	subs	r3, #32
 8000aba:	469b      	mov	fp, r3
 8000abc:	d46b      	bmi.n	8000b96 <__divdi3+0x146>
 8000abe:	4658      	mov	r0, fp
 8000ac0:	4651      	mov	r1, sl
 8000ac2:	4081      	lsls	r1, r0
 8000ac4:	4660      	mov	r0, ip
 8000ac6:	000b      	movs	r3, r1
 8000ac8:	4651      	mov	r1, sl
 8000aca:	4081      	lsls	r1, r0
 8000acc:	000a      	movs	r2, r1
 8000ace:	42bb      	cmp	r3, r7
 8000ad0:	d900      	bls.n	8000ad4 <__divdi3+0x84>
 8000ad2:	e072      	b.n	8000bba <__divdi3+0x16a>
 8000ad4:	42bb      	cmp	r3, r7
 8000ad6:	d100      	bne.n	8000ada <__divdi3+0x8a>
 8000ad8:	e079      	b.n	8000bce <__divdi3+0x17e>
 8000ada:	0034      	movs	r4, r6
 8000adc:	003d      	movs	r5, r7
 8000ade:	4659      	mov	r1, fp
 8000ae0:	1aa4      	subs	r4, r4, r2
 8000ae2:	419d      	sbcs	r5, r3
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	da00      	bge.n	8000aea <__divdi3+0x9a>
 8000ae8:	e074      	b.n	8000bd4 <__divdi3+0x184>
 8000aea:	2100      	movs	r1, #0
 8000aec:	2000      	movs	r0, #0
 8000aee:	2601      	movs	r6, #1
 8000af0:	9000      	str	r0, [sp, #0]
 8000af2:	9101      	str	r1, [sp, #4]
 8000af4:	4659      	mov	r1, fp
 8000af6:	408e      	lsls	r6, r1
 8000af8:	9601      	str	r6, [sp, #4]
 8000afa:	4661      	mov	r1, ip
 8000afc:	2601      	movs	r6, #1
 8000afe:	408e      	lsls	r6, r1
 8000b00:	4661      	mov	r1, ip
 8000b02:	9600      	str	r6, [sp, #0]
 8000b04:	2900      	cmp	r1, #0
 8000b06:	d05f      	beq.n	8000bc8 <__divdi3+0x178>
 8000b08:	07d9      	lsls	r1, r3, #31
 8000b0a:	0856      	lsrs	r6, r2, #1
 8000b0c:	430e      	orrs	r6, r1
 8000b0e:	085f      	lsrs	r7, r3, #1
 8000b10:	4661      	mov	r1, ip
 8000b12:	2201      	movs	r2, #1
 8000b14:	2300      	movs	r3, #0
 8000b16:	e00c      	b.n	8000b32 <__divdi3+0xe2>
 8000b18:	42af      	cmp	r7, r5
 8000b1a:	d101      	bne.n	8000b20 <__divdi3+0xd0>
 8000b1c:	42a6      	cmp	r6, r4
 8000b1e:	d80a      	bhi.n	8000b36 <__divdi3+0xe6>
 8000b20:	1ba4      	subs	r4, r4, r6
 8000b22:	41bd      	sbcs	r5, r7
 8000b24:	1924      	adds	r4, r4, r4
 8000b26:	416d      	adcs	r5, r5
 8000b28:	3901      	subs	r1, #1
 8000b2a:	18a4      	adds	r4, r4, r2
 8000b2c:	415d      	adcs	r5, r3
 8000b2e:	2900      	cmp	r1, #0
 8000b30:	d006      	beq.n	8000b40 <__divdi3+0xf0>
 8000b32:	42af      	cmp	r7, r5
 8000b34:	d9f0      	bls.n	8000b18 <__divdi3+0xc8>
 8000b36:	3901      	subs	r1, #1
 8000b38:	1924      	adds	r4, r4, r4
 8000b3a:	416d      	adcs	r5, r5
 8000b3c:	2900      	cmp	r1, #0
 8000b3e:	d1f8      	bne.n	8000b32 <__divdi3+0xe2>
 8000b40:	9800      	ldr	r0, [sp, #0]
 8000b42:	9901      	ldr	r1, [sp, #4]
 8000b44:	465b      	mov	r3, fp
 8000b46:	1900      	adds	r0, r0, r4
 8000b48:	4169      	adcs	r1, r5
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db4d      	blt.n	8000bea <__divdi3+0x19a>
 8000b4e:	002e      	movs	r6, r5
 8000b50:	002c      	movs	r4, r5
 8000b52:	40de      	lsrs	r6, r3
 8000b54:	4663      	mov	r3, ip
 8000b56:	40dc      	lsrs	r4, r3
 8000b58:	465b      	mov	r3, fp
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	db55      	blt.n	8000c0a <__divdi3+0x1ba>
 8000b5e:	0034      	movs	r4, r6
 8000b60:	409c      	lsls	r4, r3
 8000b62:	0023      	movs	r3, r4
 8000b64:	4664      	mov	r4, ip
 8000b66:	40a6      	lsls	r6, r4
 8000b68:	0032      	movs	r2, r6
 8000b6a:	1a80      	subs	r0, r0, r2
 8000b6c:	4199      	sbcs	r1, r3
 8000b6e:	e003      	b.n	8000b78 <__divdi3+0x128>
 8000b70:	42b0      	cmp	r0, r6
 8000b72:	d995      	bls.n	8000aa0 <__divdi3+0x50>
 8000b74:	2000      	movs	r0, #0
 8000b76:	2100      	movs	r1, #0
 8000b78:	4643      	mov	r3, r8
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d004      	beq.n	8000b88 <__divdi3+0x138>
 8000b7e:	0003      	movs	r3, r0
 8000b80:	000c      	movs	r4, r1
 8000b82:	2100      	movs	r1, #0
 8000b84:	4258      	negs	r0, r3
 8000b86:	41a1      	sbcs	r1, r4
 8000b88:	b003      	add	sp, #12
 8000b8a:	bcf0      	pop	{r4, r5, r6, r7}
 8000b8c:	46bb      	mov	fp, r7
 8000b8e:	46b2      	mov	sl, r6
 8000b90:	46a9      	mov	r9, r5
 8000b92:	46a0      	mov	r8, r4
 8000b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b96:	4662      	mov	r2, ip
 8000b98:	4648      	mov	r0, r9
 8000b9a:	2320      	movs	r3, #32
 8000b9c:	4651      	mov	r1, sl
 8000b9e:	4090      	lsls	r0, r2
 8000ba0:	1a9b      	subs	r3, r3, r2
 8000ba2:	40d9      	lsrs	r1, r3
 8000ba4:	0003      	movs	r3, r0
 8000ba6:	9100      	str	r1, [sp, #0]
 8000ba8:	9900      	ldr	r1, [sp, #0]
 8000baa:	4660      	mov	r0, ip
 8000bac:	430b      	orrs	r3, r1
 8000bae:	4651      	mov	r1, sl
 8000bb0:	4081      	lsls	r1, r0
 8000bb2:	000a      	movs	r2, r1
 8000bb4:	42bb      	cmp	r3, r7
 8000bb6:	d800      	bhi.n	8000bba <__divdi3+0x16a>
 8000bb8:	e78c      	b.n	8000ad4 <__divdi3+0x84>
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	9000      	str	r0, [sp, #0]
 8000bc0:	9101      	str	r1, [sp, #4]
 8000bc2:	4661      	mov	r1, ip
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	d19f      	bne.n	8000b08 <__divdi3+0xb8>
 8000bc8:	9800      	ldr	r0, [sp, #0]
 8000bca:	9901      	ldr	r1, [sp, #4]
 8000bcc:	e7d4      	b.n	8000b78 <__divdi3+0x128>
 8000bce:	42b1      	cmp	r1, r6
 8000bd0:	d8f3      	bhi.n	8000bba <__divdi3+0x16a>
 8000bd2:	e782      	b.n	8000ada <__divdi3+0x8a>
 8000bd4:	4661      	mov	r1, ip
 8000bd6:	2620      	movs	r6, #32
 8000bd8:	2701      	movs	r7, #1
 8000bda:	1a76      	subs	r6, r6, r1
 8000bdc:	2000      	movs	r0, #0
 8000bde:	2100      	movs	r1, #0
 8000be0:	40f7      	lsrs	r7, r6
 8000be2:	9000      	str	r0, [sp, #0]
 8000be4:	9101      	str	r1, [sp, #4]
 8000be6:	9701      	str	r7, [sp, #4]
 8000be8:	e787      	b.n	8000afa <__divdi3+0xaa>
 8000bea:	4662      	mov	r2, ip
 8000bec:	2320      	movs	r3, #32
 8000bee:	1a9b      	subs	r3, r3, r2
 8000bf0:	002a      	movs	r2, r5
 8000bf2:	409a      	lsls	r2, r3
 8000bf4:	0026      	movs	r6, r4
 8000bf6:	0013      	movs	r3, r2
 8000bf8:	4662      	mov	r2, ip
 8000bfa:	40d6      	lsrs	r6, r2
 8000bfc:	002c      	movs	r4, r5
 8000bfe:	431e      	orrs	r6, r3
 8000c00:	4663      	mov	r3, ip
 8000c02:	40dc      	lsrs	r4, r3
 8000c04:	465b      	mov	r3, fp
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	daa9      	bge.n	8000b5e <__divdi3+0x10e>
 8000c0a:	4662      	mov	r2, ip
 8000c0c:	2320      	movs	r3, #32
 8000c0e:	0035      	movs	r5, r6
 8000c10:	4094      	lsls	r4, r2
 8000c12:	1a9b      	subs	r3, r3, r2
 8000c14:	40dd      	lsrs	r5, r3
 8000c16:	0023      	movs	r3, r4
 8000c18:	432b      	orrs	r3, r5
 8000c1a:	e7a3      	b.n	8000b64 <__divdi3+0x114>

08000c1c <aesroundkeys>:
u4_t AESAUX[16/sizeof(u4_t)];
u4_t AESKEY[11*16/sizeof(u4_t)];

// generate 1+10 roundkeys for encryption with 128-bit key
// read 128-bit key from AESKEY in MSBF, generate roundkey words in place
static void aesroundkeys () {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
    int i;
    u4_t b;

    for( i=0; i<4; i++) {
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	e024      	b.n	8000c72 <aesroundkeys+0x56>
        AESKEY[i] = swapmsbf(AESKEY[i]);
 8000c28:	4b37      	ldr	r3, [pc, #220]	; (8000d08 <aesroundkeys+0xec>)
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	0092      	lsls	r2, r2, #2
 8000c2e:	58d3      	ldr	r3, [r2, r3]
 8000c30:	061a      	lsls	r2, r3, #24
 8000c32:	4b35      	ldr	r3, [pc, #212]	; (8000d08 <aesroundkeys+0xec>)
 8000c34:	6879      	ldr	r1, [r7, #4]
 8000c36:	0089      	lsls	r1, r1, #2
 8000c38:	58cb      	ldr	r3, [r1, r3]
 8000c3a:	0219      	lsls	r1, r3, #8
 8000c3c:	23ff      	movs	r3, #255	; 0xff
 8000c3e:	041b      	lsls	r3, r3, #16
 8000c40:	400b      	ands	r3, r1
 8000c42:	431a      	orrs	r2, r3
 8000c44:	4b30      	ldr	r3, [pc, #192]	; (8000d08 <aesroundkeys+0xec>)
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	0089      	lsls	r1, r1, #2
 8000c4a:	58cb      	ldr	r3, [r1, r3]
 8000c4c:	0a19      	lsrs	r1, r3, #8
 8000c4e:	23ff      	movs	r3, #255	; 0xff
 8000c50:	021b      	lsls	r3, r3, #8
 8000c52:	400b      	ands	r3, r1
 8000c54:	431a      	orrs	r2, r3
 8000c56:	4b2c      	ldr	r3, [pc, #176]	; (8000d08 <aesroundkeys+0xec>)
 8000c58:	6879      	ldr	r1, [r7, #4]
 8000c5a:	0089      	lsls	r1, r1, #2
 8000c5c:	58cb      	ldr	r3, [r1, r3]
 8000c5e:	0e1b      	lsrs	r3, r3, #24
 8000c60:	431a      	orrs	r2, r3
 8000c62:	0011      	movs	r1, r2
 8000c64:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <aesroundkeys+0xec>)
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	0092      	lsls	r2, r2, #2
 8000c6a:	50d1      	str	r1, [r2, r3]
    for( i=0; i<4; i++) {
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b03      	cmp	r3, #3
 8000c76:	ddd7      	ble.n	8000c28 <aesroundkeys+0xc>
    }
    
    b = AESKEY[3];
 8000c78:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <aesroundkeys+0xec>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	603b      	str	r3, [r7, #0]
    for( ; i<44; i++ ) {
 8000c7e:	e03b      	b.n	8000cf8 <aesroundkeys+0xdc>
        if( i%4==0 ) {
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2203      	movs	r2, #3
 8000c84:	4013      	ands	r3, r2
 8000c86:	d127      	bne.n	8000cd8 <aesroundkeys+0xbc>
            // b = SubWord(RotWord(b)) xor Rcon[i/4]
            b = (AES_S[u1(b >> 16)] << 24) ^
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	0c1b      	lsrs	r3, r3, #16
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	001a      	movs	r2, r3
 8000c90:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <aesroundkeys+0xf0>)
 8000c92:	5c9b      	ldrb	r3, [r3, r2]
 8000c94:	061a      	lsls	r2, r3, #24
                (AES_S[u1(b >>  8)] << 16) ^
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	0a1b      	lsrs	r3, r3, #8
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	0019      	movs	r1, r3
 8000c9e:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <aesroundkeys+0xf0>)
 8000ca0:	5c5b      	ldrb	r3, [r3, r1]
 8000ca2:	041b      	lsls	r3, r3, #16
            b = (AES_S[u1(b >> 16)] << 24) ^
 8000ca4:	405a      	eors	r2, r3
                (AES_S[u1(b)      ] <<  8) ^
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	0019      	movs	r1, r3
 8000cac:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <aesroundkeys+0xf0>)
 8000cae:	5c5b      	ldrb	r3, [r3, r1]
 8000cb0:	021b      	lsls	r3, r3, #8
                (AES_S[u1(b >>  8)] << 16) ^
 8000cb2:	4053      	eors	r3, r2
                (AES_S[   b >> 24 ]      ) ^
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	0e12      	lsrs	r2, r2, #24
 8000cb8:	4914      	ldr	r1, [pc, #80]	; (8000d0c <aesroundkeys+0xf0>)
 8000cba:	5c8a      	ldrb	r2, [r1, r2]
                (AES_S[u1(b)      ] <<  8) ^
 8000cbc:	4053      	eors	r3, r2
 8000cbe:	0019      	movs	r1, r3
                 AES_RCON[(i-4)/4];
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b04      	subs	r3, #4
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	da00      	bge.n	8000cca <aesroundkeys+0xae>
 8000cc8:	3303      	adds	r3, #3
 8000cca:	109b      	asrs	r3, r3, #2
 8000ccc:	001a      	movs	r2, r3
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <aesroundkeys+0xf4>)
 8000cd0:	0092      	lsls	r2, r2, #2
 8000cd2:	58d3      	ldr	r3, [r2, r3]
            b = (AES_S[u1(b >> 16)] << 24) ^
 8000cd4:	404b      	eors	r3, r1
 8000cd6:	603b      	str	r3, [r7, #0]
        }
        AESKEY[i] = b ^= AESKEY[i-4];
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	1f1a      	subs	r2, r3, #4
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <aesroundkeys+0xec>)
 8000cde:	0092      	lsls	r2, r2, #2
 8000ce0:	58d3      	ldr	r3, [r2, r3]
 8000ce2:	683a      	ldr	r2, [r7, #0]
 8000ce4:	4053      	eors	r3, r2
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <aesroundkeys+0xec>)
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	0092      	lsls	r2, r2, #2
 8000cee:	6839      	ldr	r1, [r7, #0]
 8000cf0:	50d1      	str	r1, [r2, r3]
    for( ; i<44; i++ ) {
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b2b      	cmp	r3, #43	; 0x2b
 8000cfc:	ddc0      	ble.n	8000c80 <aesroundkeys+0x64>
    }
}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	46c0      	nop			; (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b002      	add	sp, #8
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	200000a4 	.word	0x200000a4
 8000d0c:	0800ce1c 	.word	0x0800ce1c
 8000d10:	0800cdf4 	.word	0x0800cdf4

08000d14 <os_aes>:

u4_t os_aes (u1_t mode, xref2u1_t buf, u2_t len) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08c      	sub	sp, #48	; 0x30
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6039      	str	r1, [r7, #0]
 8000d1c:	0011      	movs	r1, r2
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	1c02      	adds	r2, r0, #0
 8000d22:	701a      	strb	r2, [r3, #0]
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	1c0a      	adds	r2, r1, #0
 8000d28:	801a      	strh	r2, [r3, #0]
        
        aesroundkeys();
 8000d2a:	f7ff ff77 	bl	8000c1c <aesroundkeys>

        if( mode & AES_MICNOAUX ) {
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2208      	movs	r2, #8
 8000d34:	4013      	ands	r3, r2
 8000d36:	d010      	beq.n	8000d5a <os_aes+0x46>
            AESAUX[0] = AESAUX[1] = AESAUX[2] = AESAUX[3] = 0;
 8000d38:	4b60      	ldr	r3, [pc, #384]	; (8000ebc <os_aes+0x1a8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	4b5f      	ldr	r3, [pc, #380]	; (8000ebc <os_aes+0x1a8>)
 8000d40:	68da      	ldr	r2, [r3, #12]
 8000d42:	4b5e      	ldr	r3, [pc, #376]	; (8000ebc <os_aes+0x1a8>)
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	4b5d      	ldr	r3, [pc, #372]	; (8000ebc <os_aes+0x1a8>)
 8000d48:	689a      	ldr	r2, [r3, #8]
 8000d4a:	4b5c      	ldr	r3, [pc, #368]	; (8000ebc <os_aes+0x1a8>)
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	4b5b      	ldr	r3, [pc, #364]	; (8000ebc <os_aes+0x1a8>)
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	4b5a      	ldr	r3, [pc, #360]	; (8000ebc <os_aes+0x1a8>)
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	f000 fcb6 	bl	80016c6 <os_aes+0x9b2>
        } else {
            AESAUX[0] = swapmsbf(AESAUX[0]);
 8000d5a:	4b58      	ldr	r3, [pc, #352]	; (8000ebc <os_aes+0x1a8>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	061a      	lsls	r2, r3, #24
 8000d60:	4b56      	ldr	r3, [pc, #344]	; (8000ebc <os_aes+0x1a8>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	0219      	lsls	r1, r3, #8
 8000d66:	23ff      	movs	r3, #255	; 0xff
 8000d68:	041b      	lsls	r3, r3, #16
 8000d6a:	400b      	ands	r3, r1
 8000d6c:	431a      	orrs	r2, r3
 8000d6e:	4b53      	ldr	r3, [pc, #332]	; (8000ebc <os_aes+0x1a8>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	0a19      	lsrs	r1, r3, #8
 8000d74:	23ff      	movs	r3, #255	; 0xff
 8000d76:	021b      	lsls	r3, r3, #8
 8000d78:	400b      	ands	r3, r1
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	4b4f      	ldr	r3, [pc, #316]	; (8000ebc <os_aes+0x1a8>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	0e1b      	lsrs	r3, r3, #24
 8000d82:	431a      	orrs	r2, r3
 8000d84:	4b4d      	ldr	r3, [pc, #308]	; (8000ebc <os_aes+0x1a8>)
 8000d86:	601a      	str	r2, [r3, #0]
            AESAUX[1] = swapmsbf(AESAUX[1]);
 8000d88:	4b4c      	ldr	r3, [pc, #304]	; (8000ebc <os_aes+0x1a8>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	061a      	lsls	r2, r3, #24
 8000d8e:	4b4b      	ldr	r3, [pc, #300]	; (8000ebc <os_aes+0x1a8>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	0219      	lsls	r1, r3, #8
 8000d94:	23ff      	movs	r3, #255	; 0xff
 8000d96:	041b      	lsls	r3, r3, #16
 8000d98:	400b      	ands	r3, r1
 8000d9a:	431a      	orrs	r2, r3
 8000d9c:	4b47      	ldr	r3, [pc, #284]	; (8000ebc <os_aes+0x1a8>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	0a19      	lsrs	r1, r3, #8
 8000da2:	23ff      	movs	r3, #255	; 0xff
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	400b      	ands	r3, r1
 8000da8:	431a      	orrs	r2, r3
 8000daa:	4b44      	ldr	r3, [pc, #272]	; (8000ebc <os_aes+0x1a8>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	0e1b      	lsrs	r3, r3, #24
 8000db0:	431a      	orrs	r2, r3
 8000db2:	4b42      	ldr	r3, [pc, #264]	; (8000ebc <os_aes+0x1a8>)
 8000db4:	605a      	str	r2, [r3, #4]
            AESAUX[2] = swapmsbf(AESAUX[2]);
 8000db6:	4b41      	ldr	r3, [pc, #260]	; (8000ebc <os_aes+0x1a8>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	061a      	lsls	r2, r3, #24
 8000dbc:	4b3f      	ldr	r3, [pc, #252]	; (8000ebc <os_aes+0x1a8>)
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	0219      	lsls	r1, r3, #8
 8000dc2:	23ff      	movs	r3, #255	; 0xff
 8000dc4:	041b      	lsls	r3, r3, #16
 8000dc6:	400b      	ands	r3, r1
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	4b3c      	ldr	r3, [pc, #240]	; (8000ebc <os_aes+0x1a8>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	0a19      	lsrs	r1, r3, #8
 8000dd0:	23ff      	movs	r3, #255	; 0xff
 8000dd2:	021b      	lsls	r3, r3, #8
 8000dd4:	400b      	ands	r3, r1
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	4b38      	ldr	r3, [pc, #224]	; (8000ebc <os_aes+0x1a8>)
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	0e1b      	lsrs	r3, r3, #24
 8000dde:	431a      	orrs	r2, r3
 8000de0:	4b36      	ldr	r3, [pc, #216]	; (8000ebc <os_aes+0x1a8>)
 8000de2:	609a      	str	r2, [r3, #8]
            AESAUX[3] = swapmsbf(AESAUX[3]);
 8000de4:	4b35      	ldr	r3, [pc, #212]	; (8000ebc <os_aes+0x1a8>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	061a      	lsls	r2, r3, #24
 8000dea:	4b34      	ldr	r3, [pc, #208]	; (8000ebc <os_aes+0x1a8>)
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	0219      	lsls	r1, r3, #8
 8000df0:	23ff      	movs	r3, #255	; 0xff
 8000df2:	041b      	lsls	r3, r3, #16
 8000df4:	400b      	ands	r3, r1
 8000df6:	431a      	orrs	r2, r3
 8000df8:	4b30      	ldr	r3, [pc, #192]	; (8000ebc <os_aes+0x1a8>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	0a19      	lsrs	r1, r3, #8
 8000dfe:	23ff      	movs	r3, #255	; 0xff
 8000e00:	021b      	lsls	r3, r3, #8
 8000e02:	400b      	ands	r3, r1
 8000e04:	431a      	orrs	r2, r3
 8000e06:	4b2d      	ldr	r3, [pc, #180]	; (8000ebc <os_aes+0x1a8>)
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	0e1b      	lsrs	r3, r3, #24
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <os_aes+0x1a8>)
 8000e10:	60da      	str	r2, [r3, #12]
        }

        while( (signed char)len > 0 ) {
 8000e12:	f000 fc58 	bl	80016c6 <os_aes+0x9b2>
            u4_t a0, a1, a2, a3;
            u4_t t0, t1, t2, t3;
            u4_t *ki, *ke;

            // load input block
            if( (mode & AES_CTR) || ((mode & AES_MIC) && (mode & AES_MICNOAUX)==0) ) { // load CTR block or first MIC block
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2204      	movs	r2, #4
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	d109      	bne.n	8000e34 <os_aes+0x120>
 8000e20:	1dfb      	adds	r3, r7, #7
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2202      	movs	r2, #2
 8000e26:	4013      	ands	r3, r2
 8000e28:	d011      	beq.n	8000e4e <os_aes+0x13a>
 8000e2a:	1dfb      	adds	r3, r7, #7
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2208      	movs	r2, #8
 8000e30:	4013      	ands	r3, r2
 8000e32:	d10c      	bne.n	8000e4e <os_aes+0x13a>
                a0 = AESAUX[0];
 8000e34:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <os_aes+0x1a8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
                a1 = AESAUX[1];
 8000e3a:	4b20      	ldr	r3, [pc, #128]	; (8000ebc <os_aes+0x1a8>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
                a2 = AESAUX[2];
 8000e40:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <os_aes+0x1a8>)
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
                a3 = AESAUX[3];
 8000e46:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <os_aes+0x1a8>)
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	623b      	str	r3, [r7, #32]
 8000e4c:	e067      	b.n	8000f1e <os_aes+0x20a>
            }
            else if( (mode & AES_MIC) && len <= 16 ) { // last MIC block
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2202      	movs	r2, #2
 8000e54:	4013      	ands	r3, r2
 8000e56:	d01a      	beq.n	8000e8e <os_aes+0x17a>
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	2b10      	cmp	r3, #16
 8000e5e:	d816      	bhi.n	8000e8e <os_aes+0x17a>
                a0 = a1 = a2 = a3 = 0; // load null block
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
 8000e64:	6a3b      	ldr	r3, [r7, #32]
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
 8000e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
                mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	2b10      	cmp	r3, #16
 8000e76:	d101      	bne.n	8000e7c <os_aes+0x168>
 8000e78:	2310      	movs	r3, #16
 8000e7a:	e000      	b.n	8000e7e <os_aes+0x16a>
 8000e7c:	2320      	movs	r3, #32
 8000e7e:	1dfa      	adds	r2, r7, #7
 8000e80:	7812      	ldrb	r2, [r2, #0]
 8000e82:	b252      	sxtb	r2, r2
 8000e84:	4313      	orrs	r3, r2
 8000e86:	b25a      	sxtb	r2, r3
 8000e88:	1dfb      	adds	r3, r7, #7
 8000e8a:	701a      	strb	r2, [r3, #0]
 8000e8c:	e047      	b.n	8000f1e <os_aes+0x20a>
            } else
        LOADDATA: { // load data block (partially)
 8000e8e:	46c0      	nop			; (mov r8, r8)
                for(t0=0; t0<16; t0++) {
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]
 8000e94:	e027      	b.n	8000ee6 <os_aes+0x1d2>
                    t1 = (t1<<8) | ((t0<len) ? buf[t0] : (t0==len) ? 0x80 : 0x00);
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	021a      	lsls	r2, r3, #8
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	69f9      	ldr	r1, [r7, #28]
 8000ea0:	4299      	cmp	r1, r3
 8000ea2:	d204      	bcs.n	8000eae <os_aes+0x19a>
 8000ea4:	6839      	ldr	r1, [r7, #0]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	18cb      	adds	r3, r1, r3
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	e009      	b.n	8000ec2 <os_aes+0x1ae>
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	69f9      	ldr	r1, [r7, #28]
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	d103      	bne.n	8000ec0 <os_aes+0x1ac>
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	e002      	b.n	8000ec2 <os_aes+0x1ae>
 8000ebc:	20000154 	.word	0x20000154
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
                    if((t0&3)==3) {
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	2203      	movs	r2, #3
 8000eca:	4013      	ands	r3, r2
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	d107      	bne.n	8000ee0 <os_aes+0x1cc>
                        a0 = a1;
 8000ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
                        a1 = a2;
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
                        a2 = a3;
 8000ed8:	6a3b      	ldr	r3, [r7, #32]
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
                        a3 = t1;
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	623b      	str	r3, [r7, #32]
                for(t0=0; t0<16; t0++) {
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	61fb      	str	r3, [r7, #28]
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	2b0f      	cmp	r3, #15
 8000eea:	d9d4      	bls.n	8000e96 <os_aes+0x182>
                    }
                } 
                if( mode & AES_MIC ) {
 8000eec:	1dfb      	adds	r3, r7, #7
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d013      	beq.n	8000f1e <os_aes+0x20a>
                    a0 ^= AESAUX[0];
 8000ef6:	4bfe      	ldr	r3, [pc, #1016]	; (80012f0 <os_aes+0x5dc>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000efc:	4053      	eors	r3, r2
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
                    a1 ^= AESAUX[1];
 8000f00:	4bfb      	ldr	r3, [pc, #1004]	; (80012f0 <os_aes+0x5dc>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f06:	4053      	eors	r3, r2
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
                    a2 ^= AESAUX[2];
 8000f0a:	4bf9      	ldr	r3, [pc, #996]	; (80012f0 <os_aes+0x5dc>)
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f10:	4053      	eors	r3, r2
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
                    a3 ^= AESAUX[3];
 8000f14:	4bf6      	ldr	r3, [pc, #984]	; (80012f0 <os_aes+0x5dc>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	6a3a      	ldr	r2, [r7, #32]
 8000f1a:	4053      	eors	r3, r2
 8000f1c:	623b      	str	r3, [r7, #32]
                }
            }

            // perform AES encryption on block in a0-a3
            ki = AESKEY;
 8000f1e:	4bf5      	ldr	r3, [pc, #980]	; (80012f4 <os_aes+0x5e0>)
 8000f20:	617b      	str	r3, [r7, #20]
            ke = ki + 8*4;
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	3380      	adds	r3, #128	; 0x80
 8000f26:	613b      	str	r3, [r7, #16]
            a0 ^= ki[0];
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f2e:	4053      	eors	r3, r2
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
            a1 ^= ki[1];
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3304      	adds	r3, #4
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f3a:	4053      	eors	r3, r2
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
            a2 ^= ki[2];
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3308      	adds	r3, #8
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f46:	4053      	eors	r3, r2
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
            a3 ^= ki[3];
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	330c      	adds	r3, #12
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6a3a      	ldr	r2, [r7, #32]
 8000f52:	4053      	eors	r3, r2
 8000f54:	623b      	str	r3, [r7, #32]
            do {
                AES_key4 (t1,t2,t3,t0,4);
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	61bb      	str	r3, [r7, #24]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	61fb      	str	r3, [r7, #28]
                AES_expr4(t1,t2,t3,t0,a0);
 8000f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	001a      	movs	r2, r3
 8000f74:	4be0      	ldr	r3, [pc, #896]	; (80012f8 <os_aes+0x5e4>)
 8000f76:	0092      	lsls	r2, r2, #2
 8000f78:	58d3      	ldr	r3, [r2, r3]
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4053      	eors	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
 8000f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f82:	0a1b      	lsrs	r3, r3, #8
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	001a      	movs	r2, r3
 8000f88:	4bdc      	ldr	r3, [pc, #880]	; (80012fc <os_aes+0x5e8>)
 8000f8a:	0092      	lsls	r2, r2, #2
 8000f8c:	58d3      	ldr	r3, [r2, r3]
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	4053      	eors	r3, r2
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f96:	0c1b      	lsrs	r3, r3, #16
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	001a      	movs	r2, r3
 8000f9c:	4bd8      	ldr	r3, [pc, #864]	; (8001300 <os_aes+0x5ec>)
 8000f9e:	0092      	lsls	r2, r2, #2
 8000fa0:	58d3      	ldr	r3, [r2, r3]
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	4053      	eors	r3, r2
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000faa:	0e1a      	lsrs	r2, r3, #24
 8000fac:	4bd5      	ldr	r3, [pc, #852]	; (8001304 <os_aes+0x5f0>)
 8000fae:	0092      	lsls	r2, r2, #2
 8000fb0:	58d3      	ldr	r3, [r2, r3]
 8000fb2:	69fa      	ldr	r2, [r7, #28]
 8000fb4:	4053      	eors	r3, r2
 8000fb6:	61fb      	str	r3, [r7, #28]
                AES_expr4(t2,t3,t0,t1,a1);
 8000fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	001a      	movs	r2, r3
 8000fbe:	4bce      	ldr	r3, [pc, #824]	; (80012f8 <os_aes+0x5e4>)
 8000fc0:	0092      	lsls	r2, r2, #2
 8000fc2:	58d3      	ldr	r3, [r2, r3]
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	4053      	eors	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	001a      	movs	r2, r3
 8000fd2:	4bca      	ldr	r3, [pc, #808]	; (80012fc <os_aes+0x5e8>)
 8000fd4:	0092      	lsls	r2, r2, #2
 8000fd6:	58d3      	ldr	r3, [r2, r3]
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	4053      	eors	r3, r2
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe0:	0c1b      	lsrs	r3, r3, #16
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	001a      	movs	r2, r3
 8000fe6:	4bc6      	ldr	r3, [pc, #792]	; (8001300 <os_aes+0x5ec>)
 8000fe8:	0092      	lsls	r2, r2, #2
 8000fea:	58d3      	ldr	r3, [r2, r3]
 8000fec:	69fa      	ldr	r2, [r7, #28]
 8000fee:	4053      	eors	r3, r2
 8000ff0:	61fb      	str	r3, [r7, #28]
 8000ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff4:	0e1a      	lsrs	r2, r3, #24
 8000ff6:	4bc3      	ldr	r3, [pc, #780]	; (8001304 <os_aes+0x5f0>)
 8000ff8:	0092      	lsls	r2, r2, #2
 8000ffa:	58d3      	ldr	r3, [r2, r3]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4053      	eors	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
                AES_expr4(t3,t0,t1,t2,a2);
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	b2db      	uxtb	r3, r3
 8001006:	001a      	movs	r2, r3
 8001008:	4bbb      	ldr	r3, [pc, #748]	; (80012f8 <os_aes+0x5e4>)
 800100a:	0092      	lsls	r2, r2, #2
 800100c:	58d3      	ldr	r3, [r2, r3]
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	4053      	eors	r3, r2
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	0a1b      	lsrs	r3, r3, #8
 8001018:	b2db      	uxtb	r3, r3
 800101a:	001a      	movs	r2, r3
 800101c:	4bb7      	ldr	r3, [pc, #732]	; (80012fc <os_aes+0x5e8>)
 800101e:	0092      	lsls	r2, r2, #2
 8001020:	58d3      	ldr	r3, [r2, r3]
 8001022:	69fa      	ldr	r2, [r7, #28]
 8001024:	4053      	eors	r3, r2
 8001026:	61fb      	str	r3, [r7, #28]
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	0c1b      	lsrs	r3, r3, #16
 800102c:	b2db      	uxtb	r3, r3
 800102e:	001a      	movs	r2, r3
 8001030:	4bb3      	ldr	r3, [pc, #716]	; (8001300 <os_aes+0x5ec>)
 8001032:	0092      	lsls	r2, r2, #2
 8001034:	58d3      	ldr	r3, [r2, r3]
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4053      	eors	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	0e1a      	lsrs	r2, r3, #24
 8001040:	4bb0      	ldr	r3, [pc, #704]	; (8001304 <os_aes+0x5f0>)
 8001042:	0092      	lsls	r2, r2, #2
 8001044:	58d3      	ldr	r3, [r2, r3]
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	4053      	eors	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]
                AES_expr4(t0,t1,t2,t3,a3);
 800104c:	6a3b      	ldr	r3, [r7, #32]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	001a      	movs	r2, r3
 8001052:	4ba9      	ldr	r3, [pc, #676]	; (80012f8 <os_aes+0x5e4>)
 8001054:	0092      	lsls	r2, r2, #2
 8001056:	58d3      	ldr	r3, [r2, r3]
 8001058:	69fa      	ldr	r2, [r7, #28]
 800105a:	4053      	eors	r3, r2
 800105c:	61fb      	str	r3, [r7, #28]
 800105e:	6a3b      	ldr	r3, [r7, #32]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	b2db      	uxtb	r3, r3
 8001064:	001a      	movs	r2, r3
 8001066:	4ba5      	ldr	r3, [pc, #660]	; (80012fc <os_aes+0x5e8>)
 8001068:	0092      	lsls	r2, r2, #2
 800106a:	58d3      	ldr	r3, [r2, r3]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4053      	eors	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
 8001072:	6a3b      	ldr	r3, [r7, #32]
 8001074:	0c1b      	lsrs	r3, r3, #16
 8001076:	b2db      	uxtb	r3, r3
 8001078:	001a      	movs	r2, r3
 800107a:	4ba1      	ldr	r3, [pc, #644]	; (8001300 <os_aes+0x5ec>)
 800107c:	0092      	lsls	r2, r2, #2
 800107e:	58d3      	ldr	r3, [r2, r3]
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	4053      	eors	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	6a3b      	ldr	r3, [r7, #32]
 8001088:	0e1a      	lsrs	r2, r3, #24
 800108a:	4b9e      	ldr	r3, [pc, #632]	; (8001304 <os_aes+0x5f0>)
 800108c:	0092      	lsls	r2, r2, #2
 800108e:	58d3      	ldr	r3, [r2, r3]
 8001090:	68ba      	ldr	r2, [r7, #8]
 8001092:	4053      	eors	r3, r2
 8001094:	60bb      	str	r3, [r7, #8]

                AES_key4 (a1,a2,a3,a0,8);
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a6:	623b      	str	r3, [r7, #32]
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
                AES_expr4(a1,a2,a3,a0,t0);
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	001a      	movs	r2, r3
 80010b4:	4b90      	ldr	r3, [pc, #576]	; (80012f8 <os_aes+0x5e4>)
 80010b6:	0092      	lsls	r2, r2, #2
 80010b8:	58d3      	ldr	r3, [r2, r3]
 80010ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010bc:	4053      	eors	r3, r2
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	0a1b      	lsrs	r3, r3, #8
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	001a      	movs	r2, r3
 80010c8:	4b8c      	ldr	r3, [pc, #560]	; (80012fc <os_aes+0x5e8>)
 80010ca:	0092      	lsls	r2, r2, #2
 80010cc:	58d3      	ldr	r3, [r2, r3]
 80010ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010d0:	4053      	eors	r3, r2
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	0c1b      	lsrs	r3, r3, #16
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	001a      	movs	r2, r3
 80010dc:	4b88      	ldr	r3, [pc, #544]	; (8001300 <os_aes+0x5ec>)
 80010de:	0092      	lsls	r2, r2, #2
 80010e0:	58d3      	ldr	r3, [r2, r3]
 80010e2:	6a3a      	ldr	r2, [r7, #32]
 80010e4:	4053      	eors	r3, r2
 80010e6:	623b      	str	r3, [r7, #32]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	0e1a      	lsrs	r2, r3, #24
 80010ec:	4b85      	ldr	r3, [pc, #532]	; (8001304 <os_aes+0x5f0>)
 80010ee:	0092      	lsls	r2, r2, #2
 80010f0:	58d3      	ldr	r3, [r2, r3]
 80010f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010f4:	4053      	eors	r3, r2
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                AES_expr4(a2,a3,a0,a1,t1);
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	001a      	movs	r2, r3
 80010fe:	4b7e      	ldr	r3, [pc, #504]	; (80012f8 <os_aes+0x5e4>)
 8001100:	0092      	lsls	r2, r2, #2
 8001102:	58d3      	ldr	r3, [r2, r3]
 8001104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001106:	4053      	eors	r3, r2
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	b2db      	uxtb	r3, r3
 8001110:	001a      	movs	r2, r3
 8001112:	4b7a      	ldr	r3, [pc, #488]	; (80012fc <os_aes+0x5e8>)
 8001114:	0092      	lsls	r2, r2, #2
 8001116:	58d3      	ldr	r3, [r2, r3]
 8001118:	6a3a      	ldr	r2, [r7, #32]
 800111a:	4053      	eors	r3, r2
 800111c:	623b      	str	r3, [r7, #32]
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	0c1b      	lsrs	r3, r3, #16
 8001122:	b2db      	uxtb	r3, r3
 8001124:	001a      	movs	r2, r3
 8001126:	4b76      	ldr	r3, [pc, #472]	; (8001300 <os_aes+0x5ec>)
 8001128:	0092      	lsls	r2, r2, #2
 800112a:	58d3      	ldr	r3, [r2, r3]
 800112c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800112e:	4053      	eors	r3, r2
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	0e1a      	lsrs	r2, r3, #24
 8001136:	4b73      	ldr	r3, [pc, #460]	; (8001304 <os_aes+0x5f0>)
 8001138:	0092      	lsls	r2, r2, #2
 800113a:	58d3      	ldr	r3, [r2, r3]
 800113c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800113e:	4053      	eors	r3, r2
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
                AES_expr4(a3,a0,a1,a2,t2);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	001a      	movs	r2, r3
 8001148:	4b6b      	ldr	r3, [pc, #428]	; (80012f8 <os_aes+0x5e4>)
 800114a:	0092      	lsls	r2, r2, #2
 800114c:	58d3      	ldr	r3, [r2, r3]
 800114e:	6a3a      	ldr	r2, [r7, #32]
 8001150:	4053      	eors	r3, r2
 8001152:	623b      	str	r3, [r7, #32]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	0a1b      	lsrs	r3, r3, #8
 8001158:	b2db      	uxtb	r3, r3
 800115a:	001a      	movs	r2, r3
 800115c:	4b67      	ldr	r3, [pc, #412]	; (80012fc <os_aes+0x5e8>)
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	58d3      	ldr	r3, [r2, r3]
 8001162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001164:	4053      	eors	r3, r2
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	0c1b      	lsrs	r3, r3, #16
 800116c:	b2db      	uxtb	r3, r3
 800116e:	001a      	movs	r2, r3
 8001170:	4b63      	ldr	r3, [pc, #396]	; (8001300 <os_aes+0x5ec>)
 8001172:	0092      	lsls	r2, r2, #2
 8001174:	58d3      	ldr	r3, [r2, r3]
 8001176:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001178:	4053      	eors	r3, r2
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	0e1a      	lsrs	r2, r3, #24
 8001180:	4b60      	ldr	r3, [pc, #384]	; (8001304 <os_aes+0x5f0>)
 8001182:	0092      	lsls	r2, r2, #2
 8001184:	58d3      	ldr	r3, [r2, r3]
 8001186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001188:	4053      	eors	r3, r2
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
                AES_expr4(a0,a1,a2,a3,t3);
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	001a      	movs	r2, r3
 8001192:	4b59      	ldr	r3, [pc, #356]	; (80012f8 <os_aes+0x5e4>)
 8001194:	0092      	lsls	r2, r2, #2
 8001196:	58d3      	ldr	r3, [r2, r3]
 8001198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800119a:	4053      	eors	r3, r2
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	0a1b      	lsrs	r3, r3, #8
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	001a      	movs	r2, r3
 80011a6:	4b55      	ldr	r3, [pc, #340]	; (80012fc <os_aes+0x5e8>)
 80011a8:	0092      	lsls	r2, r2, #2
 80011aa:	58d3      	ldr	r3, [r2, r3]
 80011ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011ae:	4053      	eors	r3, r2
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	0c1b      	lsrs	r3, r3, #16
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	001a      	movs	r2, r3
 80011ba:	4b51      	ldr	r3, [pc, #324]	; (8001300 <os_aes+0x5ec>)
 80011bc:	0092      	lsls	r2, r2, #2
 80011be:	58d3      	ldr	r3, [r2, r3]
 80011c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011c2:	4053      	eors	r3, r2
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	0e1a      	lsrs	r2, r3, #24
 80011ca:	4b4e      	ldr	r3, [pc, #312]	; (8001304 <os_aes+0x5f0>)
 80011cc:	0092      	lsls	r2, r2, #2
 80011ce:	58d3      	ldr	r3, [r2, r3]
 80011d0:	6a3a      	ldr	r2, [r7, #32]
 80011d2:	4053      	eors	r3, r2
 80011d4:	623b      	str	r3, [r7, #32]
            } while( (ki+=8) < ke );
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	3320      	adds	r3, #32
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	697a      	ldr	r2, [r7, #20]
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d200      	bcs.n	80011e6 <os_aes+0x4d2>
 80011e4:	e6b7      	b.n	8000f56 <os_aes+0x242>

            AES_key4 (t1,t2,t3,t0,4);
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	61bb      	str	r3, [r7, #24]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	61fb      	str	r3, [r7, #28]
            AES_expr4(t1,t2,t3,t0,a0);
 80011fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001200:	b2db      	uxtb	r3, r3
 8001202:	001a      	movs	r2, r3
 8001204:	4b3c      	ldr	r3, [pc, #240]	; (80012f8 <os_aes+0x5e4>)
 8001206:	0092      	lsls	r2, r2, #2
 8001208:	58d3      	ldr	r3, [r2, r3]
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4053      	eors	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
 8001210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001212:	0a1b      	lsrs	r3, r3, #8
 8001214:	b2db      	uxtb	r3, r3
 8001216:	001a      	movs	r2, r3
 8001218:	4b38      	ldr	r3, [pc, #224]	; (80012fc <os_aes+0x5e8>)
 800121a:	0092      	lsls	r2, r2, #2
 800121c:	58d3      	ldr	r3, [r2, r3]
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	4053      	eors	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001226:	0c1b      	lsrs	r3, r3, #16
 8001228:	b2db      	uxtb	r3, r3
 800122a:	001a      	movs	r2, r3
 800122c:	4b34      	ldr	r3, [pc, #208]	; (8001300 <os_aes+0x5ec>)
 800122e:	0092      	lsls	r2, r2, #2
 8001230:	58d3      	ldr	r3, [r2, r3]
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	4053      	eors	r3, r2
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123a:	0e1a      	lsrs	r2, r3, #24
 800123c:	4b31      	ldr	r3, [pc, #196]	; (8001304 <os_aes+0x5f0>)
 800123e:	0092      	lsls	r2, r2, #2
 8001240:	58d3      	ldr	r3, [r2, r3]
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	4053      	eors	r3, r2
 8001246:	61fb      	str	r3, [r7, #28]
            AES_expr4(t2,t3,t0,t1,a1);
 8001248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124a:	b2db      	uxtb	r3, r3
 800124c:	001a      	movs	r2, r3
 800124e:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <os_aes+0x5e4>)
 8001250:	0092      	lsls	r2, r2, #2
 8001252:	58d3      	ldr	r3, [r2, r3]
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	4053      	eors	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800125c:	0a1b      	lsrs	r3, r3, #8
 800125e:	b2db      	uxtb	r3, r3
 8001260:	001a      	movs	r2, r3
 8001262:	4b26      	ldr	r3, [pc, #152]	; (80012fc <os_aes+0x5e8>)
 8001264:	0092      	lsls	r2, r2, #2
 8001266:	58d3      	ldr	r3, [r2, r3]
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	4053      	eors	r3, r2
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001270:	0c1b      	lsrs	r3, r3, #16
 8001272:	b2db      	uxtb	r3, r3
 8001274:	001a      	movs	r2, r3
 8001276:	4b22      	ldr	r3, [pc, #136]	; (8001300 <os_aes+0x5ec>)
 8001278:	0092      	lsls	r2, r2, #2
 800127a:	58d3      	ldr	r3, [r2, r3]
 800127c:	69fa      	ldr	r2, [r7, #28]
 800127e:	4053      	eors	r3, r2
 8001280:	61fb      	str	r3, [r7, #28]
 8001282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001284:	0e1a      	lsrs	r2, r3, #24
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <os_aes+0x5f0>)
 8001288:	0092      	lsls	r2, r2, #2
 800128a:	58d3      	ldr	r3, [r2, r3]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4053      	eors	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
            AES_expr4(t3,t0,t1,t2,a2);
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	b2db      	uxtb	r3, r3
 8001296:	001a      	movs	r2, r3
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <os_aes+0x5e4>)
 800129a:	0092      	lsls	r2, r2, #2
 800129c:	58d3      	ldr	r3, [r2, r3]
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	4053      	eors	r3, r2
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	0a1b      	lsrs	r3, r3, #8
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	001a      	movs	r2, r3
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <os_aes+0x5e8>)
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	58d3      	ldr	r3, [r2, r3]
 80012b2:	69fa      	ldr	r2, [r7, #28]
 80012b4:	4053      	eors	r3, r2
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	0c1b      	lsrs	r3, r3, #16
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	001a      	movs	r2, r3
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <os_aes+0x5ec>)
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	58d3      	ldr	r3, [r2, r3]
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4053      	eors	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	0e1a      	lsrs	r2, r3, #24
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <os_aes+0x5f0>)
 80012d2:	0092      	lsls	r2, r2, #2
 80012d4:	58d3      	ldr	r3, [r2, r3]
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	4053      	eors	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]
            AES_expr4(t0,t1,t2,t3,a3);
 80012dc:	6a3b      	ldr	r3, [r7, #32]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	001a      	movs	r2, r3
 80012e2:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <os_aes+0x5e4>)
 80012e4:	0092      	lsls	r2, r2, #2
 80012e6:	58d3      	ldr	r3, [r2, r3]
 80012e8:	69fa      	ldr	r2, [r7, #28]
 80012ea:	4053      	eors	r3, r2
 80012ec:	e00c      	b.n	8001308 <os_aes+0x5f4>
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	20000154 	.word	0x20000154
 80012f4:	200000a4 	.word	0x200000a4
 80012f8:	0800db1c 	.word	0x0800db1c
 80012fc:	0800d71c 	.word	0x0800d71c
 8001300:	0800d31c 	.word	0x0800d31c
 8001304:	0800cf1c 	.word	0x0800cf1c
 8001308:	61fb      	str	r3, [r7, #28]
 800130a:	6a3b      	ldr	r3, [r7, #32]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	b2db      	uxtb	r3, r3
 8001310:	001a      	movs	r2, r3
 8001312:	4bae      	ldr	r3, [pc, #696]	; (80015cc <os_aes+0x8b8>)
 8001314:	0092      	lsls	r2, r2, #2
 8001316:	58d3      	ldr	r3, [r2, r3]
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4053      	eors	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
 800131e:	6a3b      	ldr	r3, [r7, #32]
 8001320:	0c1b      	lsrs	r3, r3, #16
 8001322:	b2db      	uxtb	r3, r3
 8001324:	001a      	movs	r2, r3
 8001326:	4baa      	ldr	r3, [pc, #680]	; (80015d0 <os_aes+0x8bc>)
 8001328:	0092      	lsls	r2, r2, #2
 800132a:	58d3      	ldr	r3, [r2, r3]
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	4053      	eors	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	0e1a      	lsrs	r2, r3, #24
 8001336:	4ba7      	ldr	r3, [pc, #668]	; (80015d4 <os_aes+0x8c0>)
 8001338:	0092      	lsls	r2, r2, #2
 800133a:	58d3      	ldr	r3, [r2, r3]
 800133c:	68ba      	ldr	r2, [r7, #8]
 800133e:	4053      	eors	r3, r2
 8001340:	60bb      	str	r3, [r7, #8]

            AES_expr(a0,t0,t1,t2,t3,8);
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	0e1b      	lsrs	r3, r3, #24
 800134c:	4aa2      	ldr	r2, [pc, #648]	; (80015d8 <os_aes+0x8c4>)
 800134e:	5cd3      	ldrb	r3, [r2, r3]
 8001350:	061b      	lsls	r3, r3, #24
 8001352:	001a      	movs	r2, r3
 8001354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001356:	4053      	eors	r3, r2
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	0c1b      	lsrs	r3, r3, #16
 800135e:	b2db      	uxtb	r3, r3
 8001360:	001a      	movs	r2, r3
 8001362:	4b9d      	ldr	r3, [pc, #628]	; (80015d8 <os_aes+0x8c4>)
 8001364:	5c9b      	ldrb	r3, [r3, r2]
 8001366:	041b      	lsls	r3, r3, #16
 8001368:	001a      	movs	r2, r3
 800136a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136c:	4053      	eors	r3, r2
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	0a1b      	lsrs	r3, r3, #8
 8001374:	b2db      	uxtb	r3, r3
 8001376:	001a      	movs	r2, r3
 8001378:	4b97      	ldr	r3, [pc, #604]	; (80015d8 <os_aes+0x8c4>)
 800137a:	5c9b      	ldrb	r3, [r3, r2]
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	001a      	movs	r2, r3
 8001380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001382:	4053      	eors	r3, r2
 8001384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	001a      	movs	r2, r3
 800138c:	4b92      	ldr	r3, [pc, #584]	; (80015d8 <os_aes+0x8c4>)
 800138e:	5c9b      	ldrb	r3, [r3, r2]
 8001390:	001a      	movs	r2, r3
 8001392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001394:	4053      	eors	r3, r2
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
            AES_expr(a1,t1,t2,t3,t0,9);
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	0e1b      	lsrs	r3, r3, #24
 80013a2:	4a8d      	ldr	r2, [pc, #564]	; (80015d8 <os_aes+0x8c4>)
 80013a4:	5cd3      	ldrb	r3, [r2, r3]
 80013a6:	061b      	lsls	r3, r3, #24
 80013a8:	001a      	movs	r2, r3
 80013aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ac:	4053      	eors	r3, r2
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	0c1b      	lsrs	r3, r3, #16
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	001a      	movs	r2, r3
 80013b8:	4b87      	ldr	r3, [pc, #540]	; (80015d8 <os_aes+0x8c4>)
 80013ba:	5c9b      	ldrb	r3, [r3, r2]
 80013bc:	041b      	lsls	r3, r3, #16
 80013be:	001a      	movs	r2, r3
 80013c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c2:	4053      	eors	r3, r2
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	0a1b      	lsrs	r3, r3, #8
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	001a      	movs	r2, r3
 80013ce:	4b82      	ldr	r3, [pc, #520]	; (80015d8 <os_aes+0x8c4>)
 80013d0:	5c9b      	ldrb	r3, [r3, r2]
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	001a      	movs	r2, r3
 80013d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d8:	4053      	eors	r3, r2
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	001a      	movs	r2, r3
 80013e2:	4b7d      	ldr	r3, [pc, #500]	; (80015d8 <os_aes+0x8c4>)
 80013e4:	5c9b      	ldrb	r3, [r3, r2]
 80013e6:	001a      	movs	r2, r3
 80013e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ea:	4053      	eors	r3, r2
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
            AES_expr(a2,t2,t3,t0,t1,10);
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	0e1b      	lsrs	r3, r3, #24
 80013f8:	4a77      	ldr	r2, [pc, #476]	; (80015d8 <os_aes+0x8c4>)
 80013fa:	5cd3      	ldrb	r3, [r2, r3]
 80013fc:	061b      	lsls	r3, r3, #24
 80013fe:	001a      	movs	r2, r3
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	4053      	eors	r3, r2
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	0c1b      	lsrs	r3, r3, #16
 800140a:	b2db      	uxtb	r3, r3
 800140c:	001a      	movs	r2, r3
 800140e:	4b72      	ldr	r3, [pc, #456]	; (80015d8 <os_aes+0x8c4>)
 8001410:	5c9b      	ldrb	r3, [r3, r2]
 8001412:	041b      	lsls	r3, r3, #16
 8001414:	001a      	movs	r2, r3
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	4053      	eors	r3, r2
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	0a1b      	lsrs	r3, r3, #8
 8001420:	b2db      	uxtb	r3, r3
 8001422:	001a      	movs	r2, r3
 8001424:	4b6c      	ldr	r3, [pc, #432]	; (80015d8 <os_aes+0x8c4>)
 8001426:	5c9b      	ldrb	r3, [r3, r2]
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	001a      	movs	r2, r3
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	4053      	eors	r3, r2
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	001a      	movs	r2, r3
 8001438:	4b67      	ldr	r3, [pc, #412]	; (80015d8 <os_aes+0x8c4>)
 800143a:	5c9b      	ldrb	r3, [r3, r2]
 800143c:	001a      	movs	r2, r3
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	4053      	eors	r3, r2
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
            AES_expr(a3,t3,t0,t1,t2,11);
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001448:	623b      	str	r3, [r7, #32]
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	0e1b      	lsrs	r3, r3, #24
 800144e:	4a62      	ldr	r2, [pc, #392]	; (80015d8 <os_aes+0x8c4>)
 8001450:	5cd3      	ldrb	r3, [r2, r3]
 8001452:	061b      	lsls	r3, r3, #24
 8001454:	001a      	movs	r2, r3
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	4053      	eors	r3, r2
 800145a:	623b      	str	r3, [r7, #32]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	0c1b      	lsrs	r3, r3, #16
 8001460:	b2db      	uxtb	r3, r3
 8001462:	001a      	movs	r2, r3
 8001464:	4b5c      	ldr	r3, [pc, #368]	; (80015d8 <os_aes+0x8c4>)
 8001466:	5c9b      	ldrb	r3, [r3, r2]
 8001468:	041b      	lsls	r3, r3, #16
 800146a:	001a      	movs	r2, r3
 800146c:	6a3b      	ldr	r3, [r7, #32]
 800146e:	4053      	eors	r3, r2
 8001470:	623b      	str	r3, [r7, #32]
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	0a1b      	lsrs	r3, r3, #8
 8001476:	b2db      	uxtb	r3, r3
 8001478:	001a      	movs	r2, r3
 800147a:	4b57      	ldr	r3, [pc, #348]	; (80015d8 <os_aes+0x8c4>)
 800147c:	5c9b      	ldrb	r3, [r3, r2]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	001a      	movs	r2, r3
 8001482:	6a3b      	ldr	r3, [r7, #32]
 8001484:	4053      	eors	r3, r2
 8001486:	623b      	str	r3, [r7, #32]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	001a      	movs	r2, r3
 800148e:	4b52      	ldr	r3, [pc, #328]	; (80015d8 <os_aes+0x8c4>)
 8001490:	5c9b      	ldrb	r3, [r3, r2]
 8001492:	001a      	movs	r2, r3
 8001494:	6a3b      	ldr	r3, [r7, #32]
 8001496:	4053      	eors	r3, r2
 8001498:	623b      	str	r3, [r7, #32]
            // result of AES encryption in a0-a3

            if( mode & AES_MIC ) {
 800149a:	1dfb      	adds	r3, r7, #7
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2202      	movs	r2, #2
 80014a0:	4013      	ands	r3, r2
 80014a2:	d05a      	beq.n	800155a <os_aes+0x846>
                if( (t1 = (mode & AES_MICSUB) >> 4) != 0 ) { // last block
 80014a4:	1dfb      	adds	r3, r7, #7
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	111b      	asrs	r3, r3, #4
 80014aa:	001a      	movs	r2, r3
 80014ac:	2303      	movs	r3, #3
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d043      	beq.n	8001540 <os_aes+0x82c>
                    do {
                        // compute CMAC subkey K1 and K2
                        t0 = a0 >> 31; // save MSB
 80014b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ba:	0fdb      	lsrs	r3, r3, #31
 80014bc:	61fb      	str	r3, [r7, #28]
                        a0 = (a0 << 1) | (a1 >> 31);
 80014be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c0:	005a      	lsls	r2, r3, #1
 80014c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c4:	0fdb      	lsrs	r3, r3, #31
 80014c6:	4313      	orrs	r3, r2
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
                        a1 = (a1 << 1) | (a2 >> 31);
 80014ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014cc:	005a      	lsls	r2, r3, #1
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	0fdb      	lsrs	r3, r3, #31
 80014d2:	4313      	orrs	r3, r2
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
                        a2 = (a2 << 1) | (a3 >> 31);
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	005a      	lsls	r2, r3, #1
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	0fdb      	lsrs	r3, r3, #31
 80014de:	4313      	orrs	r3, r2
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
                        a3 = (a3 << 1);
 80014e2:	6a3b      	ldr	r3, [r7, #32]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	623b      	str	r3, [r7, #32]
                        if( t0 ) a3 ^= 0x87;
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <os_aes+0x7e2>
 80014ee:	6a3b      	ldr	r3, [r7, #32]
 80014f0:	2287      	movs	r2, #135	; 0x87
 80014f2:	4053      	eors	r3, r2
 80014f4:	623b      	str	r3, [r7, #32]
                    } while( --t1 );
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	3b01      	subs	r3, #1
 80014fa:	61bb      	str	r3, [r7, #24]
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1da      	bne.n	80014b8 <os_aes+0x7a4>

                    AESAUX[0] ^= a0;
 8001502:	4b36      	ldr	r3, [pc, #216]	; (80015dc <os_aes+0x8c8>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001508:	405a      	eors	r2, r3
 800150a:	4b34      	ldr	r3, [pc, #208]	; (80015dc <os_aes+0x8c8>)
 800150c:	601a      	str	r2, [r3, #0]
                    AESAUX[1] ^= a1;
 800150e:	4b33      	ldr	r3, [pc, #204]	; (80015dc <os_aes+0x8c8>)
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001514:	405a      	eors	r2, r3
 8001516:	4b31      	ldr	r3, [pc, #196]	; (80015dc <os_aes+0x8c8>)
 8001518:	605a      	str	r2, [r3, #4]
                    AESAUX[2] ^= a2;
 800151a:	4b30      	ldr	r3, [pc, #192]	; (80015dc <os_aes+0x8c8>)
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	405a      	eors	r2, r3
 8001522:	4b2e      	ldr	r3, [pc, #184]	; (80015dc <os_aes+0x8c8>)
 8001524:	609a      	str	r2, [r3, #8]
                    AESAUX[3] ^= a3;
 8001526:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <os_aes+0x8c8>)
 8001528:	68da      	ldr	r2, [r3, #12]
 800152a:	6a3b      	ldr	r3, [r7, #32]
 800152c:	405a      	eors	r2, r3
 800152e:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <os_aes+0x8c8>)
 8001530:	60da      	str	r2, [r3, #12]
                    mode &= ~AES_MICSUB;
 8001532:	1dfb      	adds	r3, r7, #7
 8001534:	1dfa      	adds	r2, r7, #7
 8001536:	7812      	ldrb	r2, [r2, #0]
 8001538:	2130      	movs	r1, #48	; 0x30
 800153a:	438a      	bics	r2, r1
 800153c:	701a      	strb	r2, [r3, #0]
                    goto LOADDATA;
 800153e:	e4a7      	b.n	8000e90 <os_aes+0x17c>
                } else {
                    // save cipher block as new iv
                    AESAUX[0] = a0;
 8001540:	4b26      	ldr	r3, [pc, #152]	; (80015dc <os_aes+0x8c8>)
 8001542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001544:	601a      	str	r2, [r3, #0]
                    AESAUX[1] = a1;
 8001546:	4b25      	ldr	r3, [pc, #148]	; (80015dc <os_aes+0x8c8>)
 8001548:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800154a:	605a      	str	r2, [r3, #4]
                    AESAUX[2] = a2;
 800154c:	4b23      	ldr	r3, [pc, #140]	; (80015dc <os_aes+0x8c8>)
 800154e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001550:	609a      	str	r2, [r3, #8]
                    AESAUX[3] = a3;
 8001552:	4b22      	ldr	r3, [pc, #136]	; (80015dc <os_aes+0x8c8>)
 8001554:	6a3a      	ldr	r2, [r7, #32]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	e09d      	b.n	8001696 <os_aes+0x982>
                }
            } else { // CIPHER
                if( mode & AES_CTR ) { // xor block (partially)
 800155a:	1dfb      	adds	r3, r7, #7
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2204      	movs	r2, #4
 8001560:	4013      	ands	r3, r2
 8001562:	d03d      	beq.n	80015e0 <os_aes+0x8cc>
                    t0 = (len > 16) ? 16: len;
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	b29a      	uxth	r2, r3
 800156a:	2a10      	cmp	r2, #16
 800156c:	d900      	bls.n	8001570 <os_aes+0x85c>
 800156e:	2310      	movs	r3, #16
 8001570:	b29b      	uxth	r3, r3
 8001572:	61fb      	str	r3, [r7, #28]
                    for(t1=0; t1<t0; t1++) {
 8001574:	2300      	movs	r3, #0
 8001576:	61bb      	str	r3, [r7, #24]
 8001578:	e01d      	b.n	80015b6 <os_aes+0x8a2>
                        buf[t1] ^= (a0>>24);
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	18d3      	adds	r3, r2, r3
 8001580:	7819      	ldrb	r1, [r3, #0]
 8001582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001584:	0e1b      	lsrs	r3, r3, #24
 8001586:	b2da      	uxtb	r2, r3
 8001588:	6838      	ldr	r0, [r7, #0]
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	18c3      	adds	r3, r0, r3
 800158e:	404a      	eors	r2, r1
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	701a      	strb	r2, [r3, #0]
                        a0 <<= 8;
 8001594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
                        if((t1&3)==3) {
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	2203      	movs	r2, #3
 800159e:	4013      	ands	r3, r2
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d105      	bne.n	80015b0 <os_aes+0x89c>
                            a0 = a1;
 80015a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                            a1 = a2;
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
                            a2 = a3;
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
                    for(t1=0; t1<t0; t1++) {
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	3301      	adds	r3, #1
 80015b4:	61bb      	str	r3, [r7, #24]
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d3dd      	bcc.n	800157a <os_aes+0x866>
                        }
                    }
                    // update counter
                    AESAUX[3]++;
 80015be:	4b07      	ldr	r3, [pc, #28]	; (80015dc <os_aes+0x8c8>)
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <os_aes+0x8c8>)
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	e065      	b.n	8001696 <os_aes+0x982>
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	0800d71c 	.word	0x0800d71c
 80015d0:	0800d31c 	.word	0x0800d31c
 80015d4:	0800cf1c 	.word	0x0800cf1c
 80015d8:	0800ce1c 	.word	0x0800ce1c
 80015dc:	20000154 	.word	0x20000154
                } else { // ECB
                    // store block
                    msbf4_write(buf+0,  a0);
 80015e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e2:	0e1b      	lsrs	r3, r3, #24
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	701a      	strb	r2, [r3, #0]
 80015ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ec:	0c1a      	lsrs	r2, r3, #16
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	701a      	strb	r2, [r3, #0]
 80015f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f8:	0a1a      	lsrs	r2, r3, #8
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	3302      	adds	r3, #2
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	701a      	strb	r2, [r3, #0]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	3303      	adds	r3, #3
 8001606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+4,  a1);
 800160c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160e:	0e1a      	lsrs	r2, r3, #24
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	3304      	adds	r3, #4
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	701a      	strb	r2, [r3, #0]
 8001618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161a:	0c1a      	lsrs	r2, r3, #16
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	3305      	adds	r3, #5
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	701a      	strb	r2, [r3, #0]
 8001624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001626:	0a1a      	lsrs	r2, r3, #8
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	3306      	adds	r3, #6
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	701a      	strb	r2, [r3, #0]
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	3307      	adds	r3, #7
 8001634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+8,  a2);
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	0e1a      	lsrs	r2, r3, #24
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	3308      	adds	r3, #8
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	701a      	strb	r2, [r3, #0]
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	0c1a      	lsrs	r2, r3, #16
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	3309      	adds	r3, #9
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	701a      	strb	r2, [r3, #0]
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	0a1a      	lsrs	r2, r3, #8
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	330a      	adds	r3, #10
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	701a      	strb	r2, [r3, #0]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	330b      	adds	r3, #11
 8001662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+12, a3);
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	0e1a      	lsrs	r2, r3, #24
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	330c      	adds	r3, #12
 8001670:	b2d2      	uxtb	r2, r2
 8001672:	701a      	strb	r2, [r3, #0]
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	0c1a      	lsrs	r2, r3, #16
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	330d      	adds	r3, #13
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	701a      	strb	r2, [r3, #0]
 8001680:	6a3b      	ldr	r3, [r7, #32]
 8001682:	0a1a      	lsrs	r2, r3, #8
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	330e      	adds	r3, #14
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	701a      	strb	r2, [r3, #0]
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	330f      	adds	r3, #15
 8001690:	6a3a      	ldr	r2, [r7, #32]
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	701a      	strb	r2, [r3, #0]
                }
            }

            // update block state
            if( (mode & AES_MIC)==0 || (mode & AES_MICNOAUX) ) {
 8001696:	1dfb      	adds	r3, r7, #7
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2202      	movs	r2, #2
 800169c:	4013      	ands	r3, r2
 800169e:	d004      	beq.n	80016aa <os_aes+0x996>
 80016a0:	1dfb      	adds	r3, r7, #7
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2208      	movs	r2, #8
 80016a6:	4013      	ands	r3, r2
 80016a8:	d007      	beq.n	80016ba <os_aes+0x9a6>
                buf += 16;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	3310      	adds	r3, #16
 80016ae:	603b      	str	r3, [r7, #0]
                len -= 16;
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	1d3a      	adds	r2, r7, #4
 80016b4:	8812      	ldrh	r2, [r2, #0]
 80016b6:	3a10      	subs	r2, #16
 80016b8:	801a      	strh	r2, [r3, #0]
            }
            mode |= AES_MICNOAUX;
 80016ba:	1dfb      	adds	r3, r7, #7
 80016bc:	1dfa      	adds	r2, r7, #7
 80016be:	7812      	ldrb	r2, [r2, #0]
 80016c0:	2108      	movs	r1, #8
 80016c2:	430a      	orrs	r2, r1
 80016c4:	701a      	strb	r2, [r3, #0]
        while( (signed char)len > 0 ) {
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	b25b      	sxtb	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	dd01      	ble.n	80016d4 <os_aes+0x9c0>
 80016d0:	f7ff fba1 	bl	8000e16 <os_aes+0x102>
        }
        return AESAUX[0];
 80016d4:	4b02      	ldr	r3, [pc, #8]	; (80016e0 <os_aes+0x9cc>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	0018      	movs	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	b00c      	add	sp, #48	; 0x30
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000154 	.word	0x20000154

080016e4 <debug_init>:

/*  ************************************** */
/*    DO NOT CHANGE BELOW THIS LINE        */
/*  ************************************** */

void debug_init () {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
    // configure LED pin as output
    debug_led(0);
 80016e8:	2000      	movs	r0, #0
 80016ea:	f000 f809 	bl	8001700 <debug_led>

    // configure USART1 (115200/8N1, tx-only)

    // print banner
    debug_str("\r\n============== DEBUG STARTED ==============\r\n");
 80016ee:	4b03      	ldr	r3, [pc, #12]	; (80016fc <debug_init+0x18>)
 80016f0:	0018      	movs	r0, r3
 80016f2:	f000 f858 	bl	80017a6 <debug_str>
}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	0800c888 	.word	0x0800c888

08001700 <debug_led>:

void debug_led (int val) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,val);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	b2da      	uxtb	r2, r3
 800170c:	23a0      	movs	r3, #160	; 0xa0
 800170e:	05db      	lsls	r3, r3, #23
 8001710:	2120      	movs	r1, #32
 8001712:	0018      	movs	r0, r3
 8001714:	f006 ff20 	bl	8008558 <HAL_GPIO_WritePin>
}
 8001718:	46c0      	nop			; (mov r8, r8)
 800171a:	46bd      	mov	sp, r7
 800171c:	b002      	add	sp, #8
 800171e:	bd80      	pop	{r7, pc}

08001720 <debug_char>:

void debug_char (char c) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	0002      	movs	r2, r0
 8001728:	1dfb      	adds	r3, r7, #7
 800172a:	701a      	strb	r2, [r3, #0]
  unsigned char buffer[] = "";
 800172c:	210c      	movs	r1, #12
 800172e:	187b      	adds	r3, r7, r1
 8001730:	4a08      	ldr	r2, [pc, #32]	; (8001754 <debug_char+0x34>)
 8001732:	7812      	ldrb	r2, [r2, #0]
 8001734:	701a      	strb	r2, [r3, #0]
  buffer[0]= c;
 8001736:	187b      	adds	r3, r7, r1
 8001738:	1dfa      	adds	r2, r7, #7
 800173a:	7812      	ldrb	r2, [r2, #0]
 800173c:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&myUART,buffer,sizeof(buffer),HAL_MAX_DELAY);
 800173e:	2301      	movs	r3, #1
 8001740:	425b      	negs	r3, r3
 8001742:	1879      	adds	r1, r7, r1
 8001744:	4804      	ldr	r0, [pc, #16]	; (8001758 <debug_char+0x38>)
 8001746:	2201      	movs	r2, #1
 8001748:	f00a f99c 	bl	800ba84 <HAL_UART_Transmit>
}
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	b004      	add	sp, #16
 8001752:	bd80      	pop	{r7, pc}
 8001754:	0800c8b8 	.word	0x0800c8b8
 8001758:	200001bc 	.word	0x200001bc

0800175c <debug_int>:
    for(s1_t n=24; n>=0; n-=8) {
        debug_hex(v>>n);
    }
}

void debug_int (s4_t v) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af02      	add	r7, sp, #8
 8001762:	6078      	str	r0, [r7, #4]
    char buf[10], *p = buf;
 8001764:	210c      	movs	r1, #12
 8001766:	187b      	adds	r3, r7, r1
 8001768:	61fb      	str	r3, [r7, #28]
    int n = debug_fmt(buf, sizeof(buf), v, 10, 0, 0);
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	1878      	adds	r0, r7, r1
 800176e:	2300      	movs	r3, #0
 8001770:	9301      	str	r3, [sp, #4]
 8001772:	2300      	movs	r3, #0
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	230a      	movs	r3, #10
 8001778:	210a      	movs	r1, #10
 800177a:	f000 f838 	bl	80017ee <debug_fmt>
 800177e:	0003      	movs	r3, r0
 8001780:	61bb      	str	r3, [r7, #24]
    while(n--)
 8001782:	e006      	b.n	8001792 <debug_int+0x36>
        debug_char(*p++);
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	61fa      	str	r2, [r7, #28]
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	0018      	movs	r0, r3
 800178e:	f7ff ffc7 	bl	8001720 <debug_char>
    while(n--)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	1e5a      	subs	r2, r3, #1
 8001796:	61ba      	str	r2, [r7, #24]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1f3      	bne.n	8001784 <debug_int+0x28>
}
 800179c:	46c0      	nop			; (mov r8, r8)
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b008      	add	sp, #32
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <debug_str>:

void debug_str (const char* str) {
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
    while(*str) {
 80017ae:	e006      	b.n	80017be <debug_str+0x18>
        debug_char(*str++);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	0018      	movs	r0, r3
 80017ba:	f7ff ffb1 	bl	8001720 <debug_char>
    while(*str) {
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f4      	bne.n	80017b0 <debug_str+0xa>
    }
}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	46c0      	nop			; (mov r8, r8)
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b002      	add	sp, #8
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <debug_f>:

void debug_f (float f) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	debug_int((int)f);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff f86d 	bl	80008b8 <__aeabi_f2iz>
 80017de:	0003      	movs	r3, r0
 80017e0:	0018      	movs	r0, r3
 80017e2:	f7ff ffbb 	bl	800175c <debug_int>
}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b002      	add	sp, #8
 80017ec:	bd80      	pop	{r7, pc}

080017ee <debug_fmt>:
    debug_int(val);
    debug_char('\r');
    debug_char('\n');
}

int debug_fmt (char* buf, int max, s4_t val, int base, int width, char pad) {
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b092      	sub	sp, #72	; 0x48
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	60f8      	str	r0, [r7, #12]
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	603b      	str	r3, [r7, #0]
    char num[33], *p = num, *b = buf;
 80017fc:	2314      	movs	r3, #20
 80017fe:	18fb      	adds	r3, r7, r3
 8001800:	647b      	str	r3, [r7, #68]	; 0x44
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	643b      	str	r3, [r7, #64]	; 0x40
    u4_t m, v;
    // special handling of negative decimals
    v = (base == 10 && val < 0) ? -val : val;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	2b0a      	cmp	r3, #10
 800180a:	d105      	bne.n	8001818 <debug_fmt+0x2a>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	da02      	bge.n	8001818 <debug_fmt+0x2a>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	425b      	negs	r3, r3
 8001816:	e000      	b.n	800181a <debug_fmt+0x2c>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	63fb      	str	r3, [r7, #60]	; 0x3c
    // generate digits backwards
    do {
        *p++ = ((m=v%base) <= 9) ? m+'0' : m+'A'-10;
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001820:	0011      	movs	r1, r2
 8001822:	0018      	movs	r0, r3
 8001824:	f7fe fcf6 	bl	8000214 <__aeabi_uidivmod>
 8001828:	000b      	movs	r3, r1
 800182a:	63bb      	str	r3, [r7, #56]	; 0x38
 800182c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800182e:	2b09      	cmp	r3, #9
 8001830:	d804      	bhi.n	800183c <debug_fmt+0x4e>
 8001832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001834:	b2db      	uxtb	r3, r3
 8001836:	3330      	adds	r3, #48	; 0x30
 8001838:	b2da      	uxtb	r2, r3
 800183a:	e003      	b.n	8001844 <debug_fmt+0x56>
 800183c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800183e:	b2db      	uxtb	r3, r3
 8001840:	3337      	adds	r3, #55	; 0x37
 8001842:	b2da      	uxtb	r2, r3
 8001844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001846:	1c59      	adds	r1, r3, #1
 8001848:	6479      	str	r1, [r7, #68]	; 0x44
 800184a:	701a      	strb	r2, [r3, #0]
    } while( v /= base );
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	0019      	movs	r1, r3
 8001850:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001852:	f7fe fc59 	bl	8000108 <__udivsi3>
 8001856:	0003      	movs	r3, r0
 8001858:	63fb      	str	r3, [r7, #60]	; 0x3c
 800185a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1dd      	bne.n	800181c <debug_fmt+0x2e>
    // prefix negative decimals with '-'
    if(base == 10 && val < 0) {
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	2b0a      	cmp	r3, #10
 8001864:	d10f      	bne.n	8001886 <debug_fmt+0x98>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	da0c      	bge.n	8001886 <debug_fmt+0x98>
        *p++ = '-';
 800186c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	647a      	str	r2, [r7, #68]	; 0x44
 8001872:	222d      	movs	r2, #45	; 0x2d
 8001874:	701a      	strb	r2, [r3, #0]
    }
    // add leading zeroes or spaces
    while( b-buf < max-1 && b-buf < width-(p-num) ) {
 8001876:	e006      	b.n	8001886 <debug_fmt+0x98>
        *b++ = pad;
 8001878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	643a      	str	r2, [r7, #64]	; 0x40
 800187e:	2254      	movs	r2, #84	; 0x54
 8001880:	18ba      	adds	r2, r7, r2
 8001882:	7812      	ldrb	r2, [r2, #0]
 8001884:	701a      	strb	r2, [r3, #0]
    while( b-buf < max-1 && b-buf < width-(p-num) ) {
 8001886:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	1ad2      	subs	r2, r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	3b01      	subs	r3, #1
 8001890:	429a      	cmp	r2, r3
 8001892:	da0a      	bge.n	80018aa <debug_fmt+0xbc>
 8001894:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1ad2      	subs	r2, r2, r3
 800189a:	2314      	movs	r3, #20
 800189c:	18fb      	adds	r3, r7, r3
 800189e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80018a0:	1acb      	subs	r3, r1, r3
 80018a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80018a4:	1acb      	subs	r3, r1, r3
 80018a6:	429a      	cmp	r2, r3
 80018a8:	dbe6      	blt.n	8001878 <debug_fmt+0x8a>
    }
    // copy digits and sign forwards
    do *b++ = *--p;
 80018aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ac:	3b01      	subs	r3, #1
 80018ae:	647b      	str	r3, [r7, #68]	; 0x44
 80018b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018b2:	1c5a      	adds	r2, r3, #1
 80018b4:	643a      	str	r2, [r7, #64]	; 0x40
 80018b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018b8:	7812      	ldrb	r2, [r2, #0]
 80018ba:	701a      	strb	r2, [r3, #0]
    while( b-buf < max && p > num );
 80018bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	dd04      	ble.n	80018d2 <debug_fmt+0xe4>
 80018c8:	2314      	movs	r3, #20
 80018ca:	18fb      	adds	r3, r7, r3
 80018cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d8eb      	bhi.n	80018aa <debug_fmt+0xbc>
    // return number of characters written
    return b - buf;
 80018d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	1ad3      	subs	r3, r2, r3
}
 80018d8:	0018      	movs	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	b012      	add	sp, #72	; 0x48
 80018de:	bd80      	pop	{r7, pc}

080018e0 <debug_event>:

void debug_event (int ev) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
        [EV_LINK_DEAD]      = "LINK_DEAD",
        [EV_LINK_ALIVE]     = "LINK_ALIVE",
        [EV_SCAN_FOUND]     = "SCAN_FOUND",
        [EV_TXSTART]        = "EV_TXSTART",
    };
    debug_str((ev < sizeof(evnames)/sizeof(evnames[0])) ? evnames[ev] : "EV_UNKNOWN" );
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b11      	cmp	r3, #17
 80018ec:	d804      	bhi.n	80018f8 <debug_event+0x18>
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <debug_event+0x34>)
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	0092      	lsls	r2, r2, #2
 80018f4:	58d3      	ldr	r3, [r2, r3]
 80018f6:	e000      	b.n	80018fa <debug_event+0x1a>
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <debug_event+0x38>)
 80018fa:	0018      	movs	r0, r3
 80018fc:	f7ff ff53 	bl	80017a6 <debug_str>
    debug_char('\r');
 8001900:	200d      	movs	r0, #13
 8001902:	f7ff ff0d 	bl	8001720 <debug_char>
    debug_char('\n');
 8001906:	200a      	movs	r0, #10
 8001908:	f7ff ff0a 	bl	8001720 <debug_char>
}
 800190c:	46c0      	nop			; (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	b002      	add	sp, #8
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000000 	.word	0x20000000
 8001918:	0800c8d0 	.word	0x0800c8d0

0800191c <hal_io_init>:
} HAL;

// -----------------------------------------------------------------------------
// I/O

static void hal_io_init () {
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	//already done by cubemx
}
 8001920:	46c0      	nop			; (mov r8, r8)
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <hal_pin_rxtx>:

// val ==1  => tx 1, rx 0 ; val == 0 => tx 0, rx 1
void hal_pin_rxtx (u1_t val) {
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	0002      	movs	r2, r0
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	701a      	strb	r2, [r3, #0]
  #ifdef TX_GPIO_Port
    HAL_GPIO_WritePin(RX_GPIO_Port,RX_Pin,~val);
    HAL_GPIO_WritePin(TX_GPIO_Port,TX_Pin,val);
  #endif
#endif
}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	46bd      	mov	sp, r7
 8001936:	b002      	add	sp, #8
 8001938:	bd80      	pop	{r7, pc}

0800193a <hal_pin_nss>:

// set radio NSS pin to given value
void hal_pin_nss (u1_t val) {
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	0002      	movs	r2, r0
 8001942:	1dfb      	adds	r3, r7, #7
 8001944:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(NSS_GPIO_Port,NSS_Pin,val);
 8001946:	1dfb      	adds	r3, r7, #7
 8001948:	781a      	ldrb	r2, [r3, #0]
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	0219      	lsls	r1, r3, #8
 800194e:	23a0      	movs	r3, #160	; 0xa0
 8001950:	05db      	lsls	r3, r3, #23
 8001952:	0018      	movs	r0, r3
 8001954:	f006 fe00 	bl	8008558 <HAL_GPIO_WritePin>
}
 8001958:	46c0      	nop			; (mov r8, r8)
 800195a:	46bd      	mov	sp, r7
 800195c:	b002      	add	sp, #8
 800195e:	bd80      	pop	{r7, pc}

08001960 <hal_pin_rst>:

// set radio RST pin to given value (or keep floating!)
void hal_pin_rst (u1_t val) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b08c      	sub	sp, #48	; 0x30
 8001964:	af00      	add	r7, sp, #0
 8001966:	0002      	movs	r2, r0
 8001968:	1dfb      	adds	r3, r7, #7
 800196a:	701a      	strb	r2, [r3, #0]
    if(val == 0 || val == 1) { // drive pin
 800196c:	1dfb      	adds	r3, r7, #7
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <hal_pin_rst+0x1c>
 8001974:	1dfb      	adds	r3, r7, #7
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d117      	bne.n	80019ac <hal_pin_rst+0x4c>
    	GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 800197c:	211c      	movs	r1, #28
 800197e:	187b      	adds	r3, r7, r1
 8001980:	2201      	movs	r2, #1
 8001982:	601a      	str	r2, [r3, #0]
    	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001984:	187b      	adds	r3, r7, r1
 8001986:	2201      	movs	r2, #1
 8001988:	605a      	str	r2, [r3, #4]
    	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	187b      	adds	r3, r7, r1
 800198c:	2200      	movs	r2, #0
 800198e:	60da      	str	r2, [r3, #12]
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001990:	187b      	adds	r3, r7, r1
 8001992:	4a11      	ldr	r2, [pc, #68]	; (80019d8 <hal_pin_rst+0x78>)
 8001994:	0019      	movs	r1, r3
 8001996:	0010      	movs	r0, r2
 8001998:	f006 fb52 	bl	8008040 <HAL_GPIO_Init>

    	HAL_GPIO_WritePin(RST_GPIO_Port,RST_Pin,val);
 800199c:	1dfb      	adds	r3, r7, #7
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	480d      	ldr	r0, [pc, #52]	; (80019d8 <hal_pin_rst+0x78>)
 80019a2:	001a      	movs	r2, r3
 80019a4:	2101      	movs	r1, #1
 80019a6:	f006 fdd7 	bl	8008558 <HAL_GPIO_WritePin>
    if(val == 0 || val == 1) { // drive pin
 80019aa:	e010      	b.n	80019ce <hal_pin_rst+0x6e>

    } else { // keep pin floating
        GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 80019ac:	2108      	movs	r1, #8
 80019ae:	187b      	adds	r3, r7, r1
 80019b0:	2201      	movs	r2, #1
 80019b2:	601a      	str	r2, [r3, #0]
    	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b4:	187b      	adds	r3, r7, r1
 80019b6:	2200      	movs	r2, #0
 80019b8:	605a      	str	r2, [r3, #4]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	187b      	adds	r3, r7, r1
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80019c0:	187b      	adds	r3, r7, r1
 80019c2:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <hal_pin_rst+0x78>)
 80019c4:	0019      	movs	r1, r3
 80019c6:	0010      	movs	r0, r2
 80019c8:	f006 fb3a 	bl	8008040 <HAL_GPIO_Init>
    }
}
 80019cc:	46c0      	nop			; (mov r8, r8)
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	46bd      	mov	sp, r7
 80019d2:	b00c      	add	sp, #48	; 0x30
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	50000800 	.word	0x50000800

080019dc <HAL_GPIO_EXTI_Callback>:

extern void radio_irq_handler(u1_t dio);

// generic EXTI IRQ handler for all channels
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin_int){
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	0002      	movs	r2, r0
 80019e4:	1dbb      	adds	r3, r7, #6
 80019e6:	801a      	strh	r2, [r3, #0]
	// DIO 0
	if(GPIO_Pin_int == DIO0_Pin) {
 80019e8:	1dbb      	adds	r3, r7, #6
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	2b10      	cmp	r3, #16
 80019ee:	d102      	bne.n	80019f6 <HAL_GPIO_EXTI_Callback+0x1a>
		// invoke radio handler (on IRQ!)
		radio_irq_handler(0);
 80019f0:	2000      	movs	r0, #0
 80019f2:	f004 ffeb 	bl	80069cc <radio_irq_handler>
	}
	// DIO 1
	if(GPIO_Pin_int == DIO1_Pin) {
 80019f6:	1dbb      	adds	r3, r7, #6
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d102      	bne.n	8001a04 <HAL_GPIO_EXTI_Callback+0x28>
	    // invoke radio handler (on IRQ!)
		radio_irq_handler(1);
 80019fe:	2001      	movs	r0, #1
 8001a00:	f004 ffe4 	bl	80069cc <radio_irq_handler>
	}
	// DIO 2
	if(GPIO_Pin_int == DIO2_Pin) {
 8001a04:	1dbb      	adds	r3, r7, #6
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d102      	bne.n	8001a12 <HAL_GPIO_EXTI_Callback+0x36>
	    // invoke radio handler (on IRQ!)
	    radio_irq_handler(2);
 8001a0c:	2002      	movs	r0, #2
 8001a0e:	f004 ffdd 	bl	80069cc <radio_irq_handler>
	}
}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b002      	add	sp, #8
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <hal_spi_init>:

// -----------------------------------------------------------------------------
// SPI
void hal_spi_init () {
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	af00      	add	r7, sp, #0
	// already done by cube mx
}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <hal_spi>:

// perform SPI transaction with radio
u1_t hal_spi (u1_t out) {
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	1dfb      	adds	r3, r7, #7
 8001a2e:	701a      	strb	r2, [r3, #0]
	unsigned char outbuffer[] ="";
 8001a30:	210c      	movs	r1, #12
 8001a32:	187b      	adds	r3, r7, r1
 8001a34:	4a0d      	ldr	r2, [pc, #52]	; (8001a6c <hal_spi+0x48>)
 8001a36:	7812      	ldrb	r2, [r2, #0]
 8001a38:	701a      	strb	r2, [r3, #0]
	unsigned char inbuffer[] ="";
 8001a3a:	2008      	movs	r0, #8
 8001a3c:	183b      	adds	r3, r7, r0
 8001a3e:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <hal_spi+0x48>)
 8001a40:	7812      	ldrb	r2, [r2, #0]
 8001a42:	701a      	strb	r2, [r3, #0]
	outbuffer[0] = out;
 8001a44:	187b      	adds	r3, r7, r1
 8001a46:	1dfa      	adds	r2, r7, #7
 8001a48:	7812      	ldrb	r2, [r2, #0]
 8001a4a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_TransmitReceive(&mySPI,outbuffer,inbuffer,sizeof(outbuffer),HAL_MAX_DELAY);
 8001a4c:	0004      	movs	r4, r0
 8001a4e:	183a      	adds	r2, r7, r0
 8001a50:	1879      	adds	r1, r7, r1
 8001a52:	4807      	ldr	r0, [pc, #28]	; (8001a70 <hal_spi+0x4c>)
 8001a54:	2301      	movs	r3, #1
 8001a56:	425b      	negs	r3, r3
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	f008 fac8 	bl	8009ff0 <HAL_SPI_TransmitReceive>
	return inbuffer[0];
 8001a60:	193b      	adds	r3, r7, r4
 8001a62:	781b      	ldrb	r3, [r3, #0]
}
 8001a64:	0018      	movs	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b005      	add	sp, #20
 8001a6a:	bd90      	pop	{r4, r7, pc}
 8001a6c:	0800c9ac 	.word	0x0800c9ac
 8001a70:	20000164 	.word	0x20000164

08001a74 <hal_time_init>:


// -----------------------------------------------------------------------------
// TIME
static void hal_time_init () {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	// already done by cubemx
}
 8001a78:	46c0      	nop			; (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <hal_ticks>:

u4_t hal_ticks () {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 8001a86:	f000 f8b7 	bl	8001bf8 <hal_disableIRQs>
    u4_t t = HAL.ticks;
 8001a8a:	4b14      	ldr	r3, [pc, #80]	; (8001adc <hal_ticks+0x5c>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	607b      	str	r3, [r7, #4]
    u2_t cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8001a90:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <hal_ticks+0x60>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a96:	1cbb      	adds	r3, r7, #2
 8001a98:	801a      	strh	r2, [r3, #0]
    if(__HAL_TIM_GET_FLAG(&myTIMER, TIM_FLAG_CC1) != RESET){
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <hal_ticks+0x60>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d10e      	bne.n	8001ac6 <hal_ticks+0x46>
    	if(__HAL_TIM_GET_IT_SOURCE(&myTIMER, TIM_IT_CC1) !=RESET){
 8001aa8:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <hal_ticks+0x60>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d107      	bne.n	8001ac6 <hal_ticks+0x46>
    		cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <hal_ticks+0x60>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001abc:	1cbb      	adds	r3, r7, #2
 8001abe:	801a      	strh	r2, [r3, #0]
    		t++;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	607b      	str	r3, [r7, #4]
        }
     }
    hal_enableIRQs();
 8001ac6:	f000 f8a5 	bl	8001c14 <hal_enableIRQs>
    return (t<<16)|cnt;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	041a      	lsls	r2, r3, #16
 8001ace:	1cbb      	adds	r3, r7, #2
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	4313      	orrs	r3, r2
}
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b002      	add	sp, #8
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000074 	.word	0x20000074
 8001ae0:	20000240 	.word	0x20000240

08001ae4 <deltaticks>:

// return modified delta ticks from now to specified ticktime (0 for past, FFFF for far future)
static u2_t deltaticks (u4_t time) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
    u4_t t = hal_ticks();
 8001aec:	f7ff ffc8 	bl	8001a80 <hal_ticks>
 8001af0:	0003      	movs	r3, r0
 8001af2:	60fb      	str	r3, [r7, #12]
    s4_t d = time - t;
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	60bb      	str	r3, [r7, #8]
    if( d<=0 ) return 0;    // in the past
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	dc01      	bgt.n	8001b06 <deltaticks+0x22>
 8001b02:	2300      	movs	r3, #0
 8001b04:	e006      	b.n	8001b14 <deltaticks+0x30>
    if( (d>>16)!=0 ) return 0xFFFF; // far ahead
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	141b      	asrs	r3, r3, #16
 8001b0a:	d001      	beq.n	8001b10 <deltaticks+0x2c>
 8001b0c:	4b03      	ldr	r3, [pc, #12]	; (8001b1c <deltaticks+0x38>)
 8001b0e:	e001      	b.n	8001b14 <deltaticks+0x30>
    return (u2_t)d;
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	b29b      	uxth	r3, r3
}
 8001b14:	0018      	movs	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b004      	add	sp, #16
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	0000ffff 	.word	0x0000ffff

08001b20 <hal_waitUntil>:

void hal_waitUntil (u4_t time) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
    while( deltaticks(time) != 0 ); // busy wait until timestamp is reached
 8001b28:	46c0      	nop			; (mov r8, r8)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f7ff ffd9 	bl	8001ae4 <deltaticks>
 8001b32:	1e03      	subs	r3, r0, #0
 8001b34:	d1f9      	bne.n	8001b2a <hal_waitUntil+0xa>
}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	46c0      	nop			; (mov r8, r8)
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b002      	add	sp, #8
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <hal_checkTimer>:

// check and rewind for target time
u1_t hal_checkTimer (u4_t time) {
 8001b40:	b5b0      	push	{r4, r5, r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
    u2_t dt;
    myTIMER.Instance->SR &= ~TIM_SR_CC1IF; // clear any pending interrupts
 8001b48:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <hal_checkTimer+0x84>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	691a      	ldr	r2, [r3, #16]
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <hal_checkTimer+0x84>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2102      	movs	r1, #2
 8001b54:	438a      	bics	r2, r1
 8001b56:	611a      	str	r2, [r3, #16]
    if((dt = deltaticks(time)) < 5) { // event is now (a few ticks ahead)
 8001b58:	250e      	movs	r5, #14
 8001b5a:	197c      	adds	r4, r7, r5
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f7ff ffc0 	bl	8001ae4 <deltaticks>
 8001b64:	0003      	movs	r3, r0
 8001b66:	8023      	strh	r3, [r4, #0]
 8001b68:	197b      	adds	r3, r7, r5
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d809      	bhi.n	8001b84 <hal_checkTimer+0x44>
    	myTIMER.Instance->DIER &= ~TIM_DIER_CC1IE; // disable IE
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <hal_checkTimer+0x84>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <hal_checkTimer+0x84>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2102      	movs	r1, #2
 8001b7c:	438a      	bics	r2, r1
 8001b7e:	60da      	str	r2, [r3, #12]
        return 1;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e01a      	b.n	8001bba <hal_checkTimer+0x7a>
    } else { // rewind timer (fully or to exact time))
    	myTIMER.Instance->CCR1 = myTIMER.Instance->CNT + dt;   // set comparator
 8001b84:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <hal_checkTimer+0x84>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b8a:	230e      	movs	r3, #14
 8001b8c:	18fb      	adds	r3, r7, r3
 8001b8e:	881a      	ldrh	r2, [r3, #0]
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <hal_checkTimer+0x84>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	188a      	adds	r2, r1, r2
 8001b96:	635a      	str	r2, [r3, #52]	; 0x34
    	myTIMER.Instance->DIER |= TIM_DIER_CC1IE;  // enable IE
 8001b98:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <hal_checkTimer+0x84>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <hal_checkTimer+0x84>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2102      	movs	r1, #2
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	60da      	str	r2, [r3, #12]
    	myTIMER.Instance->CCER |= TIM_CCER_CC1E;   // enable capture/compare uint 2
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <hal_checkTimer+0x84>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6a1a      	ldr	r2, [r3, #32]
 8001bae:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <hal_checkTimer+0x84>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	621a      	str	r2, [r3, #32]
        return 0;
 8001bb8:	2300      	movs	r3, #0
    }
}
 8001bba:	0018      	movs	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b004      	add	sp, #16
 8001bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	20000240 	.word	0x20000240

08001bc8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == myTIMER.Instance){
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d104      	bne.n	8001be6 <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL.ticks++;
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001be4:	605a      	str	r2, [r3, #4]
    }
}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b002      	add	sp, #8
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	20000240 	.word	0x20000240
 8001bf4:	20000074 	.word	0x20000074

08001bf8 <hal_disableIRQs>:

// -----------------------------------------------------------------------------
// IRQ
void hal_disableIRQs () {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bfc:	b672      	cpsid	i
}
 8001bfe:	46c0      	nop			; (mov r8, r8)
	__disable_irq();
	//__set_BASEPRI(1 << 4);
    HAL.irqlevel++;
 8001c00:	4b03      	ldr	r3, [pc, #12]	; (8001c10 <hal_disableIRQs+0x18>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	4b02      	ldr	r3, [pc, #8]	; (8001c10 <hal_disableIRQs+0x18>)
 8001c08:	601a      	str	r2, [r3, #0]
}
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000074 	.word	0x20000074

08001c14 <hal_enableIRQs>:

void hal_enableIRQs () {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
    if(--HAL.irqlevel == 0) {
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <hal_enableIRQs+0x20>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	1e5a      	subs	r2, r3, #1
 8001c1e:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <hal_enableIRQs+0x20>)
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <hal_enableIRQs+0x20>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <hal_enableIRQs+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001c2a:	b662      	cpsie	i
}
 8001c2c:	46c0      	nop			; (mov r8, r8)
		__enable_irq();
    	//__set_BASEPRI(0);
    }
}
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000074 	.word	0x20000074

08001c38 <hal_sleep>:

void hal_sleep () {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
	// low power sleep mode
#ifndef CFG_no_low_power_sleep_mode
	// PWR->CR |= PWR_CR_LPSDSR;
#endif
    // suspend execution until IRQ, regardless of the CPSR I-bit
    __WFI();
 8001c3c:	bf30      	wfi
}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <hal_init>:

// -----------------------------------------------------------------------------

void hal_init () {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
    memset(&HAL, 0x00, sizeof(HAL));
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <hal_init+0x2c>)
 8001c4a:	2208      	movs	r2, #8
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f00a fe05 	bl	800c85e <memset>
    hal_disableIRQs();
 8001c54:	f7ff ffd0 	bl	8001bf8 <hal_disableIRQs>
    // configure radio I/O and interrupt handler
    hal_io_init();
 8001c58:	f7ff fe60 	bl	800191c <hal_io_init>
    // configure radio SPI
    hal_spi_init();
 8001c5c:	f7ff fedd 	bl	8001a1a <hal_spi_init>
    // configure timer and interrupt handler
    hal_time_init();
 8001c60:	f7ff ff08 	bl	8001a74 <hal_time_init>
    hal_enableIRQs();
 8001c64:	f7ff ffd6 	bl	8001c14 <hal_enableIRQs>
}
 8001c68:	46c0      	nop			; (mov r8, r8)
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	20000074 	.word	0x20000074

08001c74 <hal_failed>:

void hal_failed () {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
    // HALT...
    hal_disableIRQs();
 8001c78:	f7ff ffbe 	bl	8001bf8 <hal_disableIRQs>
    hal_sleep();
 8001c7c:	f7ff ffdc 	bl	8001c38 <hal_sleep>
    while(1);
 8001c80:	e7fe      	b.n	8001c80 <hal_failed+0xc>
	...

08001c84 <I2c_Init>:

#include "i2c_hal.h"

//-----------------------------------------------------------------------------
void I2c_Init(void)                      /* -- adapt the init for your uC -- */
{                    
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  SDA_OPEN();                  // I2C-bus idle mode SDA released
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <I2c_Init+0x1c>)
 8001c8a:	2280      	movs	r2, #128	; 0x80
 8001c8c:	0092      	lsls	r2, r2, #2
 8001c8e:	619a      	str	r2, [r3, #24]
  SCL_OPEN();                  // I2C-bus idle mode SCL released
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <I2c_Init+0x1c>)
 8001c92:	2280      	movs	r2, #128	; 0x80
 8001c94:	0052      	lsls	r2, r2, #1
 8001c96:	619a      	str	r2, [r3, #24]
}
 8001c98:	46c0      	nop			; (mov r8, r8)
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	50000400 	.word	0x50000400

08001ca4 <I2c_StartCondition>:

//-----------------------------------------------------------------------------
void I2c_StartCondition(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  SDA_OPEN();
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <I2c_StartCondition+0x44>)
 8001caa:	2280      	movs	r2, #128	; 0x80
 8001cac:	0092      	lsls	r2, r2, #2
 8001cae:	619a      	str	r2, [r3, #24]
  DelayMicroSeconds(1);
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f005 faeb 	bl	800728c <DelayMicroSeconds>
  SCL_OPEN();
 8001cb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <I2c_StartCondition+0x44>)
 8001cb8:	2280      	movs	r2, #128	; 0x80
 8001cba:	0052      	lsls	r2, r2, #1
 8001cbc:	619a      	str	r2, [r3, #24]
  DelayMicroSeconds(1);
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f005 fae4 	bl	800728c <DelayMicroSeconds>
  SDA_LOW();
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <I2c_StartCondition+0x44>)
 8001cc6:	2280      	movs	r2, #128	; 0x80
 8001cc8:	0492      	lsls	r2, r2, #18
 8001cca:	619a      	str	r2, [r3, #24]
  DelayMicroSeconds(10);  // hold time start condition (t_HD;STA)
 8001ccc:	200a      	movs	r0, #10
 8001cce:	f005 fadd 	bl	800728c <DelayMicroSeconds>
  SCL_LOW();
 8001cd2:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <I2c_StartCondition+0x44>)
 8001cd4:	2280      	movs	r2, #128	; 0x80
 8001cd6:	0452      	lsls	r2, r2, #17
 8001cd8:	619a      	str	r2, [r3, #24]
  DelayMicroSeconds(10);
 8001cda:	200a      	movs	r0, #10
 8001cdc:	f005 fad6 	bl	800728c <DelayMicroSeconds>
}
 8001ce0:	46c0      	nop			; (mov r8, r8)
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	50000400 	.word	0x50000400

08001cec <I2c_StopCondition>:

//-----------------------------------------------------------------------------
void I2c_StopCondition(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  SCL_LOW();
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <I2c_StopCondition+0x44>)
 8001cf2:	2280      	movs	r2, #128	; 0x80
 8001cf4:	0452      	lsls	r2, r2, #17
 8001cf6:	619a      	str	r2, [r3, #24]
  DelayMicroSeconds(1);
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	f005 fac7 	bl	800728c <DelayMicroSeconds>
  SDA_LOW();
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <I2c_StopCondition+0x44>)
 8001d00:	2280      	movs	r2, #128	; 0x80
 8001d02:	0492      	lsls	r2, r2, #18
 8001d04:	619a      	str	r2, [r3, #24]
  DelayMicroSeconds(1);
 8001d06:	2001      	movs	r0, #1
 8001d08:	f005 fac0 	bl	800728c <DelayMicroSeconds>
  SCL_OPEN();
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <I2c_StopCondition+0x44>)
 8001d0e:	2280      	movs	r2, #128	; 0x80
 8001d10:	0052      	lsls	r2, r2, #1
 8001d12:	619a      	str	r2, [r3, #24]
  DelayMicroSeconds(10);  // set-up time stop condition (t_SU;STO)
 8001d14:	200a      	movs	r0, #10
 8001d16:	f005 fab9 	bl	800728c <DelayMicroSeconds>
  SDA_OPEN();
 8001d1a:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <I2c_StopCondition+0x44>)
 8001d1c:	2280      	movs	r2, #128	; 0x80
 8001d1e:	0092      	lsls	r2, r2, #2
 8001d20:	619a      	str	r2, [r3, #24]
  DelayMicroSeconds(10);
 8001d22:	200a      	movs	r0, #10
 8001d24:	f005 fab2 	bl	800728c <DelayMicroSeconds>
}
 8001d28:	46c0      	nop			; (mov r8, r8)
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	50000400 	.word	0x50000400

08001d34 <I2c_WriteByte>:

//-----------------------------------------------------------------------------
Error I2c_WriteByte(uint8_t txByte)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	0002      	movs	r2, r0
 8001d3c:	1dfb      	adds	r3, r7, #7
 8001d3e:	701a      	strb	r2, [r3, #0]
  uint8_t mask;
  Error error = ERROR_NONE;
 8001d40:	230e      	movs	r3, #14
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
  for(mask = 0x80; mask > 0; mask >>= 1) { // shift bit for masking (8 times)
 8001d48:	230f      	movs	r3, #15
 8001d4a:	18fb      	adds	r3, r7, r3
 8001d4c:	2280      	movs	r2, #128	; 0x80
 8001d4e:	701a      	strb	r2, [r3, #0]
 8001d50:	e028      	b.n	8001da4 <I2c_WriteByte+0x70>
    if((mask & txByte) == 0) SDA_LOW();    // masking txByte & write to SDA-Line
 8001d52:	230f      	movs	r3, #15
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	1dfa      	adds	r2, r7, #7
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	7812      	ldrb	r2, [r2, #0]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d104      	bne.n	8001d6e <I2c_WriteByte+0x3a>
 8001d64:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <I2c_WriteByte+0xc0>)
 8001d66:	2280      	movs	r2, #128	; 0x80
 8001d68:	0492      	lsls	r2, r2, #18
 8001d6a:	619a      	str	r2, [r3, #24]
 8001d6c:	e003      	b.n	8001d76 <I2c_WriteByte+0x42>
    else                     SDA_OPEN();   
 8001d6e:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <I2c_WriteByte+0xc0>)
 8001d70:	2280      	movs	r2, #128	; 0x80
 8001d72:	0092      	lsls	r2, r2, #2
 8001d74:	619a      	str	r2, [r3, #24]
    DelayMicroSeconds(1);                  // data set-up time (t_SU;DAT)
 8001d76:	2001      	movs	r0, #1
 8001d78:	f005 fa88 	bl	800728c <DelayMicroSeconds>
    SCL_OPEN();                            // generate clock pulse on SCL
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <I2c_WriteByte+0xc0>)
 8001d7e:	2280      	movs	r2, #128	; 0x80
 8001d80:	0052      	lsls	r2, r2, #1
 8001d82:	619a      	str	r2, [r3, #24]
    DelayMicroSeconds(5);                  // SCL high time (t_HIGH)
 8001d84:	2005      	movs	r0, #5
 8001d86:	f005 fa81 	bl	800728c <DelayMicroSeconds>
    SCL_LOW();                             
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <I2c_WriteByte+0xc0>)
 8001d8c:	2280      	movs	r2, #128	; 0x80
 8001d8e:	0452      	lsls	r2, r2, #17
 8001d90:	619a      	str	r2, [r3, #24]
    DelayMicroSeconds(1);                  // data hold time(t_HD;DAT)
 8001d92:	2001      	movs	r0, #1
 8001d94:	f005 fa7a 	bl	800728c <DelayMicroSeconds>
  for(mask = 0x80; mask > 0; mask >>= 1) { // shift bit for masking (8 times)
 8001d98:	220f      	movs	r2, #15
 8001d9a:	18bb      	adds	r3, r7, r2
 8001d9c:	18ba      	adds	r2, r7, r2
 8001d9e:	7812      	ldrb	r2, [r2, #0]
 8001da0:	0852      	lsrs	r2, r2, #1
 8001da2:	701a      	strb	r2, [r3, #0]
 8001da4:	230f      	movs	r3, #15
 8001da6:	18fb      	adds	r3, r7, r3
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1d1      	bne.n	8001d52 <I2c_WriteByte+0x1e>
  }                                        
  SDA_OPEN();                              // release SDA-line
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <I2c_WriteByte+0xc0>)
 8001db0:	2280      	movs	r2, #128	; 0x80
 8001db2:	0092      	lsls	r2, r2, #2
 8001db4:	619a      	str	r2, [r3, #24]
  SCL_OPEN();                              // clk #9 for ack
 8001db6:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <I2c_WriteByte+0xc0>)
 8001db8:	2280      	movs	r2, #128	; 0x80
 8001dba:	0052      	lsls	r2, r2, #1
 8001dbc:	619a      	str	r2, [r3, #24]
  DelayMicroSeconds(1);                    // data set-up time (t_SU;DAT)
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	f005 fa64 	bl	800728c <DelayMicroSeconds>
  if(SDA_READ) error = ERROR_ACK;          // check ack from i2c slave
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <I2c_WriteByte+0xc0>)
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d003      	beq.n	8001dd8 <I2c_WriteByte+0xa4>
 8001dd0:	230e      	movs	r3, #14
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	701a      	strb	r2, [r3, #0]
  SCL_LOW();                               
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <I2c_WriteByte+0xc0>)
 8001dda:	2280      	movs	r2, #128	; 0x80
 8001ddc:	0452      	lsls	r2, r2, #17
 8001dde:	619a      	str	r2, [r3, #24]
  DelayMicroSeconds(20);                   // wait to see byte package on scope
 8001de0:	2014      	movs	r0, #20
 8001de2:	f005 fa53 	bl	800728c <DelayMicroSeconds>
  return error;                            // return error code
 8001de6:	230e      	movs	r3, #14
 8001de8:	18fb      	adds	r3, r7, r3
 8001dea:	781b      	ldrb	r3, [r3, #0]
}
 8001dec:	0018      	movs	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b004      	add	sp, #16
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	50000400 	.word	0x50000400

08001df8 <I2c_ReadByte>:

//-----------------------------------------------------------------------------
uint8_t I2c_ReadByte(etI2cAck ack)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	0002      	movs	r2, r0
 8001e00:	1dfb      	adds	r3, r7, #7
 8001e02:	701a      	strb	r2, [r3, #0]
  uint8_t mask;
  uint8_t rxByte = ERROR_NONE;
 8001e04:	230e      	movs	r3, #14
 8001e06:	18fb      	adds	r3, r7, r3
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
  SDA_OPEN();                              // release SDA-line
 8001e0c:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <I2c_ReadByte+0xdc>)
 8001e0e:	2280      	movs	r2, #128	; 0x80
 8001e10:	0092      	lsls	r2, r2, #2
 8001e12:	619a      	str	r2, [r3, #24]
  for(mask = 0x80; mask > 0; mask >>= 1) { // shift bit for masking (8 times)
 8001e14:	230f      	movs	r3, #15
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	2280      	movs	r2, #128	; 0x80
 8001e1a:	701a      	strb	r2, [r3, #0]
 8001e1c:	e02c      	b.n	8001e78 <I2c_ReadByte+0x80>
    SCL_OPEN();                            // generate clock pulse on SCL
 8001e1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ed4 <I2c_ReadByte+0xdc>)
 8001e20:	2280      	movs	r2, #128	; 0x80
 8001e22:	0052      	lsls	r2, r2, #1
 8001e24:	619a      	str	r2, [r3, #24]
    DelayMicroSeconds(1);                  // data set-up time (t_SU;DAT)
 8001e26:	2001      	movs	r0, #1
 8001e28:	f005 fa30 	bl	800728c <DelayMicroSeconds>
		while(SCL_READ == 0){}                 // wait while hold master
 8001e2c:	46c0      	nop			; (mov r8, r8)
 8001e2e:	4b29      	ldr	r3, [pc, #164]	; (8001ed4 <I2c_ReadByte+0xdc>)
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4013      	ands	r3, r2
 8001e38:	d0f9      	beq.n	8001e2e <I2c_ReadByte+0x36>
    DelayMicroSeconds(3);                  // SCL high time (t_HIGH)
 8001e3a:	2003      	movs	r0, #3
 8001e3c:	f005 fa26 	bl	800728c <DelayMicroSeconds>
    if(SDA_READ) rxByte = rxByte | mask;   // read bit
 8001e40:	4b24      	ldr	r3, [pc, #144]	; (8001ed4 <I2c_ReadByte+0xdc>)
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d008      	beq.n	8001e5e <I2c_ReadByte+0x66>
 8001e4c:	220e      	movs	r2, #14
 8001e4e:	18bb      	adds	r3, r7, r2
 8001e50:	18b9      	adds	r1, r7, r2
 8001e52:	220f      	movs	r2, #15
 8001e54:	18ba      	adds	r2, r7, r2
 8001e56:	7809      	ldrb	r1, [r1, #0]
 8001e58:	7812      	ldrb	r2, [r2, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	701a      	strb	r2, [r3, #0]
    SCL_LOW();                             
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <I2c_ReadByte+0xdc>)
 8001e60:	2280      	movs	r2, #128	; 0x80
 8001e62:	0452      	lsls	r2, r2, #17
 8001e64:	619a      	str	r2, [r3, #24]
    DelayMicroSeconds(1);                  // data hold time(t_HD;DAT)
 8001e66:	2001      	movs	r0, #1
 8001e68:	f005 fa10 	bl	800728c <DelayMicroSeconds>
  for(mask = 0x80; mask > 0; mask >>= 1) { // shift bit for masking (8 times)
 8001e6c:	220f      	movs	r2, #15
 8001e6e:	18bb      	adds	r3, r7, r2
 8001e70:	18ba      	adds	r2, r7, r2
 8001e72:	7812      	ldrb	r2, [r2, #0]
 8001e74:	0852      	lsrs	r2, r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
 8001e78:	230f      	movs	r3, #15
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1cd      	bne.n	8001e1e <I2c_ReadByte+0x26>
  }                                        
  if(ack == ACK) SDA_LOW();                // send acknowledge if necessary
 8001e82:	1dfb      	adds	r3, r7, #7
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d104      	bne.n	8001e94 <I2c_ReadByte+0x9c>
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <I2c_ReadByte+0xdc>)
 8001e8c:	2280      	movs	r2, #128	; 0x80
 8001e8e:	0492      	lsls	r2, r2, #18
 8001e90:	619a      	str	r2, [r3, #24]
 8001e92:	e003      	b.n	8001e9c <I2c_ReadByte+0xa4>
  else           SDA_OPEN();               
 8001e94:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <I2c_ReadByte+0xdc>)
 8001e96:	2280      	movs	r2, #128	; 0x80
 8001e98:	0092      	lsls	r2, r2, #2
 8001e9a:	619a      	str	r2, [r3, #24]
  DelayMicroSeconds(1);                    // data set-up time (t_SU;DAT)
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	f005 f9f5 	bl	800728c <DelayMicroSeconds>
  SCL_OPEN();                              // clk #9 for ack
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <I2c_ReadByte+0xdc>)
 8001ea4:	2280      	movs	r2, #128	; 0x80
 8001ea6:	0052      	lsls	r2, r2, #1
 8001ea8:	619a      	str	r2, [r3, #24]
  DelayMicroSeconds(5);                    // SCL high time (t_HIGH)
 8001eaa:	2005      	movs	r0, #5
 8001eac:	f005 f9ee 	bl	800728c <DelayMicroSeconds>
  SCL_LOW();                               
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <I2c_ReadByte+0xdc>)
 8001eb2:	2280      	movs	r2, #128	; 0x80
 8001eb4:	0452      	lsls	r2, r2, #17
 8001eb6:	619a      	str	r2, [r3, #24]
  SDA_OPEN();                              // release SDA-line
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <I2c_ReadByte+0xdc>)
 8001eba:	2280      	movs	r2, #128	; 0x80
 8001ebc:	0092      	lsls	r2, r2, #2
 8001ebe:	619a      	str	r2, [r3, #24]
  DelayMicroSeconds(20);                   // wait to see byte package on scope
 8001ec0:	2014      	movs	r0, #20
 8001ec2:	f005 f9e3 	bl	800728c <DelayMicroSeconds>
  return rxByte;                           // return error code
 8001ec6:	230e      	movs	r3, #14
 8001ec8:	18fb      	adds	r3, r7, r3
 8001eca:	781b      	ldrb	r3, [r3, #0]
}
 8001ecc:	0018      	movs	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	b004      	add	sp, #16
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	50000400 	.word	0x50000400

08001ed8 <getSf>:
typedef u4_t devaddr_t;

// RX quality (device)
enum { RSSI_OFF=64, SNR_SCALEUP=4 };

inline sf_t  getSf   (rps_t params)            { return   (sf_t)(params &  0x7); }
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	0002      	movs	r2, r0
 8001ee0:	1dbb      	adds	r3, r7, #6
 8001ee2:	801a      	strh	r2, [r3, #0]
 8001ee4:	1dbb      	adds	r3, r7, #6
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2207      	movs	r2, #7
 8001eec:	4013      	ands	r3, r2
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b002      	add	sp, #8
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <getBw>:
inline rps_t setSf   (rps_t params, sf_t sf)   { return (rps_t)((params & ~0x7) | sf); }
inline bw_t  getBw   (rps_t params)            { return  (bw_t)((params >> 3) & 0x3); }
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	0002      	movs	r2, r0
 8001f00:	1dbb      	adds	r3, r7, #6
 8001f02:	801a      	strh	r2, [r3, #0]
 8001f04:	1dbb      	adds	r3, r7, #6
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	08db      	lsrs	r3, r3, #3
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2203      	movs	r2, #3
 8001f10:	4013      	ands	r3, r2
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	0018      	movs	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b002      	add	sp, #8
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <getCr>:
inline rps_t setBw   (rps_t params, bw_t cr)   { return (rps_t)((params & ~0x18) | (cr<<3)); }
inline cr_t  getCr   (rps_t params)            { return  (cr_t)((params >> 5) & 0x3); }
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	0002      	movs	r2, r0
 8001f24:	1dbb      	adds	r3, r7, #6
 8001f26:	801a      	strh	r2, [r3, #0]
 8001f28:	1dbb      	adds	r3, r7, #6
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	095b      	lsrs	r3, r3, #5
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2203      	movs	r2, #3
 8001f34:	4013      	ands	r3, r2
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	0018      	movs	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b002      	add	sp, #8
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <setCr>:
inline rps_t setCr   (rps_t params, cr_t cr)   { return (rps_t)((params & ~0x60) | (cr<<5)); }
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	0002      	movs	r2, r0
 8001f48:	1dbb      	adds	r3, r7, #6
 8001f4a:	801a      	strh	r2, [r3, #0]
 8001f4c:	1d7b      	adds	r3, r7, #5
 8001f4e:	1c0a      	adds	r2, r1, #0
 8001f50:	701a      	strb	r2, [r3, #0]
 8001f52:	1dbb      	adds	r3, r7, #6
 8001f54:	2200      	movs	r2, #0
 8001f56:	5e9b      	ldrsh	r3, [r3, r2]
 8001f58:	2260      	movs	r2, #96	; 0x60
 8001f5a:	4393      	bics	r3, r2
 8001f5c:	b21a      	sxth	r2, r3
 8001f5e:	1d7b      	adds	r3, r7, #5
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	015b      	lsls	r3, r3, #5
 8001f64:	b21b      	sxth	r3, r3
 8001f66:	4313      	orrs	r3, r2
 8001f68:	b21b      	sxth	r3, r3
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b002      	add	sp, #8
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <getNocrc>:
inline int   getNocrc(rps_t params)            { return        ((params >> 7) & 0x1); }
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	0002      	movs	r2, r0
 8001f7c:	1dbb      	adds	r3, r7, #6
 8001f7e:	801a      	strh	r2, [r3, #0]
 8001f80:	1dbb      	adds	r3, r7, #6
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	09db      	lsrs	r3, r3, #7
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	001a      	movs	r2, r3
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	0018      	movs	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b002      	add	sp, #8
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <setNocrc>:
inline rps_t setNocrc(rps_t params, int nocrc) { return (rps_t)((params & ~0x80) | (nocrc<<7)); }
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	0002      	movs	r2, r0
 8001f9e:	6039      	str	r1, [r7, #0]
 8001fa0:	1dbb      	adds	r3, r7, #6
 8001fa2:	801a      	strh	r2, [r3, #0]
 8001fa4:	1dbb      	adds	r3, r7, #6
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	5e9b      	ldrsh	r3, [r3, r2]
 8001faa:	2280      	movs	r2, #128	; 0x80
 8001fac:	4393      	bics	r3, r2
 8001fae:	b21a      	sxth	r2, r3
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	01db      	lsls	r3, r3, #7
 8001fb4:	b21b      	sxth	r3, r3
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	b21b      	sxth	r3, r3
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b002      	add	sp, #8
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <getIh>:
inline int   getIh   (rps_t params)            { return        ((params >> 8) & 0xFF); }
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	0002      	movs	r2, r0
 8001fcc:	1dbb      	adds	r3, r7, #6
 8001fce:	801a      	strh	r2, [r3, #0]
 8001fd0:	1dbb      	adds	r3, r7, #6
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	001a      	movs	r2, r3
 8001fda:	23ff      	movs	r3, #255	; 0xff
 8001fdc:	4013      	ands	r3, r2
 8001fde:	0018      	movs	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b002      	add	sp, #8
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <setIh>:
inline rps_t setIh   (rps_t params, int ih)    { return (rps_t)((params & ~0xFF00) | (ih<<8)); }
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	0002      	movs	r2, r0
 8001fee:	6039      	str	r1, [r7, #0]
 8001ff0:	1dbb      	adds	r3, r7, #6
 8001ff2:	801a      	strh	r2, [r3, #0]
 8001ff4:	1dbb      	adds	r3, r7, #6
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	5e9b      	ldrsh	r3, [r3, r2]
 8001ffa:	22ff      	movs	r2, #255	; 0xff
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	b21a      	sxth	r2, r3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	b21b      	sxth	r3, r3
 8002006:	4313      	orrs	r3, r2
 8002008:	b21b      	sxth	r3, r3
 800200a:	b29b      	uxth	r3, r3
 800200c:	0018      	movs	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	b002      	add	sp, #8
 8002012:	bd80      	pop	{r7, pc}

08002014 <updr2rps>:
#define MAKERPS(sf,bw,cr,ih,nocrc) ((rps_t)((sf) | ((bw)<<3) | ((cr)<<5) | ((nocrc)?(1<<7):0) | ((ih&0xFF)<<8)))
// Two frames with params r1/r2 would interfere on air: same SFx + BWx 
inline int sameSfBw(rps_t r1, rps_t r2) { return ((r1^r2)&0x1F) == 0; }

extern const u1_t _DR2RPS_CRC[];
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	0002      	movs	r2, r0
 800201c:	1dfb      	adds	r3, r7, #7
 800201e:	701a      	strb	r2, [r3, #0]
 8002020:	1dfb      	adds	r3, r7, #7
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	3301      	adds	r3, #1
 8002026:	4a03      	ldr	r2, [pc, #12]	; (8002034 <updr2rps+0x20>)
 8002028:	5cd3      	ldrb	r3, [r2, r3]
 800202a:	b29b      	uxth	r3, r3
 800202c:	0018      	movs	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	b002      	add	sp, #8
 8002032:	bd80      	pop	{r7, pc}
 8002034:	0800df1c 	.word	0x0800df1c

08002038 <dndr2rps>:
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	0002      	movs	r2, r0
 8002040:	1dfb      	adds	r3, r7, #7
 8002042:	701a      	strb	r2, [r3, #0]
 8002044:	1dfb      	adds	r3, r7, #7
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	0018      	movs	r0, r3
 800204a:	f7ff ffe3 	bl	8002014 <updr2rps>
 800204e:	0003      	movs	r3, r0
 8002050:	2101      	movs	r1, #1
 8002052:	0018      	movs	r0, r3
 8002054:	f7ff ff9f 	bl	8001f96 <setNocrc>
 8002058:	0003      	movs	r3, r0
 800205a:	0018      	movs	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	b002      	add	sp, #8
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <decDR>:
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	0002      	movs	r2, r0
 800206c:	1dfb      	adds	r3, r7, #7
 800206e:	701a      	strb	r2, [r3, #0]
 8002070:	1dfb      	adds	r3, r7, #7
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4a07      	ldr	r2, [pc, #28]	; (8002094 <decDR+0x30>)
 8002076:	5cd3      	ldrb	r3, [r2, r3]
 8002078:	2bff      	cmp	r3, #255	; 0xff
 800207a:	d004      	beq.n	8002086 <decDR+0x22>
 800207c:	1dfb      	adds	r3, r7, #7
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	3b01      	subs	r3, #1
 8002082:	b2db      	uxtb	r3, r3
 8002084:	e001      	b.n	800208a <decDR+0x26>
 8002086:	1dfb      	adds	r3, r7, #7
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	0018      	movs	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	b002      	add	sp, #8
 8002090:	bd80      	pop	{r7, pc}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	0800df1c 	.word	0x0800df1c

08002098 <validDR>:
inline dr_t  assertDR (dr_t dr) { return _DR2RPS_CRC[dr+1]==ILLEGAL_RPS ? DR_DFLTMIN : dr; }   // force into a valid DR
inline bit_t validDR  (dr_t dr) { return _DR2RPS_CRC[dr+1]!=ILLEGAL_RPS; } // in range
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	0002      	movs	r2, r0
 80020a0:	1dfb      	adds	r3, r7, #7
 80020a2:	701a      	strb	r2, [r3, #0]
 80020a4:	1dfb      	adds	r3, r7, #7
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	3301      	adds	r3, #1
 80020aa:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <validDR+0x28>)
 80020ac:	5cd3      	ldrb	r3, [r2, r3]
 80020ae:	3bff      	subs	r3, #255	; 0xff
 80020b0:	1e5a      	subs	r2, r3, #1
 80020b2:	4193      	sbcs	r3, r2
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	0018      	movs	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	b002      	add	sp, #8
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	0800df1c 	.word	0x0800df1c

080020c4 <lowerDR>:
inline dr_t  lowerDR  (dr_t dr, u1_t n) { while(n--){dr=decDR(dr);} return dr; } // decrease data rate by n steps
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	0002      	movs	r2, r0
 80020cc:	1dfb      	adds	r3, r7, #7
 80020ce:	701a      	strb	r2, [r3, #0]
 80020d0:	1dbb      	adds	r3, r7, #6
 80020d2:	1c0a      	adds	r2, r1, #0
 80020d4:	701a      	strb	r2, [r3, #0]
 80020d6:	e007      	b.n	80020e8 <lowerDR+0x24>
 80020d8:	1dfc      	adds	r4, r7, #7
 80020da:	1dfb      	adds	r3, r7, #7
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	0018      	movs	r0, r3
 80020e0:	f7ff ffc0 	bl	8002064 <decDR>
 80020e4:	0003      	movs	r3, r0
 80020e6:	7023      	strb	r3, [r4, #0]
 80020e8:	1dbb      	adds	r3, r7, #6
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	1dba      	adds	r2, r7, #6
 80020ee:	1e59      	subs	r1, r3, #1
 80020f0:	7011      	strb	r1, [r2, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <lowerDR+0x14>
 80020f6:	1dfb      	adds	r3, r7, #7
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	0018      	movs	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b003      	add	sp, #12
 8002100:	bd90      	pop	{r4, r7, pc}

08002102 <os_rlsbf2>:
// BEG OS - default implementations for certain OS suport functions

#if !defined(HAS_os_calls)

#if !defined(os_rlsbf2)
u2_t os_rlsbf2 (xref2cu1_t buf) {
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
    return (u2_t)(buf[0] | (buf[1]<<8));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	b21a      	sxth	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3301      	adds	r3, #1
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	b21b      	sxth	r3, r3
 800211a:	4313      	orrs	r3, r2
 800211c:	b21b      	sxth	r3, r3
 800211e:	b29b      	uxth	r3, r3
}
 8002120:	0018      	movs	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	b002      	add	sp, #8
 8002126:	bd80      	pop	{r7, pc}

08002128 <os_rlsbf4>:
#endif

#if !defined(os_rlsbf4)
u4_t os_rlsbf4 (xref2cu1_t buf) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
    return (u4_t)(buf[0] | (buf[1]<<8) | ((u4_t)buf[2]<<16) | ((u4_t)buf[3]<<24));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	001a      	movs	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3301      	adds	r3, #1
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	021b      	lsls	r3, r3, #8
 800213e:	4313      	orrs	r3, r2
 8002140:	001a      	movs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3302      	adds	r3, #2
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	041b      	lsls	r3, r3, #16
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3303      	adds	r3, #3
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	061b      	lsls	r3, r3, #24
 8002154:	4313      	orrs	r3, r2
}
 8002156:	0018      	movs	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	b002      	add	sp, #8
 800215c:	bd80      	pop	{r7, pc}

0800215e <os_rmsbf4>:
#endif


#if !defined(os_rmsbf4)
u4_t os_rmsbf4 (xref2cu1_t buf) {
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
    return (u4_t)(buf[3] | (buf[2]<<8) | ((u4_t)buf[1]<<16) | ((u4_t)buf[0]<<24));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3303      	adds	r3, #3
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	001a      	movs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3302      	adds	r3, #2
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	021b      	lsls	r3, r3, #8
 8002176:	4313      	orrs	r3, r2
 8002178:	001a      	movs	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3301      	adds	r3, #1
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	041b      	lsls	r3, r3, #16
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	061b      	lsls	r3, r3, #24
 800218a:	4313      	orrs	r3, r2
}
 800218c:	0018      	movs	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	b002      	add	sp, #8
 8002192:	bd80      	pop	{r7, pc}

08002194 <os_wlsbf2>:
#endif


#if !defined(os_wlsbf2)
void os_wlsbf2 (xref2u1_t buf, u2_t v) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	000a      	movs	r2, r1
 800219e:	1cbb      	adds	r3, r7, #2
 80021a0:	801a      	strh	r2, [r3, #0]
    buf[0] = v;
 80021a2:	1cbb      	adds	r3, r7, #2
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 80021ac:	1cbb      	adds	r3, r7, #2
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	0a1b      	lsrs	r3, r3, #8
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3301      	adds	r3, #1
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	701a      	strb	r2, [r3, #0]
}
 80021bc:	46c0      	nop			; (mov r8, r8)
 80021be:	46bd      	mov	sp, r7
 80021c0:	b002      	add	sp, #8
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <os_wlsbf4>:
#endif

#if !defined(os_wlsbf4)
void os_wlsbf4 (xref2u1_t buf, u4_t v) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
    buf[0] = v;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	0a1a      	lsrs	r2, r3, #8
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3301      	adds	r3, #1
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>16;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	0c1a      	lsrs	r2, r3, #16
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3302      	adds	r3, #2
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	701a      	strb	r2, [r3, #0]
    buf[3] = v>>24;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	0e1a      	lsrs	r2, r3, #24
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3303      	adds	r3, #3
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	701a      	strb	r2, [r3, #0]
}
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	46bd      	mov	sp, r7
 80021fe:	b002      	add	sp, #8
 8002200:	bd80      	pop	{r7, pc}

08002202 <os_wmsbf4>:
#endif

#if !defined(os_wmsbf4)
void os_wmsbf4 (xref2u1_t buf, u4_t v) {
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
    buf[3] = v;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3303      	adds	r3, #3
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>8;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	0a1a      	lsrs	r2, r3, #8
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3302      	adds	r3, #2
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>16;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	0c1a      	lsrs	r2, r3, #16
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3301      	adds	r3, #1
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	701a      	strb	r2, [r3, #0]
    buf[0] = v>>24;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	0e1b      	lsrs	r3, r3, #24
 8002232:	b2da      	uxtb	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	701a      	strb	r2, [r3, #0]
}
 8002238:	46c0      	nop			; (mov r8, r8)
 800223a:	46bd      	mov	sp, r7
 800223c:	b002      	add	sp, #8
 800223e:	bd80      	pop	{r7, pc}

08002240 <os_getBattLevel>:
#endif

#if !defined(os_getBattLevel)
u1_t os_getBattLevel (void) {
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
    return MCMD_DEVS_BATT_NOINFO;
 8002244:	23ff      	movs	r3, #255	; 0xff
}
 8002246:	0018      	movs	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <os_crc16>:
#endif

#if !defined(os_crc16)
// New CRC-16 CCITT(XMODEM) checksum for beacons:
u2_t os_crc16 (xref2u1_t data, uint len) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
    u2_t remainder = 0;
 8002256:	2316      	movs	r3, #22
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	2200      	movs	r2, #0
 800225c:	801a      	strh	r2, [r3, #0]
    u2_t polynomial = 0x1021;
 800225e:	230c      	movs	r3, #12
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	4a25      	ldr	r2, [pc, #148]	; (80022f8 <os_crc16+0xac>)
 8002264:	801a      	strh	r2, [r3, #0]
    for( uint i = 0; i < len; i++ ) {
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	e039      	b.n	80022e0 <os_crc16+0x94>
        remainder ^= data[i] << 8;
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	18d3      	adds	r3, r2, r3
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	b21a      	sxth	r2, r3
 8002278:	2116      	movs	r1, #22
 800227a:	187b      	adds	r3, r7, r1
 800227c:	2000      	movs	r0, #0
 800227e:	5e1b      	ldrsh	r3, [r3, r0]
 8002280:	4053      	eors	r3, r2
 8002282:	b21a      	sxth	r2, r3
 8002284:	187b      	adds	r3, r7, r1
 8002286:	801a      	strh	r2, [r3, #0]
        for( u1_t bit = 8; bit > 0; bit--) {
 8002288:	230f      	movs	r3, #15
 800228a:	18fb      	adds	r3, r7, r3
 800228c:	2208      	movs	r2, #8
 800228e:	701a      	strb	r2, [r3, #0]
 8002290:	e01e      	b.n	80022d0 <os_crc16+0x84>
            if( (remainder & 0x8000) )
 8002292:	2116      	movs	r1, #22
 8002294:	187b      	adds	r3, r7, r1
 8002296:	2200      	movs	r2, #0
 8002298:	5e9b      	ldrsh	r3, [r3, r2]
 800229a:	2b00      	cmp	r3, #0
 800229c:	da0c      	bge.n	80022b8 <os_crc16+0x6c>
                remainder = (remainder << 1) ^ polynomial;
 800229e:	187b      	adds	r3, r7, r1
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	b21a      	sxth	r2, r3
 80022a6:	230c      	movs	r3, #12
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	2000      	movs	r0, #0
 80022ac:	5e1b      	ldrsh	r3, [r3, r0]
 80022ae:	4053      	eors	r3, r2
 80022b0:	b21a      	sxth	r2, r3
 80022b2:	187b      	adds	r3, r7, r1
 80022b4:	801a      	strh	r2, [r3, #0]
 80022b6:	e005      	b.n	80022c4 <os_crc16+0x78>
            else 
                remainder <<= 1;
 80022b8:	2316      	movs	r3, #22
 80022ba:	18fa      	adds	r2, r7, r3
 80022bc:	18fb      	adds	r3, r7, r3
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	18db      	adds	r3, r3, r3
 80022c2:	8013      	strh	r3, [r2, #0]
        for( u1_t bit = 8; bit > 0; bit--) {
 80022c4:	210f      	movs	r1, #15
 80022c6:	187b      	adds	r3, r7, r1
 80022c8:	781a      	ldrb	r2, [r3, #0]
 80022ca:	187b      	adds	r3, r7, r1
 80022cc:	3a01      	subs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
 80022d0:	230f      	movs	r3, #15
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1db      	bne.n	8002292 <os_crc16+0x46>
    for( uint i = 0; i < len; i++ ) {
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	3301      	adds	r3, #1
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d3c1      	bcc.n	800226c <os_crc16+0x20>
        }
    }
    return remainder;
 80022e8:	2316      	movs	r3, #22
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	881b      	ldrh	r3, [r3, #0]
}
 80022ee:	0018      	movs	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b006      	add	sp, #24
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	00001021 	.word	0x00001021

080022fc <micB0>:
// ================================================================================

// ================================================================================
// BEG AES

static void micB0 (u4_t devaddr, u4_t seqno, int dndir, int len) {
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	603b      	str	r3, [r7, #0]
    os_clearMem(AESaux,16);
 800230a:	4b11      	ldr	r3, [pc, #68]	; (8002350 <micB0+0x54>)
 800230c:	2210      	movs	r2, #16
 800230e:	2100      	movs	r1, #0
 8002310:	0018      	movs	r0, r3
 8002312:	f00a faa4 	bl	800c85e <memset>
    AESaux[0]  = 0x49;
 8002316:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <micB0+0x54>)
 8002318:	2249      	movs	r2, #73	; 0x49
 800231a:	701a      	strb	r2, [r3, #0]
    AESaux[5]  = dndir?1:0;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	1e5a      	subs	r2, r3, #1
 8002320:	4193      	sbcs	r3, r2
 8002322:	b2da      	uxtb	r2, r3
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <micB0+0x58>)
 8002326:	701a      	strb	r2, [r3, #0]
    AESaux[15] = len;
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <micB0+0x5c>)
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 8002330:	4b0a      	ldr	r3, [pc, #40]	; (800235c <micB0+0x60>)
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	0011      	movs	r1, r2
 8002336:	0018      	movs	r0, r3
 8002338:	f7ff ff44 	bl	80021c4 <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <micB0+0x64>)
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	0011      	movs	r1, r2
 8002342:	0018      	movs	r0, r3
 8002344:	f7ff ff3e 	bl	80021c4 <os_wlsbf4>
}
 8002348:	46c0      	nop			; (mov r8, r8)
 800234a:	46bd      	mov	sp, r7
 800234c:	b004      	add	sp, #16
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20000154 	.word	0x20000154
 8002354:	20000159 	.word	0x20000159
 8002358:	20000163 	.word	0x20000163
 800235c:	2000015a 	.word	0x2000015a
 8002360:	2000015e 	.word	0x2000015e

08002364 <aes_verifyMic>:


static int aes_verifyMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	68b8      	ldr	r0, [r7, #8]
 800237a:	f7ff ffbf 	bl	80022fc <micB0>
    os_copyMem(AESkey,key,16);
 800237e:	68f9      	ldr	r1, [r7, #12]
 8002380:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <aes_verifyMic+0x54>)
 8002382:	2210      	movs	r2, #16
 8002384:	0018      	movs	r0, r3
 8002386:	f00a fa61 	bl	800c84c <memcpy>
    return os_aes(AES_MIC, pdu, len) == os_rmsbf4(pdu+len);
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	b29a      	uxth	r2, r3
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	0019      	movs	r1, r3
 8002392:	2002      	movs	r0, #2
 8002394:	f7fe fcbe 	bl	8000d14 <os_aes>
 8002398:	0004      	movs	r4, r0
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	6a3a      	ldr	r2, [r7, #32]
 800239e:	18d3      	adds	r3, r2, r3
 80023a0:	0018      	movs	r0, r3
 80023a2:	f7ff fedc 	bl	800215e <os_rmsbf4>
 80023a6:	0003      	movs	r3, r0
 80023a8:	1ae3      	subs	r3, r4, r3
 80023aa:	425a      	negs	r2, r3
 80023ac:	4153      	adcs	r3, r2
 80023ae:	b2db      	uxtb	r3, r3
}
 80023b0:	0018      	movs	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b005      	add	sp, #20
 80023b6:	bd90      	pop	{r4, r7, pc}
 80023b8:	200000a4 	.word	0x200000a4

080023bc <aes_appendMic>:


static void aes_appendMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
 80023c8:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	68b8      	ldr	r0, [r7, #8]
 80023d2:	f7ff ff93 	bl	80022fc <micB0>
    os_copyMem(AESkey,key,16);
 80023d6:	68f9      	ldr	r1, [r7, #12]
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <aes_appendMic+0x4c>)
 80023da:	2210      	movs	r2, #16
 80023dc:	0018      	movs	r0, r3
 80023de:	f00a fa35 	bl	800c84c <memcpy>
    // MSB because of internal structure of AES
    os_wmsbf4(pdu+len, os_aes(AES_MIC, pdu, len));
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	6a3a      	ldr	r2, [r7, #32]
 80023e6:	18d4      	adds	r4, r2, r3
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	0019      	movs	r1, r3
 80023f0:	2002      	movs	r0, #2
 80023f2:	f7fe fc8f 	bl	8000d14 <os_aes>
 80023f6:	0003      	movs	r3, r0
 80023f8:	0019      	movs	r1, r3
 80023fa:	0020      	movs	r0, r4
 80023fc:	f7ff ff01 	bl	8002202 <os_wmsbf4>
}
 8002400:	46c0      	nop			; (mov r8, r8)
 8002402:	46bd      	mov	sp, r7
 8002404:	b005      	add	sp, #20
 8002406:	bd90      	pop	{r4, r7, pc}
 8002408:	200000a4 	.word	0x200000a4

0800240c <aes_appendMic0>:


static void aes_appendMic0 (xref2u1_t pdu, int len) {
 800240c:	b590      	push	{r4, r7, lr}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <aes_appendMic0+0x38>)
 8002418:	0018      	movs	r0, r3
 800241a:	f003 f8b5 	bl	8005588 <os_getDevKey>
    os_wmsbf4(pdu+len, os_aes(AES_MIC|AES_MICNOAUX, pdu, len));  // MSB because of internal structure of AES
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	18d4      	adds	r4, r2, r3
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	b29a      	uxth	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	0019      	movs	r1, r3
 800242c:	200a      	movs	r0, #10
 800242e:	f7fe fc71 	bl	8000d14 <os_aes>
 8002432:	0003      	movs	r3, r0
 8002434:	0019      	movs	r1, r3
 8002436:	0020      	movs	r0, r4
 8002438:	f7ff fee3 	bl	8002202 <os_wmsbf4>
}
 800243c:	46c0      	nop			; (mov r8, r8)
 800243e:	46bd      	mov	sp, r7
 8002440:	b003      	add	sp, #12
 8002442:	bd90      	pop	{r4, r7, pc}
 8002444:	200000a4 	.word	0x200000a4

08002448 <aes_verifyMic0>:


static int aes_verifyMic0 (xref2u1_t pdu, int len) {
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 8002452:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <aes_verifyMic0+0x40>)
 8002454:	0018      	movs	r0, r3
 8002456:	f003 f897 	bl	8005588 <os_getDevKey>
    return os_aes(AES_MIC|AES_MICNOAUX, pdu, len) == os_rmsbf4(pdu+len);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	b29a      	uxth	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	0019      	movs	r1, r3
 8002462:	200a      	movs	r0, #10
 8002464:	f7fe fc56 	bl	8000d14 <os_aes>
 8002468:	0004      	movs	r4, r0
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	18d3      	adds	r3, r2, r3
 8002470:	0018      	movs	r0, r3
 8002472:	f7ff fe74 	bl	800215e <os_rmsbf4>
 8002476:	0003      	movs	r3, r0
 8002478:	1ae3      	subs	r3, r4, r3
 800247a:	425a      	negs	r2, r3
 800247c:	4153      	adcs	r3, r2
 800247e:	b2db      	uxtb	r3, r3
}
 8002480:	0018      	movs	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	b003      	add	sp, #12
 8002486:	bd90      	pop	{r4, r7, pc}
 8002488:	200000a4 	.word	0x200000a4

0800248c <aes_encrypt>:


static void aes_encrypt (xref2u1_t pdu, int len) {
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 8002496:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <aes_encrypt+0x28>)
 8002498:	0018      	movs	r0, r3
 800249a:	f003 f875 	bl	8005588 <os_getDevKey>
    os_aes(AES_ENC, pdu, len);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	0019      	movs	r1, r3
 80024a6:	2000      	movs	r0, #0
 80024a8:	f7fe fc34 	bl	8000d14 <os_aes>
}
 80024ac:	46c0      	nop			; (mov r8, r8)
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b002      	add	sp, #8
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	200000a4 	.word	0x200000a4

080024b8 <aes_cipher>:


static void aes_cipher (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t payload, int len) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
    if( len <= 0 )
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	dd2b      	ble.n	8002524 <aes_cipher+0x6c>
        return;
    os_clearMem(AESaux, 16);
 80024cc:	4b17      	ldr	r3, [pc, #92]	; (800252c <aes_cipher+0x74>)
 80024ce:	2210      	movs	r2, #16
 80024d0:	2100      	movs	r1, #0
 80024d2:	0018      	movs	r0, r3
 80024d4:	f00a f9c3 	bl	800c85e <memset>
    AESaux[0] = AESaux[15] = 1; // mode=cipher / dir=down / block counter=1
 80024d8:	4b15      	ldr	r3, [pc, #84]	; (8002530 <aes_cipher+0x78>)
 80024da:	2201      	movs	r2, #1
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	4a13      	ldr	r2, [pc, #76]	; (800252c <aes_cipher+0x74>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	7013      	strb	r3, [r2, #0]
    AESaux[5] = dndir?1:0;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	1e5a      	subs	r2, r3, #1
 80024e8:	4193      	sbcs	r3, r2
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <aes_cipher+0x7c>)
 80024ee:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 80024f0:	4b11      	ldr	r3, [pc, #68]	; (8002538 <aes_cipher+0x80>)
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	0011      	movs	r1, r2
 80024f6:	0018      	movs	r0, r3
 80024f8:	f7ff fe64 	bl	80021c4 <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <aes_cipher+0x84>)
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	0011      	movs	r1, r2
 8002502:	0018      	movs	r0, r3
 8002504:	f7ff fe5e 	bl	80021c4 <os_wlsbf4>
    os_copyMem(AESkey,key,16);
 8002508:	68f9      	ldr	r1, [r7, #12]
 800250a:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <aes_cipher+0x88>)
 800250c:	2210      	movs	r2, #16
 800250e:	0018      	movs	r0, r3
 8002510:	f00a f99c 	bl	800c84c <memcpy>
    os_aes(AES_CTR, payload, len);
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	b29a      	uxth	r2, r3
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	0019      	movs	r1, r3
 800251c:	2004      	movs	r0, #4
 800251e:	f7fe fbf9 	bl	8000d14 <os_aes>
 8002522:	e000      	b.n	8002526 <aes_cipher+0x6e>
        return;
 8002524:	46c0      	nop			; (mov r8, r8)
}
 8002526:	46bd      	mov	sp, r7
 8002528:	b004      	add	sp, #16
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000154 	.word	0x20000154
 8002530:	20000163 	.word	0x20000163
 8002534:	20000159 	.word	0x20000159
 8002538:	2000015a 	.word	0x2000015a
 800253c:	2000015e 	.word	0x2000015e
 8002540:	200000a4 	.word	0x200000a4

08002544 <aes_sessKeys>:


static void aes_sessKeys (u2_t devnonce, xref2cu1_t artnonce, xref2u1_t nwkkey, xref2u1_t artkey) {
 8002544:	b590      	push	{r4, r7, lr}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	240e      	movs	r4, #14
 8002552:	193b      	adds	r3, r7, r4
 8002554:	1c02      	adds	r2, r0, #0
 8002556:	801a      	strh	r2, [r3, #0]
    os_clearMem(nwkkey, 16);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2210      	movs	r2, #16
 800255c:	2100      	movs	r1, #0
 800255e:	0018      	movs	r0, r3
 8002560:	f00a f97d 	bl	800c85e <memset>
    nwkkey[0] = 0x01;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]
    os_copyMem(nwkkey+1, artnonce, LEN_ARTNONCE+LEN_NETID);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3301      	adds	r3, #1
 800256e:	68b9      	ldr	r1, [r7, #8]
 8002570:	2206      	movs	r2, #6
 8002572:	0018      	movs	r0, r3
 8002574:	f00a f96a 	bl	800c84c <memcpy>
    os_wlsbf2(nwkkey+1+LEN_ARTNONCE+LEN_NETID, devnonce);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	1dda      	adds	r2, r3, #7
 800257c:	193b      	adds	r3, r7, r4
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	0019      	movs	r1, r3
 8002582:	0010      	movs	r0, r2
 8002584:	f7ff fe06 	bl	8002194 <os_wlsbf2>
    os_copyMem(artkey, nwkkey, 16);
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2210      	movs	r2, #16
 800258e:	0018      	movs	r0, r3
 8002590:	f00a f95c 	bl	800c84c <memcpy>
    artkey[0] = 0x02;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2202      	movs	r2, #2
 8002598:	701a      	strb	r2, [r3, #0]

    os_getDevKey(AESkey);
 800259a:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <aes_sessKeys+0x88>)
 800259c:	0018      	movs	r0, r3
 800259e:	f002 fff3 	bl	8005588 <os_getDevKey>
    os_aes(AES_ENC, nwkkey, 16);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2210      	movs	r2, #16
 80025a6:	0019      	movs	r1, r3
 80025a8:	2000      	movs	r0, #0
 80025aa:	f7fe fbb3 	bl	8000d14 <os_aes>
    os_getDevKey(AESkey);
 80025ae:	4b07      	ldr	r3, [pc, #28]	; (80025cc <aes_sessKeys+0x88>)
 80025b0:	0018      	movs	r0, r3
 80025b2:	f002 ffe9 	bl	8005588 <os_getDevKey>
    os_aes(AES_ENC, artkey, 16);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2210      	movs	r2, #16
 80025ba:	0019      	movs	r1, r3
 80025bc:	2000      	movs	r0, #0
 80025be:	f7fe fba9 	bl	8000d14 <os_aes>
}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	46bd      	mov	sp, r7
 80025c6:	b005      	add	sp, #20
 80025c8:	bd90      	pop	{r4, r7, pc}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	200000a4 	.word	0x200000a4

080025d0 <getSensitivity>:
    { 141-135,  141-132, 141-129 },  // SF10
    { 141-138,  141-135, 141-132 },  // SF11
    { 141-141,  141-138, 141-135 }   // SF12
};

int getSensitivity (rps_t rps) {
 80025d0:	b590      	push	{r4, r7, lr}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	0002      	movs	r2, r0
 80025d8:	1dbb      	adds	r3, r7, #6
 80025da:	801a      	strh	r2, [r3, #0]
    return -141 + SENSITIVITY[getSf(rps)][getBw(rps)];
 80025dc:	1dbb      	adds	r3, r7, #6
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	0018      	movs	r0, r3
 80025e2:	f7ff fc79 	bl	8001ed8 <getSf>
 80025e6:	0003      	movs	r3, r0
 80025e8:	001c      	movs	r4, r3
 80025ea:	1dbb      	adds	r3, r7, #6
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	0018      	movs	r0, r3
 80025f0:	f7ff fc82 	bl	8001ef8 <getBw>
 80025f4:	0003      	movs	r3, r0
 80025f6:	0019      	movs	r1, r3
 80025f8:	4a05      	ldr	r2, [pc, #20]	; (8002610 <getSensitivity+0x40>)
 80025fa:	0023      	movs	r3, r4
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	191b      	adds	r3, r3, r4
 8002600:	18d3      	adds	r3, r2, r3
 8002602:	5c5b      	ldrb	r3, [r3, r1]
 8002604:	3b8d      	subs	r3, #141	; 0x8d
}
 8002606:	0018      	movs	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	b003      	add	sp, #12
 800260c:	bd90      	pop	{r4, r7, pc}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	0800df38 	.word	0x0800df38

08002614 <calcAirTime>:

ostime_t calcAirTime (rps_t rps, u1_t plen) {
 8002614:	b5b0      	push	{r4, r5, r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	0002      	movs	r2, r0
 800261c:	1dbb      	adds	r3, r7, #6
 800261e:	801a      	strh	r2, [r3, #0]
 8002620:	1d7b      	adds	r3, r7, #5
 8002622:	1c0a      	adds	r2, r1, #0
 8002624:	701a      	strb	r2, [r3, #0]
    u1_t bw = getBw(rps);  // 0,1,2 = 125,250,500kHz
 8002626:	230b      	movs	r3, #11
 8002628:	18fc      	adds	r4, r7, r3
 800262a:	1dbb      	adds	r3, r7, #6
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	0018      	movs	r0, r3
 8002630:	f7ff fc62 	bl	8001ef8 <getBw>
 8002634:	0003      	movs	r3, r0
 8002636:	7023      	strb	r3, [r4, #0]
    u1_t sf = getSf(rps);  // 0=FSK, 1..6 = SF7..12
 8002638:	250a      	movs	r5, #10
 800263a:	197c      	adds	r4, r7, r5
 800263c:	1dbb      	adds	r3, r7, #6
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	0018      	movs	r0, r3
 8002642:	f7ff fc49 	bl	8001ed8 <getSf>
 8002646:	0003      	movs	r3, r0
 8002648:	7023      	strb	r3, [r4, #0]
    if( sf == FSK ) {
 800264a:	197b      	adds	r3, r7, r5
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10f      	bne.n	8002672 <calcAirTime+0x5e>
        return (plen+/*preamble*/5+/*syncword*/3+/*len*/1+/*crc*/2) * /*bits/byte*/8
 8002652:	1d7b      	adds	r3, r7, #5
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	330b      	adds	r3, #11
 8002658:	001a      	movs	r2, r3
            * (s4_t)OSTICKS_PER_SEC / /*kbit/s*/50000;
 800265a:	0013      	movs	r3, r2
 800265c:	015b      	lsls	r3, r3, #5
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	189b      	adds	r3, r3, r2
 8002664:	02db      	lsls	r3, r3, #11
 8002666:	494c      	ldr	r1, [pc, #304]	; (8002798 <calcAirTime+0x184>)
 8002668:	0018      	movs	r0, r3
 800266a:	f7fd fdd7 	bl	800021c <__divsi3>
 800266e:	0003      	movs	r3, r0
 8002670:	e08d      	b.n	800278e <calcAirTime+0x17a>
    }
    u1_t sfx = 4*(sf+(7-SF7));
 8002672:	210a      	movs	r1, #10
 8002674:	187b      	adds	r3, r7, r1
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	3306      	adds	r3, #6
 800267a:	b2da      	uxtb	r2, r3
 800267c:	2317      	movs	r3, #23
 800267e:	18fb      	adds	r3, r7, r3
 8002680:	0092      	lsls	r2, r2, #2
 8002682:	701a      	strb	r2, [r3, #0]
    u1_t q = sfx - (sf >= SF11 ? 8 : 0);
 8002684:	187b      	adds	r3, r7, r1
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b04      	cmp	r3, #4
 800268a:	d901      	bls.n	8002690 <calcAirTime+0x7c>
 800268c:	2308      	movs	r3, #8
 800268e:	e000      	b.n	8002692 <calcAirTime+0x7e>
 8002690:	2300      	movs	r3, #0
 8002692:	2209      	movs	r2, #9
 8002694:	18ba      	adds	r2, r7, r2
 8002696:	2017      	movs	r0, #23
 8002698:	1839      	adds	r1, r7, r0
 800269a:	7809      	ldrb	r1, [r1, #0]
 800269c:	1acb      	subs	r3, r1, r3
 800269e:	7013      	strb	r3, [r2, #0]
    int tmp = 8*plen - sfx + 28 + (getNocrc(rps)?0:16) - (getIh(rps)?20:0);
 80026a0:	1d7b      	adds	r3, r7, #5
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	00da      	lsls	r2, r3, #3
 80026a6:	183b      	adds	r3, r7, r0
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	331c      	adds	r3, #28
 80026ae:	001c      	movs	r4, r3
 80026b0:	1dbb      	adds	r3, r7, #6
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	0018      	movs	r0, r3
 80026b6:	f7ff fc5d 	bl	8001f74 <getNocrc>
 80026ba:	1e03      	subs	r3, r0, #0
 80026bc:	d001      	beq.n	80026c2 <calcAirTime+0xae>
 80026be:	2300      	movs	r3, #0
 80026c0:	e000      	b.n	80026c4 <calcAirTime+0xb0>
 80026c2:	2310      	movs	r3, #16
 80026c4:	191c      	adds	r4, r3, r4
 80026c6:	1dbb      	adds	r3, r7, #6
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	0018      	movs	r0, r3
 80026cc:	f7ff fc7a 	bl	8001fc4 <getIh>
 80026d0:	1e03      	subs	r3, r0, #0
 80026d2:	d001      	beq.n	80026d8 <calcAirTime+0xc4>
 80026d4:	2314      	movs	r3, #20
 80026d6:	e000      	b.n	80026da <calcAirTime+0xc6>
 80026d8:	2300      	movs	r3, #0
 80026da:	1ae3      	subs	r3, r4, r3
 80026dc:	613b      	str	r3, [r7, #16]
    if( tmp > 0 ) {
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	dd1b      	ble.n	800271c <calcAirTime+0x108>
        tmp = (tmp + q - 1) / q;
 80026e4:	2109      	movs	r1, #9
 80026e6:	187b      	adds	r3, r7, r1
 80026e8:	781a      	ldrb	r2, [r3, #0]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	18d3      	adds	r3, r2, r3
 80026ee:	1e5a      	subs	r2, r3, #1
 80026f0:	187b      	adds	r3, r7, r1
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	0019      	movs	r1, r3
 80026f6:	0010      	movs	r0, r2
 80026f8:	f7fd fd90 	bl	800021c <__divsi3>
 80026fc:	0003      	movs	r3, r0
 80026fe:	613b      	str	r3, [r7, #16]
        tmp *= getCr(rps)+5;
 8002700:	1dbb      	adds	r3, r7, #6
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	0018      	movs	r0, r3
 8002706:	f7ff fc09 	bl	8001f1c <getCr>
 800270a:	0003      	movs	r3, r0
 800270c:	1d5a      	adds	r2, r3, #5
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4353      	muls	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        tmp += 8;
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	3308      	adds	r3, #8
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	e001      	b.n	8002720 <calcAirTime+0x10c>
    } else {
        tmp = 8;
 800271c:	2308      	movs	r3, #8
 800271e:	613b      	str	r3, [r7, #16]
    }
    tmp = (tmp<<2) + /*preamble*/49 /* 4 * (8 + 4.25) */;
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	3331      	adds	r3, #49	; 0x31
 8002726:	613b      	str	r3, [r7, #16]
    //
    // osticks =  tmp * OSTICKS_PER_SEC * 1<<sf / bw
    //
    // 3 => counter reduced divisor 125000/8 => 15625
    // 2 => counter 2 shift on tmp
    sfx = sf+(7-SF7) - (3+2) - bw;
 8002728:	230a      	movs	r3, #10
 800272a:	18fa      	adds	r2, r7, r3
 800272c:	230b      	movs	r3, #11
 800272e:	18fb      	adds	r3, r7, r3
 8002730:	7812      	ldrb	r2, [r2, #0]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	b2da      	uxtb	r2, r3
 8002738:	2117      	movs	r1, #23
 800273a:	187b      	adds	r3, r7, r1
 800273c:	3201      	adds	r2, #1
 800273e:	701a      	strb	r2, [r3, #0]
    int div = 15625;
 8002740:	4b16      	ldr	r3, [pc, #88]	; (800279c <calcAirTime+0x188>)
 8002742:	60fb      	str	r3, [r7, #12]
    if( sfx > 4 ) {
 8002744:	187b      	adds	r3, r7, r1
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b04      	cmp	r3, #4
 800274a:	d909      	bls.n	8002760 <calcAirTime+0x14c>
        // prevent 32bit signed int overflow in last step
        div >>= sfx-4;
 800274c:	187b      	adds	r3, r7, r1
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	3b04      	subs	r3, #4
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	411a      	asrs	r2, r3
 8002756:	0013      	movs	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
        sfx = 4;
 800275a:	187b      	adds	r3, r7, r1
 800275c:	2204      	movs	r2, #4
 800275e:	701a      	strb	r2, [r3, #0]
    }
    // Need 32bit arithmetic for this last step
    return (((ostime_t)tmp << sfx) * OSTICKS_PER_SEC + div/2) / div;
 8002760:	2317      	movs	r3, #23
 8002762:	18fb      	adds	r3, r7, r3
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	409a      	lsls	r2, r3
 800276a:	0013      	movs	r3, r2
 800276c:	015b      	lsls	r3, r3, #5
 800276e:	1a9b      	subs	r3, r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	189b      	adds	r3, r3, r2
 8002774:	021b      	lsls	r3, r3, #8
 8002776:	001a      	movs	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	da00      	bge.n	8002780 <calcAirTime+0x16c>
 800277e:	3301      	adds	r3, #1
 8002780:	105b      	asrs	r3, r3, #1
 8002782:	18d3      	adds	r3, r2, r3
 8002784:	68f9      	ldr	r1, [r7, #12]
 8002786:	0018      	movs	r0, r3
 8002788:	f7fd fd48 	bl	800021c <__divsi3>
 800278c:	0003      	movs	r3, r0
}
 800278e:	0018      	movs	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	b006      	add	sp, #24
 8002794:	bdb0      	pop	{r4, r5, r7, pc}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	0000c350 	.word	0x0000c350
 800279c:	00003d09 	.word	0x00003d09

080027a0 <calcRxWindow>:
    us2osticksRound(128<<0)   // ------    DR_SF7CR
#endif
};


static ostime_t calcRxWindow (u1_t secs, dr_t dr) {
 80027a0:	b590      	push	{r4, r7, lr}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	0002      	movs	r2, r0
 80027a8:	1dfb      	adds	r3, r7, #7
 80027aa:	701a      	strb	r2, [r3, #0]
 80027ac:	1dbb      	adds	r3, r7, #6
 80027ae:	1c0a      	adds	r2, r1, #0
 80027b0:	701a      	strb	r2, [r3, #0]
    ostime_t rxoff, err;
    if( secs==0 ) {
 80027b2:	1dfb      	adds	r3, r7, #7
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d108      	bne.n	80027cc <calcRxWindow+0x2c>
        // aka 128 secs (next becaon)
        rxoff = LMIC.drift;
 80027ba:	4b24      	ldr	r3, [pc, #144]	; (800284c <calcRxWindow+0xac>)
 80027bc:	22b4      	movs	r2, #180	; 0xb4
 80027be:	5e9b      	ldrsh	r3, [r3, r2]
 80027c0:	617b      	str	r3, [r7, #20]
        err = LMIC.lastDriftDiff;
 80027c2:	4b22      	ldr	r3, [pc, #136]	; (800284c <calcRxWindow+0xac>)
 80027c4:	22b6      	movs	r2, #182	; 0xb6
 80027c6:	5e9b      	ldrsh	r3, [r3, r2]
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	e011      	b.n	80027f0 <calcRxWindow+0x50>
    } else {
        // scheduled RX window within secs into current beacon period
        rxoff = (LMIC.drift * (ostime_t)secs) >> BCN_INTV_exp;
 80027cc:	4b1f      	ldr	r3, [pc, #124]	; (800284c <calcRxWindow+0xac>)
 80027ce:	22b4      	movs	r2, #180	; 0xb4
 80027d0:	5e9b      	ldrsh	r3, [r3, r2]
 80027d2:	001a      	movs	r2, r3
 80027d4:	1dfb      	adds	r3, r7, #7
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	4353      	muls	r3, r2
 80027da:	11db      	asrs	r3, r3, #7
 80027dc:	617b      	str	r3, [r7, #20]
        err = (LMIC.lastDriftDiff * (ostime_t)secs) >> BCN_INTV_exp;
 80027de:	4b1b      	ldr	r3, [pc, #108]	; (800284c <calcRxWindow+0xac>)
 80027e0:	22b6      	movs	r2, #182	; 0xb6
 80027e2:	5e9b      	ldrsh	r3, [r3, r2]
 80027e4:	001a      	movs	r2, r3
 80027e6:	1dfb      	adds	r3, r7, #7
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	4353      	muls	r3, r2
 80027ec:	11db      	asrs	r3, r3, #7
 80027ee:	613b      	str	r3, [r7, #16]
    }
    u1_t rxsyms = MINRX_SYMS;
 80027f0:	240f      	movs	r4, #15
 80027f2:	193b      	adds	r3, r7, r4
 80027f4:	2205      	movs	r2, #5
 80027f6:	701a      	strb	r2, [r3, #0]
    err += (ostime_t)LMIC.maxDriftDiff * LMIC.missedBcns;
 80027f8:	4b14      	ldr	r3, [pc, #80]	; (800284c <calcRxWindow+0xac>)
 80027fa:	22b8      	movs	r2, #184	; 0xb8
 80027fc:	5e9b      	ldrsh	r3, [r3, r2]
 80027fe:	0019      	movs	r1, r3
 8002800:	4a12      	ldr	r2, [pc, #72]	; (800284c <calcRxWindow+0xac>)
 8002802:	2332      	movs	r3, #50	; 0x32
 8002804:	33ff      	adds	r3, #255	; 0xff
 8002806:	5cd3      	ldrb	r3, [r2, r3]
 8002808:	434b      	muls	r3, r1
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	18d3      	adds	r3, r2, r3
 800280e:	613b      	str	r3, [r7, #16]
    LMIC.rxsyms = MINRX_SYMS + (err / dr2hsym(dr));
 8002810:	1dbb      	adds	r3, r7, #6
 8002812:	781a      	ldrb	r2, [r3, #0]
 8002814:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <calcRxWindow+0xb0>)
 8002816:	0092      	lsls	r2, r2, #2
 8002818:	58d3      	ldr	r3, [r2, r3]
 800281a:	0019      	movs	r1, r3
 800281c:	6938      	ldr	r0, [r7, #16]
 800281e:	f7fd fcfd 	bl	800021c <__divsi3>
 8002822:	0003      	movs	r3, r0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	3305      	adds	r3, #5
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <calcRxWindow+0xac>)
 800282c:	741a      	strb	r2, [r3, #16]

    return (rxsyms-PAMBL_SYMS) * dr2hsym(dr) + rxoff;
 800282e:	193b      	adds	r3, r7, r4
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	3b08      	subs	r3, #8
 8002834:	1dba      	adds	r2, r7, #6
 8002836:	7811      	ldrb	r1, [r2, #0]
 8002838:	4a05      	ldr	r2, [pc, #20]	; (8002850 <calcRxWindow+0xb0>)
 800283a:	0089      	lsls	r1, r1, #2
 800283c:	588a      	ldr	r2, [r1, r2]
 800283e:	435a      	muls	r2, r3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	18d3      	adds	r3, r2, r3
}
 8002844:	0018      	movs	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	b007      	add	sp, #28
 800284a:	bd90      	pop	{r4, r7, pc}
 800284c:	20000280 	.word	0x20000280
 8002850:	0800df5c 	.word	0x0800df5c

08002854 <calcBcnRxWindowFromMillis>:


// Setup beacon RX parameters assuming we have an error of ms (aka +/-(ms/2))
static void calcBcnRxWindowFromMillis (u1_t ms, bit_t ini) {
 8002854:	b5b0      	push	{r4, r5, r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	0002      	movs	r2, r0
 800285c:	1dfb      	adds	r3, r7, #7
 800285e:	701a      	strb	r2, [r3, #0]
 8002860:	1dbb      	adds	r3, r7, #6
 8002862:	1c0a      	adds	r2, r1, #0
 8002864:	701a      	strb	r2, [r3, #0]
    if( ini ) {
 8002866:	1dbb      	adds	r3, r7, #6
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d017      	beq.n	800289e <calcBcnRxWindowFromMillis+0x4a>
        LMIC.drift = 0;
 800286e:	4b2d      	ldr	r3, [pc, #180]	; (8002924 <calcBcnRxWindowFromMillis+0xd0>)
 8002870:	22b4      	movs	r2, #180	; 0xb4
 8002872:	2100      	movs	r1, #0
 8002874:	5299      	strh	r1, [r3, r2]
        LMIC.maxDriftDiff = 0;
 8002876:	4b2b      	ldr	r3, [pc, #172]	; (8002924 <calcBcnRxWindowFromMillis+0xd0>)
 8002878:	22b8      	movs	r2, #184	; 0xb8
 800287a:	2100      	movs	r1, #0
 800287c:	5299      	strh	r1, [r3, r2]
        LMIC.missedBcns = 0;
 800287e:	4a29      	ldr	r2, [pc, #164]	; (8002924 <calcBcnRxWindowFromMillis+0xd0>)
 8002880:	2332      	movs	r3, #50	; 0x32
 8002882:	33ff      	adds	r3, #255	; 0xff
 8002884:	2100      	movs	r1, #0
 8002886:	54d1      	strb	r1, [r2, r3]
        LMIC.bcninfo.flags |= BCN_NODRIFT|BCN_NODDIFF;
 8002888:	4a26      	ldr	r2, [pc, #152]	; (8002924 <calcBcnRxWindowFromMillis+0xd0>)
 800288a:	23cb      	movs	r3, #203	; 0xcb
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	5cd3      	ldrb	r3, [r2, r3]
 8002890:	220c      	movs	r2, #12
 8002892:	4313      	orrs	r3, r2
 8002894:	b2d9      	uxtb	r1, r3
 8002896:	4a23      	ldr	r2, [pc, #140]	; (8002924 <calcBcnRxWindowFromMillis+0xd0>)
 8002898:	23cb      	movs	r3, #203	; 0xcb
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	54d1      	strb	r1, [r2, r3]
    }
    ostime_t hsym = dr2hsym(DR_BCN);
 800289e:	2342      	movs	r3, #66	; 0x42
 80028a0:	60fb      	str	r3, [r7, #12]
    LMIC.bcnRxsyms = MINRX_SYMS + ms2osticksCeil(ms) / hsym;
 80028a2:	1dfb      	adds	r3, r7, #7
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	001c      	movs	r4, r3
 80028aa:	2300      	movs	r3, #0
 80028ac:	001d      	movs	r5, r3
 80028ae:	22fa      	movs	r2, #250	; 0xfa
 80028b0:	01d2      	lsls	r2, r2, #7
 80028b2:	2300      	movs	r3, #0
 80028b4:	0020      	movs	r0, r4
 80028b6:	0029      	movs	r1, r5
 80028b8:	f7fd fde0 	bl	800047c <__aeabi_lmul>
 80028bc:	0002      	movs	r2, r0
 80028be:	000b      	movs	r3, r1
 80028c0:	0010      	movs	r0, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	4a18      	ldr	r2, [pc, #96]	; (8002928 <calcBcnRxWindowFromMillis+0xd4>)
 80028c6:	2300      	movs	r3, #0
 80028c8:	1880      	adds	r0, r0, r2
 80028ca:	4159      	adcs	r1, r3
 80028cc:	22fa      	movs	r2, #250	; 0xfa
 80028ce:	0092      	lsls	r2, r2, #2
 80028d0:	2300      	movs	r3, #0
 80028d2:	f7fd fd8f 	bl	80003f4 <__aeabi_ldivmod>
 80028d6:	0002      	movs	r2, r0
 80028d8:	000b      	movs	r3, r1
 80028da:	0013      	movs	r3, r2
 80028dc:	68f9      	ldr	r1, [r7, #12]
 80028de:	0018      	movs	r0, r3
 80028e0:	f7fd fc9c 	bl	800021c <__divsi3>
 80028e4:	0003      	movs	r3, r0
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	3305      	adds	r3, #5
 80028ea:	b2d9      	uxtb	r1, r3
 80028ec:	4a0d      	ldr	r2, [pc, #52]	; (8002924 <calcBcnRxWindowFromMillis+0xd0>)
 80028ee:	238a      	movs	r3, #138	; 0x8a
 80028f0:	33ff      	adds	r3, #255	; 0xff
 80028f2:	54d1      	strb	r1, [r2, r3]
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - (LMIC.bcnRxsyms-PAMBL_SYMS) * hsym;
 80028f4:	4a0b      	ldr	r2, [pc, #44]	; (8002924 <calcBcnRxWindowFromMillis+0xd0>)
 80028f6:	23c8      	movs	r3, #200	; 0xc8
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	58d3      	ldr	r3, [r2, r3]
 80028fc:	22fa      	movs	r2, #250	; 0xfa
 80028fe:	0392      	lsls	r2, r2, #14
 8002900:	189a      	adds	r2, r3, r2
 8002902:	4908      	ldr	r1, [pc, #32]	; (8002924 <calcBcnRxWindowFromMillis+0xd0>)
 8002904:	238a      	movs	r3, #138	; 0x8a
 8002906:	33ff      	adds	r3, #255	; 0xff
 8002908:	5ccb      	ldrb	r3, [r1, r3]
 800290a:	3b08      	subs	r3, #8
 800290c:	68f9      	ldr	r1, [r7, #12]
 800290e:	434b      	muls	r3, r1
 8002910:	1ad1      	subs	r1, r2, r3
 8002912:	4a04      	ldr	r2, [pc, #16]	; (8002924 <calcBcnRxWindowFromMillis+0xd0>)
 8002914:	23c6      	movs	r3, #198	; 0xc6
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	50d1      	str	r1, [r2, r3]
}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	46bd      	mov	sp, r7
 800291e:	b004      	add	sp, #16
 8002920:	bdb0      	pop	{r4, r5, r7, pc}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	20000280 	.word	0x20000280
 8002928:	000003e7 	.word	0x000003e7

0800292c <rxschedInit>:


// Setup scheduled RX window (ping/multicast slot)
static void rxschedInit (xref2rxsched_t rxsched) {
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
    os_clearMem(AESkey,16);
 8002934:	4b33      	ldr	r3, [pc, #204]	; (8002a04 <rxschedInit+0xd8>)
 8002936:	2210      	movs	r2, #16
 8002938:	2100      	movs	r1, #0
 800293a:	0018      	movs	r0, r3
 800293c:	f009 ff8f 	bl	800c85e <memset>
    os_clearMem(LMIC.frame+8,8);
 8002940:	4b31      	ldr	r3, [pc, #196]	; (8002a08 <rxschedInit+0xdc>)
 8002942:	2208      	movs	r2, #8
 8002944:	2100      	movs	r1, #0
 8002946:	0018      	movs	r0, r3
 8002948:	f009 ff89 	bl	800c85e <memset>
    os_wlsbf4(LMIC.frame, LMIC.bcninfo.time);
 800294c:	4a2f      	ldr	r2, [pc, #188]	; (8002a0c <rxschedInit+0xe0>)
 800294e:	23cc      	movs	r3, #204	; 0xcc
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	58d2      	ldr	r2, [r2, r3]
 8002954:	4b2e      	ldr	r3, [pc, #184]	; (8002a10 <rxschedInit+0xe4>)
 8002956:	0011      	movs	r1, r2
 8002958:	0018      	movs	r0, r3
 800295a:	f7ff fc33 	bl	80021c4 <os_wlsbf4>
    os_wlsbf4(LMIC.frame+4, LMIC.devaddr);
 800295e:	482d      	ldr	r0, [pc, #180]	; (8002a14 <rxschedInit+0xe8>)
 8002960:	4a2a      	ldr	r2, [pc, #168]	; (8002a0c <rxschedInit+0xe0>)
 8002962:	238a      	movs	r3, #138	; 0x8a
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	58d3      	ldr	r3, [r2, r3]
 8002968:	0019      	movs	r1, r3
 800296a:	f7ff fc2b 	bl	80021c4 <os_wlsbf4>
    os_aes(AES_ENC,LMIC.frame,16);
 800296e:	4b28      	ldr	r3, [pc, #160]	; (8002a10 <rxschedInit+0xe4>)
 8002970:	2210      	movs	r2, #16
 8002972:	0019      	movs	r1, r3
 8002974:	2000      	movs	r0, #0
 8002976:	f7fe f9cd 	bl	8000d14 <os_aes>
    u1_t intvExp = rxsched->intvExp;
 800297a:	240f      	movs	r4, #15
 800297c:	193b      	adds	r3, r7, r4
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	7852      	ldrb	r2, [r2, #1]
 8002982:	701a      	strb	r2, [r3, #0]
    ostime_t off = os_rlsbf2(LMIC.frame) & (0x0FFF >> (7 - intvExp)); // random offset (slot units)
 8002984:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <rxschedInit+0xe4>)
 8002986:	0018      	movs	r0, r3
 8002988:	f7ff fbbb 	bl	8002102 <os_rlsbf2>
 800298c:	0003      	movs	r3, r0
 800298e:	0019      	movs	r1, r3
 8002990:	0020      	movs	r0, r4
 8002992:	183b      	adds	r3, r7, r0
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2207      	movs	r2, #7
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	4a1f      	ldr	r2, [pc, #124]	; (8002a18 <rxschedInit+0xec>)
 800299c:	411a      	asrs	r2, r3
 800299e:	0013      	movs	r3, r2
 80029a0:	400b      	ands	r3, r1
 80029a2:	60bb      	str	r3, [r7, #8]
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 80029a4:	4a19      	ldr	r2, [pc, #100]	; (8002a0c <rxschedInit+0xe0>)
 80029a6:	23c8      	movs	r3, #200	; 0xc8
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	58d3      	ldr	r3, [r2, r3]
                       BCN_RESERVE_osticks +
 80029ac:	0019      	movs	r1, r3
                       ms2osticks(BCN_SLOT_SPAN_ms * off)); // random offset osticks
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	0013      	movs	r3, r2
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	019b      	lsls	r3, r3, #6
                       BCN_RESERVE_osticks +
 80029b8:	18cb      	adds	r3, r1, r3
 80029ba:	4a18      	ldr	r2, [pc, #96]	; (8002a1c <rxschedInit+0xf0>)
 80029bc:	4694      	mov	ip, r2
 80029be:	4463      	add	r3, ip
 80029c0:	001a      	movs	r2, r3
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	605a      	str	r2, [r3, #4]
    rxsched->slot   = 0;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	709a      	strb	r2, [r3, #2]
    rxsched->rxtime = rxsched->rxbase - calcRxWindow(/*secs BCN_RESERVE*/2+(1<<intvExp),rxsched->dr);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685c      	ldr	r4, [r3, #4]
 80029d0:	183b      	adds	r3, r7, r0
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2201      	movs	r2, #1
 80029d6:	409a      	lsls	r2, r3
 80029d8:	0013      	movs	r3, r2
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	3302      	adds	r3, #2
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	0019      	movs	r1, r3
 80029e6:	0010      	movs	r0, r2
 80029e8:	f7ff feda 	bl	80027a0 <calcRxWindow>
 80029ec:	0003      	movs	r3, r0
 80029ee:	1ae2      	subs	r2, r4, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <rxschedInit+0xe0>)
 80029f6:	7c1a      	ldrb	r2, [r3, #16]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	70da      	strb	r2, [r3, #3]
}
 80029fc:	46c0      	nop			; (mov r8, r8)
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b005      	add	sp, #20
 8002a02:	bd90      	pop	{r4, r7, pc}
 8002a04:	200000a4 	.word	0x200000a4
 8002a08:	200003d0 	.word	0x200003d0
 8002a0c:	20000280 	.word	0x20000280
 8002a10:	200003c8 	.word	0x200003c8
 8002a14:	200003cc 	.word	0x200003cc
 8002a18:	00000fff 	.word	0x00000fff
 8002a1c:	00010900 	.word	0x00010900

08002a20 <rxschedNext>:


static bit_t rxschedNext (xref2rxsched_t rxsched, ostime_t cando) {
 8002a20:	b590      	push	{r4, r7, lr}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  again:
    if( rxsched->rxtime - cando >= 0 )
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	d401      	bmi.n	8002a38 <rxschedNext+0x18>
        return 1;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e04a      	b.n	8002ace <rxschedNext+0xae>
    u1_t slot;
    if( (slot=rxsched->slot) >= 128 )
 8002a38:	210f      	movs	r1, #15
 8002a3a:	187b      	adds	r3, r7, r1
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	7892      	ldrb	r2, [r2, #2]
 8002a40:	701a      	strb	r2, [r3, #0]
 8002a42:	187b      	adds	r3, r7, r1
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	b25b      	sxtb	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	da01      	bge.n	8002a50 <rxschedNext+0x30>
        return 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e03e      	b.n	8002ace <rxschedNext+0xae>
    u1_t intv = 1<<rxsched->intvExp;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	785b      	ldrb	r3, [r3, #1]
 8002a54:	001a      	movs	r2, r3
 8002a56:	2301      	movs	r3, #1
 8002a58:	4093      	lsls	r3, r2
 8002a5a:	001a      	movs	r2, r3
 8002a5c:	240e      	movs	r4, #14
 8002a5e:	193b      	adds	r3, r7, r4
 8002a60:	701a      	strb	r2, [r3, #0]
    if( (rxsched->slot = (slot += (intv))) >= 128 )
 8002a62:	200f      	movs	r0, #15
 8002a64:	183b      	adds	r3, r7, r0
 8002a66:	1839      	adds	r1, r7, r0
 8002a68:	193a      	adds	r2, r7, r4
 8002a6a:	7809      	ldrb	r1, [r1, #0]
 8002a6c:	7812      	ldrb	r2, [r2, #0]
 8002a6e:	188a      	adds	r2, r1, r2
 8002a70:	701a      	strb	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	183a      	adds	r2, r7, r0
 8002a76:	7812      	ldrb	r2, [r2, #0]
 8002a78:	709a      	strb	r2, [r3, #2]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	789b      	ldrb	r3, [r3, #2]
 8002a7e:	b25b      	sxtb	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	da01      	bge.n	8002a88 <rxschedNext+0x68>
        return 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	e022      	b.n	8002ace <rxschedNext+0xae>
    rxsched->rxtime = rxsched->rxbase
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6859      	ldr	r1, [r3, #4]
        + ((BCN_WINDOW_osticks * (ostime_t)slot) >> BCN_INTV_exp)
 8002a8c:	200f      	movs	r0, #15
 8002a8e:	183b      	adds	r3, r7, r0
 8002a90:	781a      	ldrb	r2, [r3, #0]
 8002a92:	0013      	movs	r3, r2
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	1a9b      	subs	r3, r3, r2
 8002a98:	049b      	lsls	r3, r3, #18
 8002a9a:	11db      	asrs	r3, r3, #7
 8002a9c:	18cc      	adds	r4, r1, r3
        - calcRxWindow(/*secs BCN_RESERVE*/2+slot+intv,rxsched->dr);
 8002a9e:	183a      	adds	r2, r7, r0
 8002aa0:	230e      	movs	r3, #14
 8002aa2:	18fb      	adds	r3, r7, r3
 8002aa4:	7812      	ldrb	r2, [r2, #0]
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	18d3      	adds	r3, r2, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	3302      	adds	r3, #2
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	0019      	movs	r1, r3
 8002ab6:	0010      	movs	r0, r2
 8002ab8:	f7ff fe72 	bl	80027a0 <calcRxWindow>
 8002abc:	0003      	movs	r3, r0
 8002abe:	1ae2      	subs	r2, r4, r3
    rxsched->rxtime = rxsched->rxbase
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 8002ac4:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <rxschedNext+0xb8>)
 8002ac6:	7c1a      	ldrb	r2, [r3, #16]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	70da      	strb	r2, [r3, #3]
    goto again;
 8002acc:	e7ad      	b.n	8002a2a <rxschedNext+0xa>
}
 8002ace:	0018      	movs	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b005      	add	sp, #20
 8002ad4:	bd90      	pop	{r4, r7, pc}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	20000280 	.word	0x20000280

08002adc <rndDelay>:


static ostime_t rndDelay (u1_t secSpan) {
 8002adc:	b590      	push	{r4, r7, lr}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	0002      	movs	r2, r0
 8002ae4:	1dfb      	adds	r3, r7, #7
 8002ae6:	701a      	strb	r2, [r3, #0]
    u2_t r = os_getRndU2();
 8002ae8:	f003 ff40 	bl	800696c <radio_rand1>
 8002aec:	0003      	movs	r3, r0
 8002aee:	021b      	lsls	r3, r3, #8
 8002af0:	b21c      	sxth	r4, r3
 8002af2:	f003 ff3b 	bl	800696c <radio_rand1>
 8002af6:	0003      	movs	r3, r0
 8002af8:	b21b      	sxth	r3, r3
 8002afa:	4323      	orrs	r3, r4
 8002afc:	b21a      	sxth	r2, r3
 8002afe:	210a      	movs	r1, #10
 8002b00:	187b      	adds	r3, r7, r1
 8002b02:	801a      	strh	r2, [r3, #0]
    ostime_t delay = r;
 8002b04:	187b      	adds	r3, r7, r1
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	60fb      	str	r3, [r7, #12]
    if( delay > OSTICKS_PER_SEC )
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	23fa      	movs	r3, #250	; 0xfa
 8002b0e:	01db      	lsls	r3, r3, #7
 8002b10:	429a      	cmp	r2, r3
 8002b12:	dd09      	ble.n	8002b28 <rndDelay+0x4c>
        delay = r % (u2_t)OSTICKS_PER_SEC;
 8002b14:	187b      	adds	r3, r7, r1
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	22fa      	movs	r2, #250	; 0xfa
 8002b1a:	01d1      	lsls	r1, r2, #7
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f7fd fb79 	bl	8000214 <__aeabi_uidivmod>
 8002b22:	000b      	movs	r3, r1
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	60fb      	str	r3, [r7, #12]
    if( secSpan > 0 )
 8002b28:	1dfb      	adds	r3, r7, #7
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d016      	beq.n	8002b5e <rndDelay+0x82>
        delay += ((u1_t)r % secSpan) * OSTICKS_PER_SEC;
 8002b30:	230a      	movs	r3, #10
 8002b32:	18fb      	adds	r3, r7, r3
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	1dfb      	adds	r3, r7, #7
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	0019      	movs	r1, r3
 8002b3e:	0010      	movs	r0, r2
 8002b40:	f7fd fb68 	bl	8000214 <__aeabi_uidivmod>
 8002b44:	000b      	movs	r3, r1
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	001a      	movs	r2, r3
 8002b4a:	0013      	movs	r3, r2
 8002b4c:	015b      	lsls	r3, r3, #5
 8002b4e:	1a9b      	subs	r3, r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	189b      	adds	r3, r3, r2
 8002b54:	021b      	lsls	r3, r3, #8
 8002b56:	001a      	movs	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	189b      	adds	r3, r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]
    return delay;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
}
 8002b60:	0018      	movs	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b005      	add	sp, #20
 8002b66:	bd90      	pop	{r4, r7, pc}

08002b68 <txDelay>:


static void txDelay (ostime_t reftime, u1_t secSpan) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	000a      	movs	r2, r1
 8002b72:	1cfb      	adds	r3, r7, #3
 8002b74:	701a      	strb	r2, [r3, #0]
    reftime += rndDelay(secSpan);
 8002b76:	1cfb      	adds	r3, r7, #3
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f7ff ffae 	bl	8002adc <rndDelay>
 8002b80:	0002      	movs	r2, r0
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	189b      	adds	r3, r3, r2
 8002b86:	607b      	str	r3, [r7, #4]
    if( LMIC.globalDutyRate == 0  ||  (reftime - LMIC.globalDutyAvail) > 0 ) {
 8002b88:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <txDelay+0x5c>)
 8002b8a:	22a3      	movs	r2, #163	; 0xa3
 8002b8c:	5c9b      	ldrb	r3, [r3, r2]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d006      	beq.n	8002ba0 <txDelay+0x38>
 8002b92:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <txDelay+0x5c>)
 8002b94:	22a4      	movs	r2, #164	; 0xa4
 8002b96:	589b      	ldr	r3, [r3, r2]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	dd0d      	ble.n	8002bbc <txDelay+0x54>
        LMIC.globalDutyAvail = reftime;
 8002ba0:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <txDelay+0x5c>)
 8002ba2:	21a4      	movs	r1, #164	; 0xa4
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	505a      	str	r2, [r3, r1]
        LMIC.opmode |= OP_RNDTX;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <txDelay+0x5c>)
 8002baa:	22ac      	movs	r2, #172	; 0xac
 8002bac:	5a9b      	ldrh	r3, [r3, r2]
 8002bae:	2280      	movs	r2, #128	; 0x80
 8002bb0:	0052      	lsls	r2, r2, #1
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	b299      	uxth	r1, r3
 8002bb6:	4b03      	ldr	r3, [pc, #12]	; (8002bc4 <txDelay+0x5c>)
 8002bb8:	22ac      	movs	r2, #172	; 0xac
 8002bba:	5299      	strh	r1, [r3, r2]
    }
}
 8002bbc:	46c0      	nop			; (mov r8, r8)
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b002      	add	sp, #8
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20000280 	.word	0x20000280

08002bc8 <setDrJoin>:


static void setDrJoin (u1_t reason, u1_t dr) {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	0002      	movs	r2, r0
 8002bd0:	1dfb      	adds	r3, r7, #7
 8002bd2:	701a      	strb	r2, [r3, #0]
 8002bd4:	1dbb      	adds	r3, r7, #6
 8002bd6:	1c0a      	adds	r2, r1, #0
 8002bd8:	701a      	strb	r2, [r3, #0]
                        e_.deveui    = MAIN::CDEV->getEui(),
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = LMIC.adrTxPow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    LMIC.datarate = dr;
 8002bda:	4b04      	ldr	r3, [pc, #16]	; (8002bec <setDrJoin+0x24>)
 8002bdc:	1dba      	adds	r2, r7, #6
 8002bde:	21b0      	movs	r1, #176	; 0xb0
 8002be0:	7812      	ldrb	r2, [r2, #0]
 8002be2:	545a      	strb	r2, [r3, r1]
    DO_DEVDB(LMIC.datarate,datarate);
}
 8002be4:	46c0      	nop			; (mov r8, r8)
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b002      	add	sp, #8
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20000280 	.word	0x20000280

08002bf0 <setDrTxpow>:


static void setDrTxpow (u1_t reason, u1_t dr, s1_t pow) {
 8002bf0:	b590      	push	{r4, r7, lr}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	0004      	movs	r4, r0
 8002bf8:	0008      	movs	r0, r1
 8002bfa:	0011      	movs	r1, r2
 8002bfc:	1dfb      	adds	r3, r7, #7
 8002bfe:	1c22      	adds	r2, r4, #0
 8002c00:	701a      	strb	r2, [r3, #0]
 8002c02:	1dbb      	adds	r3, r7, #6
 8002c04:	1c02      	adds	r2, r0, #0
 8002c06:	701a      	strb	r2, [r3, #0]
 8002c08:	1d7b      	adds	r3, r7, #5
 8002c0a:	1c0a      	adds	r2, r1, #0
 8002c0c:	701a      	strb	r2, [r3, #0]
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = pow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    
    if( pow != KEEP_TXPOW )
 8002c0e:	1d7b      	adds	r3, r7, #5
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	b25b      	sxtb	r3, r3
 8002c14:	3380      	adds	r3, #128	; 0x80
 8002c16:	d004      	beq.n	8002c22 <setDrTxpow+0x32>
        LMIC.adrTxPow = pow;
 8002c18:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <setDrTxpow+0x68>)
 8002c1a:	1d7a      	adds	r2, r7, #5
 8002c1c:	21af      	movs	r1, #175	; 0xaf
 8002c1e:	7812      	ldrb	r2, [r2, #0]
 8002c20:	545a      	strb	r2, [r3, r1]
    if( LMIC.datarate != dr ) {
 8002c22:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <setDrTxpow+0x68>)
 8002c24:	22b0      	movs	r2, #176	; 0xb0
 8002c26:	5c9b      	ldrb	r3, [r3, r2]
 8002c28:	1dba      	adds	r2, r7, #6
 8002c2a:	7812      	ldrb	r2, [r2, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d00e      	beq.n	8002c4e <setDrTxpow+0x5e>
        LMIC.datarate = dr;
 8002c30:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <setDrTxpow+0x68>)
 8002c32:	1dba      	adds	r2, r7, #6
 8002c34:	21b0      	movs	r1, #176	; 0xb0
 8002c36:	7812      	ldrb	r2, [r2, #0]
 8002c38:	545a      	strb	r2, [r3, r1]
        DO_DEVDB(LMIC.datarate,datarate);
        LMIC.opmode |= OP_NEXTCHNL;
 8002c3a:	4b07      	ldr	r3, [pc, #28]	; (8002c58 <setDrTxpow+0x68>)
 8002c3c:	22ac      	movs	r2, #172	; 0xac
 8002c3e:	5a9b      	ldrh	r3, [r3, r2]
 8002c40:	2280      	movs	r2, #128	; 0x80
 8002c42:	0112      	lsls	r2, r2, #4
 8002c44:	4313      	orrs	r3, r2
 8002c46:	b299      	uxth	r1, r3
 8002c48:	4b03      	ldr	r3, [pc, #12]	; (8002c58 <setDrTxpow+0x68>)
 8002c4a:	22ac      	movs	r2, #172	; 0xac
 8002c4c:	5299      	strh	r1, [r3, r2]
    }
}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	46bd      	mov	sp, r7
 8002c52:	b003      	add	sp, #12
 8002c54:	bd90      	pop	{r4, r7, pc}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	20000280 	.word	0x20000280

08002c5c <initDefaultChannels>:
    // Default operational frequencies
    EU868_F1|BAND_CENTI, EU868_F2|BAND_CENTI, EU868_F3|BAND_CENTI,
    EU868_F4|BAND_MILLI, EU868_F5|BAND_MILLI, EU868_F6|BAND_DECI
};

static void initDefaultChannels (bit_t join) {
 8002c5c:	b590      	push	{r4, r7, lr}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	0002      	movs	r2, r0
 8002c64:	1dfb      	adds	r3, r7, #7
 8002c66:	701a      	strb	r2, [r3, #0]
    os_clearMem(&LMIC.channelFreq, sizeof(LMIC.channelFreq));
 8002c68:	4b46      	ldr	r3, [pc, #280]	; (8002d84 <initDefaultChannels+0x128>)
 8002c6a:	2240      	movs	r2, #64	; 0x40
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f009 fdf5 	bl	800c85e <memset>
    os_clearMem(&LMIC.channelDrMap, sizeof(LMIC.channelDrMap));
 8002c74:	4b44      	ldr	r3, [pc, #272]	; (8002d88 <initDefaultChannels+0x12c>)
 8002c76:	2220      	movs	r2, #32
 8002c78:	2100      	movs	r1, #0
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	f009 fdef 	bl	800c85e <memset>
    os_clearMem(&LMIC.bands, sizeof(LMIC.bands));
 8002c80:	4b42      	ldr	r3, [pc, #264]	; (8002d8c <initDefaultChannels+0x130>)
 8002c82:	2220      	movs	r2, #32
 8002c84:	2100      	movs	r1, #0
 8002c86:	0018      	movs	r0, r3
 8002c88:	f009 fde9 	bl	800c85e <memset>

    LMIC.channelMap = (1 << NUM_DEFAULT_CHANNELS) - 1;
 8002c8c:	4b40      	ldr	r3, [pc, #256]	; (8002d90 <initDefaultChannels+0x134>)
 8002c8e:	22a0      	movs	r2, #160	; 0xa0
 8002c90:	213f      	movs	r1, #63	; 0x3f
 8002c92:	5299      	strh	r1, [r3, r2]
    u1_t su = join ? 0 : NUM_DEFAULT_CHANNELS;
 8002c94:	1dfb      	adds	r3, r7, #7
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <initDefaultChannels+0x44>
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	e000      	b.n	8002ca2 <initDefaultChannels+0x46>
 8002ca0:	2206      	movs	r2, #6
 8002ca2:	230f      	movs	r3, #15
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	701a      	strb	r2, [r3, #0]
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
 8002ca8:	230e      	movs	r3, #14
 8002caa:	18fb      	adds	r3, r7, r3
 8002cac:	2200      	movs	r2, #0
 8002cae:	701a      	strb	r2, [r3, #0]
 8002cb0:	e01d      	b.n	8002cee <initDefaultChannels+0x92>
        LMIC.channelFreq[fu]  = iniChannelFreq[su];
 8002cb2:	240f      	movs	r4, #15
 8002cb4:	193b      	adds	r3, r7, r4
 8002cb6:	7819      	ldrb	r1, [r3, #0]
 8002cb8:	200e      	movs	r0, #14
 8002cba:	183b      	adds	r3, r7, r0
 8002cbc:	781a      	ldrb	r2, [r3, #0]
 8002cbe:	4b35      	ldr	r3, [pc, #212]	; (8002d94 <initDefaultChannels+0x138>)
 8002cc0:	0089      	lsls	r1, r1, #2
 8002cc2:	58c9      	ldr	r1, [r1, r3]
 8002cc4:	4b32      	ldr	r3, [pc, #200]	; (8002d90 <initDefaultChannels+0x134>)
 8002cc6:	3210      	adds	r2, #16
 8002cc8:	0092      	lsls	r2, r2, #2
 8002cca:	50d1      	str	r1, [r2, r3]
        LMIC.channelDrMap[fu] = DR_RANGE_MAP(DR_SF12,DR_SF7);
 8002ccc:	183b      	adds	r3, r7, r0
 8002cce:	781a      	ldrb	r2, [r3, #0]
 8002cd0:	4b2f      	ldr	r3, [pc, #188]	; (8002d90 <initDefaultChannels+0x134>)
 8002cd2:	3240      	adds	r2, #64	; 0x40
 8002cd4:	0052      	lsls	r2, r2, #1
 8002cd6:	213f      	movs	r1, #63	; 0x3f
 8002cd8:	52d1      	strh	r1, [r2, r3]
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
 8002cda:	183b      	adds	r3, r7, r0
 8002cdc:	781a      	ldrb	r2, [r3, #0]
 8002cde:	183b      	adds	r3, r7, r0
 8002ce0:	3201      	adds	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]
 8002ce4:	193b      	adds	r3, r7, r4
 8002ce6:	781a      	ldrb	r2, [r3, #0]
 8002ce8:	193b      	adds	r3, r7, r4
 8002cea:	3201      	adds	r2, #1
 8002cec:	701a      	strb	r2, [r3, #0]
 8002cee:	230e      	movs	r3, #14
 8002cf0:	18fb      	adds	r3, r7, r3
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b05      	cmp	r3, #5
 8002cf6:	d9dc      	bls.n	8002cb2 <initDefaultChannels+0x56>
//    if( !join ) {
//        LMIC.channelDrMap[5] = DR_RANGE_MAP(DR_SF12,DR_SF7);
//        LMIC.channelDrMap[1] = DR_RANGE_MAP(DR_SF12,DR_FSK);
//    }

    LMIC.bands[BAND_MILLI].txcap    = 1000;  // 0.1%
 8002cf8:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <initDefaultChannels+0x134>)
 8002cfa:	22fa      	movs	r2, #250	; 0xfa
 8002cfc:	0092      	lsls	r2, r2, #2
 8002cfe:	841a      	strh	r2, [r3, #32]
    LMIC.bands[BAND_MILLI].txpow    = 14;
 8002d00:	4b23      	ldr	r3, [pc, #140]	; (8002d90 <initDefaultChannels+0x134>)
 8002d02:	2222      	movs	r2, #34	; 0x22
 8002d04:	210e      	movs	r1, #14
 8002d06:	5499      	strb	r1, [r3, r2]
    LMIC.bands[BAND_MILLI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8002d08:	f003 fe30 	bl	800696c <radio_rand1>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	001a      	movs	r2, r3
 8002d10:	230f      	movs	r3, #15
 8002d12:	4013      	ands	r3, r2
 8002d14:	b2d9      	uxtb	r1, r3
 8002d16:	4b1e      	ldr	r3, [pc, #120]	; (8002d90 <initDefaultChannels+0x134>)
 8002d18:	2223      	movs	r2, #35	; 0x23
 8002d1a:	5499      	strb	r1, [r3, r2]
    LMIC.bands[BAND_CENTI].txcap    = 100;   // 1%
 8002d1c:	4b1c      	ldr	r3, [pc, #112]	; (8002d90 <initDefaultChannels+0x134>)
 8002d1e:	2264      	movs	r2, #100	; 0x64
 8002d20:	851a      	strh	r2, [r3, #40]	; 0x28
    LMIC.bands[BAND_CENTI].txpow    = 14;
 8002d22:	4b1b      	ldr	r3, [pc, #108]	; (8002d90 <initDefaultChannels+0x134>)
 8002d24:	222a      	movs	r2, #42	; 0x2a
 8002d26:	210e      	movs	r1, #14
 8002d28:	5499      	strb	r1, [r3, r2]
    LMIC.bands[BAND_CENTI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8002d2a:	f003 fe1f 	bl	800696c <radio_rand1>
 8002d2e:	0003      	movs	r3, r0
 8002d30:	001a      	movs	r2, r3
 8002d32:	230f      	movs	r3, #15
 8002d34:	4013      	ands	r3, r2
 8002d36:	b2d9      	uxtb	r1, r3
 8002d38:	4b15      	ldr	r3, [pc, #84]	; (8002d90 <initDefaultChannels+0x134>)
 8002d3a:	222b      	movs	r2, #43	; 0x2b
 8002d3c:	5499      	strb	r1, [r3, r2]
    LMIC.bands[BAND_DECI ].txcap    = 10;    // 10%
 8002d3e:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <initDefaultChannels+0x134>)
 8002d40:	220a      	movs	r2, #10
 8002d42:	861a      	strh	r2, [r3, #48]	; 0x30
    LMIC.bands[BAND_DECI ].txpow    = 27;
 8002d44:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <initDefaultChannels+0x134>)
 8002d46:	2232      	movs	r2, #50	; 0x32
 8002d48:	211b      	movs	r1, #27
 8002d4a:	5499      	strb	r1, [r3, r2]
    LMIC.bands[BAND_DECI ].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8002d4c:	f003 fe0e 	bl	800696c <radio_rand1>
 8002d50:	0003      	movs	r3, r0
 8002d52:	001a      	movs	r2, r3
 8002d54:	230f      	movs	r3, #15
 8002d56:	4013      	ands	r3, r2
 8002d58:	b2d9      	uxtb	r1, r3
 8002d5a:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <initDefaultChannels+0x134>)
 8002d5c:	2233      	movs	r2, #51	; 0x33
 8002d5e:	5499      	strb	r1, [r3, r2]
    LMIC.bands[BAND_MILLI].avail = 
    LMIC.bands[BAND_CENTI].avail =
    LMIC.bands[BAND_DECI ].avail = os_getTime();
 8002d60:	f003 f86a 	bl	8005e38 <os_getTime>
 8002d64:	0002      	movs	r2, r0
 8002d66:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <initDefaultChannels+0x134>)
 8002d68:	635a      	str	r2, [r3, #52]	; 0x34
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <initDefaultChannels+0x134>)
 8002d6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    LMIC.bands[BAND_CENTI].avail =
 8002d6e:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <initDefaultChannels+0x134>)
 8002d70:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d72:	4b07      	ldr	r3, [pc, #28]	; (8002d90 <initDefaultChannels+0x134>)
 8002d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    LMIC.bands[BAND_MILLI].avail = 
 8002d76:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <initDefaultChannels+0x134>)
 8002d78:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b005      	add	sp, #20
 8002d80:	bd90      	pop	{r4, r7, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	200002c0 	.word	0x200002c0
 8002d88:	20000300 	.word	0x20000300
 8002d8c:	200002a0 	.word	0x200002a0
 8002d90:	20000280 	.word	0x20000280
 8002d94:	0800df7c 	.word	0x0800df7c

08002d98 <LMIC_setupChannel>:
    b->avail = os_getTime();
    b->lastchnl = os_getRndU1() % MAX_CHANNELS;
    return 1;
}

bit_t LMIC_setupChannel (u1_t chidx, u4_t freq, u2_t drmap, s1_t band) {
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	0004      	movs	r4, r0
 8002da0:	6039      	str	r1, [r7, #0]
 8002da2:	0010      	movs	r0, r2
 8002da4:	0019      	movs	r1, r3
 8002da6:	1dfb      	adds	r3, r7, #7
 8002da8:	1c22      	adds	r2, r4, #0
 8002daa:	701a      	strb	r2, [r3, #0]
 8002dac:	1d3b      	adds	r3, r7, #4
 8002dae:	1c02      	adds	r2, r0, #0
 8002db0:	801a      	strh	r2, [r3, #0]
 8002db2:	1dbb      	adds	r3, r7, #6
 8002db4:	1c0a      	adds	r2, r1, #0
 8002db6:	701a      	strb	r2, [r3, #0]
    if( chidx >= MAX_CHANNELS )
 8002db8:	1dfb      	adds	r3, r7, #7
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b0f      	cmp	r3, #15
 8002dbe:	d901      	bls.n	8002dc4 <LMIC_setupChannel+0x2c>
        return 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	e05c      	b.n	8002e7e <LMIC_setupChannel+0xe6>
    if( band == -1 ) {
 8002dc4:	1dbb      	adds	r3, r7, #6
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	b25b      	sxtb	r3, r3
 8002dca:	3301      	adds	r3, #1
 8002dcc:	d121      	bne.n	8002e12 <LMIC_setupChannel+0x7a>
        if( freq >= 869400000 && freq <= 869650000 )
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	4a2d      	ldr	r2, [pc, #180]	; (8002e88 <LMIC_setupChannel+0xf0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d908      	bls.n	8002de8 <LMIC_setupChannel+0x50>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	4a2c      	ldr	r2, [pc, #176]	; (8002e8c <LMIC_setupChannel+0xf4>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d804      	bhi.n	8002de8 <LMIC_setupChannel+0x50>
            freq |= BAND_DECI;   // 10% 27dBm
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2202      	movs	r2, #2
 8002de2:	4313      	orrs	r3, r2
 8002de4:	603b      	str	r3, [r7, #0]
 8002de6:	e024      	b.n	8002e32 <LMIC_setupChannel+0x9a>
        else if( (freq >= 868000000 && freq <= 868600000) ||
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	4a29      	ldr	r2, [pc, #164]	; (8002e90 <LMIC_setupChannel+0xf8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d903      	bls.n	8002df8 <LMIC_setupChannel+0x60>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	4a28      	ldr	r2, [pc, #160]	; (8002e94 <LMIC_setupChannel+0xfc>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d907      	bls.n	8002e08 <LMIC_setupChannel+0x70>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	4a27      	ldr	r2, [pc, #156]	; (8002e98 <LMIC_setupChannel+0x100>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d918      	bls.n	8002e32 <LMIC_setupChannel+0x9a>
                 (freq >= 869700000 && freq <= 870000000)  )
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	4a26      	ldr	r2, [pc, #152]	; (8002e9c <LMIC_setupChannel+0x104>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d814      	bhi.n	8002e32 <LMIC_setupChannel+0x9a>
            freq |= BAND_CENTI;  // 1% 14dBm 
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	e00f      	b.n	8002e32 <LMIC_setupChannel+0x9a>
        else 
            freq |= BAND_MILLI;  // 0.1% 14dBm
    } else {
        if( band > BAND_AUX ) return 0;
 8002e12:	1dbb      	adds	r3, r7, #6
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	b25b      	sxtb	r3, r3
 8002e18:	2b03      	cmp	r3, #3
 8002e1a:	dd01      	ble.n	8002e20 <LMIC_setupChannel+0x88>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	e02e      	b.n	8002e7e <LMIC_setupChannel+0xe6>
        freq = (freq&~3) | band;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2203      	movs	r2, #3
 8002e24:	4393      	bics	r3, r2
 8002e26:	001a      	movs	r2, r3
 8002e28:	1dbb      	adds	r3, r7, #6
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	b25b      	sxtb	r3, r3
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	603b      	str	r3, [r7, #0]
    }
    LMIC.channelFreq [chidx] = freq;
 8002e32:	1dfb      	adds	r3, r7, #7
 8002e34:	781a      	ldrb	r2, [r3, #0]
 8002e36:	4b1a      	ldr	r3, [pc, #104]	; (8002ea0 <LMIC_setupChannel+0x108>)
 8002e38:	3210      	adds	r2, #16
 8002e3a:	0092      	lsls	r2, r2, #2
 8002e3c:	6839      	ldr	r1, [r7, #0]
 8002e3e:	50d1      	str	r1, [r2, r3]
    LMIC.channelDrMap[chidx] = drmap==0 ? DR_RANGE_MAP(DR_SF12,DR_SF7) : drmap;
 8002e40:	1d3b      	adds	r3, r7, #4
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <LMIC_setupChannel+0xb6>
 8002e48:	1d3b      	adds	r3, r7, #4
 8002e4a:	8819      	ldrh	r1, [r3, #0]
 8002e4c:	e000      	b.n	8002e50 <LMIC_setupChannel+0xb8>
 8002e4e:	213f      	movs	r1, #63	; 0x3f
 8002e50:	1dfb      	adds	r3, r7, #7
 8002e52:	781a      	ldrb	r2, [r3, #0]
 8002e54:	4b12      	ldr	r3, [pc, #72]	; (8002ea0 <LMIC_setupChannel+0x108>)
 8002e56:	3240      	adds	r2, #64	; 0x40
 8002e58:	0052      	lsls	r2, r2, #1
 8002e5a:	52d1      	strh	r1, [r2, r3]
    LMIC.channelMap |= 1<<chidx;  // enabled right away
 8002e5c:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <LMIC_setupChannel+0x108>)
 8002e5e:	22a0      	movs	r2, #160	; 0xa0
 8002e60:	5a9b      	ldrh	r3, [r3, r2]
 8002e62:	b21a      	sxth	r2, r3
 8002e64:	1dfb      	adds	r3, r7, #7
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2101      	movs	r1, #1
 8002e6a:	4099      	lsls	r1, r3
 8002e6c:	000b      	movs	r3, r1
 8002e6e:	b21b      	sxth	r3, r3
 8002e70:	4313      	orrs	r3, r2
 8002e72:	b21b      	sxth	r3, r3
 8002e74:	b299      	uxth	r1, r3
 8002e76:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <LMIC_setupChannel+0x108>)
 8002e78:	22a0      	movs	r2, #160	; 0xa0
 8002e7a:	5299      	strh	r1, [r3, r2]
    return 1;
 8002e7c:	2301      	movs	r3, #1
}
 8002e7e:	0018      	movs	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	b003      	add	sp, #12
 8002e84:	bd90      	pop	{r4, r7, pc}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	33d1fdbf 	.word	0x33d1fdbf
 8002e8c:	33d5ce50 	.word	0x33d5ce50
 8002e90:	33bca0ff 	.word	0x33bca0ff
 8002e94:	33c5c8c0 	.word	0x33c5c8c0
 8002e98:	33d6919f 	.word	0x33d6919f
 8002e9c:	33db2580 	.word	0x33db2580
 8002ea0:	20000280 	.word	0x20000280

08002ea4 <convFreq>:
    LMIC.channelFreq[channel] = 0;
    LMIC.channelDrMap[channel] = 0;
    LMIC.channelMap &= ~(1<<channel);
}

static u4_t convFreq (xref2u1_t ptr) {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
    u4_t freq = (os_rlsbf4(ptr-1) >> 8) * 100;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f7ff f939 	bl	8002128 <os_rlsbf4>
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	0a1b      	lsrs	r3, r3, #8
 8002eba:	2264      	movs	r2, #100	; 0x64
 8002ebc:	4353      	muls	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]
    if( freq < EU868_FREQ_MIN || freq > EU868_FREQ_MAX )
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4a07      	ldr	r2, [pc, #28]	; (8002ee0 <convFreq+0x3c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d903      	bls.n	8002ed0 <convFreq+0x2c>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4a06      	ldr	r2, [pc, #24]	; (8002ee4 <convFreq+0x40>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d901      	bls.n	8002ed4 <convFreq+0x30>
        freq = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]
    return freq;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
}
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b004      	add	sp, #16
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	337055bf 	.word	0x337055bf
 8002ee4:	33db2580 	.word	0x33db2580

08002ee8 <mapChannels>:

static u1_t mapChannels (u1_t chpage, u2_t chmap) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	0002      	movs	r2, r0
 8002ef0:	1dfb      	adds	r3, r7, #7
 8002ef2:	701a      	strb	r2, [r3, #0]
 8002ef4:	1d3b      	adds	r3, r7, #4
 8002ef6:	1c0a      	adds	r2, r1, #0
 8002ef8:	801a      	strh	r2, [r3, #0]
    // Bad page, disable all channel, enable non-existent
    if( chpage != 0 || chmap==0 || (chmap & ~LMIC.channelMap) != 0 )
 8002efa:	1dfb      	adds	r3, r7, #7
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10b      	bne.n	8002f1a <mapChannels+0x32>
 8002f02:	1d3b      	adds	r3, r7, #4
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <mapChannels+0x32>
 8002f0a:	1d3b      	adds	r3, r7, #4
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	4a21      	ldr	r2, [pc, #132]	; (8002f94 <mapChannels+0xac>)
 8002f10:	21a0      	movs	r1, #160	; 0xa0
 8002f12:	5a52      	ldrh	r2, [r2, r1]
 8002f14:	43d2      	mvns	r2, r2
 8002f16:	4013      	ands	r3, r2
 8002f18:	d001      	beq.n	8002f1e <mapChannels+0x36>
        return 0;  // illegal input
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e036      	b.n	8002f8c <mapChannels+0xa4>
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 8002f1e:	230f      	movs	r3, #15
 8002f20:	18fb      	adds	r3, r7, r3
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
 8002f26:	e026      	b.n	8002f76 <mapChannels+0x8e>
        if( (chmap & (1<<chnl)) != 0 && LMIC.channelFreq[chnl] == 0 )
 8002f28:	1d3b      	adds	r3, r7, #4
 8002f2a:	881a      	ldrh	r2, [r3, #0]
 8002f2c:	210f      	movs	r1, #15
 8002f2e:	187b      	adds	r3, r7, r1
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	411a      	asrs	r2, r3
 8002f34:	0013      	movs	r3, r2
 8002f36:	2201      	movs	r2, #1
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d016      	beq.n	8002f6a <mapChannels+0x82>
 8002f3c:	187b      	adds	r3, r7, r1
 8002f3e:	781a      	ldrb	r2, [r3, #0]
 8002f40:	4b14      	ldr	r3, [pc, #80]	; (8002f94 <mapChannels+0xac>)
 8002f42:	3210      	adds	r2, #16
 8002f44:	0092      	lsls	r2, r2, #2
 8002f46:	58d3      	ldr	r3, [r2, r3]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10e      	bne.n	8002f6a <mapChannels+0x82>
            chmap &= ~(1<<chnl); // ignore - channel is not defined
 8002f4c:	187b      	adds	r3, r7, r1
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2201      	movs	r2, #1
 8002f52:	409a      	lsls	r2, r3
 8002f54:	0013      	movs	r3, r2
 8002f56:	b21b      	sxth	r3, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	b21b      	sxth	r3, r3
 8002f5c:	1d3a      	adds	r2, r7, #4
 8002f5e:	2100      	movs	r1, #0
 8002f60:	5e52      	ldrsh	r2, [r2, r1]
 8002f62:	4013      	ands	r3, r2
 8002f64:	b21a      	sxth	r2, r3
 8002f66:	1d3b      	adds	r3, r7, #4
 8002f68:	801a      	strh	r2, [r3, #0]
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 8002f6a:	210f      	movs	r1, #15
 8002f6c:	187b      	adds	r3, r7, r1
 8002f6e:	781a      	ldrb	r2, [r3, #0]
 8002f70:	187b      	adds	r3, r7, r1
 8002f72:	3201      	adds	r2, #1
 8002f74:	701a      	strb	r2, [r3, #0]
 8002f76:	230f      	movs	r3, #15
 8002f78:	18fb      	adds	r3, r7, r3
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b0f      	cmp	r3, #15
 8002f7e:	d9d3      	bls.n	8002f28 <mapChannels+0x40>
    }
    LMIC.channelMap = chmap;
 8002f80:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <mapChannels+0xac>)
 8002f82:	1d3a      	adds	r2, r7, #4
 8002f84:	21a0      	movs	r1, #160	; 0xa0
 8002f86:	8812      	ldrh	r2, [r2, #0]
 8002f88:	525a      	strh	r2, [r3, r1]
    return 1;
 8002f8a:	2301      	movs	r3, #1
}
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b004      	add	sp, #16
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	20000280 	.word	0x20000280

08002f98 <updateTx>:


static void updateTx (ostime_t txbeg) {
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
    u4_t freq = LMIC.channelFreq[LMIC.txChnl];
 8002fa0:	4b22      	ldr	r3, [pc, #136]	; (800302c <updateTx+0x94>)
 8002fa2:	22a2      	movs	r2, #162	; 0xa2
 8002fa4:	5c9b      	ldrb	r3, [r3, r2]
 8002fa6:	001a      	movs	r2, r3
 8002fa8:	4b20      	ldr	r3, [pc, #128]	; (800302c <updateTx+0x94>)
 8002faa:	3210      	adds	r2, #16
 8002fac:	0092      	lsls	r2, r2, #2
 8002fae:	58d3      	ldr	r3, [r2, r3]
 8002fb0:	617b      	str	r3, [r7, #20]
    // Update global/band specific duty cycle stats
    ostime_t airtime = calcAirTime(LMIC.rps, LMIC.dataLen);
 8002fb2:	4b1e      	ldr	r3, [pc, #120]	; (800302c <updateTx+0x94>)
 8002fb4:	89d8      	ldrh	r0, [r3, #14]
 8002fb6:	4a1d      	ldr	r2, [pc, #116]	; (800302c <updateTx+0x94>)
 8002fb8:	2348      	movs	r3, #72	; 0x48
 8002fba:	33ff      	adds	r3, #255	; 0xff
 8002fbc:	5cd3      	ldrb	r3, [r2, r3]
 8002fbe:	0019      	movs	r1, r3
 8002fc0:	f7ff fb28 	bl	8002614 <calcAirTime>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	613b      	str	r3, [r7, #16]
    // Update channel/global duty cycle stats
    xref2band_t band = &LMIC.bands[freq & 0x3];
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2203      	movs	r2, #3
 8002fcc:	4013      	ands	r3, r2
 8002fce:	3304      	adds	r3, #4
 8002fd0:	00da      	lsls	r2, r3, #3
 8002fd2:	4b16      	ldr	r3, [pc, #88]	; (800302c <updateTx+0x94>)
 8002fd4:	18d3      	adds	r3, r2, r3
 8002fd6:	60fb      	str	r3, [r7, #12]
    LMIC.freq  = freq & ~(u4_t)3;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2203      	movs	r2, #3
 8002fdc:	4393      	bics	r3, r2
 8002fde:	001a      	movs	r2, r3
 8002fe0:	4b12      	ldr	r3, [pc, #72]	; (800302c <updateTx+0x94>)
 8002fe2:	609a      	str	r2, [r3, #8]
    LMIC.txpow = band->txpow;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	569a      	ldrsb	r2, [r3, r2]
 8002fea:	4b10      	ldr	r3, [pc, #64]	; (800302c <updateTx+0x94>)
 8002fec:	749a      	strb	r2, [r3, #18]
    band->avail = txbeg + airtime * band->txcap;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	001a      	movs	r2, r3
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	435a      	muls	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	18d2      	adds	r2, r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	605a      	str	r2, [r3, #4]
    if( LMIC.globalDutyRate != 0 )
 8003000:	4b0a      	ldr	r3, [pc, #40]	; (800302c <updateTx+0x94>)
 8003002:	22a3      	movs	r2, #163	; 0xa3
 8003004:	5c9b      	ldrb	r3, [r3, r2]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00b      	beq.n	8003022 <updateTx+0x8a>
        LMIC.globalDutyAvail = txbeg + (airtime<<LMIC.globalDutyRate);
 800300a:	4b08      	ldr	r3, [pc, #32]	; (800302c <updateTx+0x94>)
 800300c:	22a3      	movs	r2, #163	; 0xa3
 800300e:	5c9b      	ldrb	r3, [r3, r2]
 8003010:	001a      	movs	r2, r3
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4093      	lsls	r3, r2
 8003016:	001a      	movs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	18d2      	adds	r2, r2, r3
 800301c:	4b03      	ldr	r3, [pc, #12]	; (800302c <updateTx+0x94>)
 800301e:	21a4      	movs	r1, #164	; 0xa4
 8003020:	505a      	str	r2, [r3, r1]
}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	46bd      	mov	sp, r7
 8003026:	b006      	add	sp, #24
 8003028:	bd80      	pop	{r7, pc}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	20000280 	.word	0x20000280

08003030 <nextTx>:

static ostime_t nextTx (ostime_t now) {
 8003030:	b590      	push	{r4, r7, lr}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
    u1_t bmap=0xF;
 8003038:	2317      	movs	r3, #23
 800303a:	18fb      	adds	r3, r7, r3
 800303c:	220f      	movs	r2, #15
 800303e:	701a      	strb	r2, [r3, #0]
    do {
        ostime_t mintime = now + /*10h*/36000*OSTICKS_PER_SEC;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a61      	ldr	r2, [pc, #388]	; (80031c8 <nextTx+0x198>)
 8003044:	4694      	mov	ip, r2
 8003046:	4463      	add	r3, ip
 8003048:	613b      	str	r3, [r7, #16]
        u1_t band=0;
 800304a:	230f      	movs	r3, #15
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	2200      	movs	r2, #0
 8003050:	701a      	strb	r2, [r3, #0]
        for( u1_t bi=0; bi<4; bi++ ) {
 8003052:	230e      	movs	r3, #14
 8003054:	18fb      	adds	r3, r7, r3
 8003056:	2200      	movs	r2, #0
 8003058:	701a      	strb	r2, [r3, #0]
 800305a:	e02a      	b.n	80030b2 <nextTx+0x82>
            if( (bmap & (1<<bi)) && mintime - LMIC.bands[bi].avail > 0 )
 800305c:	2317      	movs	r3, #23
 800305e:	18fb      	adds	r3, r7, r3
 8003060:	781a      	ldrb	r2, [r3, #0]
 8003062:	210e      	movs	r1, #14
 8003064:	187b      	adds	r3, r7, r1
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	411a      	asrs	r2, r3
 800306a:	0013      	movs	r3, r2
 800306c:	2201      	movs	r2, #1
 800306e:	4013      	ands	r3, r2
 8003070:	d019      	beq.n	80030a6 <nextTx+0x76>
 8003072:	187b      	adds	r3, r7, r1
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	4a55      	ldr	r2, [pc, #340]	; (80031cc <nextTx+0x19c>)
 8003078:	3304      	adds	r3, #4
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	18d3      	adds	r3, r2, r3
 800307e:	3304      	adds	r3, #4
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	dd0d      	ble.n	80030a6 <nextTx+0x76>
                mintime = LMIC.bands[band = bi].avail;
 800308a:	200f      	movs	r0, #15
 800308c:	183b      	adds	r3, r7, r0
 800308e:	187a      	adds	r2, r7, r1
 8003090:	7812      	ldrb	r2, [r2, #0]
 8003092:	701a      	strb	r2, [r3, #0]
 8003094:	183b      	adds	r3, r7, r0
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	4a4c      	ldr	r2, [pc, #304]	; (80031cc <nextTx+0x19c>)
 800309a:	3304      	adds	r3, #4
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	18d3      	adds	r3, r2, r3
 80030a0:	3304      	adds	r3, #4
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	613b      	str	r3, [r7, #16]
        for( u1_t bi=0; bi<4; bi++ ) {
 80030a6:	210e      	movs	r1, #14
 80030a8:	187b      	adds	r3, r7, r1
 80030aa:	781a      	ldrb	r2, [r3, #0]
 80030ac:	187b      	adds	r3, r7, r1
 80030ae:	3201      	adds	r2, #1
 80030b0:	701a      	strb	r2, [r3, #0]
 80030b2:	230e      	movs	r3, #14
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d9cf      	bls.n	800305c <nextTx+0x2c>
        }
        // Find next channel in given band
        u1_t chnl = LMIC.bands[band].lastchnl;
 80030bc:	230f      	movs	r3, #15
 80030be:	18fb      	adds	r3, r7, r3
 80030c0:	781a      	ldrb	r2, [r3, #0]
 80030c2:	230d      	movs	r3, #13
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	4941      	ldr	r1, [pc, #260]	; (80031cc <nextTx+0x19c>)
 80030c8:	3204      	adds	r2, #4
 80030ca:	00d2      	lsls	r2, r2, #3
 80030cc:	188a      	adds	r2, r1, r2
 80030ce:	3203      	adds	r2, #3
 80030d0:	7812      	ldrb	r2, [r2, #0]
 80030d2:	701a      	strb	r2, [r3, #0]
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 80030d4:	230c      	movs	r3, #12
 80030d6:	18fb      	adds	r3, r7, r3
 80030d8:	2200      	movs	r2, #0
 80030da:	701a      	strb	r2, [r3, #0]
 80030dc:	e054      	b.n	8003188 <nextTx+0x158>
            if( (chnl = (chnl+1)) >= MAX_CHANNELS )
 80030de:	210d      	movs	r1, #13
 80030e0:	187b      	adds	r3, r7, r1
 80030e2:	187a      	adds	r2, r7, r1
 80030e4:	7812      	ldrb	r2, [r2, #0]
 80030e6:	3201      	adds	r2, #1
 80030e8:	701a      	strb	r2, [r3, #0]
 80030ea:	187b      	adds	r3, r7, r1
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b0f      	cmp	r3, #15
 80030f0:	d904      	bls.n	80030fc <nextTx+0xcc>
                chnl -=  MAX_CHANNELS;
 80030f2:	187b      	adds	r3, r7, r1
 80030f4:	187a      	adds	r2, r7, r1
 80030f6:	7812      	ldrb	r2, [r2, #0]
 80030f8:	3a10      	subs	r2, #16
 80030fa:	701a      	strb	r2, [r3, #0]
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 80030fc:	4b33      	ldr	r3, [pc, #204]	; (80031cc <nextTx+0x19c>)
 80030fe:	22a0      	movs	r2, #160	; 0xa0
 8003100:	5a9b      	ldrh	r3, [r3, r2]
 8003102:	001a      	movs	r2, r3
 8003104:	200d      	movs	r0, #13
 8003106:	183b      	adds	r3, r7, r0
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	411a      	asrs	r2, r3
 800310c:	0013      	movs	r3, r2
 800310e:	2201      	movs	r2, #1
 8003110:	4013      	ands	r3, r2
 8003112:	d033      	beq.n	800317c <nextTx+0x14c>
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 8003114:	183b      	adds	r3, r7, r0
 8003116:	781a      	ldrb	r2, [r3, #0]
 8003118:	4b2c      	ldr	r3, [pc, #176]	; (80031cc <nextTx+0x19c>)
 800311a:	3240      	adds	r2, #64	; 0x40
 800311c:	0052      	lsls	r2, r2, #1
 800311e:	5ad3      	ldrh	r3, [r2, r3]
 8003120:	0019      	movs	r1, r3
 8003122:	4b2a      	ldr	r3, [pc, #168]	; (80031cc <nextTx+0x19c>)
 8003124:	22b0      	movs	r2, #176	; 0xb0
 8003126:	5c9b      	ldrb	r3, [r3, r2]
 8003128:	001a      	movs	r2, r3
 800312a:	230f      	movs	r3, #15
 800312c:	4013      	ands	r3, r2
 800312e:	4119      	asrs	r1, r3
 8003130:	000b      	movs	r3, r1
 8003132:	2201      	movs	r2, #1
 8003134:	4013      	ands	r3, r2
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 8003136:	d021      	beq.n	800317c <nextTx+0x14c>
                band == (LMIC.channelFreq[chnl] & 0x3) ) { // in selected band
 8003138:	240f      	movs	r4, #15
 800313a:	193b      	adds	r3, r7, r4
 800313c:	781a      	ldrb	r2, [r3, #0]
 800313e:	183b      	adds	r3, r7, r0
 8003140:	7819      	ldrb	r1, [r3, #0]
 8003142:	4b22      	ldr	r3, [pc, #136]	; (80031cc <nextTx+0x19c>)
 8003144:	3110      	adds	r1, #16
 8003146:	0089      	lsls	r1, r1, #2
 8003148:	58cb      	ldr	r3, [r1, r3]
 800314a:	2103      	movs	r1, #3
 800314c:	400b      	ands	r3, r1
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 800314e:	429a      	cmp	r2, r3
 8003150:	d114      	bne.n	800317c <nextTx+0x14c>
                LMIC.txChnl = LMIC.bands[band].lastchnl = chnl;
 8003152:	193b      	adds	r3, r7, r4
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	491d      	ldr	r1, [pc, #116]	; (80031cc <nextTx+0x19c>)
 8003158:	1d1a      	adds	r2, r3, #4
 800315a:	00d2      	lsls	r2, r2, #3
 800315c:	188a      	adds	r2, r1, r2
 800315e:	3203      	adds	r2, #3
 8003160:	1839      	adds	r1, r7, r0
 8003162:	7809      	ldrb	r1, [r1, #0]
 8003164:	7011      	strb	r1, [r2, #0]
 8003166:	4a19      	ldr	r2, [pc, #100]	; (80031cc <nextTx+0x19c>)
 8003168:	3304      	adds	r3, #4
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	18d3      	adds	r3, r2, r3
 800316e:	3303      	adds	r3, #3
 8003170:	7819      	ldrb	r1, [r3, #0]
 8003172:	4b16      	ldr	r3, [pc, #88]	; (80031cc <nextTx+0x19c>)
 8003174:	22a2      	movs	r2, #162	; 0xa2
 8003176:	5499      	strb	r1, [r3, r2]
                return mintime;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	e021      	b.n	80031c0 <nextTx+0x190>
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 800317c:	210c      	movs	r1, #12
 800317e:	187b      	adds	r3, r7, r1
 8003180:	781a      	ldrb	r2, [r3, #0]
 8003182:	187b      	adds	r3, r7, r1
 8003184:	3201      	adds	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]
 8003188:	230c      	movs	r3, #12
 800318a:	18fb      	adds	r3, r7, r3
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b0f      	cmp	r3, #15
 8003190:	d9a5      	bls.n	80030de <nextTx+0xae>
            }
        }
        if( (bmap &= ~(1<<band)) == 0 ) {
 8003192:	230f      	movs	r3, #15
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2201      	movs	r2, #1
 800319a:	409a      	lsls	r2, r3
 800319c:	0013      	movs	r3, r2
 800319e:	b25b      	sxtb	r3, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	b25b      	sxtb	r3, r3
 80031a4:	2117      	movs	r1, #23
 80031a6:	187a      	adds	r2, r7, r1
 80031a8:	7812      	ldrb	r2, [r2, #0]
 80031aa:	b252      	sxtb	r2, r2
 80031ac:	4013      	ands	r3, r2
 80031ae:	b25a      	sxtb	r2, r3
 80031b0:	187b      	adds	r3, r7, r1
 80031b2:	701a      	strb	r2, [r3, #0]
 80031b4:	187b      	adds	r3, r7, r1
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d000      	beq.n	80031be <nextTx+0x18e>
 80031bc:	e740      	b.n	8003040 <nextTx+0x10>
            // No feasible channel  found!
            return mintime;
 80031be:	693b      	ldr	r3, [r7, #16]
        }
    } while(1);
}
 80031c0:	0018      	movs	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	b007      	add	sp, #28
 80031c6:	bd90      	pop	{r4, r7, pc}
 80031c8:	44aa2000 	.word	0x44aa2000
 80031cc:	20000280 	.word	0x20000280

080031d0 <setBcnRxParams>:


static void setBcnRxParams (void) {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
    LMIC.dataLen = 0;
 80031d4:	4a13      	ldr	r2, [pc, #76]	; (8003224 <setBcnRxParams+0x54>)
 80031d6:	2348      	movs	r3, #72	; 0x48
 80031d8:	33ff      	adds	r3, #255	; 0xff
 80031da:	2100      	movs	r1, #0
 80031dc:	54d1      	strb	r1, [r2, r3]
    LMIC.freq = LMIC.channelFreq[LMIC.bcnChnl] & ~(u4_t)3;
 80031de:	4a11      	ldr	r2, [pc, #68]	; (8003224 <setBcnRxParams+0x54>)
 80031e0:	23c4      	movs	r3, #196	; 0xc4
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	5cd3      	ldrb	r3, [r2, r3]
 80031e6:	001a      	movs	r2, r3
 80031e8:	4b0e      	ldr	r3, [pc, #56]	; (8003224 <setBcnRxParams+0x54>)
 80031ea:	3210      	adds	r2, #16
 80031ec:	0092      	lsls	r2, r2, #2
 80031ee:	58d3      	ldr	r3, [r2, r3]
 80031f0:	2203      	movs	r2, #3
 80031f2:	4393      	bics	r3, r2
 80031f4:	001a      	movs	r2, r3
 80031f6:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <setBcnRxParams+0x54>)
 80031f8:	609a      	str	r2, [r3, #8]
    LMIC.rps  = setIh(setNocrc(dndr2rps((dr_t)DR_BCN),1),LEN_BCN);
 80031fa:	2003      	movs	r0, #3
 80031fc:	f7fe ff1c 	bl	8002038 <dndr2rps>
 8003200:	0003      	movs	r3, r0
 8003202:	2101      	movs	r1, #1
 8003204:	0018      	movs	r0, r3
 8003206:	f7fe fec6 	bl	8001f96 <setNocrc>
 800320a:	0003      	movs	r3, r0
 800320c:	2111      	movs	r1, #17
 800320e:	0018      	movs	r0, r3
 8003210:	f7fe fee9 	bl	8001fe6 <setIh>
 8003214:	0003      	movs	r3, r0
 8003216:	001a      	movs	r2, r3
 8003218:	4b02      	ldr	r3, [pc, #8]	; (8003224 <setBcnRxParams+0x54>)
 800321a:	81da      	strh	r2, [r3, #14]
}
 800321c:	46c0      	nop			; (mov r8, r8)
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	20000280 	.word	0x20000280

08003228 <initJoinLoop>:

#define setRx1Params() /*LMIC.freq/rps remain unchanged*/

static void initJoinLoop (void) {
 8003228:	b5b0      	push	{r4, r5, r7, lr}
 800322a:	af00      	add	r7, sp, #0
#if CFG_TxContinuousMode
  LMIC.txChnl = 0;
#else
    LMIC.txChnl = os_getRndU1() % NUM_DEFAULT_CHANNELS;
 800322c:	f003 fb9e 	bl	800696c <radio_rand1>
 8003230:	0003      	movs	r3, r0
 8003232:	2106      	movs	r1, #6
 8003234:	0018      	movs	r0, r3
 8003236:	f7fc ffed 	bl	8000214 <__aeabi_uidivmod>
 800323a:	000b      	movs	r3, r1
 800323c:	b2d9      	uxtb	r1, r3
 800323e:	4b12      	ldr	r3, [pc, #72]	; (8003288 <initJoinLoop+0x60>)
 8003240:	22a2      	movs	r2, #162	; 0xa2
 8003242:	5499      	strb	r1, [r3, r2]
#endif
    LMIC.adrTxPow = 14;
 8003244:	4b10      	ldr	r3, [pc, #64]	; (8003288 <initJoinLoop+0x60>)
 8003246:	22af      	movs	r2, #175	; 0xaf
 8003248:	210e      	movs	r1, #14
 800324a:	5499      	strb	r1, [r3, r2]
    setDrJoin(DRCHG_SET, DR_SF7);
 800324c:	2105      	movs	r1, #5
 800324e:	2000      	movs	r0, #0
 8003250:	f7ff fcba 	bl	8002bc8 <setDrJoin>
    initDefaultChannels(1);
 8003254:	2001      	movs	r0, #1
 8003256:	f7ff fd01 	bl	8002c5c <initDefaultChannels>
    ASSERT((LMIC.opmode & OP_NEXTCHNL)==0);
 800325a:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <initJoinLoop+0x60>)
 800325c:	22ac      	movs	r2, #172	; 0xac
 800325e:	5a9b      	ldrh	r3, [r3, r2]
 8003260:	001a      	movs	r2, r3
 8003262:	2380      	movs	r3, #128	; 0x80
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	4013      	ands	r3, r2
 8003268:	d001      	beq.n	800326e <initJoinLoop+0x46>
 800326a:	f7fe fd03 	bl	8001c74 <hal_failed>
    LMIC.txend = LMIC.bands[BAND_MILLI].avail + rndDelay(8);
 800326e:	4b06      	ldr	r3, [pc, #24]	; (8003288 <initJoinLoop+0x60>)
 8003270:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003272:	2008      	movs	r0, #8
 8003274:	f7ff fc32 	bl	8002adc <rndDelay>
 8003278:	0003      	movs	r3, r0
 800327a:	18e2      	adds	r2, r4, r3
 800327c:	4b02      	ldr	r3, [pc, #8]	; (8003288 <initJoinLoop+0x60>)
 800327e:	601a      	str	r2, [r3, #0]
}
 8003280:	46c0      	nop			; (mov r8, r8)
 8003282:	46bd      	mov	sp, r7
 8003284:	bdb0      	pop	{r4, r5, r7, pc}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	20000280 	.word	0x20000280

0800328c <nextJoinState>:


static ostime_t nextJoinState (void) {
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
    u1_t failed = 0;
 8003292:	1dfb      	adds	r3, r7, #7
 8003294:	2200      	movs	r2, #0
 8003296:	701a      	strb	r2, [r3, #0]

    // Try 869.x and then 864.x with same DR
    // If both fail try next lower datarate
    if( ++LMIC.txChnl == NUM_DEFAULT_CHANNELS )
 8003298:	4b31      	ldr	r3, [pc, #196]	; (8003360 <nextJoinState+0xd4>)
 800329a:	22a2      	movs	r2, #162	; 0xa2
 800329c:	5c9b      	ldrb	r3, [r3, r2]
 800329e:	3301      	adds	r3, #1
 80032a0:	b2d9      	uxtb	r1, r3
 80032a2:	4b2f      	ldr	r3, [pc, #188]	; (8003360 <nextJoinState+0xd4>)
 80032a4:	22a2      	movs	r2, #162	; 0xa2
 80032a6:	5499      	strb	r1, [r3, r2]
 80032a8:	4b2d      	ldr	r3, [pc, #180]	; (8003360 <nextJoinState+0xd4>)
 80032aa:	22a2      	movs	r2, #162	; 0xa2
 80032ac:	5c9b      	ldrb	r3, [r3, r2]
 80032ae:	2b06      	cmp	r3, #6
 80032b0:	d103      	bne.n	80032ba <nextJoinState+0x2e>
        LMIC.txChnl = 0;
 80032b2:	4b2b      	ldr	r3, [pc, #172]	; (8003360 <nextJoinState+0xd4>)
 80032b4:	22a2      	movs	r2, #162	; 0xa2
 80032b6:	2100      	movs	r1, #0
 80032b8:	5499      	strb	r1, [r3, r2]
    if( (++LMIC.txCnt & 1) == 0 ) {
 80032ba:	4a29      	ldr	r2, [pc, #164]	; (8003360 <nextJoinState+0xd4>)
 80032bc:	23a2      	movs	r3, #162	; 0xa2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	5cd3      	ldrb	r3, [r2, r3]
 80032c2:	3301      	adds	r3, #1
 80032c4:	b2d9      	uxtb	r1, r3
 80032c6:	4a26      	ldr	r2, [pc, #152]	; (8003360 <nextJoinState+0xd4>)
 80032c8:	23a2      	movs	r3, #162	; 0xa2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	54d1      	strb	r1, [r2, r3]
 80032ce:	4a24      	ldr	r2, [pc, #144]	; (8003360 <nextJoinState+0xd4>)
 80032d0:	23a2      	movs	r3, #162	; 0xa2
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	5cd3      	ldrb	r3, [r2, r3]
 80032d6:	001a      	movs	r2, r3
 80032d8:	2301      	movs	r3, #1
 80032da:	4013      	ands	r3, r2
 80032dc:	d113      	bne.n	8003306 <nextJoinState+0x7a>
        // Lower DR every 2nd try (having tried 868.x and 864.x with the same DR)
        if( LMIC.datarate == DR_SF12 )
 80032de:	4b20      	ldr	r3, [pc, #128]	; (8003360 <nextJoinState+0xd4>)
 80032e0:	22b0      	movs	r2, #176	; 0xb0
 80032e2:	5c9b      	ldrb	r3, [r3, r2]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d103      	bne.n	80032f0 <nextJoinState+0x64>
            failed = 1; // we have tried all DR - signal EV_JOIN_FAILED
 80032e8:	1dfb      	adds	r3, r7, #7
 80032ea:	2201      	movs	r2, #1
 80032ec:	701a      	strb	r2, [r3, #0]
 80032ee:	e00a      	b.n	8003306 <nextJoinState+0x7a>
        else
            setDrJoin(DRCHG_NOJACC, decDR((dr_t)LMIC.datarate));
 80032f0:	4b1b      	ldr	r3, [pc, #108]	; (8003360 <nextJoinState+0xd4>)
 80032f2:	22b0      	movs	r2, #176	; 0xb0
 80032f4:	5c9b      	ldrb	r3, [r3, r2]
 80032f6:	0018      	movs	r0, r3
 80032f8:	f7fe feb4 	bl	8002064 <decDR>
 80032fc:	0003      	movs	r3, r0
 80032fe:	0019      	movs	r1, r3
 8003300:	2001      	movs	r0, #1
 8003302:	f7ff fc61 	bl	8002bc8 <setDrJoin>
    }
    // Clear NEXTCHNL because join state engine controls channel hopping
    LMIC.opmode &= ~OP_NEXTCHNL;
 8003306:	4b16      	ldr	r3, [pc, #88]	; (8003360 <nextJoinState+0xd4>)
 8003308:	22ac      	movs	r2, #172	; 0xac
 800330a:	5a9b      	ldrh	r3, [r3, r2]
 800330c:	4a15      	ldr	r2, [pc, #84]	; (8003364 <nextJoinState+0xd8>)
 800330e:	4013      	ands	r3, r2
 8003310:	b299      	uxth	r1, r3
 8003312:	4b13      	ldr	r3, [pc, #76]	; (8003360 <nextJoinState+0xd4>)
 8003314:	22ac      	movs	r2, #172	; 0xac
 8003316:	5299      	strh	r1, [r3, r2]
    // Move txend to randomize synchronized concurrent joins.
    // Duty cycle is based on txend.
    ostime_t time = os_getTime();
 8003318:	f002 fd8e 	bl	8005e38 <os_getTime>
 800331c:	0003      	movs	r3, r0
 800331e:	603b      	str	r3, [r7, #0]
    if( time - LMIC.bands[BAND_MILLI].avail < 0 )
 8003320:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <nextJoinState+0xd4>)
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	d502      	bpl.n	8003330 <nextJoinState+0xa4>
        time = LMIC.bands[BAND_MILLI].avail;
 800332a:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <nextJoinState+0xd4>)
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	603b      	str	r3, [r7, #0]
        (isTESTMODE()
         // Avoid collision with JOIN ACCEPT @ SF12 being sent by GW (but we missed it)
         ? DNW2_SAFETY_ZONE
         // Otherwise: randomize join (street lamp case):
         // SF12:255, SF11:127, .., SF7:8secs
         : DNW2_SAFETY_ZONE+rndDelay(255>>LMIC.datarate));
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <nextJoinState+0xd4>)
 8003332:	22b0      	movs	r2, #176	; 0xb0
 8003334:	5c9b      	ldrb	r3, [r3, r2]
 8003336:	001a      	movs	r2, r3
 8003338:	23ff      	movs	r3, #255	; 0xff
 800333a:	4113      	asrs	r3, r2
 800333c:	b2db      	uxtb	r3, r3
 800333e:	0018      	movs	r0, r3
 8003340:	f7ff fbcc 	bl	8002adc <rndDelay>
 8003344:	0003      	movs	r3, r0
 8003346:	4a08      	ldr	r2, [pc, #32]	; (8003368 <nextJoinState+0xdc>)
 8003348:	189a      	adds	r2, r3, r2
    LMIC.txend = time +
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	18d2      	adds	r2, r2, r3
 800334e:	4b04      	ldr	r3, [pc, #16]	; (8003360 <nextJoinState+0xd4>)
 8003350:	601a      	str	r2, [r3, #0]
    // 1 - triggers EV_JOIN_FAILED event
    return failed;
 8003352:	1dfb      	adds	r3, r7, #7
 8003354:	781b      	ldrb	r3, [r3, #0]
}
 8003356:	0018      	movs	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	b002      	add	sp, #8
 800335c:	bd80      	pop	{r7, pc}
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	20000280 	.word	0x20000280
 8003364:	fffff7ff 	.word	0xfffff7ff
 8003368:	00017700 	.word	0x00017700

0800336c <runEngineUpdate>:
#else
#error Unsupported frequency band!
#endif


static void runEngineUpdate (xref2osjob_t osjob) {
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
    engineUpdate();
 8003374:	f001 fe32 	bl	8004fdc <engineUpdate>
}
 8003378:	46c0      	nop			; (mov r8, r8)
 800337a:	46bd      	mov	sp, r7
 800337c:	b002      	add	sp, #8
 800337e:	bd80      	pop	{r7, pc}

08003380 <reportEvent>:


static void reportEvent (ev_t ev) {
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	0002      	movs	r2, r0
 8003388:	1dfb      	adds	r3, r7, #7
 800338a:	701a      	strb	r2, [r3, #0]
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = ev));
    ON_LMIC_EVENT(ev);
 800338c:	1dfb      	adds	r3, r7, #7
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	0018      	movs	r0, r3
 8003392:	f002 f9cb 	bl	800572c <onEvent>
    engineUpdate();
 8003396:	f001 fe21 	bl	8004fdc <engineUpdate>
}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	46bd      	mov	sp, r7
 800339e:	b002      	add	sp, #8
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <runReset>:


static void runReset (xref2osjob_t osjob) {
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
    // Disable session
    LMIC_reset();
 80033aa:	f002 f80b 	bl	80053c4 <LMIC_reset>
    LMIC_startJoining();
 80033ae:	f001 fb29 	bl	8004a04 <LMIC_startJoining>
    reportEvent(EV_RESET);
 80033b2:	200c      	movs	r0, #12
 80033b4:	f7ff ffe4 	bl	8003380 <reportEvent>
}
 80033b8:	46c0      	nop			; (mov r8, r8)
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b002      	add	sp, #8
 80033be:	bd80      	pop	{r7, pc}

080033c0 <stateJustJoined>:

static void stateJustJoined (void) {
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
    LMIC.seqnoDn     = LMIC.seqnoUp = 0;
 80033c4:	4a3a      	ldr	r2, [pc, #232]	; (80034b0 <stateJustJoined+0xf0>)
 80033c6:	238e      	movs	r3, #142	; 0x8e
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	2100      	movs	r1, #0
 80033cc:	50d1      	str	r1, [r2, r3]
 80033ce:	4a38      	ldr	r2, [pc, #224]	; (80034b0 <stateJustJoined+0xf0>)
 80033d0:	238e      	movs	r3, #142	; 0x8e
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	58d1      	ldr	r1, [r2, r3]
 80033d6:	4a36      	ldr	r2, [pc, #216]	; (80034b0 <stateJustJoined+0xf0>)
 80033d8:	238c      	movs	r3, #140	; 0x8c
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	50d1      	str	r1, [r2, r3]
    LMIC.rejoinCnt   = 0;
 80033de:	4b34      	ldr	r3, [pc, #208]	; (80034b0 <stateJustJoined+0xf0>)
 80033e0:	22b2      	movs	r2, #178	; 0xb2
 80033e2:	2100      	movs	r1, #0
 80033e4:	5499      	strb	r1, [r3, r2]
    LMIC.dnConf      = LMIC.adrChanged = LMIC.ladrAns = LMIC.devsAns = 0;
 80033e6:	4a32      	ldr	r2, [pc, #200]	; (80034b0 <stateJustJoined+0xf0>)
 80033e8:	2393      	movs	r3, #147	; 0x93
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	2100      	movs	r1, #0
 80033ee:	54d1      	strb	r1, [r2, r3]
 80033f0:	4a2f      	ldr	r2, [pc, #188]	; (80034b0 <stateJustJoined+0xf0>)
 80033f2:	2393      	movs	r3, #147	; 0x93
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	5cd1      	ldrb	r1, [r2, r3]
 80033f8:	4a2d      	ldr	r2, [pc, #180]	; (80034b0 <stateJustJoined+0xf0>)
 80033fa:	2326      	movs	r3, #38	; 0x26
 80033fc:	33ff      	adds	r3, #255	; 0xff
 80033fe:	54d1      	strb	r1, [r2, r3]
 8003400:	4a2b      	ldr	r2, [pc, #172]	; (80034b0 <stateJustJoined+0xf0>)
 8003402:	2326      	movs	r3, #38	; 0x26
 8003404:	33ff      	adds	r3, #255	; 0xff
 8003406:	5cd1      	ldrb	r1, [r2, r3]
 8003408:	4a29      	ldr	r2, [pc, #164]	; (80034b0 <stateJustJoined+0xf0>)
 800340a:	2391      	movs	r3, #145	; 0x91
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	54d1      	strb	r1, [r2, r3]
 8003410:	4a27      	ldr	r2, [pc, #156]	; (80034b0 <stateJustJoined+0xf0>)
 8003412:	2391      	movs	r3, #145	; 0x91
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	5cd1      	ldrb	r1, [r2, r3]
 8003418:	4a25      	ldr	r2, [pc, #148]	; (80034b0 <stateJustJoined+0xf0>)
 800341a:	2390      	movs	r3, #144	; 0x90
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	54d1      	strb	r1, [r2, r3]
    LMIC.moreData    = LMIC.dn2Ans = LMIC.snchAns = LMIC.dutyCapAns = 0;
 8003420:	4a23      	ldr	r2, [pc, #140]	; (80034b0 <stateJustJoined+0xf0>)
 8003422:	232a      	movs	r3, #42	; 0x2a
 8003424:	33ff      	adds	r3, #255	; 0xff
 8003426:	2100      	movs	r1, #0
 8003428:	54d1      	strb	r1, [r2, r3]
 800342a:	4a21      	ldr	r2, [pc, #132]	; (80034b0 <stateJustJoined+0xf0>)
 800342c:	232a      	movs	r3, #42	; 0x2a
 800342e:	33ff      	adds	r3, #255	; 0xff
 8003430:	5cd1      	ldrb	r1, [r2, r3]
 8003432:	4a1f      	ldr	r2, [pc, #124]	; (80034b0 <stateJustJoined+0xf0>)
 8003434:	2395      	movs	r3, #149	; 0x95
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	54d1      	strb	r1, [r2, r3]
 800343a:	4a1d      	ldr	r2, [pc, #116]	; (80034b0 <stateJustJoined+0xf0>)
 800343c:	2395      	movs	r3, #149	; 0x95
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	5cd1      	ldrb	r1, [r2, r3]
 8003442:	4a1b      	ldr	r2, [pc, #108]	; (80034b0 <stateJustJoined+0xf0>)
 8003444:	2398      	movs	r3, #152	; 0x98
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	54d1      	strb	r1, [r2, r3]
 800344a:	4a19      	ldr	r2, [pc, #100]	; (80034b0 <stateJustJoined+0xf0>)
 800344c:	2398      	movs	r3, #152	; 0x98
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	5cd1      	ldrb	r1, [r2, r3]
 8003452:	4a17      	ldr	r2, [pc, #92]	; (80034b0 <stateJustJoined+0xf0>)
 8003454:	2394      	movs	r3, #148	; 0x94
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	54d1      	strb	r1, [r2, r3]
    LMIC.pingSetAns  = 0;
 800345a:	4a15      	ldr	r2, [pc, #84]	; (80034b0 <stateJustJoined+0xf0>)
 800345c:	2334      	movs	r3, #52	; 0x34
 800345e:	33ff      	adds	r3, #255	; 0xff
 8003460:	2100      	movs	r1, #0
 8003462:	54d1      	strb	r1, [r2, r3]
    LMIC.upRepeat    = 0;
 8003464:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <stateJustJoined+0xf0>)
 8003466:	22ae      	movs	r2, #174	; 0xae
 8003468:	2100      	movs	r1, #0
 800346a:	5499      	strb	r1, [r3, r2]
    LMIC.adrAckReq   = LINK_CHECK_INIT;
 800346c:	4a10      	ldr	r2, [pc, #64]	; (80034b0 <stateJustJoined+0xf0>)
 800346e:	2322      	movs	r3, #34	; 0x22
 8003470:	33ff      	adds	r3, #255	; 0xff
 8003472:	21f4      	movs	r1, #244	; 0xf4
 8003474:	54d1      	strb	r1, [r2, r3]
    LMIC.dn2Dr       = DR_DNW2;
 8003476:	4a0e      	ldr	r2, [pc, #56]	; (80034b0 <stateJustJoined+0xf0>)
 8003478:	232c      	movs	r3, #44	; 0x2c
 800347a:	33ff      	adds	r3, #255	; 0xff
 800347c:	2100      	movs	r1, #0
 800347e:	54d1      	strb	r1, [r2, r3]
    LMIC.dn2Freq     = FREQ_DNW2;
 8003480:	4a0b      	ldr	r2, [pc, #44]	; (80034b0 <stateJustJoined+0xf0>)
 8003482:	2396      	movs	r3, #150	; 0x96
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	490b      	ldr	r1, [pc, #44]	; (80034b4 <stateJustJoined+0xf4>)
 8003488:	50d1      	str	r1, [r2, r3]
    LMIC.bcnChnl     = CHNL_BCN;
 800348a:	4a09      	ldr	r2, [pc, #36]	; (80034b0 <stateJustJoined+0xf0>)
 800348c:	23c4      	movs	r3, #196	; 0xc4
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	2105      	movs	r1, #5
 8003492:	54d1      	strb	r1, [r2, r3]
    LMIC.ping.freq   = FREQ_PING;
 8003494:	4a06      	ldr	r2, [pc, #24]	; (80034b0 <stateJustJoined+0xf0>)
 8003496:	23a0      	movs	r3, #160	; 0xa0
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	4906      	ldr	r1, [pc, #24]	; (80034b4 <stateJustJoined+0xf4>)
 800349c:	50d1      	str	r1, [r2, r3]
    LMIC.ping.dr     = DR_PING;
 800349e:	4a04      	ldr	r2, [pc, #16]	; (80034b0 <stateJustJoined+0xf0>)
 80034a0:	239a      	movs	r3, #154	; 0x9a
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	2103      	movs	r1, #3
 80034a6:	54d1      	strb	r1, [r2, r3]
}
 80034a8:	46c0      	nop			; (mov r8, r8)
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	20000280 	.word	0x20000280
 80034b4:	33d3e608 	.word	0x33d3e608

080034b8 <decodeBeacon>:
// ================================================================================
// Decoding frames


// Decode beacon  - do not overwrite bcninfo unless we have a match!
static int decodeBeacon (void) {
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
    ASSERT(LMIC.dataLen == LEN_BCN); // implicit header RX guarantees this
 80034be:	4a4e      	ldr	r2, [pc, #312]	; (80035f8 <decodeBeacon+0x140>)
 80034c0:	2348      	movs	r3, #72	; 0x48
 80034c2:	33ff      	adds	r3, #255	; 0xff
 80034c4:	5cd3      	ldrb	r3, [r2, r3]
 80034c6:	2b11      	cmp	r3, #17
 80034c8:	d001      	beq.n	80034ce <decodeBeacon+0x16>
 80034ca:	f7fe fbd3 	bl	8001c74 <hal_failed>
    xref2u1_t d = LMIC.frame;
 80034ce:	4b4b      	ldr	r3, [pc, #300]	; (80035fc <decodeBeacon+0x144>)
 80034d0:	607b      	str	r3, [r7, #4]
    if(
#if defined CFG_eu868
        d[OFF_BCN_CRC1] != (u1_t)os_crc16(d,OFF_BCN_CRC1)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3307      	adds	r3, #7
 80034d6:	781c      	ldrb	r4, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2107      	movs	r1, #7
 80034dc:	0018      	movs	r0, r3
 80034de:	f7fe feb5 	bl	800224c <os_crc16>
 80034e2:	0003      	movs	r3, r0
 80034e4:	b2db      	uxtb	r3, r3
    if(
 80034e6:	429c      	cmp	r4, r3
 80034e8:	d001      	beq.n	80034ee <decodeBeacon+0x36>
#elif CFG_us915
        os_rlsbf2(&d[OFF_BCN_CRC1]) != os_crc16(d,OFF_BCN_CRC1)
#endif
        )
        return 0;   // first (common) part fails CRC check
 80034ea:	2300      	movs	r3, #0
 80034ec:	e07f      	b.n	80035ee <decodeBeacon+0x136>
    // First set of fields is ok
    u4_t bcnnetid = os_rlsbf4(&d[OFF_BCN_NETID]) & 0xFFFFFF;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	0018      	movs	r0, r3
 80034f2:	f7fe fe19 	bl	8002128 <os_rlsbf4>
 80034f6:	0003      	movs	r3, r0
 80034f8:	021b      	lsls	r3, r3, #8
 80034fa:	0a1b      	lsrs	r3, r3, #8
 80034fc:	603b      	str	r3, [r7, #0]
    if( bcnnetid != LMIC.netid )
 80034fe:	4b3e      	ldr	r3, [pc, #248]	; (80035f8 <decodeBeacon+0x140>)
 8003500:	22a8      	movs	r2, #168	; 0xa8
 8003502:	589b      	ldr	r3, [r3, r2]
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d002      	beq.n	8003510 <decodeBeacon+0x58>
        return -1;  // not the beacon we're looking for
 800350a:	2301      	movs	r3, #1
 800350c:	425b      	negs	r3, r3
 800350e:	e06e      	b.n	80035ee <decodeBeacon+0x136>

    LMIC.bcninfo.flags &= ~(BCN_PARTIAL|BCN_FULL);
 8003510:	4a39      	ldr	r2, [pc, #228]	; (80035f8 <decodeBeacon+0x140>)
 8003512:	23cb      	movs	r3, #203	; 0xcb
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	5cd3      	ldrb	r3, [r2, r3]
 8003518:	2203      	movs	r2, #3
 800351a:	4393      	bics	r3, r2
 800351c:	b2d9      	uxtb	r1, r3
 800351e:	4a36      	ldr	r2, [pc, #216]	; (80035f8 <decodeBeacon+0x140>)
 8003520:	23cb      	movs	r3, #203	; 0xcb
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	54d1      	strb	r1, [r2, r3]
    // Match - update bcninfo structure
    LMIC.bcninfo.snr    = LMIC.snr;
 8003526:	4b34      	ldr	r3, [pc, #208]	; (80035f8 <decodeBeacon+0x140>)
 8003528:	210d      	movs	r1, #13
 800352a:	5659      	ldrsb	r1, [r3, r1]
 800352c:	4a32      	ldr	r2, [pc, #200]	; (80035f8 <decodeBeacon+0x140>)
 800352e:	2396      	movs	r3, #150	; 0x96
 8003530:	33ff      	adds	r3, #255	; 0xff
 8003532:	54d1      	strb	r1, [r2, r3]
    LMIC.bcninfo.rssi   = LMIC.rssi;
 8003534:	4b30      	ldr	r3, [pc, #192]	; (80035f8 <decodeBeacon+0x140>)
 8003536:	210c      	movs	r1, #12
 8003538:	5659      	ldrsb	r1, [r3, r1]
 800353a:	4a2f      	ldr	r2, [pc, #188]	; (80035f8 <decodeBeacon+0x140>)
 800353c:	23ca      	movs	r3, #202	; 0xca
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	54d1      	strb	r1, [r2, r3]
    LMIC.bcninfo.txtime = LMIC.rxtime - AIRTIME_BCN_osticks;
 8003542:	4b2d      	ldr	r3, [pc, #180]	; (80035f8 <decodeBeacon+0x140>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4a2e      	ldr	r2, [pc, #184]	; (8003600 <decodeBeacon+0x148>)
 8003548:	1899      	adds	r1, r3, r2
 800354a:	4a2b      	ldr	r2, [pc, #172]	; (80035f8 <decodeBeacon+0x140>)
 800354c:	23c8      	movs	r3, #200	; 0xc8
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	50d1      	str	r1, [r2, r3]
    LMIC.bcninfo.time   = os_rlsbf4(&d[OFF_BCN_TIME]);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3303      	adds	r3, #3
 8003556:	0018      	movs	r0, r3
 8003558:	f7fe fde6 	bl	8002128 <os_rlsbf4>
 800355c:	0001      	movs	r1, r0
 800355e:	4a26      	ldr	r2, [pc, #152]	; (80035f8 <decodeBeacon+0x140>)
 8003560:	23cc      	movs	r3, #204	; 0xcc
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	50d1      	str	r1, [r2, r3]
    LMIC.bcninfo.flags |= BCN_PARTIAL;
 8003566:	4a24      	ldr	r2, [pc, #144]	; (80035f8 <decodeBeacon+0x140>)
 8003568:	23cb      	movs	r3, #203	; 0xcb
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	5cd3      	ldrb	r3, [r2, r3]
 800356e:	2201      	movs	r2, #1
 8003570:	4313      	orrs	r3, r2
 8003572:	b2d9      	uxtb	r1, r3
 8003574:	4a20      	ldr	r2, [pc, #128]	; (80035f8 <decodeBeacon+0x140>)
 8003576:	23cb      	movs	r3, #203	; 0xcb
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	54d1      	strb	r1, [r2, r3]

    // Check 2nd set
    if( os_rlsbf2(&d[OFF_BCN_CRC2]) != os_crc16(d,OFF_BCN_CRC2) )
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	330f      	adds	r3, #15
 8003580:	0018      	movs	r0, r3
 8003582:	f7fe fdbe 	bl	8002102 <os_rlsbf2>
 8003586:	0003      	movs	r3, r0
 8003588:	001c      	movs	r4, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	210f      	movs	r1, #15
 800358e:	0018      	movs	r0, r3
 8003590:	f7fe fe5c 	bl	800224c <os_crc16>
 8003594:	0003      	movs	r3, r0
 8003596:	429c      	cmp	r4, r3
 8003598:	d001      	beq.n	800359e <decodeBeacon+0xe6>
        return 1;
 800359a:	2301      	movs	r3, #1
 800359c:	e027      	b.n	80035ee <decodeBeacon+0x136>
    // Second set of fields is ok
    LMIC.bcninfo.lat    = (s4_t)os_rlsbf4(&d[OFF_BCN_LAT-1]) >> 8; // read as signed 24-bit
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3308      	adds	r3, #8
 80035a2:	0018      	movs	r0, r3
 80035a4:	f7fe fdc0 	bl	8002128 <os_rlsbf4>
 80035a8:	0003      	movs	r3, r0
 80035aa:	1219      	asrs	r1, r3, #8
 80035ac:	4a12      	ldr	r2, [pc, #72]	; (80035f8 <decodeBeacon+0x140>)
 80035ae:	23d0      	movs	r3, #208	; 0xd0
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	50d1      	str	r1, [r2, r3]
    LMIC.bcninfo.lon    = (s4_t)os_rlsbf4(&d[OFF_BCN_LON-1]) >> 8; // ditto
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	330b      	adds	r3, #11
 80035b8:	0018      	movs	r0, r3
 80035ba:	f7fe fdb5 	bl	8002128 <os_rlsbf4>
 80035be:	0003      	movs	r3, r0
 80035c0:	1219      	asrs	r1, r3, #8
 80035c2:	4a0d      	ldr	r2, [pc, #52]	; (80035f8 <decodeBeacon+0x140>)
 80035c4:	23d2      	movs	r3, #210	; 0xd2
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	50d1      	str	r1, [r2, r3]
    LMIC.bcninfo.info   = d[OFF_BCN_INFO];
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	7a19      	ldrb	r1, [r3, #8]
 80035ce:	4a0a      	ldr	r2, [pc, #40]	; (80035f8 <decodeBeacon+0x140>)
 80035d0:	23ce      	movs	r3, #206	; 0xce
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	54d1      	strb	r1, [r2, r3]
    LMIC.bcninfo.flags |= BCN_FULL;
 80035d6:	4a08      	ldr	r2, [pc, #32]	; (80035f8 <decodeBeacon+0x140>)
 80035d8:	23cb      	movs	r3, #203	; 0xcb
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	5cd3      	ldrb	r3, [r2, r3]
 80035de:	2202      	movs	r2, #2
 80035e0:	4313      	orrs	r3, r2
 80035e2:	b2d9      	uxtb	r1, r3
 80035e4:	4a04      	ldr	r2, [pc, #16]	; (80035f8 <decodeBeacon+0x140>)
 80035e6:	23cb      	movs	r3, #203	; 0xcb
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	54d1      	strb	r1, [r2, r3]
    return 2;
 80035ec:	2302      	movs	r3, #2
}
 80035ee:	0018      	movs	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b003      	add	sp, #12
 80035f4:	bd90      	pop	{r4, r7, pc}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	20000280 	.word	0x20000280
 80035fc:	200003c8 	.word	0x200003c8
 8003600:	ffffedf4 	.word	0xffffedf4

08003604 <decodeFrame>:


static bit_t decodeFrame (void) {
 8003604:	b5b0      	push	{r4, r5, r7, lr}
 8003606:	b09a      	sub	sp, #104	; 0x68
 8003608:	af02      	add	r7, sp, #8
    xref2u1_t d = LMIC.frame;
 800360a:	4bd3      	ldr	r3, [pc, #844]	; (8003958 <decodeFrame+0x354>)
 800360c:	64bb      	str	r3, [r7, #72]	; 0x48
    u1_t hdr    = d[0];
 800360e:	2047      	movs	r0, #71	; 0x47
 8003610:	183b      	adds	r3, r7, r0
 8003612:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003614:	7812      	ldrb	r2, [r2, #0]
 8003616:	701a      	strb	r2, [r3, #0]
    u1_t ftype  = hdr & HDR_FTYPE;
 8003618:	2446      	movs	r4, #70	; 0x46
 800361a:	193b      	adds	r3, r7, r4
 800361c:	183a      	adds	r2, r7, r0
 800361e:	7812      	ldrb	r2, [r2, #0]
 8003620:	211f      	movs	r1, #31
 8003622:	438a      	bics	r2, r1
 8003624:	701a      	strb	r2, [r3, #0]
    int  dlen   = LMIC.dataLen;
 8003626:	4acd      	ldr	r2, [pc, #820]	; (800395c <decodeFrame+0x358>)
 8003628:	2348      	movs	r3, #72	; 0x48
 800362a:	33ff      	adds	r3, #255	; 0xff
 800362c:	5cd3      	ldrb	r3, [r2, r3]
 800362e:	643b      	str	r3, [r7, #64]	; 0x40
    if( dlen < OFF_DAT_OPTS+4 ||
 8003630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003632:	2b0b      	cmp	r3, #11
 8003634:	dd0c      	ble.n	8003650 <decodeFrame+0x4c>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 8003636:	183b      	adds	r3, r7, r0
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2203      	movs	r2, #3
 800363c:	4013      	ands	r3, r2
    if( dlen < OFF_DAT_OPTS+4 ||
 800363e:	d107      	bne.n	8003650 <decodeFrame+0x4c>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 8003640:	193b      	adds	r3, r7, r4
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b60      	cmp	r3, #96	; 0x60
 8003646:	d015      	beq.n	8003674 <decodeFrame+0x70>
        (ftype != HDR_FTYPE_DADN  &&  ftype != HDR_FTYPE_DCDN) ) {
 8003648:	193b      	adds	r3, r7, r4
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2ba0      	cmp	r3, #160	; 0xa0
 800364e:	d011      	beq.n	8003674 <decodeFrame+0x70>
        // Basic sanity checks failed
        EV(specCond, WARN, (e_.reason = EV::specCond_t::UNEXPECTED_FRAME,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = dlen < 4 ? 0 : os_rlsbf4(&d[dlen-4]),
                            e_.info2  = hdr + (dlen<<8)));
      norx:
 8003650:	46c0      	nop			; (mov r8, r8)
 8003652:	e008      	b.n	8003666 <decodeFrame+0x62>
    if( addr != LMIC.devaddr ) {
        EV(specCond, WARN, (e_.reason = EV::specCond_t::ALIEN_ADDRESS,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = addr,
                            e_.info2  = LMIC.devaddr));
        goto norx;
 8003654:	46c0      	nop			; (mov r8, r8)
 8003656:	e006      	b.n	8003666 <decodeFrame+0x62>
    }
    if( poff > pend ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (poff-pend) + (fct<<8) + (dlen<<16)));
        goto norx;
 8003658:	46c0      	nop			; (mov r8, r8)
 800365a:	e004      	b.n	8003666 <decodeFrame+0x62>
        EV(spe3Cond, ERR, (e_.reason = EV::spe3Cond_t::CORRUPTED_MIC,
                           e_.eui1   = MAIN::CDEV->getEui(),
                           e_.info1  = Base::lsbf4(&d[pend]),
                           e_.info2  = seqno,
                           e_.info3  = LMIC.devaddr));
        goto norx;
 800365c:	46c0      	nop			; (mov r8, r8)
 800365e:	e002      	b.n	8003666 <decodeFrame+0x62>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_ROLL_OVER,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
            goto norx;
 8003660:	46c0      	nop			; (mov r8, r8)
 8003662:	e000      	b.n	8003666 <decodeFrame+0x62>
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_OBSOLETE,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
            goto norx;
 8003664:	46c0      	nop			; (mov r8, r8)
        LMIC.dataLen = 0;
 8003666:	4abd      	ldr	r2, [pc, #756]	; (800395c <decodeFrame+0x358>)
 8003668:	2348      	movs	r3, #72	; 0x48
 800366a:	33ff      	adds	r3, #255	; 0xff
 800366c:	2100      	movs	r1, #0
 800366e:	54d1      	strb	r1, [r2, r3]
        return 0;
 8003670:	2300      	movs	r3, #0
 8003672:	e32b      	b.n	8003ccc <decodeFrame+0x6c8>
    int  fct   = d[OFF_DAT_FCT];
 8003674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003676:	3305      	adds	r3, #5
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	63fb      	str	r3, [r7, #60]	; 0x3c
    u4_t addr  = os_rlsbf4(&d[OFF_DAT_ADDR]);
 800367c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800367e:	3301      	adds	r3, #1
 8003680:	0018      	movs	r0, r3
 8003682:	f7fe fd51 	bl	8002128 <os_rlsbf4>
 8003686:	0003      	movs	r3, r0
 8003688:	63bb      	str	r3, [r7, #56]	; 0x38
    u4_t seqno = os_rlsbf2(&d[OFF_DAT_SEQNO]);
 800368a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800368c:	3306      	adds	r3, #6
 800368e:	0018      	movs	r0, r3
 8003690:	f7fe fd37 	bl	8002102 <os_rlsbf2>
 8003694:	0003      	movs	r3, r0
 8003696:	637b      	str	r3, [r7, #52]	; 0x34
    int  olen  = fct & FCT_OPTLEN;
 8003698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800369a:	220f      	movs	r2, #15
 800369c:	4013      	ands	r3, r2
 800369e:	633b      	str	r3, [r7, #48]	; 0x30
    int  ackup = (fct & FCT_ACK) != 0 ? 1 : 0;   // ACK last up frame
 80036a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a2:	115b      	asrs	r3, r3, #5
 80036a4:	2201      	movs	r2, #1
 80036a6:	4013      	ands	r3, r2
 80036a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    int  poff  = OFF_DAT_OPTS+olen;
 80036aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ac:	3308      	adds	r3, #8
 80036ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    int  pend  = dlen-4;  // MIC
 80036b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036b2:	3b04      	subs	r3, #4
 80036b4:	62bb      	str	r3, [r7, #40]	; 0x28
    if( addr != LMIC.devaddr ) {
 80036b6:	4aa9      	ldr	r2, [pc, #676]	; (800395c <decodeFrame+0x358>)
 80036b8:	238a      	movs	r3, #138	; 0x8a
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	58d3      	ldr	r3, [r2, r3]
 80036be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d1c7      	bne.n	8003654 <decodeFrame+0x50>
    if( poff > pend ) {
 80036c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80036c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c8:	429a      	cmp	r2, r3
 80036ca:	dcc5      	bgt.n	8003658 <decodeFrame+0x54>
    int port = -1;
 80036cc:	2301      	movs	r3, #1
 80036ce:	425b      	negs	r3, r3
 80036d0:	65bb      	str	r3, [r7, #88]	; 0x58
    int replayConf = 0;
 80036d2:	2300      	movs	r3, #0
 80036d4:	657b      	str	r3, [r7, #84]	; 0x54
    if( pend > poff )
 80036d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036da:	429a      	cmp	r2, r3
 80036dc:	dd07      	ble.n	80036ee <decodeFrame+0xea>
        port = d[poff++];
 80036de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80036e4:	001a      	movs	r2, r3
 80036e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e8:	189b      	adds	r3, r3, r2
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	65bb      	str	r3, [r7, #88]	; 0x58
    seqno = LMIC.seqnoDn + (u2_t)(seqno - LMIC.seqnoDn);
 80036ee:	4a9b      	ldr	r2, [pc, #620]	; (800395c <decodeFrame+0x358>)
 80036f0:	238c      	movs	r3, #140	; 0x8c
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	58d3      	ldr	r3, [r2, r3]
 80036f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036f8:	b291      	uxth	r1, r2
 80036fa:	4898      	ldr	r0, [pc, #608]	; (800395c <decodeFrame+0x358>)
 80036fc:	228c      	movs	r2, #140	; 0x8c
 80036fe:	0052      	lsls	r2, r2, #1
 8003700:	5882      	ldr	r2, [r0, r2]
 8003702:	b292      	uxth	r2, r2
 8003704:	1a8a      	subs	r2, r1, r2
 8003706:	b292      	uxth	r2, r2
 8003708:	189b      	adds	r3, r3, r2
 800370a:	637b      	str	r3, [r7, #52]	; 0x34
    if( !aes_verifyMic(LMIC.nwkKey, LMIC.devaddr, seqno, /*dn*/1, d, pend) ) {
 800370c:	4a93      	ldr	r2, [pc, #588]	; (800395c <decodeFrame+0x358>)
 800370e:	238a      	movs	r3, #138	; 0x8a
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	58d1      	ldr	r1, [r2, r3]
 8003714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003716:	4892      	ldr	r0, [pc, #584]	; (8003960 <decodeFrame+0x35c>)
 8003718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371a:	9301      	str	r3, [sp, #4]
 800371c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	2301      	movs	r3, #1
 8003722:	f7fe fe1f 	bl	8002364 <aes_verifyMic>
 8003726:	1e03      	subs	r3, r0, #0
 8003728:	d098      	beq.n	800365c <decodeFrame+0x58>
    if( seqno < LMIC.seqnoDn ) {
 800372a:	4a8c      	ldr	r2, [pc, #560]	; (800395c <decodeFrame+0x358>)
 800372c:	238c      	movs	r3, #140	; 0x8c
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	58d3      	ldr	r3, [r2, r3]
 8003732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003734:	429a      	cmp	r2, r3
 8003736:	d21f      	bcs.n	8003778 <decodeFrame+0x174>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
 8003738:	4a88      	ldr	r2, [pc, #544]	; (800395c <decodeFrame+0x358>)
 800373a:	238c      	movs	r3, #140	; 0x8c
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	58d3      	ldr	r3, [r2, r3]
 8003740:	001a      	movs	r2, r3
 8003742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003744:	429a      	cmp	r2, r3
 8003746:	db8b      	blt.n	8003660 <decodeFrame+0x5c>
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
 8003748:	4a84      	ldr	r2, [pc, #528]	; (800395c <decodeFrame+0x358>)
 800374a:	238c      	movs	r3, #140	; 0x8c
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	58d3      	ldr	r3, [r2, r3]
 8003750:	3b01      	subs	r3, #1
 8003752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003754:	429a      	cmp	r2, r3
 8003756:	d185      	bne.n	8003664 <decodeFrame+0x60>
 8003758:	4a80      	ldr	r2, [pc, #512]	; (800395c <decodeFrame+0x358>)
 800375a:	2390      	movs	r3, #144	; 0x90
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	5cd3      	ldrb	r3, [r2, r3]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d100      	bne.n	8003766 <decodeFrame+0x162>
 8003764:	e77e      	b.n	8003664 <decodeFrame+0x60>
 8003766:	2346      	movs	r3, #70	; 0x46
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2ba0      	cmp	r3, #160	; 0xa0
 800376e:	d000      	beq.n	8003772 <decodeFrame+0x16e>
 8003770:	e778      	b.n	8003664 <decodeFrame+0x60>
        }
        // Replay of previous sequence number allowed only if
        // previous frame and repeated both requested confirmation
        replayConf = 1;
 8003772:	2301      	movs	r3, #1
 8003774:	657b      	str	r3, [r7, #84]	; 0x54
 8003776:	e011      	b.n	800379c <decodeFrame+0x198>
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_SKIP,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
        }
        LMIC.seqnoDn = seqno+1;  // next number to be expected
 8003778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800377a:	1c59      	adds	r1, r3, #1
 800377c:	4a77      	ldr	r2, [pc, #476]	; (800395c <decodeFrame+0x358>)
 800377e:	238c      	movs	r3, #140	; 0x8c
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	50d1      	str	r1, [r2, r3]
        DO_DEVDB(LMIC.seqnoDn,seqnoDn);
        // DN frame requested confirmation - provide ACK once with next UP frame
        LMIC.dnConf = (ftype == HDR_FTYPE_DCDN ? FCT_ACK : 0);
 8003784:	2346      	movs	r3, #70	; 0x46
 8003786:	18fb      	adds	r3, r7, r3
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2ba0      	cmp	r3, #160	; 0xa0
 800378c:	d101      	bne.n	8003792 <decodeFrame+0x18e>
 800378e:	2120      	movs	r1, #32
 8003790:	e000      	b.n	8003794 <decodeFrame+0x190>
 8003792:	2100      	movs	r1, #0
 8003794:	4a71      	ldr	r2, [pc, #452]	; (800395c <decodeFrame+0x358>)
 8003796:	2390      	movs	r3, #144	; 0x90
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	54d1      	strb	r1, [r2, r3]
    }

    if( LMIC.dnConf || (fct & FCT_MORE) )
 800379c:	4a6f      	ldr	r2, [pc, #444]	; (800395c <decodeFrame+0x358>)
 800379e:	2390      	movs	r3, #144	; 0x90
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	5cd3      	ldrb	r3, [r2, r3]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d103      	bne.n	80037b0 <decodeFrame+0x1ac>
 80037a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037aa:	2210      	movs	r2, #16
 80037ac:	4013      	ands	r3, r2
 80037ae:	d008      	beq.n	80037c2 <decodeFrame+0x1be>
        LMIC.opmode |= OP_POLL;
 80037b0:	4b6a      	ldr	r3, [pc, #424]	; (800395c <decodeFrame+0x358>)
 80037b2:	22ac      	movs	r2, #172	; 0xac
 80037b4:	5a9b      	ldrh	r3, [r3, r2]
 80037b6:	2210      	movs	r2, #16
 80037b8:	4313      	orrs	r3, r2
 80037ba:	b299      	uxth	r1, r3
 80037bc:	4b67      	ldr	r3, [pc, #412]	; (800395c <decodeFrame+0x358>)
 80037be:	22ac      	movs	r2, #172	; 0xac
 80037c0:	5299      	strh	r1, [r3, r2]

    // We heard from network
    LMIC.adrChanged = LMIC.rejoinCnt = 0;
 80037c2:	4b66      	ldr	r3, [pc, #408]	; (800395c <decodeFrame+0x358>)
 80037c4:	22b2      	movs	r2, #178	; 0xb2
 80037c6:	2100      	movs	r1, #0
 80037c8:	5499      	strb	r1, [r3, r2]
 80037ca:	4b64      	ldr	r3, [pc, #400]	; (800395c <decodeFrame+0x358>)
 80037cc:	22b2      	movs	r2, #178	; 0xb2
 80037ce:	5c99      	ldrb	r1, [r3, r2]
 80037d0:	4a62      	ldr	r2, [pc, #392]	; (800395c <decodeFrame+0x358>)
 80037d2:	2391      	movs	r3, #145	; 0x91
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	54d1      	strb	r1, [r2, r3]
    if( LMIC.adrAckReq != LINK_CHECK_OFF )
 80037d8:	4a60      	ldr	r2, [pc, #384]	; (800395c <decodeFrame+0x358>)
 80037da:	2322      	movs	r3, #34	; 0x22
 80037dc:	33ff      	adds	r3, #255	; 0xff
 80037de:	56d3      	ldrsb	r3, [r2, r3]
 80037e0:	3380      	adds	r3, #128	; 0x80
 80037e2:	d004      	beq.n	80037ee <decodeFrame+0x1ea>
        LMIC.adrAckReq = LINK_CHECK_INIT;
 80037e4:	4a5d      	ldr	r2, [pc, #372]	; (800395c <decodeFrame+0x358>)
 80037e6:	2322      	movs	r3, #34	; 0x22
 80037e8:	33ff      	adds	r3, #255	; 0xff
 80037ea:	21f4      	movs	r1, #244	; 0xf4
 80037ec:	54d1      	strb	r1, [r2, r3]

    // Process OPTS
    int m = LMIC.rssi - RSSI_OFF - getSensitivity(LMIC.rps);
 80037ee:	4b5b      	ldr	r3, [pc, #364]	; (800395c <decodeFrame+0x358>)
 80037f0:	7b1b      	ldrb	r3, [r3, #12]
 80037f2:	b25b      	sxtb	r3, r3
 80037f4:	3b40      	subs	r3, #64	; 0x40
 80037f6:	001c      	movs	r4, r3
 80037f8:	4b58      	ldr	r3, [pc, #352]	; (800395c <decodeFrame+0x358>)
 80037fa:	89db      	ldrh	r3, [r3, #14]
 80037fc:	0018      	movs	r0, r3
 80037fe:	f7fe fee7 	bl	80025d0 <getSensitivity>
 8003802:	0003      	movs	r3, r0
 8003804:	1ae3      	subs	r3, r4, r3
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
    LMIC.margin = m < 0 ? 0 : m > 254 ? 254 : m;
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	2b00      	cmp	r3, #0
 800380c:	db05      	blt.n	800381a <decodeFrame+0x216>
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	2bfe      	cmp	r3, #254	; 0xfe
 8003812:	dd00      	ble.n	8003816 <decodeFrame+0x212>
 8003814:	23fe      	movs	r3, #254	; 0xfe
 8003816:	b2d9      	uxtb	r1, r3
 8003818:	e000      	b.n	800381c <decodeFrame+0x218>
 800381a:	2100      	movs	r1, #0
 800381c:	4a4f      	ldr	r2, [pc, #316]	; (800395c <decodeFrame+0x358>)
 800381e:	2392      	movs	r3, #146	; 0x92
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	54d1      	strb	r1, [r2, r3]

    xref2u1_t opts = &d[OFF_DAT_OPTS];
 8003824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003826:	3308      	adds	r3, #8
 8003828:	623b      	str	r3, [r7, #32]
    int oidx = 0;
 800382a:	2300      	movs	r3, #0
 800382c:	653b      	str	r3, [r7, #80]	; 0x50
    while( oidx < olen ) {
 800382e:	e1d4      	b.n	8003bda <decodeFrame+0x5d6>
        switch( opts[oidx] ) {
 8003830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003832:	6a3a      	ldr	r2, [r7, #32]
 8003834:	18d3      	adds	r3, r2, r3
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b12      	cmp	r3, #18
 800383a:	d900      	bls.n	800383e <decodeFrame+0x23a>
 800383c:	e1d3      	b.n	8003be6 <decodeFrame+0x5e2>
 800383e:	009a      	lsls	r2, r3, #2
 8003840:	4b48      	ldr	r3, [pc, #288]	; (8003964 <decodeFrame+0x360>)
 8003842:	18d3      	adds	r3, r2, r3
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	469f      	mov	pc, r3
        case MCMD_LCHK_ANS: {
            //int gwmargin = opts[oidx+1];
            //int ngws = opts[oidx+2];
            oidx += 3;
 8003848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800384a:	3303      	adds	r3, #3
 800384c:	653b      	str	r3, [r7, #80]	; 0x50
            continue;
 800384e:	e1c4      	b.n	8003bda <decodeFrame+0x5d6>
        }
        case MCMD_LADR_REQ: {
            u1_t p1     = opts[oidx+1];            // txpow + DR
 8003850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003852:	3301      	adds	r3, #1
 8003854:	6a3a      	ldr	r2, [r7, #32]
 8003856:	18d2      	adds	r2, r2, r3
 8003858:	230a      	movs	r3, #10
 800385a:	18fb      	adds	r3, r7, r3
 800385c:	7812      	ldrb	r2, [r2, #0]
 800385e:	701a      	strb	r2, [r3, #0]
            u2_t chmap  = os_rlsbf2(&opts[oidx+2]);// list of enabled channels
 8003860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003862:	3302      	adds	r3, #2
 8003864:	6a3a      	ldr	r2, [r7, #32]
 8003866:	18d3      	adds	r3, r2, r3
 8003868:	2508      	movs	r5, #8
 800386a:	197c      	adds	r4, r7, r5
 800386c:	0018      	movs	r0, r3
 800386e:	f7fe fc48 	bl	8002102 <os_rlsbf2>
 8003872:	0003      	movs	r3, r0
 8003874:	8023      	strh	r3, [r4, #0]
            u1_t chpage = opts[oidx+4] & MCMD_LADR_CHPAGE_MASK;     // channel page
 8003876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003878:	3304      	adds	r3, #4
 800387a:	6a3a      	ldr	r2, [r7, #32]
 800387c:	18d3      	adds	r3, r2, r3
 800387e:	781a      	ldrb	r2, [r3, #0]
 8003880:	1dfb      	adds	r3, r7, #7
 8003882:	210f      	movs	r1, #15
 8003884:	438a      	bics	r2, r1
 8003886:	701a      	strb	r2, [r3, #0]
            u1_t uprpt  = opts[oidx+4] & MCMD_LADR_REPEAT_MASK;     // up repeat count
 8003888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800388a:	3304      	adds	r3, #4
 800388c:	6a3a      	ldr	r2, [r7, #32]
 800388e:	18d3      	adds	r3, r2, r3
 8003890:	781a      	ldrb	r2, [r3, #0]
 8003892:	1dbb      	adds	r3, r7, #6
 8003894:	210f      	movs	r1, #15
 8003896:	400a      	ands	r2, r1
 8003898:	701a      	strb	r2, [r3, #0]
            oidx += 5;
 800389a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800389c:	3305      	adds	r3, #5
 800389e:	653b      	str	r3, [r7, #80]	; 0x50

            LMIC.ladrAns = 0x80 |     // Include an answer into next frame up
 80038a0:	4a2e      	ldr	r2, [pc, #184]	; (800395c <decodeFrame+0x358>)
 80038a2:	2326      	movs	r3, #38	; 0x26
 80038a4:	33ff      	adds	r3, #255	; 0xff
 80038a6:	2187      	movs	r1, #135	; 0x87
 80038a8:	54d1      	strb	r1, [r2, r3]
                MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK;
            if( !mapChannels(chpage, chmap) )
 80038aa:	197b      	adds	r3, r7, r5
 80038ac:	881a      	ldrh	r2, [r3, #0]
 80038ae:	1dfb      	adds	r3, r7, #7
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	0011      	movs	r1, r2
 80038b4:	0018      	movs	r0, r3
 80038b6:	f7ff fb17 	bl	8002ee8 <mapChannels>
 80038ba:	1e03      	subs	r3, r0, #0
 80038bc:	d10a      	bne.n	80038d4 <decodeFrame+0x2d0>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_CHACK;
 80038be:	4a27      	ldr	r2, [pc, #156]	; (800395c <decodeFrame+0x358>)
 80038c0:	2326      	movs	r3, #38	; 0x26
 80038c2:	33ff      	adds	r3, #255	; 0xff
 80038c4:	5cd3      	ldrb	r3, [r2, r3]
 80038c6:	2201      	movs	r2, #1
 80038c8:	4393      	bics	r3, r2
 80038ca:	b2d9      	uxtb	r1, r3
 80038cc:	4a23      	ldr	r2, [pc, #140]	; (800395c <decodeFrame+0x358>)
 80038ce:	2326      	movs	r3, #38	; 0x26
 80038d0:	33ff      	adds	r3, #255	; 0xff
 80038d2:	54d1      	strb	r1, [r2, r3]
            dr_t dr = (dr_t)(p1>>MCMD_LADR_DR_SHIFT);
 80038d4:	1d7b      	adds	r3, r7, #5
 80038d6:	220a      	movs	r2, #10
 80038d8:	18ba      	adds	r2, r7, r2
 80038da:	7812      	ldrb	r2, [r2, #0]
 80038dc:	0912      	lsrs	r2, r2, #4
 80038de:	701a      	strb	r2, [r3, #0]
            if( !validDR(dr) ) {
 80038e0:	1d7b      	adds	r3, r7, #5
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	0018      	movs	r0, r3
 80038e6:	f7fe fbd7 	bl	8002098 <validDR>
 80038ea:	1e03      	subs	r3, r0, #0
 80038ec:	d10a      	bne.n	8003904 <decodeFrame+0x300>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_DRACK;
 80038ee:	4a1b      	ldr	r2, [pc, #108]	; (800395c <decodeFrame+0x358>)
 80038f0:	2326      	movs	r3, #38	; 0x26
 80038f2:	33ff      	adds	r3, #255	; 0xff
 80038f4:	5cd3      	ldrb	r3, [r2, r3]
 80038f6:	2202      	movs	r2, #2
 80038f8:	4393      	bics	r3, r2
 80038fa:	b2d9      	uxtb	r1, r3
 80038fc:	4a17      	ldr	r2, [pc, #92]	; (800395c <decodeFrame+0x358>)
 80038fe:	2326      	movs	r3, #38	; 0x26
 8003900:	33ff      	adds	r3, #255	; 0xff
 8003902:	54d1      	strb	r1, [r2, r3]
                EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                                   e_.eui    = MAIN::CDEV->getEui(),
                                   e_.info   = Base::lsbf4(&d[pend]),
                                   e_.info2  = Base::msbf4(&opts[oidx-4])));
            }
            if( (LMIC.ladrAns & 0x7F) == (MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK) ) {
 8003904:	4a15      	ldr	r2, [pc, #84]	; (800395c <decodeFrame+0x358>)
 8003906:	2326      	movs	r3, #38	; 0x26
 8003908:	33ff      	adds	r3, #255	; 0xff
 800390a:	5cd3      	ldrb	r3, [r2, r3]
 800390c:	001a      	movs	r2, r3
 800390e:	237f      	movs	r3, #127	; 0x7f
 8003910:	4013      	ands	r3, r2
 8003912:	2b07      	cmp	r3, #7
 8003914:	d111      	bne.n	800393a <decodeFrame+0x336>
                // Nothing went wrong - use settings
                LMIC.upRepeat = uprpt;
 8003916:	4b11      	ldr	r3, [pc, #68]	; (800395c <decodeFrame+0x358>)
 8003918:	1dba      	adds	r2, r7, #6
 800391a:	21ae      	movs	r1, #174	; 0xae
 800391c:	7812      	ldrb	r2, [r2, #0]
 800391e:	545a      	strb	r2, [r3, r1]
                setDrTxpow(DRCHG_NWKCMD, dr, pow2dBm(p1));
 8003920:	230a      	movs	r3, #10
 8003922:	18fb      	adds	r3, r7, r3
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	220f      	movs	r2, #15
 8003928:	4013      	ands	r3, r2
 800392a:	4a0f      	ldr	r2, [pc, #60]	; (8003968 <decodeFrame+0x364>)
 800392c:	56d2      	ldrsb	r2, [r2, r3]
 800392e:	1d7b      	adds	r3, r7, #5
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	0019      	movs	r1, r3
 8003934:	2004      	movs	r0, #4
 8003936:	f7ff f95b 	bl	8002bf0 <setDrTxpow>
            }
            LMIC.adrChanged = 1;  // Trigger an ACK to NWK
 800393a:	4a08      	ldr	r2, [pc, #32]	; (800395c <decodeFrame+0x358>)
 800393c:	2391      	movs	r3, #145	; 0x91
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	2101      	movs	r1, #1
 8003942:	54d1      	strb	r1, [r2, r3]
            continue;
 8003944:	e149      	b.n	8003bda <decodeFrame+0x5d6>
        }
        case MCMD_DEVS_REQ: {
            LMIC.devsAns = 1;
 8003946:	4a05      	ldr	r2, [pc, #20]	; (800395c <decodeFrame+0x358>)
 8003948:	2393      	movs	r3, #147	; 0x93
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	2101      	movs	r1, #1
 800394e:	54d1      	strb	r1, [r2, r3]
            oidx += 1;
 8003950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003952:	3301      	adds	r3, #1
 8003954:	653b      	str	r3, [r7, #80]	; 0x50
            continue;
 8003956:	e140      	b.n	8003bda <decodeFrame+0x5d6>
 8003958:	200003c8 	.word	0x200003c8
 800395c:	20000280 	.word	0x20000280
 8003960:	20000374 	.word	0x20000374
 8003964:	0800dfac 	.word	0x0800dfac
 8003968:	0800df28 	.word	0x0800df28
        }
        case MCMD_DN2P_SET: {
            dr_t dr = (dr_t)(opts[oidx+1] & 0x0F);
 800396c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800396e:	3301      	adds	r3, #1
 8003970:	6a3a      	ldr	r2, [r7, #32]
 8003972:	18d3      	adds	r3, r2, r3
 8003974:	781a      	ldrb	r2, [r3, #0]
 8003976:	2412      	movs	r4, #18
 8003978:	193b      	adds	r3, r7, r4
 800397a:	210f      	movs	r1, #15
 800397c:	400a      	ands	r2, r1
 800397e:	701a      	strb	r2, [r3, #0]
            u4_t freq = convFreq(&opts[oidx+2]);
 8003980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003982:	3302      	adds	r3, #2
 8003984:	6a3a      	ldr	r2, [r7, #32]
 8003986:	18d3      	adds	r3, r2, r3
 8003988:	0018      	movs	r0, r3
 800398a:	f7ff fa8b 	bl	8002ea4 <convFreq>
 800398e:	0003      	movs	r3, r0
 8003990:	60fb      	str	r3, [r7, #12]
            oidx += 5;
 8003992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003994:	3305      	adds	r3, #5
 8003996:	653b      	str	r3, [r7, #80]	; 0x50
            LMIC.dn2Ans = 0x80;   // answer pending
 8003998:	4ace      	ldr	r2, [pc, #824]	; (8003cd4 <decodeFrame+0x6d0>)
 800399a:	2398      	movs	r3, #152	; 0x98
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	2180      	movs	r1, #128	; 0x80
 80039a0:	54d1      	strb	r1, [r2, r3]
            if( validDR(dr) )
 80039a2:	193b      	adds	r3, r7, r4
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	0018      	movs	r0, r3
 80039a8:	f7fe fb76 	bl	8002098 <validDR>
 80039ac:	1e03      	subs	r3, r0, #0
 80039ae:	d00a      	beq.n	80039c6 <decodeFrame+0x3c2>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_DRACK;
 80039b0:	4ac8      	ldr	r2, [pc, #800]	; (8003cd4 <decodeFrame+0x6d0>)
 80039b2:	2398      	movs	r3, #152	; 0x98
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	5cd3      	ldrb	r3, [r2, r3]
 80039b8:	2202      	movs	r2, #2
 80039ba:	4313      	orrs	r3, r2
 80039bc:	b2d9      	uxtb	r1, r3
 80039be:	4ac5      	ldr	r2, [pc, #788]	; (8003cd4 <decodeFrame+0x6d0>)
 80039c0:	2398      	movs	r3, #152	; 0x98
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	54d1      	strb	r1, [r2, r3]
            if( freq != 0 )
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <decodeFrame+0x3de>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_CHACK;
 80039cc:	4ac1      	ldr	r2, [pc, #772]	; (8003cd4 <decodeFrame+0x6d0>)
 80039ce:	2398      	movs	r3, #152	; 0x98
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	5cd3      	ldrb	r3, [r2, r3]
 80039d4:	2201      	movs	r2, #1
 80039d6:	4313      	orrs	r3, r2
 80039d8:	b2d9      	uxtb	r1, r3
 80039da:	4abe      	ldr	r2, [pc, #760]	; (8003cd4 <decodeFrame+0x6d0>)
 80039dc:	2398      	movs	r3, #152	; 0x98
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	54d1      	strb	r1, [r2, r3]
            if( LMIC.dn2Ans == (0x80|MCMD_DN2P_ANS_DRACK|MCMD_DN2P_ANS_CHACK) ) {
 80039e2:	4abc      	ldr	r2, [pc, #752]	; (8003cd4 <decodeFrame+0x6d0>)
 80039e4:	2398      	movs	r3, #152	; 0x98
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	5cd3      	ldrb	r3, [r2, r3]
 80039ea:	2b83      	cmp	r3, #131	; 0x83
 80039ec:	d000      	beq.n	80039f0 <decodeFrame+0x3ec>
 80039ee:	e0f4      	b.n	8003bda <decodeFrame+0x5d6>
                LMIC.dn2Dr = dr;
 80039f0:	4ab8      	ldr	r2, [pc, #736]	; (8003cd4 <decodeFrame+0x6d0>)
 80039f2:	2312      	movs	r3, #18
 80039f4:	18f9      	adds	r1, r7, r3
 80039f6:	232c      	movs	r3, #44	; 0x2c
 80039f8:	33ff      	adds	r3, #255	; 0xff
 80039fa:	7809      	ldrb	r1, [r1, #0]
 80039fc:	54d1      	strb	r1, [r2, r3]
                LMIC.dn2Freq = freq;
 80039fe:	4ab5      	ldr	r2, [pc, #724]	; (8003cd4 <decodeFrame+0x6d0>)
 8003a00:	2396      	movs	r3, #150	; 0x96
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	68f9      	ldr	r1, [r7, #12]
 8003a06:	50d1      	str	r1, [r2, r3]
                DO_DEVDB(LMIC.dn2Dr,dn2Dr);
                DO_DEVDB(LMIC.dn2Freq,dn2Freq);
            }
            continue;
 8003a08:	e0e7      	b.n	8003bda <decodeFrame+0x5d6>
        }
        case MCMD_DCAP_REQ: {
            u1_t cap = opts[oidx+1];
 8003a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	6a3a      	ldr	r2, [r7, #32]
 8003a10:	18d2      	adds	r2, r2, r3
 8003a12:	210b      	movs	r1, #11
 8003a14:	187b      	adds	r3, r7, r1
 8003a16:	7812      	ldrb	r2, [r2, #0]
 8003a18:	701a      	strb	r2, [r3, #0]
            oidx += 2;
 8003a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	653b      	str	r3, [r7, #80]	; 0x50
            // A value cap=0xFF means device is OFF unless enabled again manually.
            if( cap==0xFF )
 8003a20:	187b      	adds	r3, r7, r1
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2bff      	cmp	r3, #255	; 0xff
 8003a26:	d108      	bne.n	8003a3a <decodeFrame+0x436>
                LMIC.opmode |= OP_SHUTDOWN;  // stop any sending
 8003a28:	4baa      	ldr	r3, [pc, #680]	; (8003cd4 <decodeFrame+0x6d0>)
 8003a2a:	22ac      	movs	r2, #172	; 0xac
 8003a2c:	5a9b      	ldrh	r3, [r3, r2]
 8003a2e:	2240      	movs	r2, #64	; 0x40
 8003a30:	4313      	orrs	r3, r2
 8003a32:	b299      	uxth	r1, r3
 8003a34:	4ba7      	ldr	r3, [pc, #668]	; (8003cd4 <decodeFrame+0x6d0>)
 8003a36:	22ac      	movs	r2, #172	; 0xac
 8003a38:	5299      	strh	r1, [r3, r2]
            LMIC.globalDutyRate  = cap & 0xF;
 8003a3a:	230b      	movs	r3, #11
 8003a3c:	18fb      	adds	r3, r7, r3
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	220f      	movs	r2, #15
 8003a42:	4013      	ands	r3, r2
 8003a44:	b2d9      	uxtb	r1, r3
 8003a46:	4ba3      	ldr	r3, [pc, #652]	; (8003cd4 <decodeFrame+0x6d0>)
 8003a48:	22a3      	movs	r2, #163	; 0xa3
 8003a4a:	5499      	strb	r1, [r3, r2]
            LMIC.globalDutyAvail = os_getTime();
 8003a4c:	f002 f9f4 	bl	8005e38 <os_getTime>
 8003a50:	0002      	movs	r2, r0
 8003a52:	4ba0      	ldr	r3, [pc, #640]	; (8003cd4 <decodeFrame+0x6d0>)
 8003a54:	21a4      	movs	r1, #164	; 0xa4
 8003a56:	505a      	str	r2, [r3, r1]
            DO_DEVDB(cap,dutyCap);
            LMIC.dutyCapAns = 1;
 8003a58:	4a9e      	ldr	r2, [pc, #632]	; (8003cd4 <decodeFrame+0x6d0>)
 8003a5a:	232a      	movs	r3, #42	; 0x2a
 8003a5c:	33ff      	adds	r3, #255	; 0xff
 8003a5e:	2101      	movs	r1, #1
 8003a60:	54d1      	strb	r1, [r2, r3]
            continue;
 8003a62:	e0ba      	b.n	8003bda <decodeFrame+0x5d6>
        }
        case MCMD_SNCH_REQ: {
            u1_t chidx = opts[oidx+1];  // channel
 8003a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a66:	3301      	adds	r3, #1
 8003a68:	6a3a      	ldr	r2, [r7, #32]
 8003a6a:	18d2      	adds	r2, r2, r3
 8003a6c:	251b      	movs	r5, #27
 8003a6e:	197b      	adds	r3, r7, r5
 8003a70:	7812      	ldrb	r2, [r2, #0]
 8003a72:	701a      	strb	r2, [r3, #0]
            u4_t freq  = convFreq(&opts[oidx+2]); // freq
 8003a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a76:	3302      	adds	r3, #2
 8003a78:	6a3a      	ldr	r2, [r7, #32]
 8003a7a:	18d3      	adds	r3, r2, r3
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	f7ff fa11 	bl	8002ea4 <convFreq>
 8003a82:	0003      	movs	r3, r0
 8003a84:	617b      	str	r3, [r7, #20]
            u1_t drs   = opts[oidx+5];  // datarate span
 8003a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a88:	3305      	adds	r3, #5
 8003a8a:	6a3a      	ldr	r2, [r7, #32]
 8003a8c:	18d2      	adds	r2, r2, r3
 8003a8e:	2013      	movs	r0, #19
 8003a90:	183b      	adds	r3, r7, r0
 8003a92:	7812      	ldrb	r2, [r2, #0]
 8003a94:	701a      	strb	r2, [r3, #0]
            LMIC.snchAns = 0x80;
 8003a96:	4a8f      	ldr	r2, [pc, #572]	; (8003cd4 <decodeFrame+0x6d0>)
 8003a98:	2395      	movs	r3, #149	; 0x95
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	2180      	movs	r1, #128	; 0x80
 8003a9e:	54d1      	strb	r1, [r2, r3]
            if( freq != 0 && LMIC_setupChannel(chidx, freq, DR_RANGE_MAP(drs&0xF,drs>>4), -1) )
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d02b      	beq.n	8003afe <decodeFrame+0x4fa>
 8003aa6:	0001      	movs	r1, r0
 8003aa8:	187b      	adds	r3, r7, r1
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	220f      	movs	r2, #15
 8003aae:	4013      	ands	r3, r2
 8003ab0:	4a89      	ldr	r2, [pc, #548]	; (8003cd8 <decodeFrame+0x6d4>)
 8003ab2:	409a      	lsls	r2, r3
 8003ab4:	0013      	movs	r3, r2
 8003ab6:	b21b      	sxth	r3, r3
 8003ab8:	187a      	adds	r2, r7, r1
 8003aba:	7812      	ldrb	r2, [r2, #0]
 8003abc:	0912      	lsrs	r2, r2, #4
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	0011      	movs	r1, r2
 8003ac2:	220f      	movs	r2, #15
 8003ac4:	1a52      	subs	r2, r2, r1
 8003ac6:	4984      	ldr	r1, [pc, #528]	; (8003cd8 <decodeFrame+0x6d4>)
 8003ac8:	4111      	asrs	r1, r2
 8003aca:	000a      	movs	r2, r1
 8003acc:	b212      	sxth	r2, r2
 8003ace:	4013      	ands	r3, r2
 8003ad0:	b21b      	sxth	r3, r3
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	425c      	negs	r4, r3
 8003ad8:	6979      	ldr	r1, [r7, #20]
 8003ada:	197b      	adds	r3, r7, r5
 8003adc:	7818      	ldrb	r0, [r3, #0]
 8003ade:	0023      	movs	r3, r4
 8003ae0:	f7ff f95a 	bl	8002d98 <LMIC_setupChannel>
 8003ae4:	1e03      	subs	r3, r0, #0
 8003ae6:	d00a      	beq.n	8003afe <decodeFrame+0x4fa>
                LMIC.snchAns |= MCMD_SNCH_ANS_DRACK|MCMD_SNCH_ANS_FQACK;
 8003ae8:	4a7a      	ldr	r2, [pc, #488]	; (8003cd4 <decodeFrame+0x6d0>)
 8003aea:	2395      	movs	r3, #149	; 0x95
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	5cd3      	ldrb	r3, [r2, r3]
 8003af0:	2203      	movs	r2, #3
 8003af2:	4313      	orrs	r3, r2
 8003af4:	b2d9      	uxtb	r1, r3
 8003af6:	4a77      	ldr	r2, [pc, #476]	; (8003cd4 <decodeFrame+0x6d0>)
 8003af8:	2395      	movs	r3, #149	; 0x95
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	54d1      	strb	r1, [r2, r3]
            oidx += 6;
 8003afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b00:	3306      	adds	r3, #6
 8003b02:	653b      	str	r3, [r7, #80]	; 0x50
            continue;
 8003b04:	e069      	b.n	8003bda <decodeFrame+0x5d6>
        }
        case MCMD_PING_SET: {
            u4_t freq = convFreq(&opts[oidx+1]);
 8003b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b08:	3301      	adds	r3, #1
 8003b0a:	6a3a      	ldr	r2, [r7, #32]
 8003b0c:	18d3      	adds	r3, r2, r3
 8003b0e:	0018      	movs	r0, r3
 8003b10:	f7ff f9c8 	bl	8002ea4 <convFreq>
 8003b14:	0003      	movs	r3, r0
 8003b16:	61fb      	str	r3, [r7, #28]
            oidx += 4;
 8003b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	653b      	str	r3, [r7, #80]	; 0x50
            u1_t flags = 0x80;
 8003b1e:	214f      	movs	r1, #79	; 0x4f
 8003b20:	187b      	adds	r3, r7, r1
 8003b22:	2280      	movs	r2, #128	; 0x80
 8003b24:	701a      	strb	r2, [r3, #0]
            if( freq != 0 ) {
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <decodeFrame+0x53e>
                flags |= MCMD_PING_ANS_FQACK;
 8003b2c:	187b      	adds	r3, r7, r1
 8003b2e:	187a      	adds	r2, r7, r1
 8003b30:	7812      	ldrb	r2, [r2, #0]
 8003b32:	2101      	movs	r1, #1
 8003b34:	430a      	orrs	r2, r1
 8003b36:	701a      	strb	r2, [r3, #0]
                LMIC.ping.freq = freq;
 8003b38:	4a66      	ldr	r2, [pc, #408]	; (8003cd4 <decodeFrame+0x6d0>)
 8003b3a:	23a0      	movs	r3, #160	; 0xa0
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	69f9      	ldr	r1, [r7, #28]
 8003b40:	50d1      	str	r1, [r2, r3]
                DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
                DO_DEVDB(LMIC.ping.freq, pingFreq);
                DO_DEVDB(LMIC.ping.dr, pingDr);
            }
            LMIC.pingSetAns = flags;
 8003b42:	4a64      	ldr	r2, [pc, #400]	; (8003cd4 <decodeFrame+0x6d0>)
 8003b44:	234f      	movs	r3, #79	; 0x4f
 8003b46:	18f9      	adds	r1, r7, r3
 8003b48:	2334      	movs	r3, #52	; 0x34
 8003b4a:	33ff      	adds	r3, #255	; 0xff
 8003b4c:	7809      	ldrb	r1, [r1, #0]
 8003b4e:	54d1      	strb	r1, [r2, r3]
            continue;
 8003b50:	e043      	b.n	8003bda <decodeFrame+0x5d6>
        }
        case MCMD_BCNI_ANS: {
            // Ignore if tracking already enabled
            if( (LMIC.opmode & OP_TRACK) == 0 ) {
 8003b52:	4b60      	ldr	r3, [pc, #384]	; (8003cd4 <decodeFrame+0x6d0>)
 8003b54:	22ac      	movs	r2, #172	; 0xac
 8003b56:	5a9b      	ldrh	r3, [r3, r2]
 8003b58:	001a      	movs	r2, r3
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	d138      	bne.n	8003bd2 <decodeFrame+0x5ce>
                LMIC.bcnChnl = opts[oidx+3];
 8003b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b62:	3303      	adds	r3, #3
 8003b64:	6a3a      	ldr	r2, [r7, #32]
 8003b66:	18d3      	adds	r3, r2, r3
 8003b68:	7819      	ldrb	r1, [r3, #0]
 8003b6a:	4a5a      	ldr	r2, [pc, #360]	; (8003cd4 <decodeFrame+0x6d0>)
 8003b6c:	23c4      	movs	r3, #196	; 0xc4
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	54d1      	strb	r1, [r2, r3]
                // Enable tracking - bcninfoTries
                LMIC.opmode |= OP_TRACK;
 8003b72:	4b58      	ldr	r3, [pc, #352]	; (8003cd4 <decodeFrame+0x6d0>)
 8003b74:	22ac      	movs	r2, #172	; 0xac
 8003b76:	5a9b      	ldrh	r3, [r3, r2]
 8003b78:	2202      	movs	r2, #2
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	b299      	uxth	r1, r3
 8003b7e:	4b55      	ldr	r3, [pc, #340]	; (8003cd4 <decodeFrame+0x6d0>)
 8003b80:	22ac      	movs	r2, #172	; 0xac
 8003b82:	5299      	strh	r1, [r3, r2]
                // Cleared later in txComplete handling - triggers EV_BEACON_FOUND
                ASSERT(LMIC.bcninfoTries!=0);
 8003b84:	4a53      	ldr	r2, [pc, #332]	; (8003cd4 <decodeFrame+0x6d0>)
 8003b86:	2399      	movs	r3, #153	; 0x99
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	5cd3      	ldrb	r3, [r2, r3]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <decodeFrame+0x590>
 8003b90:	f7fe f870 	bl	8001c74 <hal_failed>
                // Setup RX parameters
                LMIC.bcninfo.txtime = (LMIC.rxtime
 8003b94:	4b4f      	ldr	r3, [pc, #316]	; (8003cd4 <decodeFrame+0x6d0>)
 8003b96:	685c      	ldr	r4, [r3, #4]
                                       + ms2osticks(os_rlsbf2(&opts[oidx+1]) * MCMD_BCNI_TUNIT)
 8003b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	6a3a      	ldr	r2, [r7, #32]
 8003b9e:	18d3      	adds	r3, r2, r3
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f7fe faae 	bl	8002102 <os_rlsbf2>
 8003ba6:	0003      	movs	r3, r0
 8003ba8:	001a      	movs	r2, r3
 8003baa:	0013      	movs	r3, r2
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	1a9b      	subs	r3, r3, r2
 8003bb0:	019b      	lsls	r3, r3, #6
 8003bb2:	18e3      	adds	r3, r4, r3
                                       + ms2osticksCeil(MCMD_BCNI_TUNIT/2)
                                       - BCN_INTV_osticks);
 8003bb4:	4a49      	ldr	r2, [pc, #292]	; (8003cdc <decodeFrame+0x6d8>)
 8003bb6:	1899      	adds	r1, r3, r2
                LMIC.bcninfo.txtime = (LMIC.rxtime
 8003bb8:	4a46      	ldr	r2, [pc, #280]	; (8003cd4 <decodeFrame+0x6d0>)
 8003bba:	23c8      	movs	r3, #200	; 0xc8
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	50d1      	str	r1, [r2, r3]
                LMIC.bcninfo.flags = 0;  // txtime above cannot be used as reference (BCN_PARTIAL|BCN_FULL cleared)
 8003bc0:	4a44      	ldr	r2, [pc, #272]	; (8003cd4 <decodeFrame+0x6d0>)
 8003bc2:	23cb      	movs	r3, #203	; 0xcb
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	54d1      	strb	r1, [r2, r3]
                calcBcnRxWindowFromMillis(MCMD_BCNI_TUNIT,1);  // error of +/-N ms 
 8003bca:	2101      	movs	r1, #1
 8003bcc:	201e      	movs	r0, #30
 8003bce:	f7fe fe41 	bl	8002854 <calcBcnRxWindowFromMillis>
                                     e_.info    = (LMIC.missedBcns |
                                                   (osticks2us(LMIC.bcninfo.txtime + BCN_INTV_osticks
                                                               - LMIC.bcnRxtime) << 8)),
                                     e_.time    = MAIN::CDEV->ostime2ustime(LMIC.bcninfo.txtime + BCN_INTV_osticks)));
            }
            oidx += 4;
 8003bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	653b      	str	r3, [r7, #80]	; 0x50
            continue;
 8003bd8:	46c0      	nop			; (mov r8, r8)
    while( oidx < olen ) {
 8003bda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bde:	429a      	cmp	r2, r3
 8003be0:	da00      	bge.n	8003be4 <decodeFrame+0x5e0>
 8003be2:	e625      	b.n	8003830 <decodeFrame+0x22c>
 8003be4:	e000      	b.n	8003be8 <decodeFrame+0x5e4>
        }
        EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = Base::lsbf4(&d[pend]),
                           e_.info2  = Base::msbf4(&opts[oidx])));
        break;
 8003be6:	46c0      	nop			; (mov r8, r8)
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (oidx) + (olen<<8)));
    }

    if( !replayConf ) {
 8003be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d11f      	bne.n	8003c2e <decodeFrame+0x62a>
        // Handle payload only if not a replay
        // Decrypt payload - if any
        if( port >= 0  &&  pend-poff > 0 )
 8003bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	db1c      	blt.n	8003c2e <decodeFrame+0x62a>
 8003bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	dd17      	ble.n	8003c2e <decodeFrame+0x62a>
            aes_cipher(port <= 0 ? LMIC.nwkKey : LMIC.artKey, LMIC.devaddr, seqno, /*dn*/1, d+poff, pend-poff);
 8003bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	dc01      	bgt.n	8003c08 <decodeFrame+0x604>
 8003c04:	4836      	ldr	r0, [pc, #216]	; (8003ce0 <decodeFrame+0x6dc>)
 8003c06:	e000      	b.n	8003c0a <decodeFrame+0x606>
 8003c08:	4836      	ldr	r0, [pc, #216]	; (8003ce4 <decodeFrame+0x6e0>)
 8003c0a:	4a32      	ldr	r2, [pc, #200]	; (8003cd4 <decodeFrame+0x6d0>)
 8003c0c:	238a      	movs	r3, #138	; 0x8a
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	58d4      	ldr	r4, [r2, r3]
 8003c12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c16:	18d3      	adds	r3, r2, r3
 8003c18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c1a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c1c:	1a8a      	subs	r2, r1, r2
 8003c1e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c20:	9201      	str	r2, [sp, #4]
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	2301      	movs	r3, #1
 8003c26:	000a      	movs	r2, r1
 8003c28:	0021      	movs	r1, r4
 8003c2a:	f7fe fc45 	bl	80024b8 <aes_cipher>
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = seqno,
                           e_.info2  = ackup));
    }

    if( LMIC.txCnt != 0 ) // we requested an ACK
 8003c2e:	4a29      	ldr	r2, [pc, #164]	; (8003cd4 <decodeFrame+0x6d0>)
 8003c30:	23a2      	movs	r3, #162	; 0xa2
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	5cd3      	ldrb	r3, [r2, r3]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d012      	beq.n	8003c60 <decodeFrame+0x65c>
        LMIC.txrxFlags |= ackup ? TXRX_ACK : TXRX_NACK;
 8003c3a:	4a26      	ldr	r2, [pc, #152]	; (8003cd4 <decodeFrame+0x6d0>)
 8003c3c:	2346      	movs	r3, #70	; 0x46
 8003c3e:	33ff      	adds	r3, #255	; 0xff
 8003c40:	5cd3      	ldrb	r3, [r2, r3]
 8003c42:	b25a      	sxtb	r2, r3
 8003c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <decodeFrame+0x64c>
 8003c4a:	2380      	movs	r3, #128	; 0x80
 8003c4c:	425b      	negs	r3, r3
 8003c4e:	e000      	b.n	8003c52 <decodeFrame+0x64e>
 8003c50:	2340      	movs	r3, #64	; 0x40
 8003c52:	4313      	orrs	r3, r2
 8003c54:	b25b      	sxtb	r3, r3
 8003c56:	b2d9      	uxtb	r1, r3
 8003c58:	4a1e      	ldr	r2, [pc, #120]	; (8003cd4 <decodeFrame+0x6d0>)
 8003c5a:	2346      	movs	r3, #70	; 0x46
 8003c5c:	33ff      	adds	r3, #255	; 0xff
 8003c5e:	54d1      	strb	r1, [r2, r3]

    if( port < 0 ) {
 8003c60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	da16      	bge.n	8003c94 <decodeFrame+0x690>
        LMIC.txrxFlags |= TXRX_NOPORT;
 8003c66:	4a1b      	ldr	r2, [pc, #108]	; (8003cd4 <decodeFrame+0x6d0>)
 8003c68:	2346      	movs	r3, #70	; 0x46
 8003c6a:	33ff      	adds	r3, #255	; 0xff
 8003c6c:	5cd3      	ldrb	r3, [r2, r3]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	4313      	orrs	r3, r2
 8003c72:	b2d9      	uxtb	r1, r3
 8003c74:	4a17      	ldr	r2, [pc, #92]	; (8003cd4 <decodeFrame+0x6d0>)
 8003c76:	2346      	movs	r3, #70	; 0x46
 8003c78:	33ff      	adds	r3, #255	; 0xff
 8003c7a:	54d1      	strb	r1, [r2, r3]
        LMIC.dataBeg = poff;
 8003c7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c7e:	b2d9      	uxtb	r1, r3
 8003c80:	4a14      	ldr	r2, [pc, #80]	; (8003cd4 <decodeFrame+0x6d0>)
 8003c82:	23a3      	movs	r3, #163	; 0xa3
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	54d1      	strb	r1, [r2, r3]
        LMIC.dataLen = 0;
 8003c88:	4a12      	ldr	r2, [pc, #72]	; (8003cd4 <decodeFrame+0x6d0>)
 8003c8a:	2348      	movs	r3, #72	; 0x48
 8003c8c:	33ff      	adds	r3, #255	; 0xff
 8003c8e:	2100      	movs	r1, #0
 8003c90:	54d1      	strb	r1, [r2, r3]
 8003c92:	e01a      	b.n	8003cca <decodeFrame+0x6c6>
    } else {
        LMIC.txrxFlags |= TXRX_PORT;
 8003c94:	4a0f      	ldr	r2, [pc, #60]	; (8003cd4 <decodeFrame+0x6d0>)
 8003c96:	2346      	movs	r3, #70	; 0x46
 8003c98:	33ff      	adds	r3, #255	; 0xff
 8003c9a:	5cd3      	ldrb	r3, [r2, r3]
 8003c9c:	2210      	movs	r2, #16
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	b2d9      	uxtb	r1, r3
 8003ca2:	4a0c      	ldr	r2, [pc, #48]	; (8003cd4 <decodeFrame+0x6d0>)
 8003ca4:	2346      	movs	r3, #70	; 0x46
 8003ca6:	33ff      	adds	r3, #255	; 0xff
 8003ca8:	54d1      	strb	r1, [r2, r3]
        LMIC.dataBeg = poff;
 8003caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cac:	b2d9      	uxtb	r1, r3
 8003cae:	4a09      	ldr	r2, [pc, #36]	; (8003cd4 <decodeFrame+0x6d0>)
 8003cb0:	23a3      	movs	r3, #163	; 0xa3
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	54d1      	strb	r1, [r2, r3]
        LMIC.dataLen = pend-poff;
 8003cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	b2d9      	uxtb	r1, r3
 8003cc2:	4a04      	ldr	r2, [pc, #16]	; (8003cd4 <decodeFrame+0x6d0>)
 8003cc4:	2348      	movs	r3, #72	; 0x48
 8003cc6:	33ff      	adds	r3, #255	; 0xff
 8003cc8:	54d1      	strb	r1, [r2, r3]
    }
    return 1;
 8003cca:	2301      	movs	r3, #1
}
 8003ccc:	0018      	movs	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	b018      	add	sp, #96	; 0x60
 8003cd2:	bdb0      	pop	{r4, r5, r7, pc}
 8003cd4:	20000280 	.word	0x20000280
 8003cd8:	0000ffff 	.word	0x0000ffff
 8003cdc:	ffc181e0 	.word	0xffc181e0
 8003ce0:	20000374 	.word	0x20000374
 8003ce4:	20000384 	.word	0x20000384

08003ce8 <setupRx2>:

// ================================================================================
// TX/RX transaction support


static void setupRx2 (void) {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
    LMIC.txrxFlags = TXRX_DNW2;
 8003cec:	4a10      	ldr	r2, [pc, #64]	; (8003d30 <setupRx2+0x48>)
 8003cee:	2346      	movs	r3, #70	; 0x46
 8003cf0:	33ff      	adds	r3, #255	; 0xff
 8003cf2:	2102      	movs	r1, #2
 8003cf4:	54d1      	strb	r1, [r2, r3]
    LMIC.rps = dndr2rps(LMIC.dn2Dr);
 8003cf6:	4a0e      	ldr	r2, [pc, #56]	; (8003d30 <setupRx2+0x48>)
 8003cf8:	232c      	movs	r3, #44	; 0x2c
 8003cfa:	33ff      	adds	r3, #255	; 0xff
 8003cfc:	5cd3      	ldrb	r3, [r2, r3]
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f7fe f99a 	bl	8002038 <dndr2rps>
 8003d04:	0003      	movs	r3, r0
 8003d06:	001a      	movs	r2, r3
 8003d08:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <setupRx2+0x48>)
 8003d0a:	81da      	strh	r2, [r3, #14]
    LMIC.freq = LMIC.dn2Freq;
 8003d0c:	4a08      	ldr	r2, [pc, #32]	; (8003d30 <setupRx2+0x48>)
 8003d0e:	2396      	movs	r3, #150	; 0x96
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	58d2      	ldr	r2, [r2, r3]
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <setupRx2+0x48>)
 8003d16:	609a      	str	r2, [r3, #8]
    LMIC.dataLen = 0;
 8003d18:	4a05      	ldr	r2, [pc, #20]	; (8003d30 <setupRx2+0x48>)
 8003d1a:	2348      	movs	r3, #72	; 0x48
 8003d1c:	33ff      	adds	r3, #255	; 0xff
 8003d1e:	2100      	movs	r1, #0
 8003d20:	54d1      	strb	r1, [r2, r3]
    os_radio(RADIO_RX);
 8003d22:	2002      	movs	r0, #2
 8003d24:	f002 ff3c 	bl	8006ba0 <os_radio>
}
 8003d28:	46c0      	nop			; (mov r8, r8)
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	20000280 	.word	0x20000280

08003d34 <schedRx2>:


static void schedRx2 (ostime_t delay, osjobcb_t func) {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
    // Add 1.5 symbols we need 5 out of 8. Try to sync 1.5 symbols into the preamble.
    LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dn2Dr);
 8003d3e:	4b0f      	ldr	r3, [pc, #60]	; (8003d7c <schedRx2+0x48>)
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	18d1      	adds	r1, r2, r3
 8003d46:	4a0d      	ldr	r2, [pc, #52]	; (8003d7c <schedRx2+0x48>)
 8003d48:	232c      	movs	r3, #44	; 0x2c
 8003d4a:	33ff      	adds	r3, #255	; 0xff
 8003d4c:	5cd3      	ldrb	r3, [r2, r3]
 8003d4e:	001a      	movs	r2, r3
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <schedRx2+0x4c>)
 8003d52:	0092      	lsls	r2, r2, #2
 8003d54:	58d2      	ldr	r2, [r2, r3]
 8003d56:	0013      	movs	r3, r2
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	189b      	adds	r3, r3, r2
 8003d5c:	18ca      	adds	r2, r1, r3
 8003d5e:	4b07      	ldr	r3, [pc, #28]	; (8003d7c <schedRx2+0x48>)
 8003d60:	605a      	str	r2, [r3, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 8003d62:	4b06      	ldr	r3, [pc, #24]	; (8003d7c <schedRx2+0x48>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	3b40      	subs	r3, #64	; 0x40
 8003d68:	0019      	movs	r1, r3
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <schedRx2+0x50>)
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f002 f8d0 	bl	8005f14 <os_setTimedCallback>
}
 8003d74:	46c0      	nop			; (mov r8, r8)
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b002      	add	sp, #8
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	20000280 	.word	0x20000280
 8003d80:	0800df5c 	.word	0x0800df5c
 8003d84:	20000294 	.word	0x20000294

08003d88 <setupRx1>:

static void setupRx1 (osjobcb_t func) {
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
    LMIC.txrxFlags = TXRX_DNW1;
 8003d90:	4a0e      	ldr	r2, [pc, #56]	; (8003dcc <setupRx1+0x44>)
 8003d92:	2346      	movs	r3, #70	; 0x46
 8003d94:	33ff      	adds	r3, #255	; 0xff
 8003d96:	2101      	movs	r1, #1
 8003d98:	54d1      	strb	r1, [r2, r3]
    // Turn LMIC.rps from TX over to RX
    LMIC.rps = setNocrc(LMIC.rps,1);
 8003d9a:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <setupRx1+0x44>)
 8003d9c:	89db      	ldrh	r3, [r3, #14]
 8003d9e:	2101      	movs	r1, #1
 8003da0:	0018      	movs	r0, r3
 8003da2:	f7fe f8f8 	bl	8001f96 <setNocrc>
 8003da6:	0003      	movs	r3, r0
 8003da8:	001a      	movs	r2, r3
 8003daa:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <setupRx1+0x44>)
 8003dac:	81da      	strh	r2, [r3, #14]
    LMIC.dataLen = 0;
 8003dae:	4a07      	ldr	r2, [pc, #28]	; (8003dcc <setupRx1+0x44>)
 8003db0:	2348      	movs	r3, #72	; 0x48
 8003db2:	33ff      	adds	r3, #255	; 0xff
 8003db4:	2100      	movs	r1, #0
 8003db6:	54d1      	strb	r1, [r2, r3]
    LMIC.osjob.func = func;
 8003db8:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <setupRx1+0x44>)
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 8003dbe:	2002      	movs	r0, #2
 8003dc0:	f002 feee 	bl	8006ba0 <os_radio>
}
 8003dc4:	46c0      	nop			; (mov r8, r8)
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b002      	add	sp, #8
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	20000280 	.word	0x20000280

08003dd0 <txDone>:


// Called by HAL once TX complete and delivers exact end of TX time stamp in LMIC.rxtime
static void txDone (ostime_t delay, osjobcb_t func) {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE|OP_PINGINI)) == (OP_TRACK|OP_PINGABLE) ) {
 8003dda:	4b23      	ldr	r3, [pc, #140]	; (8003e68 <txDone+0x98>)
 8003ddc:	22ac      	movs	r2, #172	; 0xac
 8003dde:	5a9b      	ldrh	r3, [r3, r2]
 8003de0:	001a      	movs	r2, r3
 8003de2:	4b22      	ldr	r3, [pc, #136]	; (8003e6c <txDone+0x9c>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	4a22      	ldr	r2, [pc, #136]	; (8003e70 <txDone+0xa0>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d10d      	bne.n	8003e08 <txDone+0x38>
        rxschedInit(&LMIC.ping);    // note: reuses LMIC.frame buffer!
 8003dec:	4b21      	ldr	r3, [pc, #132]	; (8003e74 <txDone+0xa4>)
 8003dee:	0018      	movs	r0, r3
 8003df0:	f7fe fd9c 	bl	800292c <rxschedInit>
        LMIC.opmode |= OP_PINGINI;
 8003df4:	4b1c      	ldr	r3, [pc, #112]	; (8003e68 <txDone+0x98>)
 8003df6:	22ac      	movs	r2, #172	; 0xac
 8003df8:	5a9b      	ldrh	r3, [r3, r2]
 8003dfa:	2280      	movs	r2, #128	; 0x80
 8003dfc:	0092      	lsls	r2, r2, #2
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	b299      	uxth	r1, r3
 8003e02:	4b19      	ldr	r3, [pc, #100]	; (8003e68 <txDone+0x98>)
 8003e04:	22ac      	movs	r2, #172	; 0xac
 8003e06:	5299      	strh	r1, [r3, r2]
    setRx1Params();
    // LMIC.rxsyms carries the TX datarate (can be != LMIC.datarate [confirm retries etc.])
    // Setup receive - LMIC.rxtime is preloaded with 1.5 symbols offset to tune
    // into the middle of the 8 symbols preamble.
#if defined(CFG_eu868)
    if( /* TX datarate */LMIC.rxsyms == DR_FSK ) {
 8003e08:	4b17      	ldr	r3, [pc, #92]	; (8003e68 <txDone+0x98>)
 8003e0a:	7c1b      	ldrb	r3, [r3, #16]
 8003e0c:	2b07      	cmp	r3, #7
 8003e0e:	d10a      	bne.n	8003e26 <txDone+0x56>
        LMIC.rxtime = LMIC.txend + delay - PRERX_FSK*us2osticksRound(160);
 8003e10:	4b15      	ldr	r3, [pc, #84]	; (8003e68 <txDone+0x98>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	18d3      	adds	r3, r2, r3
 8003e18:	1f5a      	subs	r2, r3, #5
 8003e1a:	4b13      	ldr	r3, [pc, #76]	; (8003e68 <txDone+0x98>)
 8003e1c:	605a      	str	r2, [r3, #4]
        LMIC.rxsyms = RXLEN_FSK;
 8003e1e:	4b12      	ldr	r3, [pc, #72]	; (8003e68 <txDone+0x98>)
 8003e20:	2208      	movs	r2, #8
 8003e22:	741a      	strb	r2, [r3, #16]
 8003e24:	e012      	b.n	8003e4c <txDone+0x7c>
    }
    else
#endif
    {
        LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dndr);
 8003e26:	4b10      	ldr	r3, [pc, #64]	; (8003e68 <txDone+0x98>)
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	18d1      	adds	r1, r2, r3
 8003e2e:	4b0e      	ldr	r3, [pc, #56]	; (8003e68 <txDone+0x98>)
 8003e30:	7c5b      	ldrb	r3, [r3, #17]
 8003e32:	001a      	movs	r2, r3
 8003e34:	4b10      	ldr	r3, [pc, #64]	; (8003e78 <txDone+0xa8>)
 8003e36:	0092      	lsls	r2, r2, #2
 8003e38:	58d2      	ldr	r2, [r2, r3]
 8003e3a:	0013      	movs	r3, r2
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	189b      	adds	r3, r3, r2
 8003e40:	18ca      	adds	r2, r1, r3
 8003e42:	4b09      	ldr	r3, [pc, #36]	; (8003e68 <txDone+0x98>)
 8003e44:	605a      	str	r2, [r3, #4]
        LMIC.rxsyms = MINRX_SYMS;
 8003e46:	4b08      	ldr	r3, [pc, #32]	; (8003e68 <txDone+0x98>)
 8003e48:	2205      	movs	r2, #5
 8003e4a:	741a      	strb	r2, [r3, #16]
    }
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 8003e4c:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <txDone+0x98>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	3b40      	subs	r3, #64	; 0x40
 8003e52:	0019      	movs	r1, r3
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <txDone+0xac>)
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f002 f85b 	bl	8005f14 <os_setTimedCallback>
}
 8003e5e:	46c0      	nop			; (mov r8, r8)
 8003e60:	46bd      	mov	sp, r7
 8003e62:	b002      	add	sp, #8
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	46c0      	nop			; (mov r8, r8)
 8003e68:	20000280 	.word	0x20000280
 8003e6c:	00000602 	.word	0x00000602
 8003e70:	00000402 	.word	0x00000402
 8003e74:	200003b4 	.word	0x200003b4
 8003e78:	0800df5c 	.word	0x0800df5c
 8003e7c:	20000294 	.word	0x20000294

08003e80 <onJoinFailed>:


// ======================================== Join frames


static void onJoinFailed (xref2osjob_t osjob) {
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
    // Notify app - must call LMIC_reset() to stop joining
    // otherwise join procedure continues.
    reportEvent(EV_JOIN_FAILED);
 8003e88:	2008      	movs	r0, #8
 8003e8a:	f7ff fa79 	bl	8003380 <reportEvent>
}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	46bd      	mov	sp, r7
 8003e92:	b002      	add	sp, #8
 8003e94:	bd80      	pop	{r7, pc}
	...

08003e98 <processJoinAccept>:


static bit_t processJoinAccept (void) {
 8003e98:	b590      	push	{r4, r7, lr}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
    ASSERT(LMIC.txrxFlags != TXRX_DNW1 || LMIC.dataLen != 0);
 8003e9e:	4ab1      	ldr	r2, [pc, #708]	; (8004164 <processJoinAccept+0x2cc>)
 8003ea0:	2346      	movs	r3, #70	; 0x46
 8003ea2:	33ff      	adds	r3, #255	; 0xff
 8003ea4:	5cd3      	ldrb	r3, [r2, r3]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d107      	bne.n	8003eba <processJoinAccept+0x22>
 8003eaa:	4aae      	ldr	r2, [pc, #696]	; (8004164 <processJoinAccept+0x2cc>)
 8003eac:	2348      	movs	r3, #72	; 0x48
 8003eae:	33ff      	adds	r3, #255	; 0xff
 8003eb0:	5cd3      	ldrb	r3, [r2, r3]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <processJoinAccept+0x22>
 8003eb6:	f7fd fedd 	bl	8001c74 <hal_failed>
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 8003eba:	4baa      	ldr	r3, [pc, #680]	; (8004164 <processJoinAccept+0x2cc>)
 8003ebc:	22ac      	movs	r2, #172	; 0xac
 8003ebe:	5a9b      	ldrh	r3, [r3, r2]
 8003ec0:	001a      	movs	r2, r3
 8003ec2:	2380      	movs	r3, #128	; 0x80
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	d101      	bne.n	8003ecc <processJoinAccept+0x34>
 8003ec8:	f7fd fed4 	bl	8001c74 <hal_failed>

    if( LMIC.dataLen == 0 ) {
 8003ecc:	4aa5      	ldr	r2, [pc, #660]	; (8004164 <processJoinAccept+0x2cc>)
 8003ece:	2348      	movs	r3, #72	; 0x48
 8003ed0:	33ff      	adds	r3, #255	; 0xff
 8003ed2:	5cd3      	ldrb	r3, [r2, r3]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d14c      	bne.n	8003f72 <processJoinAccept+0xda>
      nojoinframe:
 8003ed8:	46c0      	nop			; (mov r8, r8)
 8003eda:	e000      	b.n	8003ede <processJoinAccept+0x46>
                           e_.info   = dlen < 4 ? 0 : mic,
                           e_.info2  = hdr + (dlen<<8)));
      badframe:
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto nojoinframe;
 8003edc:	46c0      	nop			; (mov r8, r8)
        if( (LMIC.opmode & OP_JOINING) == 0 ) {
 8003ede:	4ba1      	ldr	r3, [pc, #644]	; (8004164 <processJoinAccept+0x2cc>)
 8003ee0:	22ac      	movs	r2, #172	; 0xac
 8003ee2:	5a9b      	ldrh	r3, [r3, r2]
 8003ee4:	001a      	movs	r2, r3
 8003ee6:	2304      	movs	r3, #4
 8003ee8:	4013      	ands	r3, r2
 8003eea:	d123      	bne.n	8003f34 <processJoinAccept+0x9c>
            ASSERT((LMIC.opmode & OP_REJOIN) != 0);
 8003eec:	4b9d      	ldr	r3, [pc, #628]	; (8004164 <processJoinAccept+0x2cc>)
 8003eee:	22ac      	movs	r2, #172	; 0xac
 8003ef0:	5a9b      	ldrh	r3, [r3, r2]
 8003ef2:	001a      	movs	r2, r3
 8003ef4:	2320      	movs	r3, #32
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d101      	bne.n	8003efe <processJoinAccept+0x66>
 8003efa:	f7fd febb 	bl	8001c74 <hal_failed>
            LMIC.opmode &= ~(OP_REJOIN|OP_TXRXPEND);
 8003efe:	4b99      	ldr	r3, [pc, #612]	; (8004164 <processJoinAccept+0x2cc>)
 8003f00:	22ac      	movs	r2, #172	; 0xac
 8003f02:	5a9b      	ldrh	r3, [r3, r2]
 8003f04:	22a0      	movs	r2, #160	; 0xa0
 8003f06:	4393      	bics	r3, r2
 8003f08:	b299      	uxth	r1, r3
 8003f0a:	4b96      	ldr	r3, [pc, #600]	; (8004164 <processJoinAccept+0x2cc>)
 8003f0c:	22ac      	movs	r2, #172	; 0xac
 8003f0e:	5299      	strh	r1, [r3, r2]
            if( LMIC.rejoinCnt < 10 )
 8003f10:	4b94      	ldr	r3, [pc, #592]	; (8004164 <processJoinAccept+0x2cc>)
 8003f12:	22b2      	movs	r2, #178	; 0xb2
 8003f14:	5c9b      	ldrb	r3, [r3, r2]
 8003f16:	2b09      	cmp	r3, #9
 8003f18:	d807      	bhi.n	8003f2a <processJoinAccept+0x92>
                LMIC.rejoinCnt++;
 8003f1a:	4b92      	ldr	r3, [pc, #584]	; (8004164 <processJoinAccept+0x2cc>)
 8003f1c:	22b2      	movs	r2, #178	; 0xb2
 8003f1e:	5c9b      	ldrb	r3, [r3, r2]
 8003f20:	3301      	adds	r3, #1
 8003f22:	b2d9      	uxtb	r1, r3
 8003f24:	4b8f      	ldr	r3, [pc, #572]	; (8004164 <processJoinAccept+0x2cc>)
 8003f26:	22b2      	movs	r2, #178	; 0xb2
 8003f28:	5499      	strb	r1, [r3, r2]
            reportEvent(EV_REJOIN_FAILED);
 8003f2a:	2009      	movs	r0, #9
 8003f2c:	f7ff fa28 	bl	8003380 <reportEvent>
            return 1;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e113      	b.n	800415c <processJoinAccept+0x2c4>
        LMIC.opmode &= ~OP_TXRXPEND;
 8003f34:	4b8b      	ldr	r3, [pc, #556]	; (8004164 <processJoinAccept+0x2cc>)
 8003f36:	22ac      	movs	r2, #172	; 0xac
 8003f38:	5a9b      	ldrh	r3, [r3, r2]
 8003f3a:	2280      	movs	r2, #128	; 0x80
 8003f3c:	4393      	bics	r3, r2
 8003f3e:	b299      	uxth	r1, r3
 8003f40:	4b88      	ldr	r3, [pc, #544]	; (8004164 <processJoinAccept+0x2cc>)
 8003f42:	22ac      	movs	r2, #172	; 0xac
 8003f44:	5299      	strh	r1, [r3, r2]
        ostime_t delay = nextJoinState();
 8003f46:	f7ff f9a1 	bl	800328c <nextJoinState>
 8003f4a:	0003      	movs	r3, r0
 8003f4c:	607b      	str	r3, [r7, #4]
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 8003f4e:	f001 ff73 	bl	8005e38 <os_getTime>
 8003f52:	0002      	movs	r2, r0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	18d1      	adds	r1, r2, r3
                            (delay&1) != 0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	4013      	ands	r3, r2
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 8003f5e:	d001      	beq.n	8003f64 <processJoinAccept+0xcc>
 8003f60:	4b81      	ldr	r3, [pc, #516]	; (8004168 <processJoinAccept+0x2d0>)
 8003f62:	e000      	b.n	8003f66 <processJoinAccept+0xce>
 8003f64:	4b81      	ldr	r3, [pc, #516]	; (800416c <processJoinAccept+0x2d4>)
 8003f66:	4882      	ldr	r0, [pc, #520]	; (8004170 <processJoinAccept+0x2d8>)
 8003f68:	001a      	movs	r2, r3
 8003f6a:	f001 ffd3 	bl	8005f14 <os_setTimedCallback>
        return 1;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e0f4      	b.n	800415c <processJoinAccept+0x2c4>
    u1_t hdr  = LMIC.frame[0];
 8003f72:	2315      	movs	r3, #21
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	497b      	ldr	r1, [pc, #492]	; (8004164 <processJoinAccept+0x2cc>)
 8003f78:	22a4      	movs	r2, #164	; 0xa4
 8003f7a:	0052      	lsls	r2, r2, #1
 8003f7c:	5c8a      	ldrb	r2, [r1, r2]
 8003f7e:	701a      	strb	r2, [r3, #0]
    u1_t dlen = LMIC.dataLen;
 8003f80:	2417      	movs	r4, #23
 8003f82:	193b      	adds	r3, r7, r4
 8003f84:	4977      	ldr	r1, [pc, #476]	; (8004164 <processJoinAccept+0x2cc>)
 8003f86:	2248      	movs	r2, #72	; 0x48
 8003f88:	32ff      	adds	r2, #255	; 0xff
 8003f8a:	5c8a      	ldrb	r2, [r1, r2]
 8003f8c:	701a      	strb	r2, [r3, #0]
    u4_t mic  = os_rlsbf4(&LMIC.frame[dlen-4]); // safe before modified by encrypt!
 8003f8e:	193b      	adds	r3, r7, r4
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	3b04      	subs	r3, #4
 8003f94:	3349      	adds	r3, #73	; 0x49
 8003f96:	33ff      	adds	r3, #255	; 0xff
 8003f98:	001a      	movs	r2, r3
 8003f9a:	4b72      	ldr	r3, [pc, #456]	; (8004164 <processJoinAccept+0x2cc>)
 8003f9c:	18d3      	adds	r3, r2, r3
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f7fe f8c2 	bl	8002128 <os_rlsbf4>
 8003fa4:	0003      	movs	r3, r0
 8003fa6:	613b      	str	r3, [r7, #16]
    if( (dlen != LEN_JA && dlen != LEN_JAEXT)
 8003fa8:	193b      	adds	r3, r7, r4
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b11      	cmp	r3, #17
 8003fae:	d003      	beq.n	8003fb8 <processJoinAccept+0x120>
 8003fb0:	193b      	adds	r3, r7, r4
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b21      	cmp	r3, #33	; 0x21
 8003fb6:	d106      	bne.n	8003fc6 <processJoinAccept+0x12e>
        || (hdr & (HDR_FTYPE|HDR_MAJOR)) != (HDR_FTYPE_JACC|HDR_MAJOR_V1) ) {
 8003fb8:	2315      	movs	r3, #21
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	22e3      	movs	r2, #227	; 0xe3
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b20      	cmp	r3, #32
 8003fc4:	d00d      	beq.n	8003fe2 <processJoinAccept+0x14a>
      badframe:
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	e000      	b.n	8003fcc <processJoinAccept+0x134>
    }
    aes_encrypt(LMIC.frame+1, dlen-1);
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::JOIN_BAD_MIC,
                           e_.info   = mic));
        goto badframe;
 8003fca:	46c0      	nop			; (mov r8, r8)
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 8003fcc:	4a65      	ldr	r2, [pc, #404]	; (8004164 <processJoinAccept+0x2cc>)
 8003fce:	2346      	movs	r3, #70	; 0x46
 8003fd0:	33ff      	adds	r3, #255	; 0xff
 8003fd2:	5cd3      	ldrb	r3, [r2, r3]
 8003fd4:	001a      	movs	r2, r3
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	4013      	ands	r3, r2
 8003fda:	d100      	bne.n	8003fde <processJoinAccept+0x146>
 8003fdc:	e77e      	b.n	8003edc <processJoinAccept+0x44>
            return 0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	e0bc      	b.n	800415c <processJoinAccept+0x2c4>
    aes_encrypt(LMIC.frame+1, dlen-1);
 8003fe2:	4a64      	ldr	r2, [pc, #400]	; (8004174 <processJoinAccept+0x2dc>)
 8003fe4:	2417      	movs	r4, #23
 8003fe6:	193b      	adds	r3, r7, r4
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	0019      	movs	r1, r3
 8003fee:	0010      	movs	r0, r2
 8003ff0:	f7fe fa4c 	bl	800248c <aes_encrypt>
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
 8003ff4:	193b      	adds	r3, r7, r4
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	1f1a      	subs	r2, r3, #4
 8003ffa:	4b5f      	ldr	r3, [pc, #380]	; (8004178 <processJoinAccept+0x2e0>)
 8003ffc:	0011      	movs	r1, r2
 8003ffe:	0018      	movs	r0, r3
 8004000:	f7fe fa22 	bl	8002448 <aes_verifyMic0>
 8004004:	1e03      	subs	r3, r0, #0
 8004006:	d0e0      	beq.n	8003fca <processJoinAccept+0x132>
    }

    u4_t addr = os_rlsbf4(LMIC.frame+OFF_JA_DEVADDR);
 8004008:	4b5c      	ldr	r3, [pc, #368]	; (800417c <processJoinAccept+0x2e4>)
 800400a:	0018      	movs	r0, r3
 800400c:	f7fe f88c 	bl	8002128 <os_rlsbf4>
 8004010:	0003      	movs	r3, r0
 8004012:	60fb      	str	r3, [r7, #12]
    LMIC.devaddr = addr;
 8004014:	4a53      	ldr	r2, [pc, #332]	; (8004164 <processJoinAccept+0x2cc>)
 8004016:	238a      	movs	r3, #138	; 0x8a
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	68f9      	ldr	r1, [r7, #12]
 800401c:	50d1      	str	r1, [r2, r3]
    LMIC.netid = os_rlsbf4(&LMIC.frame[OFF_JA_NETID]) & 0xFFFFFF;
 800401e:	4b58      	ldr	r3, [pc, #352]	; (8004180 <processJoinAccept+0x2e8>)
 8004020:	0018      	movs	r0, r3
 8004022:	f7fe f881 	bl	8002128 <os_rlsbf4>
 8004026:	0003      	movs	r3, r0
 8004028:	021b      	lsls	r3, r3, #8
 800402a:	0a1a      	lsrs	r2, r3, #8
 800402c:	4b4d      	ldr	r3, [pc, #308]	; (8004164 <processJoinAccept+0x2cc>)
 800402e:	21a8      	movs	r1, #168	; 0xa8
 8004030:	505a      	str	r2, [r3, r1]

#if defined(CFG_eu868)
    initDefaultChannels(0);
 8004032:	2000      	movs	r0, #0
 8004034:	f7fe fe12 	bl	8002c5c <initDefaultChannels>
#endif
    if( dlen > LEN_JA ) {
 8004038:	193b      	adds	r3, r7, r4
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b11      	cmp	r3, #17
 800403e:	d932      	bls.n	80040a6 <processJoinAccept+0x20e>
#if defined(CFG_us915)
        goto badframe;
#endif
        dlen = OFF_CFLIST;
 8004040:	193b      	adds	r3, r7, r4
 8004042:	220d      	movs	r2, #13
 8004044:	701a      	strb	r2, [r3, #0]
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 8004046:	2316      	movs	r3, #22
 8004048:	18fb      	adds	r3, r7, r3
 800404a:	2203      	movs	r2, #3
 800404c:	701a      	strb	r2, [r3, #0]
 800404e:	e025      	b.n	800409c <processJoinAccept+0x204>
            u4_t freq = convFreq(&LMIC.frame[dlen]);
 8004050:	2317      	movs	r3, #23
 8004052:	18fb      	adds	r3, r7, r3
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	3349      	adds	r3, #73	; 0x49
 8004058:	33ff      	adds	r3, #255	; 0xff
 800405a:	001a      	movs	r2, r3
 800405c:	4b41      	ldr	r3, [pc, #260]	; (8004164 <processJoinAccept+0x2cc>)
 800405e:	18d3      	adds	r3, r2, r3
 8004060:	0018      	movs	r0, r3
 8004062:	f7fe ff1f 	bl	8002ea4 <convFreq>
 8004066:	0003      	movs	r3, r0
 8004068:	60bb      	str	r3, [r7, #8]
            if( freq )
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d009      	beq.n	8004084 <processJoinAccept+0x1ec>
                LMIC_setupChannel(chidx, freq, 0, -1);
 8004070:	2301      	movs	r3, #1
 8004072:	425a      	negs	r2, r3
 8004074:	68b9      	ldr	r1, [r7, #8]
 8004076:	2316      	movs	r3, #22
 8004078:	18fb      	adds	r3, r7, r3
 800407a:	7818      	ldrb	r0, [r3, #0]
 800407c:	0013      	movs	r3, r2
 800407e:	2200      	movs	r2, #0
 8004080:	f7fe fe8a 	bl	8002d98 <LMIC_setupChannel>
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 8004084:	2116      	movs	r1, #22
 8004086:	187b      	adds	r3, r7, r1
 8004088:	781a      	ldrb	r2, [r3, #0]
 800408a:	187b      	adds	r3, r7, r1
 800408c:	3201      	adds	r2, #1
 800408e:	701a      	strb	r2, [r3, #0]
 8004090:	2217      	movs	r2, #23
 8004092:	18bb      	adds	r3, r7, r2
 8004094:	18ba      	adds	r2, r7, r2
 8004096:	7812      	ldrb	r2, [r2, #0]
 8004098:	3203      	adds	r2, #3
 800409a:	701a      	strb	r2, [r3, #0]
 800409c:	2316      	movs	r3, #22
 800409e:	18fb      	adds	r3, r7, r3
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b07      	cmp	r3, #7
 80040a4:	d9d4      	bls.n	8004050 <processJoinAccept+0x1b8>
        }
    }

    // already incremented when JOIN REQ got sent off
    aes_sessKeys(LMIC.devNonce-1, &LMIC.frame[OFF_JA_ARTNONCE], LMIC.nwkKey, LMIC.artKey);
 80040a6:	4b2f      	ldr	r3, [pc, #188]	; (8004164 <processJoinAccept+0x2cc>)
 80040a8:	22f2      	movs	r2, #242	; 0xf2
 80040aa:	5a9b      	ldrh	r3, [r3, r2]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b298      	uxth	r0, r3
 80040b0:	4b34      	ldr	r3, [pc, #208]	; (8004184 <processJoinAccept+0x2ec>)
 80040b2:	4a35      	ldr	r2, [pc, #212]	; (8004188 <processJoinAccept+0x2f0>)
 80040b4:	492f      	ldr	r1, [pc, #188]	; (8004174 <processJoinAccept+0x2dc>)
 80040b6:	f7fe fa45 	bl	8002544 <aes_sessKeys>
                        e_.mic     = mic,
                        e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                      ? EV::joininfo_t::REJOIN_ACCEPT
                                      : EV::joininfo_t::ACCEPT)));
    
    ASSERT((LMIC.opmode & (OP_JOINING|OP_REJOIN))!=0);
 80040ba:	4b2a      	ldr	r3, [pc, #168]	; (8004164 <processJoinAccept+0x2cc>)
 80040bc:	22ac      	movs	r2, #172	; 0xac
 80040be:	5a9b      	ldrh	r3, [r3, r2]
 80040c0:	001a      	movs	r2, r3
 80040c2:	2324      	movs	r3, #36	; 0x24
 80040c4:	4013      	ands	r3, r2
 80040c6:	d101      	bne.n	80040cc <processJoinAccept+0x234>
 80040c8:	f7fd fdd4 	bl	8001c74 <hal_failed>
    if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 80040cc:	4b25      	ldr	r3, [pc, #148]	; (8004164 <processJoinAccept+0x2cc>)
 80040ce:	22ac      	movs	r2, #172	; 0xac
 80040d0:	5a9b      	ldrh	r3, [r3, r2]
 80040d2:	001a      	movs	r2, r3
 80040d4:	2320      	movs	r3, #32
 80040d6:	4013      	ands	r3, r2
 80040d8:	d00e      	beq.n	80040f8 <processJoinAccept+0x260>
        // Lower DR every try below current UP DR
        LMIC.datarate = lowerDR(LMIC.datarate, LMIC.rejoinCnt);
 80040da:	4b22      	ldr	r3, [pc, #136]	; (8004164 <processJoinAccept+0x2cc>)
 80040dc:	22b0      	movs	r2, #176	; 0xb0
 80040de:	5c9a      	ldrb	r2, [r3, r2]
 80040e0:	4b20      	ldr	r3, [pc, #128]	; (8004164 <processJoinAccept+0x2cc>)
 80040e2:	21b2      	movs	r1, #178	; 0xb2
 80040e4:	5c5b      	ldrb	r3, [r3, r1]
 80040e6:	0019      	movs	r1, r3
 80040e8:	0010      	movs	r0, r2
 80040ea:	f7fd ffeb 	bl	80020c4 <lowerDR>
 80040ee:	0003      	movs	r3, r0
 80040f0:	0019      	movs	r1, r3
 80040f2:	4b1c      	ldr	r3, [pc, #112]	; (8004164 <processJoinAccept+0x2cc>)
 80040f4:	22b0      	movs	r2, #176	; 0xb0
 80040f6:	5499      	strb	r1, [r3, r2]
    }
    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI) | OP_NEXTCHNL;
 80040f8:	4b1a      	ldr	r3, [pc, #104]	; (8004164 <processJoinAccept+0x2cc>)
 80040fa:	22ac      	movs	r2, #172	; 0xac
 80040fc:	5a9b      	ldrh	r3, [r3, r2]
 80040fe:	4a23      	ldr	r2, [pc, #140]	; (800418c <processJoinAccept+0x2f4>)
 8004100:	4013      	ands	r3, r2
 8004102:	b299      	uxth	r1, r3
 8004104:	4b17      	ldr	r3, [pc, #92]	; (8004164 <processJoinAccept+0x2cc>)
 8004106:	22ac      	movs	r2, #172	; 0xac
 8004108:	5299      	strh	r1, [r3, r2]
    LMIC.txCnt = 0;
 800410a:	4a16      	ldr	r2, [pc, #88]	; (8004164 <processJoinAccept+0x2cc>)
 800410c:	23a2      	movs	r3, #162	; 0xa2
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	2100      	movs	r1, #0
 8004112:	54d1      	strb	r1, [r2, r3]
    stateJustJoined();
 8004114:	f7ff f954 	bl	80033c0 <stateJustJoined>
    LMIC.dn2Dr = LMIC.frame[OFF_JA_DLSET] & 0x0F;
 8004118:	4a12      	ldr	r2, [pc, #72]	; (8004164 <processJoinAccept+0x2cc>)
 800411a:	2354      	movs	r3, #84	; 0x54
 800411c:	33ff      	adds	r3, #255	; 0xff
 800411e:	5cd3      	ldrb	r3, [r2, r3]
 8004120:	220f      	movs	r2, #15
 8004122:	4013      	ands	r3, r2
 8004124:	b2d9      	uxtb	r1, r3
 8004126:	4a0f      	ldr	r2, [pc, #60]	; (8004164 <processJoinAccept+0x2cc>)
 8004128:	232c      	movs	r3, #44	; 0x2c
 800412a:	33ff      	adds	r3, #255	; 0xff
 800412c:	54d1      	strb	r1, [r2, r3]
    LMIC.rxDelay = LMIC.frame[OFF_JA_RXDLY];
 800412e:	4a0d      	ldr	r2, [pc, #52]	; (8004164 <processJoinAccept+0x2cc>)
 8004130:	23aa      	movs	r3, #170	; 0xaa
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	5cd1      	ldrb	r1, [r2, r3]
 8004136:	4a0b      	ldr	r2, [pc, #44]	; (8004164 <processJoinAccept+0x2cc>)
 8004138:	2324      	movs	r3, #36	; 0x24
 800413a:	33ff      	adds	r3, #255	; 0xff
 800413c:	54d1      	strb	r1, [r2, r3]
    if (LMIC.rxDelay == 0) LMIC.rxDelay = 1;   
 800413e:	4a09      	ldr	r2, [pc, #36]	; (8004164 <processJoinAccept+0x2cc>)
 8004140:	2324      	movs	r3, #36	; 0x24
 8004142:	33ff      	adds	r3, #255	; 0xff
 8004144:	5cd3      	ldrb	r3, [r2, r3]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d104      	bne.n	8004154 <processJoinAccept+0x2bc>
 800414a:	4a06      	ldr	r2, [pc, #24]	; (8004164 <processJoinAccept+0x2cc>)
 800414c:	2324      	movs	r3, #36	; 0x24
 800414e:	33ff      	adds	r3, #255	; 0xff
 8004150:	2101      	movs	r1, #1
 8004152:	54d1      	strb	r1, [r2, r3]
    reportEvent(EV_JOINED);
 8004154:	2006      	movs	r0, #6
 8004156:	f7ff f913 	bl	8003380 <reportEvent>
    return 1;
 800415a:	2301      	movs	r3, #1
}
 800415c:	0018      	movs	r0, r3
 800415e:	46bd      	mov	sp, r7
 8004160:	b007      	add	sp, #28
 8004162:	bd90      	pop	{r4, r7, pc}
 8004164:	20000280 	.word	0x20000280
 8004168:	08003e81 	.word	0x08003e81
 800416c:	0800336d 	.word	0x0800336d
 8004170:	20000294 	.word	0x20000294
 8004174:	200003c9 	.word	0x200003c9
 8004178:	200003c8 	.word	0x200003c8
 800417c:	200003cf 	.word	0x200003cf
 8004180:	200003cc 	.word	0x200003cc
 8004184:	20000384 	.word	0x20000384
 8004188:	20000374 	.word	0x20000374
 800418c:	fffffd59 	.word	0xfffffd59

08004190 <processRx2Jacc>:


static void processRx2Jacc (xref2osjob_t osjob) {
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 )
 8004198:	4a08      	ldr	r2, [pc, #32]	; (80041bc <processRx2Jacc+0x2c>)
 800419a:	2348      	movs	r3, #72	; 0x48
 800419c:	33ff      	adds	r3, #255	; 0xff
 800419e:	5cd3      	ldrb	r3, [r2, r3]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d104      	bne.n	80041ae <processRx2Jacc+0x1e>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 80041a4:	4a05      	ldr	r2, [pc, #20]	; (80041bc <processRx2Jacc+0x2c>)
 80041a6:	2346      	movs	r3, #70	; 0x46
 80041a8:	33ff      	adds	r3, #255	; 0xff
 80041aa:	2100      	movs	r1, #0
 80041ac:	54d1      	strb	r1, [r2, r3]
    processJoinAccept();
 80041ae:	f7ff fe73 	bl	8003e98 <processJoinAccept>
}
 80041b2:	46c0      	nop			; (mov r8, r8)
 80041b4:	46bd      	mov	sp, r7
 80041b6:	b002      	add	sp, #8
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	20000280 	.word	0x20000280

080041c0 <setupRx2Jacc>:


static void setupRx2Jacc (xref2osjob_t osjob) {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2Jacc);
 80041c8:	4b04      	ldr	r3, [pc, #16]	; (80041dc <setupRx2Jacc+0x1c>)
 80041ca:	4a05      	ldr	r2, [pc, #20]	; (80041e0 <setupRx2Jacc+0x20>)
 80041cc:	61da      	str	r2, [r3, #28]
    setupRx2();
 80041ce:	f7ff fd8b 	bl	8003ce8 <setupRx2>
}
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	46bd      	mov	sp, r7
 80041d6:	b002      	add	sp, #8
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	20000280 	.word	0x20000280
 80041e0:	08004191 	.word	0x08004191

080041e4 <processRx1Jacc>:


static void processRx1Jacc (xref2osjob_t osjob) {
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processJoinAccept() )
 80041ec:	4a09      	ldr	r2, [pc, #36]	; (8004214 <processRx1Jacc+0x30>)
 80041ee:	2348      	movs	r3, #72	; 0x48
 80041f0:	33ff      	adds	r3, #255	; 0xff
 80041f2:	5cd3      	ldrb	r3, [r2, r3]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <processRx1Jacc+0x1c>
 80041f8:	f7ff fe4e 	bl	8003e98 <processJoinAccept>
 80041fc:	1e03      	subs	r3, r0, #0
 80041fe:	d105      	bne.n	800420c <processRx1Jacc+0x28>
        schedRx2(DELAY_JACC2_osticks, FUNC_ADDR(setupRx2Jacc));
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <processRx1Jacc+0x34>)
 8004202:	4a06      	ldr	r2, [pc, #24]	; (800421c <processRx1Jacc+0x38>)
 8004204:	0019      	movs	r1, r3
 8004206:	0010      	movs	r0, r2
 8004208:	f7ff fd94 	bl	8003d34 <schedRx2>
}
 800420c:	46c0      	nop			; (mov r8, r8)
 800420e:	46bd      	mov	sp, r7
 8004210:	b002      	add	sp, #8
 8004212:	bd80      	pop	{r7, pc}
 8004214:	20000280 	.word	0x20000280
 8004218:	080041c1 	.word	0x080041c1
 800421c:	0002ee00 	.word	0x0002ee00

08004220 <setupRx1Jacc>:


static void setupRx1Jacc (xref2osjob_t osjob) {
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1Jacc));
 8004228:	4b03      	ldr	r3, [pc, #12]	; (8004238 <setupRx1Jacc+0x18>)
 800422a:	0018      	movs	r0, r3
 800422c:	f7ff fdac 	bl	8003d88 <setupRx1>
}
 8004230:	46c0      	nop			; (mov r8, r8)
 8004232:	46bd      	mov	sp, r7
 8004234:	b002      	add	sp, #8
 8004236:	bd80      	pop	{r7, pc}
 8004238:	080041e5 	.word	0x080041e5

0800423c <jreqDone>:


static void jreqDone (xref2osjob_t osjob) {
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
    txDone(DELAY_JACC1_osticks, FUNC_ADDR(setupRx1Jacc));
 8004244:	4b04      	ldr	r3, [pc, #16]	; (8004258 <jreqDone+0x1c>)
 8004246:	4a05      	ldr	r2, [pc, #20]	; (800425c <jreqDone+0x20>)
 8004248:	0019      	movs	r1, r3
 800424a:	0010      	movs	r0, r2
 800424c:	f7ff fdc0 	bl	8003dd0 <txDone>
}
 8004250:	46c0      	nop			; (mov r8, r8)
 8004252:	46bd      	mov	sp, r7
 8004254:	b002      	add	sp, #8
 8004256:	bd80      	pop	{r7, pc}
 8004258:	08004221 	.word	0x08004221
 800425c:	00027100 	.word	0x00027100

08004260 <processRx2DnDataDelay>:
// ======================================== Data frames

// Fwd decl.
static bit_t processDnData(void);

static void processRx2DnDataDelay (xref2osjob_t osjob) {
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
    processDnData();
 8004268:	f000 fc3a 	bl	8004ae0 <processDnData>
}
 800426c:	46c0      	nop			; (mov r8, r8)
 800426e:	46bd      	mov	sp, r7
 8004270:	b002      	add	sp, #8
 8004272:	bd80      	pop	{r7, pc}

08004274 <processRx2DnData>:

static void processRx2DnData (xref2osjob_t osjob) {
 8004274:	b590      	push	{r4, r7, lr}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 ) {
 800427c:	4a0f      	ldr	r2, [pc, #60]	; (80042bc <processRx2DnData+0x48>)
 800427e:	2348      	movs	r3, #72	; 0x48
 8004280:	33ff      	adds	r3, #255	; 0xff
 8004282:	5cd3      	ldrb	r3, [r2, r3]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d114      	bne.n	80042b2 <processRx2DnData+0x3e>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 8004288:	4a0c      	ldr	r2, [pc, #48]	; (80042bc <processRx2DnData+0x48>)
 800428a:	2346      	movs	r3, #70	; 0x46
 800428c:	33ff      	adds	r3, #255	; 0xff
 800428e:	2100      	movs	r1, #0
 8004290:	54d1      	strb	r1, [r2, r3]
        // Delay callback processing to avoid up TX while gateway is txing our missed frame! 
        // Since DNW2 uses SF12 by default we wait 3 secs.
        os_setTimedCallback(&LMIC.osjob,
                            (os_getTime() + DNW2_SAFETY_ZONE + rndDelay(2)),
 8004292:	f001 fdd1 	bl	8005e38 <os_getTime>
 8004296:	0003      	movs	r3, r0
 8004298:	4a09      	ldr	r2, [pc, #36]	; (80042c0 <processRx2DnData+0x4c>)
 800429a:	189c      	adds	r4, r3, r2
 800429c:	2002      	movs	r0, #2
 800429e:	f7fe fc1d 	bl	8002adc <rndDelay>
 80042a2:	0003      	movs	r3, r0
        os_setTimedCallback(&LMIC.osjob,
 80042a4:	18e1      	adds	r1, r4, r3
 80042a6:	4a07      	ldr	r2, [pc, #28]	; (80042c4 <processRx2DnData+0x50>)
 80042a8:	4b07      	ldr	r3, [pc, #28]	; (80042c8 <processRx2DnData+0x54>)
 80042aa:	0018      	movs	r0, r3
 80042ac:	f001 fe32 	bl	8005f14 <os_setTimedCallback>
                            FUNC_ADDR(processRx2DnDataDelay));
        return;
 80042b0:	e001      	b.n	80042b6 <processRx2DnData+0x42>
    }
    processDnData();
 80042b2:	f000 fc15 	bl	8004ae0 <processDnData>
}
 80042b6:	46bd      	mov	sp, r7
 80042b8:	b003      	add	sp, #12
 80042ba:	bd90      	pop	{r4, r7, pc}
 80042bc:	20000280 	.word	0x20000280
 80042c0:	00017700 	.word	0x00017700
 80042c4:	08004261 	.word	0x08004261
 80042c8:	20000294 	.word	0x20000294

080042cc <setupRx2DnData>:


static void setupRx2DnData (xref2osjob_t osjob) {
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2DnData);
 80042d4:	4b04      	ldr	r3, [pc, #16]	; (80042e8 <setupRx2DnData+0x1c>)
 80042d6:	4a05      	ldr	r2, [pc, #20]	; (80042ec <setupRx2DnData+0x20>)
 80042d8:	61da      	str	r2, [r3, #28]
    setupRx2();
 80042da:	f7ff fd05 	bl	8003ce8 <setupRx2>
}
 80042de:	46c0      	nop			; (mov r8, r8)
 80042e0:	46bd      	mov	sp, r7
 80042e2:	b002      	add	sp, #8
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	20000280 	.word	0x20000280
 80042ec:	08004275 	.word	0x08004275

080042f0 <processRx1DnData>:


static void processRx1DnData (xref2osjob_t osjob) {
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processDnData() )
 80042f8:	4a0f      	ldr	r2, [pc, #60]	; (8004338 <processRx1DnData+0x48>)
 80042fa:	2348      	movs	r3, #72	; 0x48
 80042fc:	33ff      	adds	r3, #255	; 0xff
 80042fe:	5cd3      	ldrb	r3, [r2, r3]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <processRx1DnData+0x1c>
 8004304:	f000 fbec 	bl	8004ae0 <processDnData>
 8004308:	1e03      	subs	r3, r0, #0
 800430a:	d111      	bne.n	8004330 <processRx1DnData+0x40>
        schedRx2(sec2osticks(LMIC.rxDelay + (int)DELAY_EXTDNW2), FUNC_ADDR(setupRx2DnData));
 800430c:	4a0a      	ldr	r2, [pc, #40]	; (8004338 <processRx1DnData+0x48>)
 800430e:	2324      	movs	r3, #36	; 0x24
 8004310:	33ff      	adds	r3, #255	; 0xff
 8004312:	5cd3      	ldrb	r3, [r2, r3]
 8004314:	3301      	adds	r3, #1
 8004316:	001a      	movs	r2, r3
 8004318:	0013      	movs	r3, r2
 800431a:	015b      	lsls	r3, r3, #5
 800431c:	1a9b      	subs	r3, r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	189b      	adds	r3, r3, r2
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	001a      	movs	r2, r3
 8004326:	4b05      	ldr	r3, [pc, #20]	; (800433c <processRx1DnData+0x4c>)
 8004328:	0019      	movs	r1, r3
 800432a:	0010      	movs	r0, r2
 800432c:	f7ff fd02 	bl	8003d34 <schedRx2>
}
 8004330:	46c0      	nop			; (mov r8, r8)
 8004332:	46bd      	mov	sp, r7
 8004334:	b002      	add	sp, #8
 8004336:	bd80      	pop	{r7, pc}
 8004338:	20000280 	.word	0x20000280
 800433c:	080042cd 	.word	0x080042cd

08004340 <setupRx1DnData>:


static void setupRx1DnData (xref2osjob_t osjob) {
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1DnData));
 8004348:	4b03      	ldr	r3, [pc, #12]	; (8004358 <setupRx1DnData+0x18>)
 800434a:	0018      	movs	r0, r3
 800434c:	f7ff fd1c 	bl	8003d88 <setupRx1>
}
 8004350:	46c0      	nop			; (mov r8, r8)
 8004352:	46bd      	mov	sp, r7
 8004354:	b002      	add	sp, #8
 8004356:	bd80      	pop	{r7, pc}
 8004358:	080042f1 	.word	0x080042f1

0800435c <updataDone>:


static void updataDone (xref2osjob_t osjob) {
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
    txDone(sec2osticks(LMIC.rxDelay), FUNC_ADDR(setupRx1DnData));
 8004364:	4a0a      	ldr	r2, [pc, #40]	; (8004390 <updataDone+0x34>)
 8004366:	2324      	movs	r3, #36	; 0x24
 8004368:	33ff      	adds	r3, #255	; 0xff
 800436a:	5cd3      	ldrb	r3, [r2, r3]
 800436c:	001a      	movs	r2, r3
 800436e:	0013      	movs	r3, r2
 8004370:	015b      	lsls	r3, r3, #5
 8004372:	1a9b      	subs	r3, r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	189b      	adds	r3, r3, r2
 8004378:	021b      	lsls	r3, r3, #8
 800437a:	001a      	movs	r2, r3
 800437c:	4b05      	ldr	r3, [pc, #20]	; (8004394 <updataDone+0x38>)
 800437e:	0019      	movs	r1, r3
 8004380:	0010      	movs	r0, r2
 8004382:	f7ff fd25 	bl	8003dd0 <txDone>
}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	46bd      	mov	sp, r7
 800438a:	b002      	add	sp, #8
 800438c:	bd80      	pop	{r7, pc}
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	20000280 	.word	0x20000280
 8004394:	08004341 	.word	0x08004341

08004398 <buildDataFrame>:

// ======================================== 


static void buildDataFrame (void) {
 8004398:	b590      	push	{r4, r7, lr}
 800439a:	b087      	sub	sp, #28
 800439c:	af02      	add	r7, sp, #8
    bit_t txdata = ((LMIC.opmode & (OP_TXDATA|OP_POLL)) != OP_POLL);
 800439e:	4bc2      	ldr	r3, [pc, #776]	; (80046a8 <buildDataFrame+0x310>)
 80043a0:	22ac      	movs	r2, #172	; 0xac
 80043a2:	5a9b      	ldrh	r3, [r3, r2]
 80043a4:	001a      	movs	r2, r3
 80043a6:	2318      	movs	r3, #24
 80043a8:	4013      	ands	r3, r2
 80043aa:	3b10      	subs	r3, #16
 80043ac:	1e5a      	subs	r2, r3, #1
 80043ae:	4193      	sbcs	r3, r2
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	210f      	movs	r1, #15
 80043b4:	187b      	adds	r3, r7, r1
 80043b6:	701a      	strb	r2, [r3, #0]
    u1_t dlen = txdata ? LMIC.pendTxLen : 0;
 80043b8:	187b      	adds	r3, r7, r1
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <buildDataFrame+0x30>
 80043c0:	4bb9      	ldr	r3, [pc, #740]	; (80046a8 <buildDataFrame+0x310>)
 80043c2:	22bc      	movs	r2, #188	; 0xbc
 80043c4:	5c9a      	ldrb	r2, [r3, r2]
 80043c6:	e000      	b.n	80043ca <buildDataFrame+0x32>
 80043c8:	2200      	movs	r2, #0
 80043ca:	1dbb      	adds	r3, r7, #6
 80043cc:	701a      	strb	r2, [r3, #0]

    // Piggyback MAC options
    // Prioritize by importance
    int  end = OFF_DAT_OPTS;
 80043ce:	2308      	movs	r3, #8
 80043d0:	60bb      	str	r3, [r7, #8]
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE)) == (OP_TRACK|OP_PINGABLE) ) {
 80043d2:	4bb5      	ldr	r3, [pc, #724]	; (80046a8 <buildDataFrame+0x310>)
 80043d4:	22ac      	movs	r2, #172	; 0xac
 80043d6:	5a9b      	ldrh	r3, [r3, r2]
 80043d8:	001a      	movs	r2, r3
 80043da:	4bb4      	ldr	r3, [pc, #720]	; (80046ac <buildDataFrame+0x314>)
 80043dc:	4013      	ands	r3, r2
 80043de:	4ab3      	ldr	r2, [pc, #716]	; (80046ac <buildDataFrame+0x314>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d121      	bne.n	8004428 <buildDataFrame+0x90>
        // Indicate pingability in every UP frame
        LMIC.frame[end] = MCMD_PING_IND;
 80043e4:	49b0      	ldr	r1, [pc, #704]	; (80046a8 <buildDataFrame+0x310>)
 80043e6:	23a4      	movs	r3, #164	; 0xa4
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	188a      	adds	r2, r1, r2
 80043ee:	18d3      	adds	r3, r2, r3
 80043f0:	2210      	movs	r2, #16
 80043f2:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ping.dr | (LMIC.ping.intvExp<<4);
 80043f4:	4aac      	ldr	r2, [pc, #688]	; (80046a8 <buildDataFrame+0x310>)
 80043f6:	239a      	movs	r3, #154	; 0x9a
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	5cd3      	ldrb	r3, [r2, r3]
 80043fc:	b25a      	sxtb	r2, r3
 80043fe:	49aa      	ldr	r1, [pc, #680]	; (80046a8 <buildDataFrame+0x310>)
 8004400:	2336      	movs	r3, #54	; 0x36
 8004402:	33ff      	adds	r3, #255	; 0xff
 8004404:	5ccb      	ldrb	r3, [r1, r3]
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	b25b      	sxtb	r3, r3
 800440a:	4313      	orrs	r3, r2
 800440c:	b259      	sxtb	r1, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	b2c8      	uxtb	r0, r1
 8004414:	49a4      	ldr	r1, [pc, #656]	; (80046a8 <buildDataFrame+0x310>)
 8004416:	23a4      	movs	r3, #164	; 0xa4
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	188a      	adds	r2, r1, r2
 800441c:	18d3      	adds	r3, r2, r3
 800441e:	1c02      	adds	r2, r0, #0
 8004420:	701a      	strb	r2, [r3, #0]
        end += 2;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	3302      	adds	r3, #2
 8004426:	60bb      	str	r3, [r7, #8]
    }
    if( LMIC.dutyCapAns ) {
 8004428:	4a9f      	ldr	r2, [pc, #636]	; (80046a8 <buildDataFrame+0x310>)
 800442a:	232a      	movs	r3, #42	; 0x2a
 800442c:	33ff      	adds	r3, #255	; 0xff
 800442e:	5cd3      	ldrb	r3, [r2, r3]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00f      	beq.n	8004454 <buildDataFrame+0xbc>
        LMIC.frame[end] = MCMD_DCAP_ANS;
 8004434:	499c      	ldr	r1, [pc, #624]	; (80046a8 <buildDataFrame+0x310>)
 8004436:	23a4      	movs	r3, #164	; 0xa4
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	188a      	adds	r2, r1, r2
 800443e:	18d3      	adds	r3, r2, r3
 8004440:	2204      	movs	r2, #4
 8004442:	701a      	strb	r2, [r3, #0]
        end += 1;
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	3301      	adds	r3, #1
 8004448:	60bb      	str	r3, [r7, #8]
        LMIC.dutyCapAns = 0;
 800444a:	4a97      	ldr	r2, [pc, #604]	; (80046a8 <buildDataFrame+0x310>)
 800444c:	232a      	movs	r3, #42	; 0x2a
 800444e:	33ff      	adds	r3, #255	; 0xff
 8004450:	2100      	movs	r1, #0
 8004452:	54d1      	strb	r1, [r2, r3]
    }
    if( LMIC.dn2Ans ) {
 8004454:	4a94      	ldr	r2, [pc, #592]	; (80046a8 <buildDataFrame+0x310>)
 8004456:	2398      	movs	r3, #152	; 0x98
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	5cd3      	ldrb	r3, [r2, r3]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d01f      	beq.n	80044a0 <buildDataFrame+0x108>
        LMIC.frame[end+0] = MCMD_DN2P_ANS;
 8004460:	4991      	ldr	r1, [pc, #580]	; (80046a8 <buildDataFrame+0x310>)
 8004462:	23a4      	movs	r3, #164	; 0xa4
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	188a      	adds	r2, r1, r2
 800446a:	18d3      	adds	r3, r2, r3
 800446c:	2205      	movs	r2, #5
 800446e:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.dn2Ans & ~MCMD_DN2P_ANS_RFU;
 8004470:	4a8d      	ldr	r2, [pc, #564]	; (80046a8 <buildDataFrame+0x310>)
 8004472:	2398      	movs	r3, #152	; 0x98
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	5cd3      	ldrb	r3, [r2, r3]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	3201      	adds	r2, #1
 800447c:	2103      	movs	r1, #3
 800447e:	400b      	ands	r3, r1
 8004480:	b2d8      	uxtb	r0, r3
 8004482:	4989      	ldr	r1, [pc, #548]	; (80046a8 <buildDataFrame+0x310>)
 8004484:	23a4      	movs	r3, #164	; 0xa4
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	188a      	adds	r2, r1, r2
 800448a:	18d3      	adds	r3, r2, r3
 800448c:	1c02      	adds	r2, r0, #0
 800448e:	701a      	strb	r2, [r3, #0]
        end += 2;
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	3302      	adds	r3, #2
 8004494:	60bb      	str	r3, [r7, #8]
        LMIC.dn2Ans = 0;
 8004496:	4a84      	ldr	r2, [pc, #528]	; (80046a8 <buildDataFrame+0x310>)
 8004498:	2398      	movs	r3, #152	; 0x98
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	2100      	movs	r1, #0
 800449e:	54d1      	strb	r1, [r2, r3]
    }
    if( LMIC.devsAns ) {  // answer to device status
 80044a0:	4a81      	ldr	r2, [pc, #516]	; (80046a8 <buildDataFrame+0x310>)
 80044a2:	2393      	movs	r3, #147	; 0x93
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	5cd3      	ldrb	r3, [r2, r3]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d029      	beq.n	8004500 <buildDataFrame+0x168>
        LMIC.frame[end+0] = MCMD_DEVS_ANS;
 80044ac:	497e      	ldr	r1, [pc, #504]	; (80046a8 <buildDataFrame+0x310>)
 80044ae:	23a4      	movs	r3, #164	; 0xa4
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	188a      	adds	r2, r1, r2
 80044b6:	18d3      	adds	r3, r2, r3
 80044b8:	2206      	movs	r2, #6
 80044ba:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = os_getBattLevel();
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	1c5c      	adds	r4, r3, #1
 80044c0:	f7fd febe 	bl	8002240 <os_getBattLevel>
 80044c4:	0003      	movs	r3, r0
 80044c6:	0019      	movs	r1, r3
 80044c8:	4a77      	ldr	r2, [pc, #476]	; (80046a8 <buildDataFrame+0x310>)
 80044ca:	23a4      	movs	r3, #164	; 0xa4
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	1912      	adds	r2, r2, r4
 80044d0:	18d3      	adds	r3, r2, r3
 80044d2:	1c0a      	adds	r2, r1, #0
 80044d4:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+2] = LMIC.margin;
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	1c9a      	adds	r2, r3, #2
 80044da:	4973      	ldr	r1, [pc, #460]	; (80046a8 <buildDataFrame+0x310>)
 80044dc:	2392      	movs	r3, #146	; 0x92
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	5cc8      	ldrb	r0, [r1, r3]
 80044e2:	4971      	ldr	r1, [pc, #452]	; (80046a8 <buildDataFrame+0x310>)
 80044e4:	23a4      	movs	r3, #164	; 0xa4
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	188a      	adds	r2, r1, r2
 80044ea:	18d3      	adds	r3, r2, r3
 80044ec:	1c02      	adds	r2, r0, #0
 80044ee:	701a      	strb	r2, [r3, #0]
        end += 3;
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	3303      	adds	r3, #3
 80044f4:	60bb      	str	r3, [r7, #8]
        LMIC.devsAns = 0;
 80044f6:	4a6c      	ldr	r2, [pc, #432]	; (80046a8 <buildDataFrame+0x310>)
 80044f8:	2393      	movs	r3, #147	; 0x93
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	2100      	movs	r1, #0
 80044fe:	54d1      	strb	r1, [r2, r3]
    }
    if( LMIC.ladrAns ) {  // answer to ADR change
 8004500:	4a69      	ldr	r2, [pc, #420]	; (80046a8 <buildDataFrame+0x310>)
 8004502:	2326      	movs	r3, #38	; 0x26
 8004504:	33ff      	adds	r3, #255	; 0xff
 8004506:	5cd3      	ldrb	r3, [r2, r3]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01f      	beq.n	800454c <buildDataFrame+0x1b4>
        LMIC.frame[end+0] = MCMD_LADR_ANS;
 800450c:	4966      	ldr	r1, [pc, #408]	; (80046a8 <buildDataFrame+0x310>)
 800450e:	23a4      	movs	r3, #164	; 0xa4
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	188a      	adds	r2, r1, r2
 8004516:	18d3      	adds	r3, r2, r3
 8004518:	2203      	movs	r2, #3
 800451a:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ladrAns & ~MCMD_LADR_ANS_RFU;
 800451c:	4a62      	ldr	r2, [pc, #392]	; (80046a8 <buildDataFrame+0x310>)
 800451e:	2326      	movs	r3, #38	; 0x26
 8004520:	33ff      	adds	r3, #255	; 0xff
 8004522:	5cd3      	ldrb	r3, [r2, r3]
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	3201      	adds	r2, #1
 8004528:	2107      	movs	r1, #7
 800452a:	400b      	ands	r3, r1
 800452c:	b2d8      	uxtb	r0, r3
 800452e:	495e      	ldr	r1, [pc, #376]	; (80046a8 <buildDataFrame+0x310>)
 8004530:	23a4      	movs	r3, #164	; 0xa4
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	188a      	adds	r2, r1, r2
 8004536:	18d3      	adds	r3, r2, r3
 8004538:	1c02      	adds	r2, r0, #0
 800453a:	701a      	strb	r2, [r3, #0]
        end += 2;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	3302      	adds	r3, #2
 8004540:	60bb      	str	r3, [r7, #8]
        LMIC.ladrAns = 0;
 8004542:	4a59      	ldr	r2, [pc, #356]	; (80046a8 <buildDataFrame+0x310>)
 8004544:	2326      	movs	r3, #38	; 0x26
 8004546:	33ff      	adds	r3, #255	; 0xff
 8004548:	2100      	movs	r1, #0
 800454a:	54d1      	strb	r1, [r2, r3]
    }
    if( LMIC.bcninfoTries > 0 ) {
 800454c:	4a56      	ldr	r2, [pc, #344]	; (80046a8 <buildDataFrame+0x310>)
 800454e:	2399      	movs	r3, #153	; 0x99
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	5cd3      	ldrb	r3, [r2, r3]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <buildDataFrame+0x1d6>
        LMIC.frame[end] = MCMD_BCNI_REQ;
 8004558:	4953      	ldr	r1, [pc, #332]	; (80046a8 <buildDataFrame+0x310>)
 800455a:	23a4      	movs	r3, #164	; 0xa4
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	188a      	adds	r2, r1, r2
 8004562:	18d3      	adds	r3, r2, r3
 8004564:	2212      	movs	r2, #18
 8004566:	701a      	strb	r2, [r3, #0]
        end += 1;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	3301      	adds	r3, #1
 800456c:	60bb      	str	r3, [r7, #8]
    }
    if( LMIC.adrChanged ) {
 800456e:	4a4e      	ldr	r2, [pc, #312]	; (80046a8 <buildDataFrame+0x310>)
 8004570:	2391      	movs	r3, #145	; 0x91
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	5cd3      	ldrb	r3, [r2, r3]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00f      	beq.n	800459a <buildDataFrame+0x202>
        if( LMIC.adrAckReq < 0 )
 800457a:	4a4b      	ldr	r2, [pc, #300]	; (80046a8 <buildDataFrame+0x310>)
 800457c:	2322      	movs	r3, #34	; 0x22
 800457e:	33ff      	adds	r3, #255	; 0xff
 8004580:	56d3      	ldrsb	r3, [r2, r3]
 8004582:	2b00      	cmp	r3, #0
 8004584:	da04      	bge.n	8004590 <buildDataFrame+0x1f8>
            LMIC.adrAckReq = 0;
 8004586:	4a48      	ldr	r2, [pc, #288]	; (80046a8 <buildDataFrame+0x310>)
 8004588:	2322      	movs	r3, #34	; 0x22
 800458a:	33ff      	adds	r3, #255	; 0xff
 800458c:	2100      	movs	r1, #0
 800458e:	54d1      	strb	r1, [r2, r3]
        LMIC.adrChanged = 0;
 8004590:	4a45      	ldr	r2, [pc, #276]	; (80046a8 <buildDataFrame+0x310>)
 8004592:	2391      	movs	r3, #145	; 0x91
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	2100      	movs	r1, #0
 8004598:	54d1      	strb	r1, [r2, r3]
    }
    if( LMIC.pingSetAns != 0 ) {
 800459a:	4a43      	ldr	r2, [pc, #268]	; (80046a8 <buildDataFrame+0x310>)
 800459c:	2334      	movs	r3, #52	; 0x34
 800459e:	33ff      	adds	r3, #255	; 0xff
 80045a0:	5cd3      	ldrb	r3, [r2, r3]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d01f      	beq.n	80045e6 <buildDataFrame+0x24e>
        LMIC.frame[end+0] = MCMD_PING_ANS;
 80045a6:	4940      	ldr	r1, [pc, #256]	; (80046a8 <buildDataFrame+0x310>)
 80045a8:	23a4      	movs	r3, #164	; 0xa4
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	188a      	adds	r2, r1, r2
 80045b0:	18d3      	adds	r3, r2, r3
 80045b2:	2211      	movs	r2, #17
 80045b4:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.pingSetAns & ~MCMD_PING_ANS_RFU;
 80045b6:	4a3c      	ldr	r2, [pc, #240]	; (80046a8 <buildDataFrame+0x310>)
 80045b8:	2334      	movs	r3, #52	; 0x34
 80045ba:	33ff      	adds	r3, #255	; 0xff
 80045bc:	5cd3      	ldrb	r3, [r2, r3]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	3201      	adds	r2, #1
 80045c2:	2101      	movs	r1, #1
 80045c4:	400b      	ands	r3, r1
 80045c6:	b2d8      	uxtb	r0, r3
 80045c8:	4937      	ldr	r1, [pc, #220]	; (80046a8 <buildDataFrame+0x310>)
 80045ca:	23a4      	movs	r3, #164	; 0xa4
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	188a      	adds	r2, r1, r2
 80045d0:	18d3      	adds	r3, r2, r3
 80045d2:	1c02      	adds	r2, r0, #0
 80045d4:	701a      	strb	r2, [r3, #0]
        end += 2;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	3302      	adds	r3, #2
 80045da:	60bb      	str	r3, [r7, #8]
        LMIC.pingSetAns = 0;
 80045dc:	4a32      	ldr	r2, [pc, #200]	; (80046a8 <buildDataFrame+0x310>)
 80045de:	2334      	movs	r3, #52	; 0x34
 80045e0:	33ff      	adds	r3, #255	; 0xff
 80045e2:	2100      	movs	r1, #0
 80045e4:	54d1      	strb	r1, [r2, r3]
    }
    if( LMIC.snchAns ) {
 80045e6:	4a30      	ldr	r2, [pc, #192]	; (80046a8 <buildDataFrame+0x310>)
 80045e8:	2395      	movs	r3, #149	; 0x95
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	5cd3      	ldrb	r3, [r2, r3]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d01f      	beq.n	8004632 <buildDataFrame+0x29a>
        LMIC.frame[end+0] = MCMD_SNCH_ANS;
 80045f2:	492d      	ldr	r1, [pc, #180]	; (80046a8 <buildDataFrame+0x310>)
 80045f4:	23a4      	movs	r3, #164	; 0xa4
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	188a      	adds	r2, r1, r2
 80045fc:	18d3      	adds	r3, r2, r3
 80045fe:	2207      	movs	r2, #7
 8004600:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.snchAns & ~MCMD_SNCH_ANS_RFU;
 8004602:	4a29      	ldr	r2, [pc, #164]	; (80046a8 <buildDataFrame+0x310>)
 8004604:	2395      	movs	r3, #149	; 0x95
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	5cd3      	ldrb	r3, [r2, r3]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	3201      	adds	r2, #1
 800460e:	2103      	movs	r1, #3
 8004610:	400b      	ands	r3, r1
 8004612:	b2d8      	uxtb	r0, r3
 8004614:	4924      	ldr	r1, [pc, #144]	; (80046a8 <buildDataFrame+0x310>)
 8004616:	23a4      	movs	r3, #164	; 0xa4
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	188a      	adds	r2, r1, r2
 800461c:	18d3      	adds	r3, r2, r3
 800461e:	1c02      	adds	r2, r0, #0
 8004620:	701a      	strb	r2, [r3, #0]
        end += 2;
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	3302      	adds	r3, #2
 8004626:	60bb      	str	r3, [r7, #8]
        LMIC.snchAns = 0;
 8004628:	4a1f      	ldr	r2, [pc, #124]	; (80046a8 <buildDataFrame+0x310>)
 800462a:	2395      	movs	r3, #149	; 0x95
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	2100      	movs	r1, #0
 8004630:	54d1      	strb	r1, [r2, r3]
    }
    ASSERT(end <= OFF_DAT_OPTS+16);
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b18      	cmp	r3, #24
 8004636:	dd01      	ble.n	800463c <buildDataFrame+0x2a4>
 8004638:	f7fd fb1c 	bl	8001c74 <hal_failed>

    u1_t flen = end + (txdata ? 5+dlen : 4);
 800463c:	230f      	movs	r3, #15
 800463e:	18fb      	adds	r3, r7, r3
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d004      	beq.n	8004650 <buildDataFrame+0x2b8>
 8004646:	1dbb      	adds	r3, r7, #6
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	3305      	adds	r3, #5
 800464c:	b2db      	uxtb	r3, r3
 800464e:	e000      	b.n	8004652 <buildDataFrame+0x2ba>
 8004650:	2304      	movs	r3, #4
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	b2d1      	uxtb	r1, r2
 8004656:	1dfa      	adds	r2, r7, #7
 8004658:	185b      	adds	r3, r3, r1
 800465a:	7013      	strb	r3, [r2, #0]
    if( flen > MAX_LEN_FRAME ) {
 800465c:	1dfb      	adds	r3, r7, #7
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b40      	cmp	r3, #64	; 0x40
 8004662:	d908      	bls.n	8004676 <buildDataFrame+0x2de>
        // Options and payload too big - delay payload
        txdata = 0;
 8004664:	230f      	movs	r3, #15
 8004666:	18fb      	adds	r3, r7, r3
 8004668:	2200      	movs	r2, #0
 800466a:	701a      	strb	r2, [r3, #0]
        flen = end+4;
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	b2da      	uxtb	r2, r3
 8004670:	1dfb      	adds	r3, r7, #7
 8004672:	3204      	adds	r2, #4
 8004674:	701a      	strb	r2, [r3, #0]
    }
    LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DAUP | HDR_MAJOR_V1;
 8004676:	4a0c      	ldr	r2, [pc, #48]	; (80046a8 <buildDataFrame+0x310>)
 8004678:	23a4      	movs	r3, #164	; 0xa4
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	2140      	movs	r1, #64	; 0x40
 800467e:	54d1      	strb	r1, [r2, r3]
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 8004680:	4a09      	ldr	r2, [pc, #36]	; (80046a8 <buildDataFrame+0x310>)
 8004682:	2390      	movs	r3, #144	; 0x90
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	5cd2      	ldrb	r2, [r2, r3]
 8004688:	4907      	ldr	r1, [pc, #28]	; (80046a8 <buildDataFrame+0x310>)
 800468a:	2328      	movs	r3, #40	; 0x28
 800468c:	33ff      	adds	r3, #255	; 0xff
 800468e:	5ccb      	ldrb	r3, [r1, r3]
                              | (LMIC.adrAckReq >= 0 ? FCT_ADRARQ : 0)
 8004690:	4313      	orrs	r3, r2
 8004692:	b2db      	uxtb	r3, r3
 8004694:	b25a      	sxtb	r2, r3
 8004696:	4904      	ldr	r1, [pc, #16]	; (80046a8 <buildDataFrame+0x310>)
 8004698:	2322      	movs	r3, #34	; 0x22
 800469a:	33ff      	adds	r3, #255	; 0xff
 800469c:	56cb      	ldrsb	r3, [r1, r3]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	db06      	blt.n	80046b0 <buildDataFrame+0x318>
 80046a2:	2340      	movs	r3, #64	; 0x40
 80046a4:	e005      	b.n	80046b2 <buildDataFrame+0x31a>
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	20000280 	.word	0x20000280
 80046ac:	00000402 	.word	0x00000402
 80046b0:	2300      	movs	r3, #0
 80046b2:	4313      	orrs	r3, r2
 80046b4:	b25a      	sxtb	r2, r3
                              | (end-OFF_DAT_OPTS));
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	3b08      	subs	r3, #8
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	b25b      	sxtb	r3, r3
 80046c0:	4313      	orrs	r3, r2
 80046c2:	b25b      	sxtb	r3, r3
 80046c4:	b2d9      	uxtb	r1, r3
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 80046c6:	4a4a      	ldr	r2, [pc, #296]	; (80047f0 <buildDataFrame+0x458>)
 80046c8:	234e      	movs	r3, #78	; 0x4e
 80046ca:	33ff      	adds	r3, #255	; 0xff
 80046cc:	54d1      	strb	r1, [r2, r3]
    os_wlsbf4(LMIC.frame+OFF_DAT_ADDR,  LMIC.devaddr);
 80046ce:	4849      	ldr	r0, [pc, #292]	; (80047f4 <buildDataFrame+0x45c>)
 80046d0:	4a47      	ldr	r2, [pc, #284]	; (80047f0 <buildDataFrame+0x458>)
 80046d2:	238a      	movs	r3, #138	; 0x8a
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	58d3      	ldr	r3, [r2, r3]
 80046d8:	0019      	movs	r1, r3
 80046da:	f7fd fd73 	bl	80021c4 <os_wlsbf4>

    if( LMIC.txCnt == 0 ) {
 80046de:	4a44      	ldr	r2, [pc, #272]	; (80047f0 <buildDataFrame+0x458>)
 80046e0:	23a2      	movs	r3, #162	; 0xa2
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	5cd3      	ldrb	r3, [r2, r3]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d108      	bne.n	80046fc <buildDataFrame+0x364>
        LMIC.seqnoUp += 1;
 80046ea:	4a41      	ldr	r2, [pc, #260]	; (80047f0 <buildDataFrame+0x458>)
 80046ec:	238e      	movs	r3, #142	; 0x8e
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	58d3      	ldr	r3, [r2, r3]
 80046f2:	1c59      	adds	r1, r3, #1
 80046f4:	4a3e      	ldr	r2, [pc, #248]	; (80047f0 <buildDataFrame+0x458>)
 80046f6:	238e      	movs	r3, #142	; 0x8e
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	50d1      	str	r1, [r2, r3]
                           e_.info   = LMIC.seqnoUp-1,
                           e_.info2  = ((LMIC.txCnt+1) |
                                        (DRADJUST[LMIC.txCnt+1] << 8) |
                                        ((LMIC.datarate|DR_PAGE)<<16))));
    }
    os_wlsbf2(LMIC.frame+OFF_DAT_SEQNO, LMIC.seqnoUp-1);
 80046fc:	483e      	ldr	r0, [pc, #248]	; (80047f8 <buildDataFrame+0x460>)
 80046fe:	4a3c      	ldr	r2, [pc, #240]	; (80047f0 <buildDataFrame+0x458>)
 8004700:	238e      	movs	r3, #142	; 0x8e
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	58d3      	ldr	r3, [r2, r3]
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29b      	uxth	r3, r3
 800470c:	0019      	movs	r1, r3
 800470e:	f7fd fd41 	bl	8002194 <os_wlsbf2>

    // Clear pending DN confirmation
    LMIC.dnConf = 0;
 8004712:	4a37      	ldr	r2, [pc, #220]	; (80047f0 <buildDataFrame+0x458>)
 8004714:	2390      	movs	r3, #144	; 0x90
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	2100      	movs	r1, #0
 800471a:	54d1      	strb	r1, [r2, r3]

    if( txdata ) {
 800471c:	230f      	movs	r3, #15
 800471e:	18fb      	adds	r3, r7, r3
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d046      	beq.n	80047b4 <buildDataFrame+0x41c>
        if( LMIC.pendTxConf ) {
 8004726:	4b32      	ldr	r3, [pc, #200]	; (80047f0 <buildDataFrame+0x458>)
 8004728:	22bb      	movs	r2, #187	; 0xbb
 800472a:	5c9b      	ldrb	r3, [r3, r2]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00f      	beq.n	8004750 <buildDataFrame+0x3b8>
            // Confirmed only makes sense if we have a payload (or at least a port)
            LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DCUP | HDR_MAJOR_V1;
 8004730:	4a2f      	ldr	r2, [pc, #188]	; (80047f0 <buildDataFrame+0x458>)
 8004732:	23a4      	movs	r3, #164	; 0xa4
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	2180      	movs	r1, #128	; 0x80
 8004738:	54d1      	strb	r1, [r2, r3]
            if( LMIC.txCnt == 0 ) LMIC.txCnt = 1;
 800473a:	4a2d      	ldr	r2, [pc, #180]	; (80047f0 <buildDataFrame+0x458>)
 800473c:	23a2      	movs	r3, #162	; 0xa2
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	5cd3      	ldrb	r3, [r2, r3]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d104      	bne.n	8004750 <buildDataFrame+0x3b8>
 8004746:	4a2a      	ldr	r2, [pc, #168]	; (80047f0 <buildDataFrame+0x458>)
 8004748:	23a2      	movs	r3, #162	; 0xa2
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	2101      	movs	r1, #1
 800474e:	54d1      	strb	r1, [r2, r3]
        }
        LMIC.frame[end] = LMIC.pendTxPort;
 8004750:	4b27      	ldr	r3, [pc, #156]	; (80047f0 <buildDataFrame+0x458>)
 8004752:	22ba      	movs	r2, #186	; 0xba
 8004754:	5c98      	ldrb	r0, [r3, r2]
 8004756:	4926      	ldr	r1, [pc, #152]	; (80047f0 <buildDataFrame+0x458>)
 8004758:	23a4      	movs	r3, #164	; 0xa4
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	188a      	adds	r2, r1, r2
 8004760:	18d3      	adds	r3, r2, r3
 8004762:	1c02      	adds	r2, r0, #0
 8004764:	701a      	strb	r2, [r3, #0]
        os_copyMem(LMIC.frame+end+1, LMIC.pendTxData, dlen);
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	4b24      	ldr	r3, [pc, #144]	; (80047fc <buildDataFrame+0x464>)
 800476c:	18d0      	adds	r0, r2, r3
 800476e:	1dbb      	adds	r3, r7, #6
 8004770:	781a      	ldrb	r2, [r3, #0]
 8004772:	4b23      	ldr	r3, [pc, #140]	; (8004800 <buildDataFrame+0x468>)
 8004774:	0019      	movs	r1, r3
 8004776:	f008 f869 	bl	800c84c <memcpy>
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 800477a:	4b1d      	ldr	r3, [pc, #116]	; (80047f0 <buildDataFrame+0x458>)
 800477c:	22ba      	movs	r2, #186	; 0xba
 800477e:	5c9b      	ldrb	r3, [r3, r2]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <buildDataFrame+0x3f0>
 8004784:	481f      	ldr	r0, [pc, #124]	; (8004804 <buildDataFrame+0x46c>)
 8004786:	e000      	b.n	800478a <buildDataFrame+0x3f2>
 8004788:	481f      	ldr	r0, [pc, #124]	; (8004808 <buildDataFrame+0x470>)
 800478a:	4a19      	ldr	r2, [pc, #100]	; (80047f0 <buildDataFrame+0x458>)
 800478c:	238a      	movs	r3, #138	; 0x8a
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	58d1      	ldr	r1, [r2, r3]
                   LMIC.devaddr, LMIC.seqnoUp-1,
 8004792:	4a17      	ldr	r2, [pc, #92]	; (80047f0 <buildDataFrame+0x458>)
 8004794:	238e      	movs	r3, #142	; 0x8e
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	58d3      	ldr	r3, [r2, r3]
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 800479a:	1e5c      	subs	r4, r3, #1
                   /*up*/0, LMIC.frame+end+1, dlen);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	1c5a      	adds	r2, r3, #1
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 80047a0:	4b16      	ldr	r3, [pc, #88]	; (80047fc <buildDataFrame+0x464>)
 80047a2:	18d3      	adds	r3, r2, r3
 80047a4:	1dba      	adds	r2, r7, #6
 80047a6:	7812      	ldrb	r2, [r2, #0]
 80047a8:	9201      	str	r2, [sp, #4]
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	2300      	movs	r3, #0
 80047ae:	0022      	movs	r2, r4
 80047b0:	f7fd fe82 	bl	80024b8 <aes_cipher>
    }
    aes_appendMic(LMIC.nwkKey, LMIC.devaddr, LMIC.seqnoUp-1, /*up*/0, LMIC.frame, flen-4);
 80047b4:	4a0e      	ldr	r2, [pc, #56]	; (80047f0 <buildDataFrame+0x458>)
 80047b6:	238a      	movs	r3, #138	; 0x8a
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	58d1      	ldr	r1, [r2, r3]
 80047bc:	4a0c      	ldr	r2, [pc, #48]	; (80047f0 <buildDataFrame+0x458>)
 80047be:	238e      	movs	r3, #142	; 0x8e
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	58d3      	ldr	r3, [r2, r3]
 80047c4:	1e5a      	subs	r2, r3, #1
 80047c6:	1dfb      	adds	r3, r7, #7
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	3b04      	subs	r3, #4
 80047cc:	480d      	ldr	r0, [pc, #52]	; (8004804 <buildDataFrame+0x46c>)
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	4b0a      	ldr	r3, [pc, #40]	; (80047fc <buildDataFrame+0x464>)
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	2300      	movs	r3, #0
 80047d6:	f7fd fdf1 	bl	80023bc <aes_appendMic>
                       e_.fct     = LMIC.frame[LORA::OFF_DAT_FCT],
                       e_.port    = LMIC.pendTxPort,
                       e_.plen    = txdata ? dlen : 0,
                       e_.opts.length = end-LORA::OFF_DAT_OPTS,
                       memcpy(&e_.opts[0], LMIC.frame+LORA::OFF_DAT_OPTS, end-LORA::OFF_DAT_OPTS)));
    LMIC.dataLen = flen;
 80047da:	4a05      	ldr	r2, [pc, #20]	; (80047f0 <buildDataFrame+0x458>)
 80047dc:	1df9      	adds	r1, r7, #7
 80047de:	2348      	movs	r3, #72	; 0x48
 80047e0:	33ff      	adds	r3, #255	; 0xff
 80047e2:	7809      	ldrb	r1, [r1, #0]
 80047e4:	54d1      	strb	r1, [r2, r3]
}
 80047e6:	46c0      	nop			; (mov r8, r8)
 80047e8:	46bd      	mov	sp, r7
 80047ea:	b005      	add	sp, #20
 80047ec:	bd90      	pop	{r4, r7, pc}
 80047ee:	46c0      	nop			; (mov r8, r8)
 80047f0:	20000280 	.word	0x20000280
 80047f4:	200003c9 	.word	0x200003c9
 80047f8:	200003ce 	.word	0x200003ce
 80047fc:	200003c8 	.word	0x200003c8
 8004800:	2000033d 	.word	0x2000033d
 8004804:	20000374 	.word	0x20000374
 8004808:	20000384 	.word	0x20000384

0800480c <onBcnRx>:


// Callback from HAL during scan mode or when job timer expires.
static void onBcnRx (xref2osjob_t job) {
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
    // If we arrive via job timer make sure to put radio to rest.
    os_radio(RADIO_RST);
 8004814:	2000      	movs	r0, #0
 8004816:	f002 f9c3 	bl	8006ba0 <os_radio>
    os_clearCallback(&LMIC.osjob);
 800481a:	4b24      	ldr	r3, [pc, #144]	; (80048ac <onBcnRx+0xa0>)
 800481c:	0018      	movs	r0, r3
 800481e:	f001 fb31 	bl	8005e84 <os_clearCallback>
    if( LMIC.dataLen == 0 ) {
 8004822:	4a23      	ldr	r2, [pc, #140]	; (80048b0 <onBcnRx+0xa4>)
 8004824:	2348      	movs	r3, #72	; 0x48
 8004826:	33ff      	adds	r3, #255	; 0xff
 8004828:	5cd3      	ldrb	r3, [r2, r3]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10c      	bne.n	8004848 <onBcnRx+0x3c>
        // Nothing received - timeout
        LMIC.opmode &= ~(OP_SCAN | OP_TRACK);
 800482e:	4b20      	ldr	r3, [pc, #128]	; (80048b0 <onBcnRx+0xa4>)
 8004830:	22ac      	movs	r2, #172	; 0xac
 8004832:	5a9b      	ldrh	r3, [r3, r2]
 8004834:	2203      	movs	r2, #3
 8004836:	4393      	bics	r3, r2
 8004838:	b299      	uxth	r1, r3
 800483a:	4b1d      	ldr	r3, [pc, #116]	; (80048b0 <onBcnRx+0xa4>)
 800483c:	22ac      	movs	r2, #172	; 0xac
 800483e:	5299      	strh	r1, [r3, r2]
        reportEvent(EV_SCAN_TIMEOUT);
 8004840:	2001      	movs	r0, #1
 8004842:	f7fe fd9d 	bl	8003380 <reportEvent>
        return;
 8004846:	e02e      	b.n	80048a6 <onBcnRx+0x9a>
    }
    if( decodeBeacon() <= 0 ) {
 8004848:	f7fe fe36 	bl	80034b8 <decodeBeacon>
 800484c:	1e03      	subs	r3, r0, #0
 800484e:	dc11      	bgt.n	8004874 <onBcnRx+0x68>
        // Something is wrong with the beacon - continue scan
        LMIC.dataLen = 0;
 8004850:	4a17      	ldr	r2, [pc, #92]	; (80048b0 <onBcnRx+0xa4>)
 8004852:	2348      	movs	r3, #72	; 0x48
 8004854:	33ff      	adds	r3, #255	; 0xff
 8004856:	2100      	movs	r1, #0
 8004858:	54d1      	strb	r1, [r2, r3]
        os_radio(RADIO_RXON);
 800485a:	2003      	movs	r0, #3
 800485c:	f002 f9a0 	bl	8006ba0 <os_radio>
        os_setTimedCallback(&LMIC.osjob, LMIC.bcninfo.txtime, FUNC_ADDR(onBcnRx));
 8004860:	4a13      	ldr	r2, [pc, #76]	; (80048b0 <onBcnRx+0xa4>)
 8004862:	23c8      	movs	r3, #200	; 0xc8
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	58d1      	ldr	r1, [r2, r3]
 8004868:	4a12      	ldr	r2, [pc, #72]	; (80048b4 <onBcnRx+0xa8>)
 800486a:	4b10      	ldr	r3, [pc, #64]	; (80048ac <onBcnRx+0xa0>)
 800486c:	0018      	movs	r0, r3
 800486e:	f001 fb51 	bl	8005f14 <os_setTimedCallback>
        return;
 8004872:	e018      	b.n	80048a6 <onBcnRx+0x9a>
    }
    // Found our 1st beacon
    // We don't have a previous beacon to calc some drift - assume
    // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
    calcBcnRxWindowFromMillis(13,1);
 8004874:	2101      	movs	r1, #1
 8004876:	200d      	movs	r0, #13
 8004878:	f7fd ffec 	bl	8002854 <calcBcnRxWindowFromMillis>
    LMIC.opmode &= ~OP_SCAN;          // turn SCAN off
 800487c:	4b0c      	ldr	r3, [pc, #48]	; (80048b0 <onBcnRx+0xa4>)
 800487e:	22ac      	movs	r2, #172	; 0xac
 8004880:	5a9b      	ldrh	r3, [r3, r2]
 8004882:	2201      	movs	r2, #1
 8004884:	4393      	bics	r3, r2
 8004886:	b299      	uxth	r1, r3
 8004888:	4b09      	ldr	r3, [pc, #36]	; (80048b0 <onBcnRx+0xa4>)
 800488a:	22ac      	movs	r2, #172	; 0xac
 800488c:	5299      	strh	r1, [r3, r2]
    LMIC.opmode |=  OP_TRACK;         // auto enable tracking
 800488e:	4b08      	ldr	r3, [pc, #32]	; (80048b0 <onBcnRx+0xa4>)
 8004890:	22ac      	movs	r2, #172	; 0xac
 8004892:	5a9b      	ldrh	r3, [r3, r2]
 8004894:	2202      	movs	r2, #2
 8004896:	4313      	orrs	r3, r2
 8004898:	b299      	uxth	r1, r3
 800489a:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <onBcnRx+0xa4>)
 800489c:	22ac      	movs	r2, #172	; 0xac
 800489e:	5299      	strh	r1, [r3, r2]
    reportEvent(EV_BEACON_FOUND);    // can be disabled in callback
 80048a0:	2002      	movs	r0, #2
 80048a2:	f7fe fd6d 	bl	8003380 <reportEvent>
}
 80048a6:	46bd      	mov	sp, r7
 80048a8:	b002      	add	sp, #8
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20000294 	.word	0x20000294
 80048b0:	20000280 	.word	0x20000280
 80048b4:	0800480d 	.word	0x0800480d

080048b8 <startScan>:
// Enable receiver to listen to incoming beacons
// netid defines when scan stops (any or specific beacon)
// This mode ends with events: EV_SCAN_TIMEOUT/EV_SCAN_BEACON
// Implicitely cancels any pending TX/RX transaction.
// Also cancels an onpoing joining procedure.
static void startScan (void) {
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
    ASSERT(LMIC.devaddr!=0 && (LMIC.opmode & OP_JOINING)==0);
 80048bc:	4a2a      	ldr	r2, [pc, #168]	; (8004968 <startScan+0xb0>)
 80048be:	238a      	movs	r3, #138	; 0x8a
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	58d3      	ldr	r3, [r2, r3]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d006      	beq.n	80048d6 <startScan+0x1e>
 80048c8:	4b27      	ldr	r3, [pc, #156]	; (8004968 <startScan+0xb0>)
 80048ca:	22ac      	movs	r2, #172	; 0xac
 80048cc:	5a9b      	ldrh	r3, [r3, r2]
 80048ce:	001a      	movs	r2, r3
 80048d0:	2304      	movs	r3, #4
 80048d2:	4013      	ands	r3, r2
 80048d4:	d001      	beq.n	80048da <startScan+0x22>
 80048d6:	f7fd f9cd 	bl	8001c74 <hal_failed>
    if( (LMIC.opmode & OP_SHUTDOWN) != 0 )
 80048da:	4b23      	ldr	r3, [pc, #140]	; (8004968 <startScan+0xb0>)
 80048dc:	22ac      	movs	r2, #172	; 0xac
 80048de:	5a9b      	ldrh	r3, [r3, r2]
 80048e0:	001a      	movs	r2, r3
 80048e2:	2340      	movs	r3, #64	; 0x40
 80048e4:	4013      	ands	r3, r2
 80048e6:	d13c      	bne.n	8004962 <startScan+0xaa>
        return;
    // Cancel onging TX/RX transaction
    LMIC.txCnt = LMIC.dnConf = LMIC.bcninfo.flags = 0;
 80048e8:	4a1f      	ldr	r2, [pc, #124]	; (8004968 <startScan+0xb0>)
 80048ea:	23cb      	movs	r3, #203	; 0xcb
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	2100      	movs	r1, #0
 80048f0:	54d1      	strb	r1, [r2, r3]
 80048f2:	4a1d      	ldr	r2, [pc, #116]	; (8004968 <startScan+0xb0>)
 80048f4:	23cb      	movs	r3, #203	; 0xcb
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	5cd1      	ldrb	r1, [r2, r3]
 80048fa:	4a1b      	ldr	r2, [pc, #108]	; (8004968 <startScan+0xb0>)
 80048fc:	2390      	movs	r3, #144	; 0x90
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	54d1      	strb	r1, [r2, r3]
 8004902:	4a19      	ldr	r2, [pc, #100]	; (8004968 <startScan+0xb0>)
 8004904:	2390      	movs	r3, #144	; 0x90
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	5cd1      	ldrb	r1, [r2, r3]
 800490a:	4a17      	ldr	r2, [pc, #92]	; (8004968 <startScan+0xb0>)
 800490c:	23a2      	movs	r3, #162	; 0xa2
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	54d1      	strb	r1, [r2, r3]
    LMIC.opmode = (LMIC.opmode | OP_SCAN) & ~(OP_TXRXPEND);
 8004912:	4b15      	ldr	r3, [pc, #84]	; (8004968 <startScan+0xb0>)
 8004914:	22ac      	movs	r2, #172	; 0xac
 8004916:	5a9b      	ldrh	r3, [r3, r2]
 8004918:	2201      	movs	r2, #1
 800491a:	4313      	orrs	r3, r2
 800491c:	b29b      	uxth	r3, r3
 800491e:	2280      	movs	r2, #128	; 0x80
 8004920:	4393      	bics	r3, r2
 8004922:	b299      	uxth	r1, r3
 8004924:	4b10      	ldr	r3, [pc, #64]	; (8004968 <startScan+0xb0>)
 8004926:	22ac      	movs	r2, #172	; 0xac
 8004928:	5299      	strh	r1, [r3, r2]
    setBcnRxParams();
 800492a:	f7fe fc51 	bl	80031d0 <setBcnRxParams>
    LMIC.rxtime = LMIC.bcninfo.txtime = os_getTime() + sec2osticks(BCN_INTV_sec+1);
 800492e:	f001 fa83 	bl	8005e38 <os_getTime>
 8004932:	0003      	movs	r3, r0
 8004934:	4a0d      	ldr	r2, [pc, #52]	; (800496c <startScan+0xb4>)
 8004936:	1899      	adds	r1, r3, r2
 8004938:	4a0b      	ldr	r2, [pc, #44]	; (8004968 <startScan+0xb0>)
 800493a:	23c8      	movs	r3, #200	; 0xc8
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	50d1      	str	r1, [r2, r3]
 8004940:	4a09      	ldr	r2, [pc, #36]	; (8004968 <startScan+0xb0>)
 8004942:	23c8      	movs	r3, #200	; 0xc8
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	58d2      	ldr	r2, [r2, r3]
 8004948:	4b07      	ldr	r3, [pc, #28]	; (8004968 <startScan+0xb0>)
 800494a:	605a      	str	r2, [r3, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime, FUNC_ADDR(onBcnRx));
 800494c:	4b06      	ldr	r3, [pc, #24]	; (8004968 <startScan+0xb0>)
 800494e:	6859      	ldr	r1, [r3, #4]
 8004950:	4a07      	ldr	r2, [pc, #28]	; (8004970 <startScan+0xb8>)
 8004952:	4b08      	ldr	r3, [pc, #32]	; (8004974 <startScan+0xbc>)
 8004954:	0018      	movs	r0, r3
 8004956:	f001 fadd 	bl	8005f14 <os_setTimedCallback>
    os_radio(RADIO_RXON);
 800495a:	2003      	movs	r0, #3
 800495c:	f002 f920 	bl	8006ba0 <os_radio>
 8004960:	e000      	b.n	8004964 <startScan+0xac>
        return;
 8004962:	46c0      	nop			; (mov r8, r8)
}
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	20000280 	.word	0x20000280
 800496c:	003efd00 	.word	0x003efd00
 8004970:	0800480d 	.word	0x0800480d
 8004974:	20000294 	.word	0x20000294

08004978 <buildJoinRequest>:
//
// Join stuff
//
// ================================================================================

static void buildJoinRequest (u1_t ftype) {
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	0002      	movs	r2, r0
 8004980:	1dfb      	adds	r3, r7, #7
 8004982:	701a      	strb	r2, [r3, #0]
    // Do not use pendTxData since we might have a pending
    // user level frame in there. Use RX holding area instead.
    xref2u1_t d = LMIC.frame;
 8004984:	4b17      	ldr	r3, [pc, #92]	; (80049e4 <buildJoinRequest+0x6c>)
 8004986:	60fb      	str	r3, [r7, #12]
    d[OFF_JR_HDR] = ftype;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	1dfa      	adds	r2, r7, #7
 800498c:	7812      	ldrb	r2, [r2, #0]
 800498e:	701a      	strb	r2, [r3, #0]
    os_getArtEui(d + OFF_JR_ARTEUI);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3301      	adds	r3, #1
 8004994:	0018      	movs	r0, r3
 8004996:	f000 fdd3 	bl	8005540 <os_getArtEui>
    os_getDevEui(d + OFF_JR_DEVEUI);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	3309      	adds	r3, #9
 800499e:	0018      	movs	r0, r3
 80049a0:	f000 fde0 	bl	8005564 <os_getDevEui>
    os_wlsbf2(d + OFF_JR_DEVNONCE, LMIC.devNonce);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	3311      	adds	r3, #17
 80049a8:	001a      	movs	r2, r3
 80049aa:	4b0f      	ldr	r3, [pc, #60]	; (80049e8 <buildJoinRequest+0x70>)
 80049ac:	21f2      	movs	r1, #242	; 0xf2
 80049ae:	5a5b      	ldrh	r3, [r3, r1]
 80049b0:	0019      	movs	r1, r3
 80049b2:	0010      	movs	r0, r2
 80049b4:	f7fd fbee 	bl	8002194 <os_wlsbf2>
    aes_appendMic0(d, OFF_JR_MIC);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2113      	movs	r1, #19
 80049bc:	0018      	movs	r0, r3
 80049be:	f7fd fd25 	bl	800240c <aes_appendMic0>
                      e_.oldaddr = LMIC.devaddr,
                      e_.mic     = Base::lsbf4(&d[LORA::OFF_JR_MIC]),
                      e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                    ? EV::joininfo_t::REJOIN_REQUEST
                                    : EV::joininfo_t::REQUEST)));
    LMIC.dataLen = LEN_JR;
 80049c2:	4a09      	ldr	r2, [pc, #36]	; (80049e8 <buildJoinRequest+0x70>)
 80049c4:	2348      	movs	r3, #72	; 0x48
 80049c6:	33ff      	adds	r3, #255	; 0xff
 80049c8:	2117      	movs	r1, #23
 80049ca:	54d1      	strb	r1, [r2, r3]
    LMIC.devNonce++;
 80049cc:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <buildJoinRequest+0x70>)
 80049ce:	22f2      	movs	r2, #242	; 0xf2
 80049d0:	5a9b      	ldrh	r3, [r3, r2]
 80049d2:	3301      	adds	r3, #1
 80049d4:	b299      	uxth	r1, r3
 80049d6:	4b04      	ldr	r3, [pc, #16]	; (80049e8 <buildJoinRequest+0x70>)
 80049d8:	22f2      	movs	r2, #242	; 0xf2
 80049da:	5299      	strh	r1, [r3, r2]
    DO_DEVDB(LMIC.devNonce,devNonce);
}
 80049dc:	46c0      	nop			; (mov r8, r8)
 80049de:	46bd      	mov	sp, r7
 80049e0:	b004      	add	sp, #16
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	200003c8 	.word	0x200003c8
 80049e8:	20000280 	.word	0x20000280

080049ec <startJoining>:

static void startJoining (xref2osjob_t osjob) {
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
    reportEvent(EV_JOINING);
 80049f4:	2005      	movs	r0, #5
 80049f6:	f7fe fcc3 	bl	8003380 <reportEvent>
}
 80049fa:	46c0      	nop			; (mov r8, r8)
 80049fc:	46bd      	mov	sp, r7
 80049fe:	b002      	add	sp, #8
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <LMIC_startJoining>:

// Start join procedure if not already joined.
bit_t LMIC_startJoining (void) {
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
    if( LMIC.devaddr == 0 ) {
 8004a08:	4a22      	ldr	r2, [pc, #136]	; (8004a94 <LMIC_startJoining+0x90>)
 8004a0a:	238a      	movs	r3, #138	; 0x8a
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	58d3      	ldr	r3, [r2, r3]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d13a      	bne.n	8004a8a <LMIC_startJoining+0x86>
        // There should be no TX/RX going on
        ASSERT((LMIC.opmode & (OP_POLL|OP_TXRXPEND)) == 0);
 8004a14:	4b1f      	ldr	r3, [pc, #124]	; (8004a94 <LMIC_startJoining+0x90>)
 8004a16:	22ac      	movs	r2, #172	; 0xac
 8004a18:	5a9b      	ldrh	r3, [r3, r2]
 8004a1a:	001a      	movs	r2, r3
 8004a1c:	2390      	movs	r3, #144	; 0x90
 8004a1e:	4013      	ands	r3, r2
 8004a20:	d001      	beq.n	8004a26 <LMIC_startJoining+0x22>
 8004a22:	f7fd f927 	bl	8001c74 <hal_failed>
        // Lift any previous duty limitation
        LMIC.globalDutyRate = 0;
 8004a26:	4b1b      	ldr	r3, [pc, #108]	; (8004a94 <LMIC_startJoining+0x90>)
 8004a28:	22a3      	movs	r2, #163	; 0xa3
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	5499      	strb	r1, [r3, r2]
        // Cancel scanning
        LMIC.opmode &= ~(OP_SCAN|OP_REJOIN|OP_LINKDEAD|OP_NEXTCHNL);
 8004a2e:	4b19      	ldr	r3, [pc, #100]	; (8004a94 <LMIC_startJoining+0x90>)
 8004a30:	22ac      	movs	r2, #172	; 0xac
 8004a32:	5a9b      	ldrh	r3, [r3, r2]
 8004a34:	4a18      	ldr	r2, [pc, #96]	; (8004a98 <LMIC_startJoining+0x94>)
 8004a36:	4013      	ands	r3, r2
 8004a38:	b299      	uxth	r1, r3
 8004a3a:	4b16      	ldr	r3, [pc, #88]	; (8004a94 <LMIC_startJoining+0x90>)
 8004a3c:	22ac      	movs	r2, #172	; 0xac
 8004a3e:	5299      	strh	r1, [r3, r2]
        // Setup state
        LMIC.rejoinCnt = LMIC.txCnt = LMIC.pendTxConf = 0;
 8004a40:	4b14      	ldr	r3, [pc, #80]	; (8004a94 <LMIC_startJoining+0x90>)
 8004a42:	22bb      	movs	r2, #187	; 0xbb
 8004a44:	2100      	movs	r1, #0
 8004a46:	5499      	strb	r1, [r3, r2]
 8004a48:	4b12      	ldr	r3, [pc, #72]	; (8004a94 <LMIC_startJoining+0x90>)
 8004a4a:	22bb      	movs	r2, #187	; 0xbb
 8004a4c:	5c99      	ldrb	r1, [r3, r2]
 8004a4e:	4a11      	ldr	r2, [pc, #68]	; (8004a94 <LMIC_startJoining+0x90>)
 8004a50:	23a2      	movs	r3, #162	; 0xa2
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	54d1      	strb	r1, [r2, r3]
 8004a56:	4a0f      	ldr	r2, [pc, #60]	; (8004a94 <LMIC_startJoining+0x90>)
 8004a58:	23a2      	movs	r3, #162	; 0xa2
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	5cd1      	ldrb	r1, [r2, r3]
 8004a5e:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <LMIC_startJoining+0x90>)
 8004a60:	22b2      	movs	r2, #178	; 0xb2
 8004a62:	5499      	strb	r1, [r3, r2]
        initJoinLoop();
 8004a64:	f7fe fbe0 	bl	8003228 <initJoinLoop>
        LMIC.opmode |= OP_JOINING;
 8004a68:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <LMIC_startJoining+0x90>)
 8004a6a:	22ac      	movs	r2, #172	; 0xac
 8004a6c:	5a9b      	ldrh	r3, [r3, r2]
 8004a6e:	2204      	movs	r2, #4
 8004a70:	4313      	orrs	r3, r2
 8004a72:	b299      	uxth	r1, r3
 8004a74:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <LMIC_startJoining+0x90>)
 8004a76:	22ac      	movs	r2, #172	; 0xac
 8004a78:	5299      	strh	r1, [r3, r2]
        // reportEvent will call engineUpdate which then starts sending JOIN REQUESTS
        os_setCallback(&LMIC.osjob, FUNC_ADDR(startJoining));
 8004a7a:	4a08      	ldr	r2, [pc, #32]	; (8004a9c <LMIC_startJoining+0x98>)
 8004a7c:	4b08      	ldr	r3, [pc, #32]	; (8004aa0 <LMIC_startJoining+0x9c>)
 8004a7e:	0011      	movs	r1, r2
 8004a80:	0018      	movs	r0, r3
 8004a82:	f001 fa1f 	bl	8005ec4 <os_setCallback>
        return 1;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <LMIC_startJoining+0x88>
    }
    return 0; // already joined
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	46c0      	nop			; (mov r8, r8)
 8004a94:	20000280 	.word	0x20000280
 8004a98:	ffffe7de 	.word	0xffffe7de
 8004a9c:	080049ed 	.word	0x080049ed
 8004aa0:	20000294 	.word	0x20000294

08004aa4 <processPingRx>:
//
//
//
// ================================================================================

static void processPingRx (xref2osjob_t osjob) {
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen != 0 ) {
 8004aac:	4a0b      	ldr	r2, [pc, #44]	; (8004adc <processPingRx+0x38>)
 8004aae:	2348      	movs	r3, #72	; 0x48
 8004ab0:	33ff      	adds	r3, #255	; 0xff
 8004ab2:	5cd3      	ldrb	r3, [r2, r3]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00c      	beq.n	8004ad2 <processPingRx+0x2e>
        LMIC.txrxFlags = TXRX_PING;
 8004ab8:	4a08      	ldr	r2, [pc, #32]	; (8004adc <processPingRx+0x38>)
 8004aba:	2346      	movs	r3, #70	; 0x46
 8004abc:	33ff      	adds	r3, #255	; 0xff
 8004abe:	2104      	movs	r1, #4
 8004ac0:	54d1      	strb	r1, [r2, r3]
        if( decodeFrame() ) {
 8004ac2:	f7fe fd9f 	bl	8003604 <decodeFrame>
 8004ac6:	1e03      	subs	r3, r0, #0
 8004ac8:	d003      	beq.n	8004ad2 <processPingRx+0x2e>
            reportEvent(EV_RXCOMPLETE);
 8004aca:	200d      	movs	r0, #13
 8004acc:	f7fe fc58 	bl	8003380 <reportEvent>
            return;
 8004ad0:	e001      	b.n	8004ad6 <processPingRx+0x32>
        }
    }
    // Pick next ping slot
    engineUpdate();
 8004ad2:	f000 fa83 	bl	8004fdc <engineUpdate>
}
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	b002      	add	sp, #8
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	20000280 	.word	0x20000280

08004ae0 <processDnData>:


static bit_t processDnData (void) {
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 8004ae4:	4b83      	ldr	r3, [pc, #524]	; (8004cf4 <processDnData+0x214>)
 8004ae6:	22ac      	movs	r2, #172	; 0xac
 8004ae8:	5a9b      	ldrh	r3, [r3, r2]
 8004aea:	001a      	movs	r2, r3
 8004aec:	2380      	movs	r3, #128	; 0x80
 8004aee:	4013      	ands	r3, r2
 8004af0:	d101      	bne.n	8004af6 <processDnData+0x16>
 8004af2:	f7fd f8bf 	bl	8001c74 <hal_failed>

    if( LMIC.dataLen == 0 ) {
 8004af6:	4a7f      	ldr	r2, [pc, #508]	; (8004cf4 <processDnData+0x214>)
 8004af8:	2348      	movs	r3, #72	; 0x48
 8004afa:	33ff      	adds	r3, #255	; 0xff
 8004afc:	5cd3      	ldrb	r3, [r2, r3]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d000      	beq.n	8004b04 <processDnData+0x24>
 8004b02:	e0e4      	b.n	8004cce <processDnData+0x1ee>
      norx:
 8004b04:	46c0      	nop			; (mov r8, r8)
 8004b06:	e000      	b.n	8004b0a <processDnData+0x2a>
        return 1;
    }
    if( !decodeFrame() ) {
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto norx;
 8004b08:	46c0      	nop			; (mov r8, r8)
        if( LMIC.txCnt != 0 ) {
 8004b0a:	4a7a      	ldr	r2, [pc, #488]	; (8004cf4 <processDnData+0x214>)
 8004b0c:	23a2      	movs	r3, #162	; 0xa2
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	5cd3      	ldrb	r3, [r2, r3]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d03d      	beq.n	8004b92 <processDnData+0xb2>
            if( LMIC.txCnt < TXCONF_ATTEMPTS ) {
 8004b16:	4a77      	ldr	r2, [pc, #476]	; (8004cf4 <processDnData+0x214>)
 8004b18:	23a2      	movs	r3, #162	; 0xa2
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	5cd3      	ldrb	r3, [r2, r3]
 8004b1e:	2b07      	cmp	r3, #7
 8004b20:	d831      	bhi.n	8004b86 <processDnData+0xa6>
                LMIC.txCnt += 1;
 8004b22:	4a74      	ldr	r2, [pc, #464]	; (8004cf4 <processDnData+0x214>)
 8004b24:	23a2      	movs	r3, #162	; 0xa2
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	5cd3      	ldrb	r3, [r2, r3]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	b2d9      	uxtb	r1, r3
 8004b2e:	4a71      	ldr	r2, [pc, #452]	; (8004cf4 <processDnData+0x214>)
 8004b30:	23a2      	movs	r3, #162	; 0xa2
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	54d1      	strb	r1, [r2, r3]
                setDrTxpow(DRCHG_NOACK, lowerDR(LMIC.datarate, DRADJUST[LMIC.txCnt]), KEEP_TXPOW);
 8004b36:	4b6f      	ldr	r3, [pc, #444]	; (8004cf4 <processDnData+0x214>)
 8004b38:	22b0      	movs	r2, #176	; 0xb0
 8004b3a:	5c98      	ldrb	r0, [r3, r2]
 8004b3c:	4a6d      	ldr	r2, [pc, #436]	; (8004cf4 <processDnData+0x214>)
 8004b3e:	23a2      	movs	r3, #162	; 0xa2
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	5cd3      	ldrb	r3, [r2, r3]
 8004b44:	001a      	movs	r2, r3
 8004b46:	4b6c      	ldr	r3, [pc, #432]	; (8004cf8 <processDnData+0x218>)
 8004b48:	5c9b      	ldrb	r3, [r3, r2]
 8004b4a:	0019      	movs	r1, r3
 8004b4c:	f7fd faba 	bl	80020c4 <lowerDR>
 8004b50:	0003      	movs	r3, r0
 8004b52:	0019      	movs	r1, r3
 8004b54:	2380      	movs	r3, #128	; 0x80
 8004b56:	425b      	negs	r3, r3
 8004b58:	001a      	movs	r2, r3
 8004b5a:	2002      	movs	r0, #2
 8004b5c:	f7fe f848 	bl	8002bf0 <setDrTxpow>
                txDelay(LMIC.rxtime, RETRY_PERIOD_secs);
 8004b60:	4b64      	ldr	r3, [pc, #400]	; (8004cf4 <processDnData+0x214>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	2103      	movs	r1, #3
 8004b66:	0018      	movs	r0, r3
 8004b68:	f7fd fffe 	bl	8002b68 <txDelay>
                LMIC.opmode &= ~OP_TXRXPEND;
 8004b6c:	4b61      	ldr	r3, [pc, #388]	; (8004cf4 <processDnData+0x214>)
 8004b6e:	22ac      	movs	r2, #172	; 0xac
 8004b70:	5a9b      	ldrh	r3, [r3, r2]
 8004b72:	2280      	movs	r2, #128	; 0x80
 8004b74:	4393      	bics	r3, r2
 8004b76:	b299      	uxth	r1, r3
 8004b78:	4b5e      	ldr	r3, [pc, #376]	; (8004cf4 <processDnData+0x214>)
 8004b7a:	22ac      	movs	r2, #172	; 0xac
 8004b7c:	5299      	strh	r1, [r3, r2]
                engineUpdate();
 8004b7e:	f000 fa2d 	bl	8004fdc <engineUpdate>
                return 1;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e0b2      	b.n	8004cec <processDnData+0x20c>
            LMIC.txrxFlags = TXRX_NACK | TXRX_NOPORT;
 8004b86:	4a5b      	ldr	r2, [pc, #364]	; (8004cf4 <processDnData+0x214>)
 8004b88:	2346      	movs	r3, #70	; 0x46
 8004b8a:	33ff      	adds	r3, #255	; 0xff
 8004b8c:	2160      	movs	r1, #96	; 0x60
 8004b8e:	54d1      	strb	r1, [r2, r3]
 8004b90:	e004      	b.n	8004b9c <processDnData+0xbc>
            LMIC.txrxFlags = TXRX_NOPORT;
 8004b92:	4a58      	ldr	r2, [pc, #352]	; (8004cf4 <processDnData+0x214>)
 8004b94:	2346      	movs	r3, #70	; 0x46
 8004b96:	33ff      	adds	r3, #255	; 0xff
 8004b98:	2120      	movs	r1, #32
 8004b9a:	54d1      	strb	r1, [r2, r3]
        if( LMIC.adrAckReq != LINK_CHECK_OFF )
 8004b9c:	4a55      	ldr	r2, [pc, #340]	; (8004cf4 <processDnData+0x214>)
 8004b9e:	2322      	movs	r3, #34	; 0x22
 8004ba0:	33ff      	adds	r3, #255	; 0xff
 8004ba2:	56d3      	ldrsb	r3, [r2, r3]
 8004ba4:	3380      	adds	r3, #128	; 0x80
 8004ba6:	d00b      	beq.n	8004bc0 <processDnData+0xe0>
            LMIC.adrAckReq += 1;
 8004ba8:	4a52      	ldr	r2, [pc, #328]	; (8004cf4 <processDnData+0x214>)
 8004baa:	2322      	movs	r3, #34	; 0x22
 8004bac:	33ff      	adds	r3, #255	; 0xff
 8004bae:	56d3      	ldrsb	r3, [r2, r3]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	b259      	sxtb	r1, r3
 8004bb8:	4a4e      	ldr	r2, [pc, #312]	; (8004cf4 <processDnData+0x214>)
 8004bba:	2322      	movs	r3, #34	; 0x22
 8004bbc:	33ff      	adds	r3, #255	; 0xff
 8004bbe:	54d1      	strb	r1, [r2, r3]
        LMIC.dataBeg = LMIC.dataLen = 0;
 8004bc0:	4a4c      	ldr	r2, [pc, #304]	; (8004cf4 <processDnData+0x214>)
 8004bc2:	2348      	movs	r3, #72	; 0x48
 8004bc4:	33ff      	adds	r3, #255	; 0xff
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	54d1      	strb	r1, [r2, r3]
 8004bca:	4a4a      	ldr	r2, [pc, #296]	; (8004cf4 <processDnData+0x214>)
 8004bcc:	2348      	movs	r3, #72	; 0x48
 8004bce:	33ff      	adds	r3, #255	; 0xff
 8004bd0:	5cd1      	ldrb	r1, [r2, r3]
 8004bd2:	4a48      	ldr	r2, [pc, #288]	; (8004cf4 <processDnData+0x214>)
 8004bd4:	23a3      	movs	r3, #163	; 0xa3
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	54d1      	strb	r1, [r2, r3]
 8004bda:	e000      	b.n	8004bde <processDnData+0xfe>
    }
    goto txcomplete;
 8004bdc:	46c0      	nop			; (mov r8, r8)
        LMIC.opmode &= ~(OP_TXDATA|OP_TXRXPEND);
 8004bde:	4b45      	ldr	r3, [pc, #276]	; (8004cf4 <processDnData+0x214>)
 8004be0:	22ac      	movs	r2, #172	; 0xac
 8004be2:	5a9b      	ldrh	r3, [r3, r2]
 8004be4:	2288      	movs	r2, #136	; 0x88
 8004be6:	4393      	bics	r3, r2
 8004be8:	b299      	uxth	r1, r3
 8004bea:	4b42      	ldr	r3, [pc, #264]	; (8004cf4 <processDnData+0x214>)
 8004bec:	22ac      	movs	r2, #172	; 0xac
 8004bee:	5299      	strh	r1, [r3, r2]
        if( (LMIC.txrxFlags & (TXRX_DNW1|TXRX_DNW2|TXRX_PING)) != 0  &&  (LMIC.opmode & OP_LINKDEAD) != 0 ) {
 8004bf0:	4a40      	ldr	r2, [pc, #256]	; (8004cf4 <processDnData+0x214>)
 8004bf2:	2346      	movs	r3, #70	; 0x46
 8004bf4:	33ff      	adds	r3, #255	; 0xff
 8004bf6:	5cd3      	ldrb	r3, [r2, r3]
 8004bf8:	001a      	movs	r2, r3
 8004bfa:	2307      	movs	r3, #7
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d013      	beq.n	8004c28 <processDnData+0x148>
 8004c00:	4b3c      	ldr	r3, [pc, #240]	; (8004cf4 <processDnData+0x214>)
 8004c02:	22ac      	movs	r2, #172	; 0xac
 8004c04:	5a9b      	ldrh	r3, [r3, r2]
 8004c06:	001a      	movs	r2, r3
 8004c08:	2380      	movs	r3, #128	; 0x80
 8004c0a:	015b      	lsls	r3, r3, #5
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	d00b      	beq.n	8004c28 <processDnData+0x148>
            LMIC.opmode &= ~OP_LINKDEAD;
 8004c10:	4b38      	ldr	r3, [pc, #224]	; (8004cf4 <processDnData+0x214>)
 8004c12:	22ac      	movs	r2, #172	; 0xac
 8004c14:	5a9b      	ldrh	r3, [r3, r2]
 8004c16:	4a39      	ldr	r2, [pc, #228]	; (8004cfc <processDnData+0x21c>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	b299      	uxth	r1, r3
 8004c1c:	4b35      	ldr	r3, [pc, #212]	; (8004cf4 <processDnData+0x214>)
 8004c1e:	22ac      	movs	r2, #172	; 0xac
 8004c20:	5299      	strh	r1, [r3, r2]
            reportEvent(EV_LINK_ALIVE);
 8004c22:	200f      	movs	r0, #15
 8004c24:	f7fe fbac 	bl	8003380 <reportEvent>
        reportEvent(EV_TXCOMPLETE);
 8004c28:	200a      	movs	r0, #10
 8004c2a:	f7fe fba9 	bl	8003380 <reportEvent>
        if( LMIC.adrAckReq > LINK_CHECK_DEAD ) {
 8004c2e:	4a31      	ldr	r2, [pc, #196]	; (8004cf4 <processDnData+0x214>)
 8004c30:	2322      	movs	r3, #34	; 0x22
 8004c32:	33ff      	adds	r3, #255	; 0xff
 8004c34:	56d3      	ldrsb	r3, [r2, r3]
 8004c36:	2b18      	cmp	r3, #24
 8004c38:	dd1f      	ble.n	8004c7a <processDnData+0x19a>
            setDrTxpow(DRCHG_NOADRACK, decDR((dr_t)LMIC.datarate), KEEP_TXPOW);
 8004c3a:	4b2e      	ldr	r3, [pc, #184]	; (8004cf4 <processDnData+0x214>)
 8004c3c:	22b0      	movs	r2, #176	; 0xb0
 8004c3e:	5c9b      	ldrb	r3, [r3, r2]
 8004c40:	0018      	movs	r0, r3
 8004c42:	f7fd fa0f 	bl	8002064 <decDR>
 8004c46:	0003      	movs	r3, r0
 8004c48:	0019      	movs	r1, r3
 8004c4a:	2380      	movs	r3, #128	; 0x80
 8004c4c:	425b      	negs	r3, r3
 8004c4e:	001a      	movs	r2, r3
 8004c50:	2003      	movs	r0, #3
 8004c52:	f7fd ffcd 	bl	8002bf0 <setDrTxpow>
            LMIC.adrAckReq = LINK_CHECK_CONT;
 8004c56:	4a27      	ldr	r2, [pc, #156]	; (8004cf4 <processDnData+0x214>)
 8004c58:	2322      	movs	r3, #34	; 0x22
 8004c5a:	33ff      	adds	r3, #255	; 0xff
 8004c5c:	210c      	movs	r1, #12
 8004c5e:	54d1      	strb	r1, [r2, r3]
            LMIC.opmode |= OP_REJOIN|OP_LINKDEAD;
 8004c60:	4b24      	ldr	r3, [pc, #144]	; (8004cf4 <processDnData+0x214>)
 8004c62:	22ac      	movs	r2, #172	; 0xac
 8004c64:	5a9b      	ldrh	r3, [r3, r2]
 8004c66:	2281      	movs	r2, #129	; 0x81
 8004c68:	0152      	lsls	r2, r2, #5
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	b299      	uxth	r1, r3
 8004c6e:	4b21      	ldr	r3, [pc, #132]	; (8004cf4 <processDnData+0x214>)
 8004c70:	22ac      	movs	r2, #172	; 0xac
 8004c72:	5299      	strh	r1, [r3, r2]
            reportEvent(EV_LINK_DEAD);
 8004c74:	200e      	movs	r0, #14
 8004c76:	f7fe fb83 	bl	8003380 <reportEvent>
        if( LMIC.bcninfoTries > 0 ) {
 8004c7a:	4a1e      	ldr	r2, [pc, #120]	; (8004cf4 <processDnData+0x214>)
 8004c7c:	2399      	movs	r3, #153	; 0x99
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	5cd3      	ldrb	r3, [r2, r3]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d021      	beq.n	8004cca <processDnData+0x1ea>
            if( (LMIC.opmode & OP_TRACK) != 0 ) {
 8004c86:	4b1b      	ldr	r3, [pc, #108]	; (8004cf4 <processDnData+0x214>)
 8004c88:	22ac      	movs	r2, #172	; 0xac
 8004c8a:	5a9b      	ldrh	r3, [r3, r2]
 8004c8c:	001a      	movs	r2, r3
 8004c8e:	2302      	movs	r3, #2
 8004c90:	4013      	ands	r3, r2
 8004c92:	d008      	beq.n	8004ca6 <processDnData+0x1c6>
                reportEvent(EV_BEACON_FOUND);
 8004c94:	2002      	movs	r0, #2
 8004c96:	f7fe fb73 	bl	8003380 <reportEvent>
                LMIC.bcninfoTries = 0;
 8004c9a:	4a16      	ldr	r2, [pc, #88]	; (8004cf4 <processDnData+0x214>)
 8004c9c:	2399      	movs	r3, #153	; 0x99
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	54d1      	strb	r1, [r2, r3]
 8004ca4:	e011      	b.n	8004cca <processDnData+0x1ea>
            else if( --LMIC.bcninfoTries == 0 ) {
 8004ca6:	4a13      	ldr	r2, [pc, #76]	; (8004cf4 <processDnData+0x214>)
 8004ca8:	2399      	movs	r3, #153	; 0x99
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	5cd3      	ldrb	r3, [r2, r3]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	b2d9      	uxtb	r1, r3
 8004cb2:	4a10      	ldr	r2, [pc, #64]	; (8004cf4 <processDnData+0x214>)
 8004cb4:	2399      	movs	r3, #153	; 0x99
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	54d1      	strb	r1, [r2, r3]
 8004cba:	4a0e      	ldr	r2, [pc, #56]	; (8004cf4 <processDnData+0x214>)
 8004cbc:	2399      	movs	r3, #153	; 0x99
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	5cd3      	ldrb	r3, [r2, r3]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <processDnData+0x1ea>
                startScan();   // NWK did not answer - try scan
 8004cc6:	f7ff fdf7 	bl	80048b8 <startScan>
        return 1;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e00e      	b.n	8004cec <processDnData+0x20c>
    if( !decodeFrame() ) {
 8004cce:	f7fe fc99 	bl	8003604 <decodeFrame>
 8004cd2:	1e03      	subs	r3, r0, #0
 8004cd4:	d000      	beq.n	8004cd8 <processDnData+0x1f8>
 8004cd6:	e781      	b.n	8004bdc <processDnData+0xfc>
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 8004cd8:	4a06      	ldr	r2, [pc, #24]	; (8004cf4 <processDnData+0x214>)
 8004cda:	2346      	movs	r3, #70	; 0x46
 8004cdc:	33ff      	adds	r3, #255	; 0xff
 8004cde:	5cd3      	ldrb	r3, [r2, r3]
 8004ce0:	001a      	movs	r2, r3
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	d100      	bne.n	8004cea <processDnData+0x20a>
 8004ce8:	e70e      	b.n	8004b08 <processDnData+0x28>
            return 0;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	0018      	movs	r0, r3
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	46c0      	nop			; (mov r8, r8)
 8004cf4:	20000280 	.word	0x20000280
 8004cf8:	0800df50 	.word	0x0800df50
 8004cfc:	ffffefff 	.word	0xffffefff

08004d00 <processBeacon>:


static void processBeacon (xref2osjob_t osjob) {
 8004d00:	b5b0      	push	{r4, r5, r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
    ostime_t lasttx = LMIC.bcninfo.txtime;   // save here - decodeBeacon might overwrite
 8004d08:	4a9d      	ldr	r2, [pc, #628]	; (8004f80 <processBeacon+0x280>)
 8004d0a:	23c8      	movs	r3, #200	; 0xc8
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	58d3      	ldr	r3, [r2, r3]
 8004d10:	60fb      	str	r3, [r7, #12]
    u1_t flags = LMIC.bcninfo.flags;
 8004d12:	240b      	movs	r4, #11
 8004d14:	193b      	adds	r3, r7, r4
 8004d16:	499a      	ldr	r1, [pc, #616]	; (8004f80 <processBeacon+0x280>)
 8004d18:	22cb      	movs	r2, #203	; 0xcb
 8004d1a:	0052      	lsls	r2, r2, #1
 8004d1c:	5c8a      	ldrb	r2, [r1, r2]
 8004d1e:	701a      	strb	r2, [r3, #0]
    ev_t ev;

    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8004d20:	4a97      	ldr	r2, [pc, #604]	; (8004f80 <processBeacon+0x280>)
 8004d22:	2348      	movs	r3, #72	; 0x48
 8004d24:	33ff      	adds	r3, #255	; 0xff
 8004d26:	5cd3      	ldrb	r3, [r2, r3]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d100      	bne.n	8004d2e <processBeacon+0x2e>
 8004d2c:	e0a5      	b.n	8004e7a <processBeacon+0x17a>
 8004d2e:	f7fe fbc3 	bl	80034b8 <decodeBeacon>
 8004d32:	1e03      	subs	r3, r0, #0
 8004d34:	dc00      	bgt.n	8004d38 <processBeacon+0x38>
 8004d36:	e0a0      	b.n	8004e7a <processBeacon+0x17a>
        ev = EV_BEACON_TRACKED;
 8004d38:	2317      	movs	r3, #23
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	2204      	movs	r2, #4
 8004d3e:	701a      	strb	r2, [r3, #0]
        if( (flags & (BCN_PARTIAL|BCN_FULL)) == 0 ) {
 8004d40:	193b      	adds	r3, r7, r4
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2203      	movs	r2, #3
 8004d46:	4013      	ands	r3, r2
 8004d48:	d104      	bne.n	8004d54 <processBeacon+0x54>
            // We don't have a previous beacon to calc some drift - assume
            // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
            calcBcnRxWindowFromMillis(13,0);
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	200d      	movs	r0, #13
 8004d4e:	f7fd fd81 	bl	8002854 <calcBcnRxWindowFromMillis>
            goto rev;
 8004d52:	e0ff      	b.n	8004f54 <processBeacon+0x254>
        }
        // We have a previous BEACON to calculate some drift
        s2_t drift = BCN_INTV_osticks - (LMIC.bcninfo.txtime - lasttx);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	4989      	ldr	r1, [pc, #548]	; (8004f80 <processBeacon+0x280>)
 8004d5a:	23c8      	movs	r3, #200	; 0xc8
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	58cb      	ldr	r3, [r1, r3]
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	4a87      	ldr	r2, [pc, #540]	; (8004f84 <processBeacon+0x284>)
 8004d68:	4694      	mov	ip, r2
 8004d6a:	4463      	add	r3, ip
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	2514      	movs	r5, #20
 8004d70:	197b      	adds	r3, r7, r5
 8004d72:	801a      	strh	r2, [r3, #0]
        if( LMIC.missedBcns > 0 ) {
 8004d74:	4a82      	ldr	r2, [pc, #520]	; (8004f80 <processBeacon+0x280>)
 8004d76:	2332      	movs	r3, #50	; 0x32
 8004d78:	33ff      	adds	r3, #255	; 0xff
 8004d7a:	5cd3      	ldrb	r3, [r2, r3]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d018      	beq.n	8004db2 <processBeacon+0xb2>
            drift = LMIC.drift + (drift - LMIC.drift) / (LMIC.missedBcns+1);
 8004d80:	4b7f      	ldr	r3, [pc, #508]	; (8004f80 <processBeacon+0x280>)
 8004d82:	22b4      	movs	r2, #180	; 0xb4
 8004d84:	5e9b      	ldrsh	r3, [r3, r2]
 8004d86:	b29c      	uxth	r4, r3
 8004d88:	197b      	adds	r3, r7, r5
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	5e9b      	ldrsh	r3, [r3, r2]
 8004d8e:	4a7c      	ldr	r2, [pc, #496]	; (8004f80 <processBeacon+0x280>)
 8004d90:	21b4      	movs	r1, #180	; 0xb4
 8004d92:	5e52      	ldrsh	r2, [r2, r1]
 8004d94:	1a98      	subs	r0, r3, r2
 8004d96:	4a7a      	ldr	r2, [pc, #488]	; (8004f80 <processBeacon+0x280>)
 8004d98:	2332      	movs	r3, #50	; 0x32
 8004d9a:	33ff      	adds	r3, #255	; 0xff
 8004d9c:	5cd3      	ldrb	r3, [r2, r3]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	0019      	movs	r1, r3
 8004da2:	f7fb fa3b 	bl	800021c <__divsi3>
 8004da6:	0003      	movs	r3, r0
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	18e3      	adds	r3, r4, r3
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	197b      	adds	r3, r7, r5
 8004db0:	801a      	strh	r2, [r3, #0]
        }
        if( (LMIC.bcninfo.flags & BCN_NODRIFT) == 0 ) {
 8004db2:	4a73      	ldr	r2, [pc, #460]	; (8004f80 <processBeacon+0x280>)
 8004db4:	23cb      	movs	r3, #203	; 0xcb
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	5cd3      	ldrb	r3, [r2, r3]
 8004dba:	001a      	movs	r2, r3
 8004dbc:	2304      	movs	r3, #4
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	d134      	bne.n	8004e2c <processBeacon+0x12c>
            s2_t diff = LMIC.drift - drift;
 8004dc2:	4b6f      	ldr	r3, [pc, #444]	; (8004f80 <processBeacon+0x280>)
 8004dc4:	22b4      	movs	r2, #180	; 0xb4
 8004dc6:	5e9b      	ldrsh	r3, [r3, r2]
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	2314      	movs	r3, #20
 8004dcc:	18fb      	adds	r3, r7, r3
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	2112      	movs	r1, #18
 8004dd6:	187b      	adds	r3, r7, r1
 8004dd8:	801a      	strh	r2, [r3, #0]
            if( diff < 0 ) diff = -diff;
 8004dda:	187b      	adds	r3, r7, r1
 8004ddc:	2200      	movs	r2, #0
 8004dde:	5e9b      	ldrsh	r3, [r3, r2]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	da05      	bge.n	8004df0 <processBeacon+0xf0>
 8004de4:	187b      	adds	r3, r7, r1
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	425b      	negs	r3, r3
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	187b      	adds	r3, r7, r1
 8004dee:	801a      	strh	r2, [r3, #0]
            LMIC.lastDriftDiff = diff;
 8004df0:	4b63      	ldr	r3, [pc, #396]	; (8004f80 <processBeacon+0x280>)
 8004df2:	2012      	movs	r0, #18
 8004df4:	183a      	adds	r2, r7, r0
 8004df6:	21b6      	movs	r1, #182	; 0xb6
 8004df8:	8812      	ldrh	r2, [r2, #0]
 8004dfa:	525a      	strh	r2, [r3, r1]
            if( LMIC.maxDriftDiff < diff )
 8004dfc:	4b60      	ldr	r3, [pc, #384]	; (8004f80 <processBeacon+0x280>)
 8004dfe:	22b8      	movs	r2, #184	; 0xb8
 8004e00:	5e9b      	ldrsh	r3, [r3, r2]
 8004e02:	183a      	adds	r2, r7, r0
 8004e04:	2100      	movs	r1, #0
 8004e06:	5e52      	ldrsh	r2, [r2, r1]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	dd04      	ble.n	8004e16 <processBeacon+0x116>
                LMIC.maxDriftDiff = diff;
 8004e0c:	4b5c      	ldr	r3, [pc, #368]	; (8004f80 <processBeacon+0x280>)
 8004e0e:	183a      	adds	r2, r7, r0
 8004e10:	21b8      	movs	r1, #184	; 0xb8
 8004e12:	8812      	ldrh	r2, [r2, #0]
 8004e14:	525a      	strh	r2, [r3, r1]
            LMIC.bcninfo.flags &= ~BCN_NODDIFF;
 8004e16:	4a5a      	ldr	r2, [pc, #360]	; (8004f80 <processBeacon+0x280>)
 8004e18:	23cb      	movs	r3, #203	; 0xcb
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	5cd3      	ldrb	r3, [r2, r3]
 8004e1e:	2208      	movs	r2, #8
 8004e20:	4393      	bics	r3, r2
 8004e22:	b2d9      	uxtb	r1, r3
 8004e24:	4a56      	ldr	r2, [pc, #344]	; (8004f80 <processBeacon+0x280>)
 8004e26:	23cb      	movs	r3, #203	; 0xcb
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	54d1      	strb	r1, [r2, r3]
        }
        LMIC.drift = drift;
 8004e2c:	4b54      	ldr	r3, [pc, #336]	; (8004f80 <processBeacon+0x280>)
 8004e2e:	2214      	movs	r2, #20
 8004e30:	18ba      	adds	r2, r7, r2
 8004e32:	21b4      	movs	r1, #180	; 0xb4
 8004e34:	8812      	ldrh	r2, [r2, #0]
 8004e36:	525a      	strh	r2, [r3, r1]
        LMIC.missedBcns = LMIC.rejoinCnt = 0;
 8004e38:	4b51      	ldr	r3, [pc, #324]	; (8004f80 <processBeacon+0x280>)
 8004e3a:	22b2      	movs	r2, #178	; 0xb2
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	5499      	strb	r1, [r3, r2]
 8004e40:	4b4f      	ldr	r3, [pc, #316]	; (8004f80 <processBeacon+0x280>)
 8004e42:	22b2      	movs	r2, #178	; 0xb2
 8004e44:	5c99      	ldrb	r1, [r3, r2]
 8004e46:	4a4e      	ldr	r2, [pc, #312]	; (8004f80 <processBeacon+0x280>)
 8004e48:	2332      	movs	r3, #50	; 0x32
 8004e4a:	33ff      	adds	r3, #255	; 0xff
 8004e4c:	54d1      	strb	r1, [r2, r3]
        LMIC.bcninfo.flags &= ~BCN_NODRIFT;
 8004e4e:	4a4c      	ldr	r2, [pc, #304]	; (8004f80 <processBeacon+0x280>)
 8004e50:	23cb      	movs	r3, #203	; 0xcb
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	5cd3      	ldrb	r3, [r2, r3]
 8004e56:	2204      	movs	r2, #4
 8004e58:	4393      	bics	r3, r2
 8004e5a:	b2d9      	uxtb	r1, r3
 8004e5c:	4a48      	ldr	r2, [pc, #288]	; (8004f80 <processBeacon+0x280>)
 8004e5e:	23cb      	movs	r3, #203	; 0xcb
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	54d1      	strb	r1, [r2, r3]
        EV(devCond,INFO,(e_.reason = EV::devCond_t::CLOCK_DRIFT,
                         e_.eui    = MAIN::CDEV->getEui(),
                         e_.info   = drift,
                         e_.info2  = /*occasion BEACON*/0));
        ASSERT((LMIC.bcninfo.flags & (BCN_PARTIAL|BCN_FULL)) != 0);
 8004e64:	4a46      	ldr	r2, [pc, #280]	; (8004f80 <processBeacon+0x280>)
 8004e66:	23cb      	movs	r3, #203	; 0xcb
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	5cd3      	ldrb	r3, [r2, r3]
 8004e6c:	001a      	movs	r2, r3
 8004e6e:	2303      	movs	r3, #3
 8004e70:	4013      	ands	r3, r2
 8004e72:	d157      	bne.n	8004f24 <processBeacon+0x224>
 8004e74:	f7fc fefe 	bl	8001c74 <hal_failed>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8004e78:	e054      	b.n	8004f24 <processBeacon+0x224>
    } else {
        ev = EV_BEACON_MISSED;
 8004e7a:	2317      	movs	r3, #23
 8004e7c:	18fb      	adds	r3, r7, r3
 8004e7e:	2203      	movs	r2, #3
 8004e80:	701a      	strb	r2, [r3, #0]
        LMIC.bcninfo.txtime += BCN_INTV_osticks - LMIC.drift;
 8004e82:	4a3f      	ldr	r2, [pc, #252]	; (8004f80 <processBeacon+0x280>)
 8004e84:	23c8      	movs	r3, #200	; 0xc8
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	58d2      	ldr	r2, [r2, r3]
 8004e8a:	4b3d      	ldr	r3, [pc, #244]	; (8004f80 <processBeacon+0x280>)
 8004e8c:	21b4      	movs	r1, #180	; 0xb4
 8004e8e:	5e5b      	ldrsh	r3, [r3, r1]
 8004e90:	0019      	movs	r1, r3
 8004e92:	23fa      	movs	r3, #250	; 0xfa
 8004e94:	039b      	lsls	r3, r3, #14
 8004e96:	1a5b      	subs	r3, r3, r1
 8004e98:	18d1      	adds	r1, r2, r3
 8004e9a:	4a39      	ldr	r2, [pc, #228]	; (8004f80 <processBeacon+0x280>)
 8004e9c:	23c8      	movs	r3, #200	; 0xc8
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	50d1      	str	r1, [r2, r3]
        LMIC.bcninfo.time   += BCN_INTV_sec;
 8004ea2:	4a37      	ldr	r2, [pc, #220]	; (8004f80 <processBeacon+0x280>)
 8004ea4:	23cc      	movs	r3, #204	; 0xcc
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	58d3      	ldr	r3, [r2, r3]
 8004eaa:	3380      	adds	r3, #128	; 0x80
 8004eac:	0019      	movs	r1, r3
 8004eae:	4a34      	ldr	r2, [pc, #208]	; (8004f80 <processBeacon+0x280>)
 8004eb0:	23cc      	movs	r3, #204	; 0xcc
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	50d1      	str	r1, [r2, r3]
        LMIC.missedBcns++;
 8004eb6:	4a32      	ldr	r2, [pc, #200]	; (8004f80 <processBeacon+0x280>)
 8004eb8:	2332      	movs	r3, #50	; 0x32
 8004eba:	33ff      	adds	r3, #255	; 0xff
 8004ebc:	5cd3      	ldrb	r3, [r2, r3]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	b2d9      	uxtb	r1, r3
 8004ec2:	4a2f      	ldr	r2, [pc, #188]	; (8004f80 <processBeacon+0x280>)
 8004ec4:	2332      	movs	r3, #50	; 0x32
 8004ec6:	33ff      	adds	r3, #255	; 0xff
 8004ec8:	54d1      	strb	r1, [r2, r3]
        // Delay any possible TX after surmised beacon - it's there although we missed it
        txDelay(LMIC.bcninfo.txtime + BCN_RESERVE_osticks, 4);
 8004eca:	4a2d      	ldr	r2, [pc, #180]	; (8004f80 <processBeacon+0x280>)
 8004ecc:	23c8      	movs	r3, #200	; 0xc8
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	58d3      	ldr	r3, [r2, r3]
 8004ed2:	4a2d      	ldr	r2, [pc, #180]	; (8004f88 <processBeacon+0x288>)
 8004ed4:	4694      	mov	ip, r2
 8004ed6:	4463      	add	r3, ip
 8004ed8:	2104      	movs	r1, #4
 8004eda:	0018      	movs	r0, r3
 8004edc:	f7fd fe44 	bl	8002b68 <txDelay>
        if( LMIC.missedBcns > MAX_MISSED_BCNS )
 8004ee0:	4a27      	ldr	r2, [pc, #156]	; (8004f80 <processBeacon+0x280>)
 8004ee2:	2332      	movs	r3, #50	; 0x32
 8004ee4:	33ff      	adds	r3, #255	; 0xff
 8004ee6:	5cd3      	ldrb	r3, [r2, r3]
 8004ee8:	2b14      	cmp	r3, #20
 8004eea:	d908      	bls.n	8004efe <processBeacon+0x1fe>
            LMIC.opmode |= OP_REJOIN;  // try if we can roam to another network
 8004eec:	4b24      	ldr	r3, [pc, #144]	; (8004f80 <processBeacon+0x280>)
 8004eee:	22ac      	movs	r2, #172	; 0xac
 8004ef0:	5a9b      	ldrh	r3, [r3, r2]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	b299      	uxth	r1, r3
 8004ef8:	4b21      	ldr	r3, [pc, #132]	; (8004f80 <processBeacon+0x280>)
 8004efa:	22ac      	movs	r2, #172	; 0xac
 8004efc:	5299      	strh	r1, [r3, r2]
        if( LMIC.bcnRxsyms > MAX_RXSYMS ) {
 8004efe:	4a20      	ldr	r2, [pc, #128]	; (8004f80 <processBeacon+0x280>)
 8004f00:	238a      	movs	r3, #138	; 0x8a
 8004f02:	33ff      	adds	r3, #255	; 0xff
 8004f04:	5cd3      	ldrb	r3, [r2, r3]
 8004f06:	2b64      	cmp	r3, #100	; 0x64
 8004f08:	d90d      	bls.n	8004f26 <processBeacon+0x226>
            LMIC.opmode &= ~(OP_TRACK|OP_PINGABLE|OP_PINGINI|OP_REJOIN);
 8004f0a:	4b1d      	ldr	r3, [pc, #116]	; (8004f80 <processBeacon+0x280>)
 8004f0c:	22ac      	movs	r2, #172	; 0xac
 8004f0e:	5a9b      	ldrh	r3, [r3, r2]
 8004f10:	4a1e      	ldr	r2, [pc, #120]	; (8004f8c <processBeacon+0x28c>)
 8004f12:	4013      	ands	r3, r2
 8004f14:	b299      	uxth	r1, r3
 8004f16:	4b1a      	ldr	r3, [pc, #104]	; (8004f80 <processBeacon+0x280>)
 8004f18:	22ac      	movs	r2, #172	; 0xac
 8004f1a:	5299      	strh	r1, [r3, r2]
            reportEvent(EV_LOST_TSYNC);
 8004f1c:	200b      	movs	r0, #11
 8004f1e:	f7fe fa2f 	bl	8003380 <reportEvent>
            return;
 8004f22:	e029      	b.n	8004f78 <processBeacon+0x278>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8004f24:	46c0      	nop			; (mov r8, r8)
        }
    }
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - calcRxWindow(0,DR_BCN);
 8004f26:	4a16      	ldr	r2, [pc, #88]	; (8004f80 <processBeacon+0x280>)
 8004f28:	23c8      	movs	r3, #200	; 0xc8
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	58d3      	ldr	r3, [r2, r3]
 8004f2e:	22fa      	movs	r2, #250	; 0xfa
 8004f30:	0392      	lsls	r2, r2, #14
 8004f32:	189c      	adds	r4, r3, r2
 8004f34:	2103      	movs	r1, #3
 8004f36:	2000      	movs	r0, #0
 8004f38:	f7fd fc32 	bl	80027a0 <calcRxWindow>
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	1ae1      	subs	r1, r4, r3
 8004f40:	4a0f      	ldr	r2, [pc, #60]	; (8004f80 <processBeacon+0x280>)
 8004f42:	23c6      	movs	r3, #198	; 0xc6
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	50d1      	str	r1, [r2, r3]
    LMIC.bcnRxsyms = LMIC.rxsyms;    
 8004f48:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <processBeacon+0x280>)
 8004f4a:	7c19      	ldrb	r1, [r3, #16]
 8004f4c:	4a0c      	ldr	r2, [pc, #48]	; (8004f80 <processBeacon+0x280>)
 8004f4e:	238a      	movs	r3, #138	; 0x8a
 8004f50:	33ff      	adds	r3, #255	; 0xff
 8004f52:	54d1      	strb	r1, [r2, r3]
  rev:
#if CFG_us915
    LMIC.bcnChnl = (LMIC.bcnChnl+1) & 7;
#endif
    if( (LMIC.opmode & OP_PINGINI) != 0 )
 8004f54:	4b0a      	ldr	r3, [pc, #40]	; (8004f80 <processBeacon+0x280>)
 8004f56:	22ac      	movs	r2, #172	; 0xac
 8004f58:	5a9b      	ldrh	r3, [r3, r2]
 8004f5a:	001a      	movs	r2, r3
 8004f5c:	2380      	movs	r3, #128	; 0x80
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4013      	ands	r3, r2
 8004f62:	d003      	beq.n	8004f6c <processBeacon+0x26c>
        rxschedInit(&LMIC.ping);  // note: reuses LMIC.frame buffer!
 8004f64:	4b0a      	ldr	r3, [pc, #40]	; (8004f90 <processBeacon+0x290>)
 8004f66:	0018      	movs	r0, r3
 8004f68:	f7fd fce0 	bl	800292c <rxschedInit>
    reportEvent(ev);
 8004f6c:	2317      	movs	r3, #23
 8004f6e:	18fb      	adds	r3, r7, r3
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	0018      	movs	r0, r3
 8004f74:	f7fe fa04 	bl	8003380 <reportEvent>
}
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	b006      	add	sp, #24
 8004f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8004f7e:	46c0      	nop			; (mov r8, r8)
 8004f80:	20000280 	.word	0x20000280
 8004f84:	ffff8000 	.word	0xffff8000
 8004f88:	00010900 	.word	0x00010900
 8004f8c:	fffff9dd 	.word	0xfffff9dd
 8004f90:	200003b4 	.word	0x200003b4

08004f94 <startRxBcn>:


static void startRxBcn (xref2osjob_t osjob) {
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processBeacon);
 8004f9c:	4b04      	ldr	r3, [pc, #16]	; (8004fb0 <startRxBcn+0x1c>)
 8004f9e:	4a05      	ldr	r2, [pc, #20]	; (8004fb4 <startRxBcn+0x20>)
 8004fa0:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 8004fa2:	2002      	movs	r0, #2
 8004fa4:	f001 fdfc 	bl	8006ba0 <os_radio>
}
 8004fa8:	46c0      	nop			; (mov r8, r8)
 8004faa:	46bd      	mov	sp, r7
 8004fac:	b002      	add	sp, #8
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	20000280 	.word	0x20000280
 8004fb4:	08004d01 	.word	0x08004d01

08004fb8 <startRxPing>:


static void startRxPing (xref2osjob_t osjob) {
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processPingRx);
 8004fc0:	4b04      	ldr	r3, [pc, #16]	; (8004fd4 <startRxPing+0x1c>)
 8004fc2:	4a05      	ldr	r2, [pc, #20]	; (8004fd8 <startRxPing+0x20>)
 8004fc4:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 8004fc6:	2002      	movs	r0, #2
 8004fc8:	f001 fdea 	bl	8006ba0 <os_radio>
}
 8004fcc:	46c0      	nop			; (mov r8, r8)
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	b002      	add	sp, #8
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	20000280 	.word	0x20000280
 8004fd8:	08004aa5 	.word	0x08004aa5

08004fdc <engineUpdate>:


// Decide what to do next for the MAC layer of a device
static void engineUpdate (void) {
 8004fdc:	b590      	push	{r4, r7, lr}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
    // Check for ongoing state: scan or TX/RX transaction
    if( (LMIC.opmode & (OP_SCAN|OP_TXRXPEND|OP_SHUTDOWN)) != 0 ) 
 8004fe2:	4bc9      	ldr	r3, [pc, #804]	; (8005308 <engineUpdate+0x32c>)
 8004fe4:	22ac      	movs	r2, #172	; 0xac
 8004fe6:	5a9b      	ldrh	r3, [r3, r2]
 8004fe8:	001a      	movs	r2, r3
 8004fea:	23c1      	movs	r3, #193	; 0xc1
 8004fec:	4013      	ands	r3, r2
 8004fee:	d000      	beq.n	8004ff2 <engineUpdate+0x16>
 8004ff0:	e1d7      	b.n	80053a2 <engineUpdate+0x3c6>
        return;

    if( LMIC.devaddr == 0 && (LMIC.opmode & OP_JOINING) == 0 ) {
 8004ff2:	4ac5      	ldr	r2, [pc, #788]	; (8005308 <engineUpdate+0x32c>)
 8004ff4:	238a      	movs	r3, #138	; 0x8a
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	58d3      	ldr	r3, [r2, r3]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d109      	bne.n	8005012 <engineUpdate+0x36>
 8004ffe:	4bc2      	ldr	r3, [pc, #776]	; (8005308 <engineUpdate+0x32c>)
 8005000:	22ac      	movs	r2, #172	; 0xac
 8005002:	5a9b      	ldrh	r3, [r3, r2]
 8005004:	001a      	movs	r2, r3
 8005006:	2304      	movs	r3, #4
 8005008:	4013      	ands	r3, r2
 800500a:	d102      	bne.n	8005012 <engineUpdate+0x36>
        LMIC_startJoining();
 800500c:	f7ff fcfa 	bl	8004a04 <LMIC_startJoining>
        return;
 8005010:	e1ca      	b.n	80053a8 <engineUpdate+0x3cc>
    }

    ostime_t now    = os_getTime();
 8005012:	f000 ff11 	bl	8005e38 <os_getTime>
 8005016:	0003      	movs	r3, r0
 8005018:	60bb      	str	r3, [r7, #8]
    ostime_t rxtime = 0;
 800501a:	2300      	movs	r3, #0
 800501c:	617b      	str	r3, [r7, #20]
    ostime_t txbeg  = 0;
 800501e:	2300      	movs	r3, #0
 8005020:	613b      	str	r3, [r7, #16]

    if( (LMIC.opmode & OP_TRACK) != 0 ) {
 8005022:	4bb9      	ldr	r3, [pc, #740]	; (8005308 <engineUpdate+0x32c>)
 8005024:	22ac      	movs	r2, #172	; 0xac
 8005026:	5a9b      	ldrh	r3, [r3, r2]
 8005028:	001a      	movs	r2, r3
 800502a:	2302      	movs	r3, #2
 800502c:	4013      	ands	r3, r2
 800502e:	d011      	beq.n	8005054 <engineUpdate+0x78>
        // We are tracking a beacon
        ASSERT( now + RX_RAMPUP - LMIC.bcnRxtime <= 0 );
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	3340      	adds	r3, #64	; 0x40
 8005034:	001a      	movs	r2, r3
 8005036:	49b4      	ldr	r1, [pc, #720]	; (8005308 <engineUpdate+0x32c>)
 8005038:	23c6      	movs	r3, #198	; 0xc6
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	58cb      	ldr	r3, [r1, r3]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	dd01      	ble.n	8005048 <engineUpdate+0x6c>
 8005044:	f7fc fe16 	bl	8001c74 <hal_failed>
        rxtime = LMIC.bcnRxtime - RX_RAMPUP;
 8005048:	4aaf      	ldr	r2, [pc, #700]	; (8005308 <engineUpdate+0x32c>)
 800504a:	23c6      	movs	r3, #198	; 0xc6
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	58d3      	ldr	r3, [r2, r3]
 8005050:	3b40      	subs	r3, #64	; 0x40
 8005052:	617b      	str	r3, [r7, #20]
    }

    if( (LMIC.opmode & (OP_JOINING|OP_REJOIN|OP_TXDATA|OP_POLL)) != 0 ) {
 8005054:	4bac      	ldr	r3, [pc, #688]	; (8005308 <engineUpdate+0x32c>)
 8005056:	22ac      	movs	r2, #172	; 0xac
 8005058:	5a9b      	ldrh	r3, [r3, r2]
 800505a:	001a      	movs	r2, r3
 800505c:	233c      	movs	r3, #60	; 0x3c
 800505e:	4013      	ands	r3, r2
 8005060:	d100      	bne.n	8005064 <engineUpdate+0x88>
 8005062:	e0f7      	b.n	8005254 <engineUpdate+0x278>
        // Need to TX some data...
        // Assuming txChnl points to channel which first becomes available again.
        bit_t jacc = ((LMIC.opmode & (OP_JOINING|OP_REJOIN)) != 0 ? 1 : 0);
 8005064:	4ba8      	ldr	r3, [pc, #672]	; (8005308 <engineUpdate+0x32c>)
 8005066:	22ac      	movs	r2, #172	; 0xac
 8005068:	5a9b      	ldrh	r3, [r3, r2]
 800506a:	001a      	movs	r2, r3
 800506c:	2324      	movs	r3, #36	; 0x24
 800506e:	4013      	ands	r3, r2
 8005070:	1e5a      	subs	r2, r3, #1
 8005072:	4193      	sbcs	r3, r2
 8005074:	b2da      	uxtb	r2, r3
 8005076:	1dfb      	adds	r3, r7, #7
 8005078:	701a      	strb	r2, [r3, #0]
        // Find next suitable channel and return availability time
        if( (LMIC.opmode & OP_NEXTCHNL) != 0 ) {
 800507a:	4ba3      	ldr	r3, [pc, #652]	; (8005308 <engineUpdate+0x32c>)
 800507c:	22ac      	movs	r2, #172	; 0xac
 800507e:	5a9b      	ldrh	r3, [r3, r2]
 8005080:	001a      	movs	r2, r3
 8005082:	2380      	movs	r3, #128	; 0x80
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	4013      	ands	r3, r2
 8005088:	d013      	beq.n	80050b2 <engineUpdate+0xd6>
            txbeg = LMIC.txend = nextTx(now);
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	0018      	movs	r0, r3
 800508e:	f7fd ffcf 	bl	8003030 <nextTx>
 8005092:	0002      	movs	r2, r0
 8005094:	4b9c      	ldr	r3, [pc, #624]	; (8005308 <engineUpdate+0x32c>)
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	4b9b      	ldr	r3, [pc, #620]	; (8005308 <engineUpdate+0x32c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	613b      	str	r3, [r7, #16]
            LMIC.opmode &= ~OP_NEXTCHNL;
 800509e:	4b9a      	ldr	r3, [pc, #616]	; (8005308 <engineUpdate+0x32c>)
 80050a0:	22ac      	movs	r2, #172	; 0xac
 80050a2:	5a9b      	ldrh	r3, [r3, r2]
 80050a4:	4a99      	ldr	r2, [pc, #612]	; (800530c <engineUpdate+0x330>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	b299      	uxth	r1, r3
 80050aa:	4b97      	ldr	r3, [pc, #604]	; (8005308 <engineUpdate+0x32c>)
 80050ac:	22ac      	movs	r2, #172	; 0xac
 80050ae:	5299      	strh	r1, [r3, r2]
 80050b0:	e002      	b.n	80050b8 <engineUpdate+0xdc>
        } else {
            txbeg = LMIC.txend;
 80050b2:	4b95      	ldr	r3, [pc, #596]	; (8005308 <engineUpdate+0x32c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	613b      	str	r3, [r7, #16]
        }
        // Delayed TX or waiting for duty cycle?
        if( (LMIC.globalDutyRate != 0 || (LMIC.opmode & OP_RNDTX) != 0)  &&  (txbeg - LMIC.globalDutyAvail) < 0 )
 80050b8:	4b93      	ldr	r3, [pc, #588]	; (8005308 <engineUpdate+0x32c>)
 80050ba:	22a3      	movs	r2, #163	; 0xa3
 80050bc:	5c9b      	ldrb	r3, [r3, r2]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d107      	bne.n	80050d2 <engineUpdate+0xf6>
 80050c2:	4b91      	ldr	r3, [pc, #580]	; (8005308 <engineUpdate+0x32c>)
 80050c4:	22ac      	movs	r2, #172	; 0xac
 80050c6:	5a9b      	ldrh	r3, [r3, r2]
 80050c8:	001a      	movs	r2, r3
 80050ca:	2380      	movs	r3, #128	; 0x80
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	4013      	ands	r3, r2
 80050d0:	d009      	beq.n	80050e6 <engineUpdate+0x10a>
 80050d2:	4b8d      	ldr	r3, [pc, #564]	; (8005308 <engineUpdate+0x32c>)
 80050d4:	22a4      	movs	r2, #164	; 0xa4
 80050d6:	589b      	ldr	r3, [r3, r2]
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	d503      	bpl.n	80050e6 <engineUpdate+0x10a>
            txbeg = LMIC.globalDutyAvail;
 80050de:	4b8a      	ldr	r3, [pc, #552]	; (8005308 <engineUpdate+0x32c>)
 80050e0:	22a4      	movs	r2, #164	; 0xa4
 80050e2:	589b      	ldr	r3, [r3, r2]
 80050e4:	613b      	str	r3, [r7, #16]
        // If we're tracking a beacon...
        // then make sure TX-RX transaction is complete before beacon
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 80050e6:	4b88      	ldr	r3, [pc, #544]	; (8005308 <engineUpdate+0x32c>)
 80050e8:	22ac      	movs	r2, #172	; 0xac
 80050ea:	5a9b      	ldrh	r3, [r3, r2]
 80050ec:	001a      	movs	r2, r3
 80050ee:	2302      	movs	r3, #2
 80050f0:	4013      	ands	r3, r2
 80050f2:	d017      	beq.n	8005124 <engineUpdate+0x148>
            txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks) - rxtime > 0 ) {
 80050f4:	1dfb      	adds	r3, r7, #7
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <engineUpdate+0x124>
 80050fc:	4b84      	ldr	r3, [pc, #528]	; (8005310 <engineUpdate+0x334>)
 80050fe:	e000      	b.n	8005102 <engineUpdate+0x126>
 8005100:	4b84      	ldr	r3, [pc, #528]	; (8005314 <engineUpdate+0x338>)
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	189a      	adds	r2, r3, r2
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	1ad3      	subs	r3, r2, r3
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 800510a:	2b00      	cmp	r3, #0
 800510c:	dd0a      	ble.n	8005124 <engineUpdate+0x148>
            // Not enough time to complete TX-RX before beacon - postpone after beacon.
            // In order to avoid clustering of postponed TX right after beacon randomize start!
            txDelay(rxtime + BCN_RESERVE_osticks, 16);
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	4a81      	ldr	r2, [pc, #516]	; (8005318 <engineUpdate+0x33c>)
 8005112:	4694      	mov	ip, r2
 8005114:	4463      	add	r3, ip
 8005116:	2110      	movs	r1, #16
 8005118:	0018      	movs	r0, r3
 800511a:	f7fd fd25 	bl	8002b68 <txDelay>
            txbeg = 0;
 800511e:	2300      	movs	r3, #0
 8005120:	613b      	str	r3, [r7, #16]
            goto checkrx;
 8005122:	e0a0      	b.n	8005266 <engineUpdate+0x28a>
        }
        // Earliest possible time vs overhead to setup radio
        if( txbeg - (now + TX_RAMPUP) < 0 ) {
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	3340      	adds	r3, #64	; 0x40
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	d400      	bmi.n	8005130 <engineUpdate+0x154>
 800512e:	e082      	b.n	8005236 <engineUpdate+0x25a>
            // We could send right now!
        txbeg = now;
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	613b      	str	r3, [r7, #16]
            dr_t txdr = (dr_t)LMIC.datarate;
 8005134:	200f      	movs	r0, #15
 8005136:	183b      	adds	r3, r7, r0
 8005138:	4a73      	ldr	r2, [pc, #460]	; (8005308 <engineUpdate+0x32c>)
 800513a:	21b0      	movs	r1, #176	; 0xb0
 800513c:	5c52      	ldrb	r2, [r2, r1]
 800513e:	701a      	strb	r2, [r3, #0]
            if( jacc ) {
 8005140:	1dfb      	adds	r3, r7, #7
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d025      	beq.n	8005194 <engineUpdate+0x1b8>
                u1_t ftype;
                if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 8005148:	4b6f      	ldr	r3, [pc, #444]	; (8005308 <engineUpdate+0x32c>)
 800514a:	22ac      	movs	r2, #172	; 0xac
 800514c:	5a9b      	ldrh	r3, [r3, r2]
 800514e:	001a      	movs	r2, r3
 8005150:	2320      	movs	r3, #32
 8005152:	4013      	ands	r3, r2
 8005154:	d010      	beq.n	8005178 <engineUpdate+0x19c>
                    txdr = lowerDR(txdr, LMIC.rejoinCnt);
 8005156:	4b6c      	ldr	r3, [pc, #432]	; (8005308 <engineUpdate+0x32c>)
 8005158:	22b2      	movs	r2, #178	; 0xb2
 800515a:	5c9a      	ldrb	r2, [r3, r2]
 800515c:	183c      	adds	r4, r7, r0
 800515e:	183b      	adds	r3, r7, r0
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	0011      	movs	r1, r2
 8005164:	0018      	movs	r0, r3
 8005166:	f7fc ffad 	bl	80020c4 <lowerDR>
 800516a:	0003      	movs	r3, r0
 800516c:	7023      	strb	r3, [r4, #0]
                    ftype = HDR_FTYPE_REJOIN;
 800516e:	230e      	movs	r3, #14
 8005170:	18fb      	adds	r3, r7, r3
 8005172:	22c0      	movs	r2, #192	; 0xc0
 8005174:	701a      	strb	r2, [r3, #0]
 8005176:	e003      	b.n	8005180 <engineUpdate+0x1a4>
                } else {
                    ftype = HDR_FTYPE_JREQ;
 8005178:	230e      	movs	r3, #14
 800517a:	18fb      	adds	r3, r7, r3
 800517c:	2200      	movs	r2, #0
 800517e:	701a      	strb	r2, [r3, #0]
                }
                buildJoinRequest(ftype);
 8005180:	230e      	movs	r3, #14
 8005182:	18fb      	adds	r3, r7, r3
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	0018      	movs	r0, r3
 8005188:	f7ff fbf6 	bl	8004978 <buildJoinRequest>
                LMIC.osjob.func = FUNC_ADDR(jreqDone);
 800518c:	4b5e      	ldr	r3, [pc, #376]	; (8005308 <engineUpdate+0x32c>)
 800518e:	4a63      	ldr	r2, [pc, #396]	; (800531c <engineUpdate+0x340>)
 8005190:	61da      	str	r2, [r3, #28]
 8005192:	e020      	b.n	80051d6 <engineUpdate+0x1fa>
            } else {
                if( LMIC.seqnoDn >= 0xFFFFFF80 ) {
 8005194:	4a5c      	ldr	r2, [pc, #368]	; (8005308 <engineUpdate+0x32c>)
 8005196:	238c      	movs	r3, #140	; 0x8c
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	58d3      	ldr	r3, [r2, r3]
 800519c:	3381      	adds	r3, #129	; 0x81
 800519e:	d909      	bls.n	80051b4 <engineUpdate+0x1d8>
                                        e_.eui    = MAIN::CDEV->getEui(),
                                        e_.info   = LMIC.seqnoDn, 
                                        e_.info2  = 0));
                    // Device has to react! NWK will not roll over and just stop sending.
                    // Thus, we have N frames to detect a possible lock up.
                  reset:
 80051a0:	46c0      	nop			; (mov r8, r8)
 80051a2:	e000      	b.n	80051a6 <engineUpdate+0x1ca>
                    EV(specCond, ERR, (e_.reason = EV::specCond_t::UPSEQNO_ROLL_OVER,
                                       e_.eui    = MAIN::CDEV->getEui(),
                                       e_.info2  = LMIC.seqnoUp));
                    // Do not run RESET event callback from here!
                    // App code might do some stuff after send unaware of RESET.
                    goto reset;
 80051a4:	46c0      	nop			; (mov r8, r8)
                    os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
 80051a6:	4a5e      	ldr	r2, [pc, #376]	; (8005320 <engineUpdate+0x344>)
 80051a8:	4b5e      	ldr	r3, [pc, #376]	; (8005324 <engineUpdate+0x348>)
 80051aa:	0011      	movs	r1, r2
 80051ac:	0018      	movs	r0, r3
 80051ae:	f000 fe89 	bl	8005ec4 <os_setCallback>
                    return;
 80051b2:	e0f9      	b.n	80053a8 <engineUpdate+0x3cc>
                if( (LMIC.txCnt==0 && LMIC.seqnoUp == 0xFFFFFFFF) ) {
 80051b4:	4a54      	ldr	r2, [pc, #336]	; (8005308 <engineUpdate+0x32c>)
 80051b6:	23a2      	movs	r3, #162	; 0xa2
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	5cd3      	ldrb	r3, [r2, r3]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d105      	bne.n	80051cc <engineUpdate+0x1f0>
 80051c0:	4a51      	ldr	r2, [pc, #324]	; (8005308 <engineUpdate+0x32c>)
 80051c2:	238e      	movs	r3, #142	; 0x8e
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	58d3      	ldr	r3, [r2, r3]
 80051c8:	3301      	adds	r3, #1
 80051ca:	d0eb      	beq.n	80051a4 <engineUpdate+0x1c8>
                }
                buildDataFrame();
 80051cc:	f7ff f8e4 	bl	8004398 <buildDataFrame>
                LMIC.osjob.func = FUNC_ADDR(updataDone);
 80051d0:	4b4d      	ldr	r3, [pc, #308]	; (8005308 <engineUpdate+0x32c>)
 80051d2:	4a55      	ldr	r2, [pc, #340]	; (8005328 <engineUpdate+0x34c>)
 80051d4:	61da      	str	r2, [r3, #28]
            }
            LMIC.rps    = setCr(updr2rps(txdr), (cr_t)LMIC.errcr);
 80051d6:	240f      	movs	r4, #15
 80051d8:	193b      	adds	r3, r7, r4
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	0018      	movs	r0, r3
 80051de:	f7fc ff19 	bl	8002014 <updr2rps>
 80051e2:	0003      	movs	r3, r0
 80051e4:	0018      	movs	r0, r3
 80051e6:	4b48      	ldr	r3, [pc, #288]	; (8005308 <engineUpdate+0x32c>)
 80051e8:	22b1      	movs	r2, #177	; 0xb1
 80051ea:	5c9b      	ldrb	r3, [r3, r2]
 80051ec:	0019      	movs	r1, r3
 80051ee:	f7fc fea7 	bl	8001f40 <setCr>
 80051f2:	0003      	movs	r3, r0
 80051f4:	001a      	movs	r2, r3
 80051f6:	4b44      	ldr	r3, [pc, #272]	; (8005308 <engineUpdate+0x32c>)
 80051f8:	81da      	strh	r2, [r3, #14]
            LMIC.dndr   = txdr;  // carry TX datarate (can be != LMIC.datarate) over to txDone/setupRx1
 80051fa:	4b43      	ldr	r3, [pc, #268]	; (8005308 <engineUpdate+0x32c>)
 80051fc:	193a      	adds	r2, r7, r4
 80051fe:	7812      	ldrb	r2, [r2, #0]
 8005200:	745a      	strb	r2, [r3, #17]
            LMIC.opmode = (LMIC.opmode & ~(OP_POLL|OP_RNDTX)) | OP_TXRXPEND | OP_NEXTCHNL;
 8005202:	4b41      	ldr	r3, [pc, #260]	; (8005308 <engineUpdate+0x32c>)
 8005204:	22ac      	movs	r2, #172	; 0xac
 8005206:	5a9b      	ldrh	r3, [r3, r2]
 8005208:	b21b      	sxth	r3, r3
 800520a:	4a48      	ldr	r2, [pc, #288]	; (800532c <engineUpdate+0x350>)
 800520c:	4013      	ands	r3, r2
 800520e:	b21b      	sxth	r3, r3
 8005210:	2288      	movs	r2, #136	; 0x88
 8005212:	0112      	lsls	r2, r2, #4
 8005214:	4313      	orrs	r3, r2
 8005216:	b21b      	sxth	r3, r3
 8005218:	b299      	uxth	r1, r3
 800521a:	4b3b      	ldr	r3, [pc, #236]	; (8005308 <engineUpdate+0x32c>)
 800521c:	22ac      	movs	r2, #172	; 0xac
 800521e:	5299      	strh	r1, [r3, r2]
            updateTx(txbeg);
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	0018      	movs	r0, r3
 8005224:	f7fd feb8 	bl	8002f98 <updateTx>
            reportEvent(EV_TXSTART);
 8005228:	2011      	movs	r0, #17
 800522a:	f7fe f8a9 	bl	8003380 <reportEvent>
            os_radio(RADIO_TX);
 800522e:	2001      	movs	r0, #1
 8005230:	f001 fcb6 	bl	8006ba0 <os_radio>
            return;
 8005234:	e0b8      	b.n	80053a8 <engineUpdate+0x3cc>
        }
        // Cannot yet TX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 8005236:	4b34      	ldr	r3, [pc, #208]	; (8005308 <engineUpdate+0x32c>)
 8005238:	22ac      	movs	r2, #172	; 0xac
 800523a:	5a9b      	ldrh	r3, [r3, r2]
 800523c:	001a      	movs	r2, r3
 800523e:	2302      	movs	r3, #2
 8005240:	4013      	ands	r3, r2
 8005242:	d100      	bne.n	8005246 <engineUpdate+0x26a>
 8005244:	e09f      	b.n	8005386 <engineUpdate+0x3aa>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
        // Consider RX tasks
        if( txbeg == 0 ) // zero indicates no TX pending
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10c      	bne.n	8005266 <engineUpdate+0x28a>
            txbeg += 1;  // TX delayed by one tick (insignificant amount of time)
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	3301      	adds	r3, #1
 8005250:	613b      	str	r3, [r7, #16]
 8005252:	e008      	b.n	8005266 <engineUpdate+0x28a>
    } else {
        // No TX pending - no scheduled RX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 8005254:	4b2c      	ldr	r3, [pc, #176]	; (8005308 <engineUpdate+0x32c>)
 8005256:	22ac      	movs	r2, #172	; 0xac
 8005258:	5a9b      	ldrh	r3, [r3, r2]
 800525a:	001a      	movs	r2, r3
 800525c:	2302      	movs	r3, #2
 800525e:	4013      	ands	r3, r2
 8005260:	d100      	bne.n	8005264 <engineUpdate+0x288>
 8005262:	e0a0      	b.n	80053a6 <engineUpdate+0x3ca>
            return;
    }

    // Are we pingable?
  checkrx:
 8005264:	46c0      	nop			; (mov r8, r8)
    if( (LMIC.opmode & OP_PINGINI) != 0 ) {
 8005266:	4b28      	ldr	r3, [pc, #160]	; (8005308 <engineUpdate+0x32c>)
 8005268:	22ac      	movs	r2, #172	; 0xac
 800526a:	5a9b      	ldrh	r3, [r3, r2]
 800526c:	001a      	movs	r2, r3
 800526e:	2380      	movs	r3, #128	; 0x80
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4013      	ands	r3, r2
 8005274:	d060      	beq.n	8005338 <engineUpdate+0x35c>
        // One more RX slot in this beacon period?
        if( rxschedNext(&LMIC.ping, now+RX_RAMPUP) ) {
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	3340      	adds	r3, #64	; 0x40
 800527a:	001a      	movs	r2, r3
 800527c:	4b2c      	ldr	r3, [pc, #176]	; (8005330 <engineUpdate+0x354>)
 800527e:	0011      	movs	r1, r2
 8005280:	0018      	movs	r0, r3
 8005282:	f7fd fbcd 	bl	8002a20 <rxschedNext>
 8005286:	1e03      	subs	r3, r0, #0
 8005288:	d056      	beq.n	8005338 <engineUpdate+0x35c>
            if( txbeg != 0  &&  (txbeg - LMIC.ping.rxtime) < 0 )
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d007      	beq.n	80052a0 <engineUpdate+0x2c4>
 8005290:	4a1d      	ldr	r2, [pc, #116]	; (8005308 <engineUpdate+0x32c>)
 8005292:	239e      	movs	r3, #158	; 0x9e
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	58d3      	ldr	r3, [r2, r3]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	d500      	bpl.n	80052a0 <engineUpdate+0x2c4>
 800529e:	e074      	b.n	800538a <engineUpdate+0x3ae>
                goto txdelay;
            LMIC.rxsyms  = LMIC.ping.rxsyms;
 80052a0:	4a19      	ldr	r2, [pc, #100]	; (8005308 <engineUpdate+0x32c>)
 80052a2:	2338      	movs	r3, #56	; 0x38
 80052a4:	33ff      	adds	r3, #255	; 0xff
 80052a6:	5cd2      	ldrb	r2, [r2, r3]
 80052a8:	4b17      	ldr	r3, [pc, #92]	; (8005308 <engineUpdate+0x32c>)
 80052aa:	741a      	strb	r2, [r3, #16]
            LMIC.rxtime  = LMIC.ping.rxtime;
 80052ac:	4a16      	ldr	r2, [pc, #88]	; (8005308 <engineUpdate+0x32c>)
 80052ae:	239e      	movs	r3, #158	; 0x9e
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	58d2      	ldr	r2, [r2, r3]
 80052b4:	4b14      	ldr	r3, [pc, #80]	; (8005308 <engineUpdate+0x32c>)
 80052b6:	605a      	str	r2, [r3, #4]
            LMIC.freq    = LMIC.ping.freq;
 80052b8:	4a13      	ldr	r2, [pc, #76]	; (8005308 <engineUpdate+0x32c>)
 80052ba:	23a0      	movs	r3, #160	; 0xa0
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	58d2      	ldr	r2, [r2, r3]
 80052c0:	4b11      	ldr	r3, [pc, #68]	; (8005308 <engineUpdate+0x32c>)
 80052c2:	609a      	str	r2, [r3, #8]
            LMIC.rps     = dndr2rps(LMIC.ping.dr);
 80052c4:	4a10      	ldr	r2, [pc, #64]	; (8005308 <engineUpdate+0x32c>)
 80052c6:	239a      	movs	r3, #154	; 0x9a
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	5cd3      	ldrb	r3, [r2, r3]
 80052cc:	0018      	movs	r0, r3
 80052ce:	f7fc feb3 	bl	8002038 <dndr2rps>
 80052d2:	0003      	movs	r3, r0
 80052d4:	001a      	movs	r2, r3
 80052d6:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <engineUpdate+0x32c>)
 80052d8:	81da      	strh	r2, [r3, #14]
            LMIC.dataLen = 0;
 80052da:	4a0b      	ldr	r2, [pc, #44]	; (8005308 <engineUpdate+0x32c>)
 80052dc:	2348      	movs	r3, #72	; 0x48
 80052de:	33ff      	adds	r3, #255	; 0xff
 80052e0:	2100      	movs	r1, #0
 80052e2:	54d1      	strb	r1, [r2, r3]
            ASSERT(LMIC.rxtime - now+RX_RAMPUP >= 0 );
 80052e4:	4b08      	ldr	r3, [pc, #32]	; (8005308 <engineUpdate+0x32c>)
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	3340      	adds	r3, #64	; 0x40
 80052ee:	da01      	bge.n	80052f4 <engineUpdate+0x318>
 80052f0:	f7fc fcc0 	bl	8001c74 <hal_failed>
            os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, FUNC_ADDR(startRxPing));
 80052f4:	4b04      	ldr	r3, [pc, #16]	; (8005308 <engineUpdate+0x32c>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	3b40      	subs	r3, #64	; 0x40
 80052fa:	0019      	movs	r1, r3
 80052fc:	4a0d      	ldr	r2, [pc, #52]	; (8005334 <engineUpdate+0x358>)
 80052fe:	4b09      	ldr	r3, [pc, #36]	; (8005324 <engineUpdate+0x348>)
 8005300:	0018      	movs	r0, r3
 8005302:	f000 fe07 	bl	8005f14 <os_setTimedCallback>
            return;
 8005306:	e04f      	b.n	80053a8 <engineUpdate+0x3cc>
 8005308:	20000280 	.word	0x20000280
 800530c:	fffff7ff 	.word	0xfffff7ff
 8005310:	00046500 	.word	0x00046500
 8005314:	0002ee00 	.word	0x0002ee00
 8005318:	00010900 	.word	0x00010900
 800531c:	0800423d 	.word	0x0800423d
 8005320:	080033a3 	.word	0x080033a3
 8005324:	20000294 	.word	0x20000294
 8005328:	0800435d 	.word	0x0800435d
 800532c:	fffff66f 	.word	0xfffff66f
 8005330:	200003b4 	.word	0x200003b4
 8005334:	08004fb9 	.word	0x08004fb9
        }
        // no - just wait for the beacon
    }

    if( txbeg != 0  &&  (txbeg - rxtime) < 0 )
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <engineUpdate+0x36a>
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	d423      	bmi.n	800538e <engineUpdate+0x3b2>
        goto txdelay;

    setBcnRxParams();
 8005346:	f7fd ff43 	bl	80031d0 <setBcnRxParams>
    LMIC.rxsyms = LMIC.bcnRxsyms;
 800534a:	4a19      	ldr	r2, [pc, #100]	; (80053b0 <engineUpdate+0x3d4>)
 800534c:	238a      	movs	r3, #138	; 0x8a
 800534e:	33ff      	adds	r3, #255	; 0xff
 8005350:	5cd2      	ldrb	r2, [r2, r3]
 8005352:	4b17      	ldr	r3, [pc, #92]	; (80053b0 <engineUpdate+0x3d4>)
 8005354:	741a      	strb	r2, [r3, #16]
    LMIC.rxtime = LMIC.bcnRxtime;
 8005356:	4a16      	ldr	r2, [pc, #88]	; (80053b0 <engineUpdate+0x3d4>)
 8005358:	23c6      	movs	r3, #198	; 0xc6
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	58d2      	ldr	r2, [r2, r3]
 800535e:	4b14      	ldr	r3, [pc, #80]	; (80053b0 <engineUpdate+0x3d4>)
 8005360:	605a      	str	r2, [r3, #4]
    if( now - rxtime >= 0 ) {
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	d406      	bmi.n	8005378 <engineUpdate+0x39c>
        LMIC.osjob.func = FUNC_ADDR(processBeacon);
 800536a:	4b11      	ldr	r3, [pc, #68]	; (80053b0 <engineUpdate+0x3d4>)
 800536c:	4a11      	ldr	r2, [pc, #68]	; (80053b4 <engineUpdate+0x3d8>)
 800536e:	61da      	str	r2, [r3, #28]
        os_radio(RADIO_RX);
 8005370:	2002      	movs	r0, #2
 8005372:	f001 fc15 	bl	8006ba0 <os_radio>
        return;
 8005376:	e017      	b.n	80053a8 <engineUpdate+0x3cc>
    }
    os_setTimedCallback(&LMIC.osjob, rxtime, FUNC_ADDR(startRxBcn));
 8005378:	4a0f      	ldr	r2, [pc, #60]	; (80053b8 <engineUpdate+0x3dc>)
 800537a:	6979      	ldr	r1, [r7, #20]
 800537c:	4b0f      	ldr	r3, [pc, #60]	; (80053bc <engineUpdate+0x3e0>)
 800537e:	0018      	movs	r0, r3
 8005380:	f000 fdc8 	bl	8005f14 <os_setTimedCallback>
    return;
 8005384:	e010      	b.n	80053a8 <engineUpdate+0x3cc>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	e002      	b.n	8005390 <engineUpdate+0x3b4>
                goto txdelay;
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	e000      	b.n	8005390 <engineUpdate+0x3b4>
        goto txdelay;
 800538e:	46c0      	nop			; (mov r8, r8)
  txdelay:
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	3b40      	subs	r3, #64	; 0x40
 8005394:	0019      	movs	r1, r3
 8005396:	4a0a      	ldr	r2, [pc, #40]	; (80053c0 <engineUpdate+0x3e4>)
 8005398:	4b08      	ldr	r3, [pc, #32]	; (80053bc <engineUpdate+0x3e0>)
 800539a:	0018      	movs	r0, r3
 800539c:	f000 fdba 	bl	8005f14 <os_setTimedCallback>
 80053a0:	e002      	b.n	80053a8 <engineUpdate+0x3cc>
        return;
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	e000      	b.n	80053a8 <engineUpdate+0x3cc>
            return;
 80053a6:	46c0      	nop			; (mov r8, r8)
}
 80053a8:	46bd      	mov	sp, r7
 80053aa:	b007      	add	sp, #28
 80053ac:	bd90      	pop	{r4, r7, pc}
 80053ae:	46c0      	nop			; (mov r8, r8)
 80053b0:	20000280 	.word	0x20000280
 80053b4:	08004d01 	.word	0x08004d01
 80053b8:	08004f95 	.word	0x08004f95
 80053bc:	20000294 	.word	0x20000294
 80053c0:	0800336d 	.word	0x0800336d

080053c4 <LMIC_reset>:
    os_radio(RADIO_RST);
    LMIC.opmode |= OP_SHUTDOWN;
}


void LMIC_reset (void) {
 80053c4:	b5b0      	push	{r4, r5, r7, lr}
 80053c6:	af00      	add	r7, sp, #0
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = EV_RESET));
    os_radio(RADIO_RST);
 80053c8:	2000      	movs	r0, #0
 80053ca:	f001 fbe9 	bl	8006ba0 <os_radio>
    os_clearCallback(&LMIC.osjob);
 80053ce:	4b26      	ldr	r3, [pc, #152]	; (8005468 <LMIC_reset+0xa4>)
 80053d0:	0018      	movs	r0, r3
 80053d2:	f000 fd57 	bl	8005e84 <os_clearCallback>

    os_clearMem((xref2u1_t)&LMIC,SIZEOFEXPR(LMIC));
 80053d6:	23d6      	movs	r3, #214	; 0xd6
 80053d8:	005a      	lsls	r2, r3, #1
 80053da:	4b24      	ldr	r3, [pc, #144]	; (800546c <LMIC_reset+0xa8>)
 80053dc:	2100      	movs	r1, #0
 80053de:	0018      	movs	r0, r3
 80053e0:	f007 fa3d 	bl	800c85e <memset>
    LMIC.devaddr      =  0;
 80053e4:	4a21      	ldr	r2, [pc, #132]	; (800546c <LMIC_reset+0xa8>)
 80053e6:	238a      	movs	r3, #138	; 0x8a
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	2100      	movs	r1, #0
 80053ec:	50d1      	str	r1, [r2, r3]
    LMIC.devNonce     =  os_getRndU2();
 80053ee:	f001 fabd 	bl	800696c <radio_rand1>
 80053f2:	0003      	movs	r3, r0
 80053f4:	021b      	lsls	r3, r3, #8
 80053f6:	b21c      	sxth	r4, r3
 80053f8:	f001 fab8 	bl	800696c <radio_rand1>
 80053fc:	0003      	movs	r3, r0
 80053fe:	b21b      	sxth	r3, r3
 8005400:	4323      	orrs	r3, r4
 8005402:	b21b      	sxth	r3, r3
 8005404:	b299      	uxth	r1, r3
 8005406:	4b19      	ldr	r3, [pc, #100]	; (800546c <LMIC_reset+0xa8>)
 8005408:	22f2      	movs	r2, #242	; 0xf2
 800540a:	5299      	strh	r1, [r3, r2]
    LMIC.opmode       =  OP_NONE;
 800540c:	4b17      	ldr	r3, [pc, #92]	; (800546c <LMIC_reset+0xa8>)
 800540e:	22ac      	movs	r2, #172	; 0xac
 8005410:	2100      	movs	r1, #0
 8005412:	5299      	strh	r1, [r3, r2]
    LMIC.errcr        =  CR_4_5;
 8005414:	4b15      	ldr	r3, [pc, #84]	; (800546c <LMIC_reset+0xa8>)
 8005416:	22b1      	movs	r2, #177	; 0xb1
 8005418:	2100      	movs	r1, #0
 800541a:	5499      	strb	r1, [r3, r2]
    LMIC.adrEnabled   =  FCT_ADREN;
 800541c:	4a13      	ldr	r2, [pc, #76]	; (800546c <LMIC_reset+0xa8>)
 800541e:	2328      	movs	r3, #40	; 0x28
 8005420:	33ff      	adds	r3, #255	; 0xff
 8005422:	2180      	movs	r1, #128	; 0x80
 8005424:	54d1      	strb	r1, [r2, r3]
    LMIC.dn2Dr        =  DR_DNW2;   // we need this for 2nd DN window of join accept
 8005426:	4a11      	ldr	r2, [pc, #68]	; (800546c <LMIC_reset+0xa8>)
 8005428:	232c      	movs	r3, #44	; 0x2c
 800542a:	33ff      	adds	r3, #255	; 0xff
 800542c:	2100      	movs	r1, #0
 800542e:	54d1      	strb	r1, [r2, r3]
    LMIC.dn2Freq      =  FREQ_DNW2; // ditto
 8005430:	4a0e      	ldr	r2, [pc, #56]	; (800546c <LMIC_reset+0xa8>)
 8005432:	2396      	movs	r3, #150	; 0x96
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	490e      	ldr	r1, [pc, #56]	; (8005470 <LMIC_reset+0xac>)
 8005438:	50d1      	str	r1, [r2, r3]
    LMIC.rxDelay      =  DELAY_DNW1;
 800543a:	4a0c      	ldr	r2, [pc, #48]	; (800546c <LMIC_reset+0xa8>)
 800543c:	2324      	movs	r3, #36	; 0x24
 800543e:	33ff      	adds	r3, #255	; 0xff
 8005440:	2101      	movs	r1, #1
 8005442:	54d1      	strb	r1, [r2, r3]
    LMIC.ping.freq    =  FREQ_PING; // defaults for ping
 8005444:	4a09      	ldr	r2, [pc, #36]	; (800546c <LMIC_reset+0xa8>)
 8005446:	23a0      	movs	r3, #160	; 0xa0
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	4909      	ldr	r1, [pc, #36]	; (8005470 <LMIC_reset+0xac>)
 800544c:	50d1      	str	r1, [r2, r3]
    LMIC.ping.dr      =  DR_PING;   // ditto
 800544e:	4a07      	ldr	r2, [pc, #28]	; (800546c <LMIC_reset+0xa8>)
 8005450:	239a      	movs	r3, #154	; 0x9a
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	2103      	movs	r1, #3
 8005456:	54d1      	strb	r1, [r2, r3]
    LMIC.ping.intvExp =  0xFF;
 8005458:	4a04      	ldr	r2, [pc, #16]	; (800546c <LMIC_reset+0xa8>)
 800545a:	2336      	movs	r3, #54	; 0x36
 800545c:	33ff      	adds	r3, #255	; 0xff
 800545e:	21ff      	movs	r1, #255	; 0xff
 8005460:	54d1      	strb	r1, [r2, r3]
    DO_DEVDB(LMIC.dn2Dr,        dn2Dr);
    DO_DEVDB(LMIC.dn2Freq,      dn2Freq);
    DO_DEVDB(LMIC.ping.freq,    pingFreq);
    DO_DEVDB(LMIC.ping.dr,      pingDr);
    DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
}
 8005462:	46c0      	nop			; (mov r8, r8)
 8005464:	46bd      	mov	sp, r7
 8005466:	bdb0      	pop	{r4, r5, r7, pc}
 8005468:	20000294 	.word	0x20000294
 800546c:	20000280 	.word	0x20000280
 8005470:	33d3e608 	.word	0x33d3e608

08005474 <LMIC_init>:


void LMIC_init (void) {
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
    LMIC.opmode = OP_SHUTDOWN;
 8005478:	4b03      	ldr	r3, [pc, #12]	; (8005488 <LMIC_init+0x14>)
 800547a:	22ac      	movs	r2, #172	; 0xac
 800547c:	2140      	movs	r1, #64	; 0x40
 800547e:	5299      	strh	r1, [r3, r2]
}
 8005480:	46c0      	nop			; (mov r8, r8)
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	20000280 	.word	0x20000280

0800548c <LMIC_setTxData>:
    os_radio(RADIO_RST);
    engineUpdate();
}


void LMIC_setTxData (void) {
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
    LMIC.opmode |= OP_TXDATA;
 8005490:	4b0c      	ldr	r3, [pc, #48]	; (80054c4 <LMIC_setTxData+0x38>)
 8005492:	22ac      	movs	r2, #172	; 0xac
 8005494:	5a9b      	ldrh	r3, [r3, r2]
 8005496:	2208      	movs	r2, #8
 8005498:	4313      	orrs	r3, r2
 800549a:	b299      	uxth	r1, r3
 800549c:	4b09      	ldr	r3, [pc, #36]	; (80054c4 <LMIC_setTxData+0x38>)
 800549e:	22ac      	movs	r2, #172	; 0xac
 80054a0:	5299      	strh	r1, [r3, r2]
    if( (LMIC.opmode & OP_JOINING) == 0 )
 80054a2:	4b08      	ldr	r3, [pc, #32]	; (80054c4 <LMIC_setTxData+0x38>)
 80054a4:	22ac      	movs	r2, #172	; 0xac
 80054a6:	5a9b      	ldrh	r3, [r3, r2]
 80054a8:	001a      	movs	r2, r3
 80054aa:	2304      	movs	r3, #4
 80054ac:	4013      	ands	r3, r2
 80054ae:	d104      	bne.n	80054ba <LMIC_setTxData+0x2e>
        LMIC.txCnt = 0;             // cancel any ongoing TX/RX retries
 80054b0:	4a04      	ldr	r2, [pc, #16]	; (80054c4 <LMIC_setTxData+0x38>)
 80054b2:	23a2      	movs	r3, #162	; 0xa2
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	2100      	movs	r1, #0
 80054b8:	54d1      	strb	r1, [r2, r3]
    engineUpdate();
 80054ba:	f7ff fd8f 	bl	8004fdc <engineUpdate>
}
 80054be:	46c0      	nop			; (mov r8, r8)
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20000280 	.word	0x20000280

080054c8 <LMIC_setTxData2>:


//
int LMIC_setTxData2 (u1_t port, xref2u1_t data, u1_t dlen, u1_t confirmed) {
 80054c8:	b590      	push	{r4, r7, lr}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	0004      	movs	r4, r0
 80054d0:	6039      	str	r1, [r7, #0]
 80054d2:	0010      	movs	r0, r2
 80054d4:	0019      	movs	r1, r3
 80054d6:	1dfb      	adds	r3, r7, #7
 80054d8:	1c22      	adds	r2, r4, #0
 80054da:	701a      	strb	r2, [r3, #0]
 80054dc:	1dbb      	adds	r3, r7, #6
 80054de:	1c02      	adds	r2, r0, #0
 80054e0:	701a      	strb	r2, [r3, #0]
 80054e2:	1d7b      	adds	r3, r7, #5
 80054e4:	1c0a      	adds	r2, r1, #0
 80054e6:	701a      	strb	r2, [r3, #0]
    if( dlen > SIZEOFEXPR(LMIC.pendTxData) )
 80054e8:	1dbb      	adds	r3, r7, #6
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	2b34      	cmp	r3, #52	; 0x34
 80054ee:	d902      	bls.n	80054f6 <LMIC_setTxData2+0x2e>
        return -2;
 80054f0:	2302      	movs	r3, #2
 80054f2:	425b      	negs	r3, r3
 80054f4:	e01b      	b.n	800552e <LMIC_setTxData2+0x66>
    if( data != (xref2u1_t)0 )
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d006      	beq.n	800550a <LMIC_setTxData2+0x42>
        os_copyMem(LMIC.pendTxData, data, dlen);
 80054fc:	1dbb      	adds	r3, r7, #6
 80054fe:	781a      	ldrb	r2, [r3, #0]
 8005500:	6839      	ldr	r1, [r7, #0]
 8005502:	4b0d      	ldr	r3, [pc, #52]	; (8005538 <LMIC_setTxData2+0x70>)
 8005504:	0018      	movs	r0, r3
 8005506:	f007 f9a1 	bl	800c84c <memcpy>
    LMIC.pendTxConf = confirmed;
 800550a:	4b0c      	ldr	r3, [pc, #48]	; (800553c <LMIC_setTxData2+0x74>)
 800550c:	1d7a      	adds	r2, r7, #5
 800550e:	21bb      	movs	r1, #187	; 0xbb
 8005510:	7812      	ldrb	r2, [r2, #0]
 8005512:	545a      	strb	r2, [r3, r1]
    LMIC.pendTxPort = port;
 8005514:	4b09      	ldr	r3, [pc, #36]	; (800553c <LMIC_setTxData2+0x74>)
 8005516:	1dfa      	adds	r2, r7, #7
 8005518:	21ba      	movs	r1, #186	; 0xba
 800551a:	7812      	ldrb	r2, [r2, #0]
 800551c:	545a      	strb	r2, [r3, r1]
    LMIC.pendTxLen  = dlen;
 800551e:	4b07      	ldr	r3, [pc, #28]	; (800553c <LMIC_setTxData2+0x74>)
 8005520:	1dba      	adds	r2, r7, #6
 8005522:	21bc      	movs	r1, #188	; 0xbc
 8005524:	7812      	ldrb	r2, [r2, #0]
 8005526:	545a      	strb	r2, [r3, r1]
    LMIC_setTxData();
 8005528:	f7ff ffb0 	bl	800548c <LMIC_setTxData>
    return 0;
 800552c:	2300      	movs	r3, #0
}
 800552e:	0018      	movs	r0, r3
 8005530:	46bd      	mov	sp, r7
 8005532:	b003      	add	sp, #12
 8005534:	bd90      	pop	{r4, r7, pc}
 8005536:	46c0      	nop			; (mov r8, r8)
 8005538:	2000033d 	.word	0x2000033d
 800553c:	20000280 	.word	0x20000280

08005540 <os_getArtEui>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// provide application router ID (8 bytes, LSBF)
void os_getArtEui (u1_t* buf) {
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
    memcpy(buf, APPEUI, 8);
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	4b05      	ldr	r3, [pc, #20]	; (8005560 <os_getArtEui+0x20>)
 800554c:	0010      	movs	r0, r2
 800554e:	0019      	movs	r1, r3
 8005550:	2308      	movs	r3, #8
 8005552:	001a      	movs	r2, r3
 8005554:	f007 f97a 	bl	800c84c <memcpy>
}
 8005558:	46c0      	nop			; (mov r8, r8)
 800555a:	46bd      	mov	sp, r7
 800555c:	b002      	add	sp, #8
 800555e:	bd80      	pop	{r7, pc}
 8005560:	0800dff8 	.word	0x0800dff8

08005564 <os_getDevEui>:

// provide device ID (8 bytes, LSBF)
void os_getDevEui (u1_t* buf) {
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
    memcpy(buf, DEVEUI, 8);
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	4b05      	ldr	r3, [pc, #20]	; (8005584 <os_getDevEui+0x20>)
 8005570:	0010      	movs	r0, r2
 8005572:	0019      	movs	r1, r3
 8005574:	2308      	movs	r3, #8
 8005576:	001a      	movs	r2, r3
 8005578:	f007 f968 	bl	800c84c <memcpy>
}
 800557c:	46c0      	nop			; (mov r8, r8)
 800557e:	46bd      	mov	sp, r7
 8005580:	b002      	add	sp, #8
 8005582:	bd80      	pop	{r7, pc}
 8005584:	0800e000 	.word	0x0800e000

08005588 <os_getDevKey>:

// provide device key (16 bytes)
void os_getDevKey (u1_t* buf) {
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
    memcpy(buf, DEVKEY, 16);
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	4b05      	ldr	r3, [pc, #20]	; (80055a8 <os_getDevKey+0x20>)
 8005594:	0010      	movs	r0, r2
 8005596:	0019      	movs	r1, r3
 8005598:	2310      	movs	r3, #16
 800559a:	001a      	movs	r2, r3
 800559c:	f007 f956 	bl	800c84c <memcpy>
}
 80055a0:	46c0      	nop			; (mov r8, r8)
 80055a2:	46bd      	mov	sp, r7
 80055a4:	b002      	add	sp, #8
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	0800e008 	.word	0x0800e008

080055ac <initsensor>:

void initsensor(){
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
	// init sensors
	Sdp800_Init(0x25);
 80055b0:	2025      	movs	r0, #37	; 0x25
 80055b2:	f001 fb1f 	bl	8006bf4 <Sdp800_Init>
	Sdp800_SoftReset();
 80055b6:	f001 fbd7 	bl	8006d68 <Sdp800_SoftReset>
	error = Sdp800_StartContinousMeasurement(SDP800_TEMPCOMP_MASS_FLOW,
 80055ba:	2101      	movs	r1, #1
 80055bc:	2000      	movs	r0, #0
 80055be:	f001 fb2b 	bl	8006c18 <Sdp800_StartContinousMeasurement>
 80055c2:	0003      	movs	r3, r0
 80055c4:	001a      	movs	r2, r3
 80055c6:	4b09      	ldr	r3, [pc, #36]	; (80055ec <initsensor+0x40>)
 80055c8:	701a      	strb	r2, [r3, #0]
		                                             SDP800_AVERAGING_TILL_READ);
	if (error == ERROR_NONE)
 80055ca:	4b08      	ldr	r3, [pc, #32]	; (80055ec <initsensor+0x40>)
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d104      	bne.n	80055dc <initsensor+0x30>
		debug_str("SDP800 initialized\n\r");
 80055d2:	4b07      	ldr	r3, [pc, #28]	; (80055f0 <initsensor+0x44>)
 80055d4:	0018      	movs	r0, r3
 80055d6:	f7fc f8e6 	bl	80017a6 <debug_str>
	else
		debug_str("SDP800 failed to initialize\n\r");
}
 80055da:	e003      	b.n	80055e4 <initsensor+0x38>
		debug_str("SDP800 failed to initialize\n\r");
 80055dc:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <initsensor+0x48>)
 80055de:	0018      	movs	r0, r3
 80055e0:	f7fc f8e1 	bl	80017a6 <debug_str>
}
 80055e4:	46c0      	nop			; (mov r8, r8)
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	46c0      	nop			; (mov r8, r8)
 80055ec:	20000434 	.word	0x20000434
 80055f0:	0800c9b0 	.word	0x0800c9b0
 80055f4:	0800c9c8 	.word	0x0800c9c8

080055f8 <initfunc>:

void initfunc (osjob_t* j) {
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
    // intialize sensor hardware
    initsensor();
 8005600:	f7ff ffd4 	bl	80055ac <initsensor>
    // reset MAC state
    LMIC_reset();
 8005604:	f7ff fede 	bl	80053c4 <LMIC_reset>
    // start joining
    LMIC_startJoining();
 8005608:	f7ff f9fc 	bl	8004a04 <LMIC_startJoining>
    // init done - onEvent() callback will be invoked...
}
 800560c:	46c0      	nop			; (mov r8, r8)
 800560e:	46bd      	mov	sp, r7
 8005610:	b002      	add	sp, #8
 8005612:	bd80      	pop	{r7, pc}

08005614 <readsensor>:

int readsensor(){
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
	error = Sdp800_ReadMeasurementResults(&diffPressure, &temperature);
 8005618:	4a08      	ldr	r2, [pc, #32]	; (800563c <readsensor+0x28>)
 800561a:	4b09      	ldr	r3, [pc, #36]	; (8005640 <readsensor+0x2c>)
 800561c:	0011      	movs	r1, r2
 800561e:	0018      	movs	r0, r3
 8005620:	f001 fb5c 	bl	8006cdc <Sdp800_ReadMeasurementResults>
 8005624:	0003      	movs	r3, r0
 8005626:	001a      	movs	r2, r3
 8005628:	4b06      	ldr	r3, [pc, #24]	; (8005644 <readsensor+0x30>)
 800562a:	701a      	strb	r2, [r3, #0]
	return error == ERROR_NONE;
 800562c:	4b05      	ldr	r3, [pc, #20]	; (8005644 <readsensor+0x30>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	425a      	negs	r2, r3
 8005632:	4153      	adcs	r3, r2
 8005634:	b2db      	uxtb	r3, r3
}
 8005636:	0018      	movs	r0, r3
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	2000042c 	.word	0x2000042c
 8005640:	20000430 	.word	0x20000430
 8005644:	20000434 	.word	0x20000434

08005648 <reportfunc>:

static osjob_t reportjob;

// report sensor value every minute
static void reportfunc (osjob_t* j) {
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
	// read sensor
	if (readsensor()) {
 8005650:	f7ff ffe0 	bl	8005614 <readsensor>
 8005654:	1e03      	subs	r3, r0, #0
 8005656:	d022      	beq.n	800569e <reportfunc+0x56>
		// if reading was a success:
		debug_str("Reading success: ");
 8005658:	4b29      	ldr	r3, [pc, #164]	; (8005700 <reportfunc+0xb8>)
 800565a:	0018      	movs	r0, r3
 800565c:	f7fc f8a3 	bl	80017a6 <debug_str>
		debug_f(diffPressure);
 8005660:	4b28      	ldr	r3, [pc, #160]	; (8005704 <reportfunc+0xbc>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	1c18      	adds	r0, r3, #0
 8005666:	f7fc f8b3 	bl	80017d0 <debug_f>
		debug_str(", ");
 800566a:	4b27      	ldr	r3, [pc, #156]	; (8005708 <reportfunc+0xc0>)
 800566c:	0018      	movs	r0, r3
 800566e:	f7fc f89a 	bl	80017a6 <debug_str>
		debug_f(temperature);
 8005672:	4b26      	ldr	r3, [pc, #152]	; (800570c <reportfunc+0xc4>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	1c18      	adds	r0, r3, #0
 8005678:	f7fc f8aa 	bl	80017d0 <debug_f>
		debug_str("\n\r");
 800567c:	4b24      	ldr	r3, [pc, #144]	; (8005710 <reportfunc+0xc8>)
 800567e:	0018      	movs	r0, r3
 8005680:	f7fc f891 	bl	80017a6 <debug_str>
 8005684:	4b1f      	ldr	r3, [pc, #124]	; (8005704 <reportfunc+0xbc>)
 8005686:	6819      	ldr	r1, [r3, #0]

		memcpy(LMIC.frame + 0, &diffPressure, 4);
 8005688:	4a22      	ldr	r2, [pc, #136]	; (8005714 <reportfunc+0xcc>)
 800568a:	23a4      	movs	r3, #164	; 0xa4
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	50d1      	str	r1, [r2, r3]
		memcpy(LMIC.frame + 4, &temperature, 4);
 8005690:	4b21      	ldr	r3, [pc, #132]	; (8005718 <reportfunc+0xd0>)
 8005692:	491e      	ldr	r1, [pc, #120]	; (800570c <reportfunc+0xc4>)
 8005694:	2204      	movs	r2, #4
 8005696:	0018      	movs	r0, r3
 8005698:	f007 f8d8 	bl	800c84c <memcpy>
 800569c:	e014      	b.n	80056c8 <reportfunc+0x80>
		//}
	} else {
		// if reading was unsuccessful
		debug_str("Reading failed\n\r");
 800569e:	4b1f      	ldr	r3, [pc, #124]	; (800571c <reportfunc+0xd4>)
 80056a0:	0018      	movs	r0, r3
 80056a2:	f7fc f880 	bl	80017a6 <debug_str>

		for (int i = 0; i < 8; i++) {
 80056a6:	2300      	movs	r3, #0
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	e00a      	b.n	80056c2 <reportfunc+0x7a>
			LMIC.frame[i] = 0xff; // error value
 80056ac:	4919      	ldr	r1, [pc, #100]	; (8005714 <reportfunc+0xcc>)
 80056ae:	23a4      	movs	r3, #164	; 0xa4
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	188a      	adds	r2, r1, r2
 80056b6:	18d3      	adds	r3, r2, r3
 80056b8:	22ff      	movs	r2, #255	; 0xff
 80056ba:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++) {
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	3301      	adds	r3, #1
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2b07      	cmp	r3, #7
 80056c6:	ddf1      	ble.n	80056ac <reportfunc+0x64>
		}
	}

    LMIC_setTxData2(1, LMIC.frame, 8, 0); // (port 1, 8 bytes, unconfirmed)
 80056c8:	4915      	ldr	r1, [pc, #84]	; (8005720 <reportfunc+0xd8>)
 80056ca:	2300      	movs	r3, #0
 80056cc:	2208      	movs	r2, #8
 80056ce:	2001      	movs	r0, #1
 80056d0:	f7ff fefa 	bl	80054c8 <LMIC_setTxData2>
    // reschedule job after 'repeat_period' seconds
    os_setTimedCallback(j, os_getTime()+sec2osticks(repeat_period), reportfunc);
 80056d4:	f000 fbb0 	bl	8005e38 <os_getTime>
 80056d8:	0001      	movs	r1, r0
 80056da:	4b12      	ldr	r3, [pc, #72]	; (8005724 <reportfunc+0xdc>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	001a      	movs	r2, r3
 80056e0:	0013      	movs	r3, r2
 80056e2:	015b      	lsls	r3, r3, #5
 80056e4:	1a9b      	subs	r3, r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	189b      	adds	r3, r3, r2
 80056ea:	021b      	lsls	r3, r3, #8
 80056ec:	18c9      	adds	r1, r1, r3
 80056ee:	4a0e      	ldr	r2, [pc, #56]	; (8005728 <reportfunc+0xe0>)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	0018      	movs	r0, r3
 80056f4:	f000 fc0e 	bl	8005f14 <os_setTimedCallback>
}
 80056f8:	46c0      	nop			; (mov r8, r8)
 80056fa:	46bd      	mov	sp, r7
 80056fc:	b004      	add	sp, #16
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	0800c9e8 	.word	0x0800c9e8
 8005704:	20000430 	.word	0x20000430
 8005708:	0800c9fc 	.word	0x0800c9fc
 800570c:	2000042c 	.word	0x2000042c
 8005710:	0800ca00 	.word	0x0800ca00
 8005714:	20000280 	.word	0x20000280
 8005718:	200003cc 	.word	0x200003cc
 800571c:	0800ca04 	.word	0x0800ca04
 8005720:	200003c8 	.word	0x200003c8
 8005724:	20000048 	.word	0x20000048
 8005728:	08005649 	.word	0x08005649

0800572c <onEvent>:

//////////////////////////////////////////////////
// LMIC EVENT CALLBACK
//////////////////////////////////////////////////

void onEvent (ev_t ev) {
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	0002      	movs	r2, r0
 8005734:	1dfb      	adds	r3, r7, #7
 8005736:	701a      	strb	r2, [r3, #0]
    debug_event(ev);
 8005738:	1dfb      	adds	r3, r7, #7
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	0018      	movs	r0, r3
 800573e:	f7fc f8cf 	bl	80018e0 <debug_event>

    switch(ev) {
 8005742:	1dfb      	adds	r3, r7, #7
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	2b0f      	cmp	r3, #15
 8005748:	d900      	bls.n	800574c <onEvent+0x20>
 800574a:	e072      	b.n	8005832 <onEvent+0x106>
 800574c:	009a      	lsls	r2, r3, #2
 800574e:	4b3e      	ldr	r3, [pc, #248]	; (8005848 <onEvent+0x11c>)
 8005750:	18d3      	adds	r3, r2, r3
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	469f      	mov	pc, r3

      // network joined, session established
      case EV_JOINING:
       	  debug_str("try joining\r\n");
 8005756:	4b3d      	ldr	r3, [pc, #244]	; (800584c <onEvent+0x120>)
 8005758:	0018      	movs	r0, r3
 800575a:	f7fc f824 	bl	80017a6 <debug_str>
       	  break;
 800575e:	e06e      	b.n	800583e <onEvent+0x112>
      case EV_JOINED:
          debug_led(1);
 8005760:	2001      	movs	r0, #1
 8005762:	f7fb ffcd 	bl	8001700 <debug_led>
          // kick-off periodic sensor job
          reportfunc(&reportjob);
 8005766:	4b3a      	ldr	r3, [pc, #232]	; (8005850 <onEvent+0x124>)
 8005768:	0018      	movs	r0, r3
 800576a:	f7ff ff6d 	bl	8005648 <reportfunc>
          break;
 800576e:	e066      	b.n	800583e <onEvent+0x112>
      case EV_JOIN_FAILED:
    	  debug_str("join failed\r\n");
 8005770:	4b38      	ldr	r3, [pc, #224]	; (8005854 <onEvent+0x128>)
 8005772:	0018      	movs	r0, r3
 8005774:	f7fc f817 	bl	80017a6 <debug_str>
    	  break;
 8005778:	e061      	b.n	800583e <onEvent+0x112>
      case EV_SCAN_TIMEOUT:
    	  debug_str("EV_SCAN_TIMEOUT\r\n");
 800577a:	4b37      	ldr	r3, [pc, #220]	; (8005858 <onEvent+0x12c>)
 800577c:	0018      	movs	r0, r3
 800577e:	f7fc f812 	bl	80017a6 <debug_str>
		  break;
 8005782:	e05c      	b.n	800583e <onEvent+0x112>
	  case EV_BEACON_FOUND:
		  debug_str("EV_BEACON_FOUND\r\n");
 8005784:	4b35      	ldr	r3, [pc, #212]	; (800585c <onEvent+0x130>)
 8005786:	0018      	movs	r0, r3
 8005788:	f7fc f80d 	bl	80017a6 <debug_str>
		  break;
 800578c:	e057      	b.n	800583e <onEvent+0x112>
	  case EV_BEACON_MISSED:
		  debug_str("EV_BEACON_MISSED\r\n");
 800578e:	4b34      	ldr	r3, [pc, #208]	; (8005860 <onEvent+0x134>)
 8005790:	0018      	movs	r0, r3
 8005792:	f7fc f808 	bl	80017a6 <debug_str>
		  break;
 8005796:	e052      	b.n	800583e <onEvent+0x112>
	  case EV_BEACON_TRACKED:
		  debug_str("EV_BEACON_TRACKED\r\n");
 8005798:	4b32      	ldr	r3, [pc, #200]	; (8005864 <onEvent+0x138>)
 800579a:	0018      	movs	r0, r3
 800579c:	f7fc f803 	bl	80017a6 <debug_str>
		  break;
 80057a0:	e04d      	b.n	800583e <onEvent+0x112>
	  case EV_RFU1:
		  debug_str("EV_RFU1\r\n");
 80057a2:	4b31      	ldr	r3, [pc, #196]	; (8005868 <onEvent+0x13c>)
 80057a4:	0018      	movs	r0, r3
 80057a6:	f7fb fffe 	bl	80017a6 <debug_str>
		  break;
 80057aa:	e048      	b.n	800583e <onEvent+0x112>
	  case EV_REJOIN_FAILED:
		  debug_str("EV_REJOIN_FAILED\r\n");
 80057ac:	4b2f      	ldr	r3, [pc, #188]	; (800586c <onEvent+0x140>)
 80057ae:	0018      	movs	r0, r3
 80057b0:	f7fb fff9 	bl	80017a6 <debug_str>
		  break;
 80057b4:	e043      	b.n	800583e <onEvent+0x112>
	  case EV_TXCOMPLETE:
		  debug_str("EV_TXCOMPLETE (includes waiting for RX windows)\r\n");
 80057b6:	4b2e      	ldr	r3, [pc, #184]	; (8005870 <onEvent+0x144>)
 80057b8:	0018      	movs	r0, r3
 80057ba:	f7fb fff4 	bl	80017a6 <debug_str>
		  if (LMIC.txrxFlags & TXRX_ACK)
 80057be:	4a2d      	ldr	r2, [pc, #180]	; (8005874 <onEvent+0x148>)
 80057c0:	2346      	movs	r3, #70	; 0x46
 80057c2:	33ff      	adds	r3, #255	; 0xff
 80057c4:	5cd3      	ldrb	r3, [r2, r3]
 80057c6:	b25b      	sxtb	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	da03      	bge.n	80057d4 <onEvent+0xa8>
			  debug_str("Received ack\r\n");
 80057cc:	4b2a      	ldr	r3, [pc, #168]	; (8005878 <onEvent+0x14c>)
 80057ce:	0018      	movs	r0, r3
 80057d0:	f7fb ffe9 	bl	80017a6 <debug_str>
		  if (LMIC.dataLen) {
 80057d4:	4a27      	ldr	r2, [pc, #156]	; (8005874 <onEvent+0x148>)
 80057d6:	2348      	movs	r3, #72	; 0x48
 80057d8:	33ff      	adds	r3, #255	; 0xff
 80057da:	5cd3      	ldrb	r3, [r2, r3]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d02d      	beq.n	800583c <onEvent+0x110>
			  debug_str("Received ");
 80057e0:	4b26      	ldr	r3, [pc, #152]	; (800587c <onEvent+0x150>)
 80057e2:	0018      	movs	r0, r3
 80057e4:	f7fb ffdf 	bl	80017a6 <debug_str>
			  debug_int(LMIC.dataLen);
 80057e8:	4a22      	ldr	r2, [pc, #136]	; (8005874 <onEvent+0x148>)
 80057ea:	2348      	movs	r3, #72	; 0x48
 80057ec:	33ff      	adds	r3, #255	; 0xff
 80057ee:	5cd3      	ldrb	r3, [r2, r3]
 80057f0:	0018      	movs	r0, r3
 80057f2:	f7fb ffb3 	bl	800175c <debug_int>
			  debug_str(" bytes of payload\r\n");
 80057f6:	4b22      	ldr	r3, [pc, #136]	; (8005880 <onEvent+0x154>)
 80057f8:	0018      	movs	r0, r3
 80057fa:	f7fb ffd4 	bl	80017a6 <debug_str>
		  }
		  break;
 80057fe:	e01d      	b.n	800583c <onEvent+0x110>
	  case EV_LOST_TSYNC:
		  debug_str("EV_LOST_TSYNC\r\n");
 8005800:	4b20      	ldr	r3, [pc, #128]	; (8005884 <onEvent+0x158>)
 8005802:	0018      	movs	r0, r3
 8005804:	f7fb ffcf 	bl	80017a6 <debug_str>
		  break;
 8005808:	e019      	b.n	800583e <onEvent+0x112>
	  case EV_RESET:
		  debug_str("EV_RESET\r\n");
 800580a:	4b1f      	ldr	r3, [pc, #124]	; (8005888 <onEvent+0x15c>)
 800580c:	0018      	movs	r0, r3
 800580e:	f7fb ffca 	bl	80017a6 <debug_str>
		  break;
 8005812:	e014      	b.n	800583e <onEvent+0x112>
	  case EV_RXCOMPLETE:
		  // data received in ping slot
		  debug_str("EV_RXCOMPLETE\r\n");
 8005814:	4b1d      	ldr	r3, [pc, #116]	; (800588c <onEvent+0x160>)
 8005816:	0018      	movs	r0, r3
 8005818:	f7fb ffc5 	bl	80017a6 <debug_str>
		  break;
 800581c:	e00f      	b.n	800583e <onEvent+0x112>
	  case EV_LINK_DEAD:
		  debug_str("EV_LINK_DEAD\r\n");
 800581e:	4b1c      	ldr	r3, [pc, #112]	; (8005890 <onEvent+0x164>)
 8005820:	0018      	movs	r0, r3
 8005822:	f7fb ffc0 	bl	80017a6 <debug_str>
		  break;
 8005826:	e00a      	b.n	800583e <onEvent+0x112>
	  case EV_LINK_ALIVE:
		  debug_str("EV_LINK_ALIVE\r\n");
 8005828:	4b1a      	ldr	r3, [pc, #104]	; (8005894 <onEvent+0x168>)
 800582a:	0018      	movs	r0, r3
 800582c:	f7fb ffbb 	bl	80017a6 <debug_str>
		  break;
 8005830:	e005      	b.n	800583e <onEvent+0x112>
	  default:
		   debug_str("Unknown event\r\n");
 8005832:	4b19      	ldr	r3, [pc, #100]	; (8005898 <onEvent+0x16c>)
 8005834:	0018      	movs	r0, r3
 8005836:	f7fb ffb6 	bl	80017a6 <debug_str>
		  break;
 800583a:	e000      	b.n	800583e <onEvent+0x112>
		  break;
 800583c:	46c0      	nop			; (mov r8, r8)
    }
}
 800583e:	46c0      	nop			; (mov r8, r8)
 8005840:	46bd      	mov	sp, r7
 8005842:	b002      	add	sp, #8
 8005844:	bd80      	pop	{r7, pc}
 8005846:	46c0      	nop			; (mov r8, r8)
 8005848:	0800e018 	.word	0x0800e018
 800584c:	0800ca18 	.word	0x0800ca18
 8005850:	2000007c 	.word	0x2000007c
 8005854:	0800ca28 	.word	0x0800ca28
 8005858:	0800ca38 	.word	0x0800ca38
 800585c:	0800ca4c 	.word	0x0800ca4c
 8005860:	0800ca60 	.word	0x0800ca60
 8005864:	0800ca74 	.word	0x0800ca74
 8005868:	0800ca88 	.word	0x0800ca88
 800586c:	0800ca94 	.word	0x0800ca94
 8005870:	0800caa8 	.word	0x0800caa8
 8005874:	20000280 	.word	0x20000280
 8005878:	0800cadc 	.word	0x0800cadc
 800587c:	0800caec 	.word	0x0800caec
 8005880:	0800caf8 	.word	0x0800caf8
 8005884:	0800cb0c 	.word	0x0800cb0c
 8005888:	0800cb1c 	.word	0x0800cb1c
 800588c:	0800cb28 	.word	0x0800cb28
 8005890:	0800cb38 	.word	0x0800cb38
 8005894:	0800cb48 	.word	0x0800cb48
 8005898:	0800cb58 	.word	0x0800cb58

0800589c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80058a2:	f001 fd35 	bl	8007310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80058a6:	f000 f831 	bl	800590c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80058aa:	f000 f9eb 	bl	8005c84 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80058ae:	f000 f9b9 	bl	8005c24 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80058b2:	f000 f901 	bl	8005ab8 <MX_SPI1_Init>
  MX_TIM21_Init();
 80058b6:	f000 f937 	bl	8005b28 <MX_TIM21_Init>
  MX_ADC_Init();
 80058ba:	f000 f899 	bl	80059f0 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim21);    // <-----------  change to your setup
 80058be:	4b10      	ldr	r3, [pc, #64]	; (8005900 <main+0x64>)
 80058c0:	0018      	movs	r0, r3
 80058c2:	f004 ff1d 	bl	800a700 <HAL_TIM_Base_Start_IT>
   __HAL_SPI_ENABLE(&hspi1);         // <-----------  change to your setup
 80058c6:	4b0f      	ldr	r3, [pc, #60]	; (8005904 <main+0x68>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	4b0d      	ldr	r3, [pc, #52]	; (8005904 <main+0x68>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2140      	movs	r1, #64	; 0x40
 80058d2:	430a      	orrs	r2, r1
 80058d4:	601a      	str	r2, [r3, #0]

   osjob_t initjob;

   // initialize runtime env
   os_init();
 80058d6:	f000 fa9b 	bl	8005e10 <os_init>

   // initialize debug library
   debug_init();
 80058da:	f7fb ff03 	bl	80016e4 <debug_init>

   // setup initial job
   os_setCallback(&initjob, initfunc);
 80058de:	4a0a      	ldr	r2, [pc, #40]	; (8005908 <main+0x6c>)
 80058e0:	1d3b      	adds	r3, r7, #4
 80058e2:	0011      	movs	r1, r2
 80058e4:	0018      	movs	r0, r3
 80058e6:	f000 faed 	bl	8005ec4 <os_setCallback>

	Sdp800_Init(0x25); // initialize sensor module with address 0x25
 80058ea:	2025      	movs	r0, #37	; 0x25
 80058ec:	f001 f982 	bl	8006bf4 <Sdp800_Init>
//		 }
//	   }
//	 }

   // execute scheduled jobs and events
   os_runloop();
 80058f0:	f000 fb48 	bl	8005f84 <os_runloop>

   // (not reached)
   return 0;
 80058f4:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    	  }
  /* USER CODE END 3 */
}
 80058f6:	0018      	movs	r0, r3
 80058f8:	46bd      	mov	sp, r7
 80058fa:	b004      	add	sp, #16
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	46c0      	nop			; (mov r8, r8)
 8005900:	20000240 	.word	0x20000240
 8005904:	20000164 	.word	0x20000164
 8005908:	080055f9 	.word	0x080055f9

0800590c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800590c:	b590      	push	{r4, r7, lr}
 800590e:	b09f      	sub	sp, #124	; 0x7c
 8005910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005912:	2440      	movs	r4, #64	; 0x40
 8005914:	193b      	adds	r3, r7, r4
 8005916:	0018      	movs	r0, r3
 8005918:	2338      	movs	r3, #56	; 0x38
 800591a:	001a      	movs	r2, r3
 800591c:	2100      	movs	r1, #0
 800591e:	f006 ff9e 	bl	800c85e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005922:	232c      	movs	r3, #44	; 0x2c
 8005924:	18fb      	adds	r3, r7, r3
 8005926:	0018      	movs	r0, r3
 8005928:	2314      	movs	r3, #20
 800592a:	001a      	movs	r2, r3
 800592c:	2100      	movs	r1, #0
 800592e:	f006 ff96 	bl	800c85e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005932:	1d3b      	adds	r3, r7, #4
 8005934:	0018      	movs	r0, r3
 8005936:	2328      	movs	r3, #40	; 0x28
 8005938:	001a      	movs	r2, r3
 800593a:	2100      	movs	r1, #0
 800593c:	f006 ff8f 	bl	800c85e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005940:	4b29      	ldr	r3, [pc, #164]	; (80059e8 <SystemClock_Config+0xdc>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a29      	ldr	r2, [pc, #164]	; (80059ec <SystemClock_Config+0xe0>)
 8005946:	401a      	ands	r2, r3
 8005948:	4b27      	ldr	r3, [pc, #156]	; (80059e8 <SystemClock_Config+0xdc>)
 800594a:	2180      	movs	r1, #128	; 0x80
 800594c:	0109      	lsls	r1, r1, #4
 800594e:	430a      	orrs	r2, r1
 8005950:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005952:	0021      	movs	r1, r4
 8005954:	187b      	adds	r3, r7, r1
 8005956:	2202      	movs	r2, #2
 8005958:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800595a:	187b      	adds	r3, r7, r1
 800595c:	2201      	movs	r2, #1
 800595e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005960:	187b      	adds	r3, r7, r1
 8005962:	2210      	movs	r2, #16
 8005964:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005966:	187b      	adds	r3, r7, r1
 8005968:	2202      	movs	r2, #2
 800596a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800596c:	187b      	adds	r3, r7, r1
 800596e:	2200      	movs	r2, #0
 8005970:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8005972:	187b      	adds	r3, r7, r1
 8005974:	2280      	movs	r2, #128	; 0x80
 8005976:	02d2      	lsls	r2, r2, #11
 8005978:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800597a:	187b      	adds	r3, r7, r1
 800597c:	2280      	movs	r2, #128	; 0x80
 800597e:	03d2      	lsls	r2, r2, #15
 8005980:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005982:	187b      	adds	r3, r7, r1
 8005984:	0018      	movs	r0, r3
 8005986:	f002 fe7f 	bl	8008688 <HAL_RCC_OscConfig>
 800598a:	1e03      	subs	r3, r0, #0
 800598c:	d001      	beq.n	8005992 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800598e:	f000 fa31 	bl	8005df4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005992:	212c      	movs	r1, #44	; 0x2c
 8005994:	187b      	adds	r3, r7, r1
 8005996:	220f      	movs	r2, #15
 8005998:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800599a:	187b      	adds	r3, r7, r1
 800599c:	2203      	movs	r2, #3
 800599e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80059a0:	187b      	adds	r3, r7, r1
 80059a2:	2200      	movs	r2, #0
 80059a4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80059a6:	187b      	adds	r3, r7, r1
 80059a8:	2200      	movs	r2, #0
 80059aa:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80059ac:	187b      	adds	r3, r7, r1
 80059ae:	2200      	movs	r2, #0
 80059b0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80059b2:	187b      	adds	r3, r7, r1
 80059b4:	2101      	movs	r1, #1
 80059b6:	0018      	movs	r0, r3
 80059b8:	f003 fbfa 	bl	80091b0 <HAL_RCC_ClockConfig>
 80059bc:	1e03      	subs	r3, r0, #0
 80059be:	d001      	beq.n	80059c4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80059c0:	f000 fa18 	bl	8005df4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80059c4:	1d3b      	adds	r3, r7, #4
 80059c6:	2202      	movs	r2, #2
 80059c8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80059ca:	1d3b      	adds	r3, r7, #4
 80059cc:	2200      	movs	r2, #0
 80059ce:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80059d0:	1d3b      	adds	r3, r7, #4
 80059d2:	0018      	movs	r0, r3
 80059d4:	f003 feca 	bl	800976c <HAL_RCCEx_PeriphCLKConfig>
 80059d8:	1e03      	subs	r3, r0, #0
 80059da:	d001      	beq.n	80059e0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80059dc:	f000 fa0a 	bl	8005df4 <Error_Handler>
  }
}
 80059e0:	46c0      	nop			; (mov r8, r8)
 80059e2:	46bd      	mov	sp, r7
 80059e4:	b01f      	add	sp, #124	; 0x7c
 80059e6:	bd90      	pop	{r4, r7, pc}
 80059e8:	40007000 	.word	0x40007000
 80059ec:	ffffe7ff 	.word	0xffffe7ff

080059f0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80059f6:	003b      	movs	r3, r7
 80059f8:	0018      	movs	r0, r3
 80059fa:	2308      	movs	r3, #8
 80059fc:	001a      	movs	r2, r3
 80059fe:	2100      	movs	r1, #0
 8005a00:	f006 ff2d 	bl	800c85e <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8005a04:	4b2a      	ldr	r3, [pc, #168]	; (8005ab0 <MX_ADC_Init+0xc0>)
 8005a06:	4a2b      	ldr	r2, [pc, #172]	; (8005ab4 <MX_ADC_Init+0xc4>)
 8005a08:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8005a0a:	4b29      	ldr	r3, [pc, #164]	; (8005ab0 <MX_ADC_Init+0xc0>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8005a10:	4b27      	ldr	r3, [pc, #156]	; (8005ab0 <MX_ADC_Init+0xc0>)
 8005a12:	2280      	movs	r2, #128	; 0x80
 8005a14:	05d2      	lsls	r2, r2, #23
 8005a16:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8005a18:	4b25      	ldr	r3, [pc, #148]	; (8005ab0 <MX_ADC_Init+0xc0>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005a1e:	4b24      	ldr	r3, [pc, #144]	; (8005ab0 <MX_ADC_Init+0xc0>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8005a24:	4b22      	ldr	r3, [pc, #136]	; (8005ab0 <MX_ADC_Init+0xc0>)
 8005a26:	2201      	movs	r2, #1
 8005a28:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005a2a:	4b21      	ldr	r3, [pc, #132]	; (8005ab0 <MX_ADC_Init+0xc0>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8005a30:	4b1f      	ldr	r3, [pc, #124]	; (8005ab0 <MX_ADC_Init+0xc0>)
 8005a32:	2220      	movs	r2, #32
 8005a34:	2100      	movs	r1, #0
 8005a36:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8005a38:	4b1d      	ldr	r3, [pc, #116]	; (8005ab0 <MX_ADC_Init+0xc0>)
 8005a3a:	2221      	movs	r2, #33	; 0x21
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005a40:	4b1b      	ldr	r3, [pc, #108]	; (8005ab0 <MX_ADC_Init+0xc0>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005a46:	4b1a      	ldr	r3, [pc, #104]	; (8005ab0 <MX_ADC_Init+0xc0>)
 8005a48:	22c2      	movs	r2, #194	; 0xc2
 8005a4a:	32ff      	adds	r2, #255	; 0xff
 8005a4c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8005a4e:	4b18      	ldr	r3, [pc, #96]	; (8005ab0 <MX_ADC_Init+0xc0>)
 8005a50:	222c      	movs	r2, #44	; 0x2c
 8005a52:	2100      	movs	r1, #0
 8005a54:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005a56:	4b16      	ldr	r3, [pc, #88]	; (8005ab0 <MX_ADC_Init+0xc0>)
 8005a58:	2204      	movs	r2, #4
 8005a5a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005a5c:	4b14      	ldr	r3, [pc, #80]	; (8005ab0 <MX_ADC_Init+0xc0>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8005a62:	4b13      	ldr	r3, [pc, #76]	; (8005ab0 <MX_ADC_Init+0xc0>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8005a68:	4b11      	ldr	r3, [pc, #68]	; (8005ab0 <MX_ADC_Init+0xc0>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8005a6e:	4b10      	ldr	r3, [pc, #64]	; (8005ab0 <MX_ADC_Init+0xc0>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8005a74:	4b0e      	ldr	r3, [pc, #56]	; (8005ab0 <MX_ADC_Init+0xc0>)
 8005a76:	0018      	movs	r0, r3
 8005a78:	f001 fcde 	bl	8007438 <HAL_ADC_Init>
 8005a7c:	1e03      	subs	r3, r0, #0
 8005a7e:	d001      	beq.n	8005a84 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8005a80:	f000 f9b8 	bl	8005df4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005a84:	003b      	movs	r3, r7
 8005a86:	2201      	movs	r2, #1
 8005a88:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005a8a:	003b      	movs	r3, r7
 8005a8c:	2280      	movs	r2, #128	; 0x80
 8005a8e:	0152      	lsls	r2, r2, #5
 8005a90:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005a92:	003a      	movs	r2, r7
 8005a94:	4b06      	ldr	r3, [pc, #24]	; (8005ab0 <MX_ADC_Init+0xc0>)
 8005a96:	0011      	movs	r1, r2
 8005a98:	0018      	movs	r0, r3
 8005a9a:	f002 f86b 	bl	8007b74 <HAL_ADC_ConfigChannel>
 8005a9e:	1e03      	subs	r3, r0, #0
 8005aa0:	d001      	beq.n	8005aa6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8005aa2:	f000 f9a7 	bl	8005df4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8005aa6:	46c0      	nop			; (mov r8, r8)
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	b002      	add	sp, #8
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	46c0      	nop			; (mov r8, r8)
 8005ab0:	20000438 	.word	0x20000438
 8005ab4:	40012400 	.word	0x40012400

08005ab8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005abc:	4b18      	ldr	r3, [pc, #96]	; (8005b20 <MX_SPI1_Init+0x68>)
 8005abe:	4a19      	ldr	r2, [pc, #100]	; (8005b24 <MX_SPI1_Init+0x6c>)
 8005ac0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005ac2:	4b17      	ldr	r3, [pc, #92]	; (8005b20 <MX_SPI1_Init+0x68>)
 8005ac4:	2282      	movs	r2, #130	; 0x82
 8005ac6:	0052      	lsls	r2, r2, #1
 8005ac8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005aca:	4b15      	ldr	r3, [pc, #84]	; (8005b20 <MX_SPI1_Init+0x68>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005ad0:	4b13      	ldr	r3, [pc, #76]	; (8005b20 <MX_SPI1_Init+0x68>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ad6:	4b12      	ldr	r3, [pc, #72]	; (8005b20 <MX_SPI1_Init+0x68>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005adc:	4b10      	ldr	r3, [pc, #64]	; (8005b20 <MX_SPI1_Init+0x68>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005ae2:	4b0f      	ldr	r3, [pc, #60]	; (8005b20 <MX_SPI1_Init+0x68>)
 8005ae4:	2280      	movs	r2, #128	; 0x80
 8005ae6:	0092      	lsls	r2, r2, #2
 8005ae8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005aea:	4b0d      	ldr	r3, [pc, #52]	; (8005b20 <MX_SPI1_Init+0x68>)
 8005aec:	2238      	movs	r2, #56	; 0x38
 8005aee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005af0:	4b0b      	ldr	r3, [pc, #44]	; (8005b20 <MX_SPI1_Init+0x68>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005af6:	4b0a      	ldr	r3, [pc, #40]	; (8005b20 <MX_SPI1_Init+0x68>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005afc:	4b08      	ldr	r3, [pc, #32]	; (8005b20 <MX_SPI1_Init+0x68>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005b02:	4b07      	ldr	r3, [pc, #28]	; (8005b20 <MX_SPI1_Init+0x68>)
 8005b04:	2207      	movs	r2, #7
 8005b06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005b08:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <MX_SPI1_Init+0x68>)
 8005b0a:	0018      	movs	r0, r3
 8005b0c:	f004 f8ba 	bl	8009c84 <HAL_SPI_Init>
 8005b10:	1e03      	subs	r3, r0, #0
 8005b12:	d001      	beq.n	8005b18 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005b14:	f000 f96e 	bl	8005df4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005b18:	46c0      	nop			; (mov r8, r8)
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	46c0      	nop			; (mov r8, r8)
 8005b20:	20000164 	.word	0x20000164
 8005b24:	40013000 	.word	0x40013000

08005b28 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b08a      	sub	sp, #40	; 0x28
 8005b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b2e:	2318      	movs	r3, #24
 8005b30:	18fb      	adds	r3, r7, r3
 8005b32:	0018      	movs	r0, r3
 8005b34:	2310      	movs	r3, #16
 8005b36:	001a      	movs	r2, r3
 8005b38:	2100      	movs	r1, #0
 8005b3a:	f006 fe90 	bl	800c85e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b3e:	2310      	movs	r3, #16
 8005b40:	18fb      	adds	r3, r7, r3
 8005b42:	0018      	movs	r0, r3
 8005b44:	2308      	movs	r3, #8
 8005b46:	001a      	movs	r2, r3
 8005b48:	2100      	movs	r1, #0
 8005b4a:	f006 fe88 	bl	800c85e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005b4e:	003b      	movs	r3, r7
 8005b50:	0018      	movs	r0, r3
 8005b52:	2310      	movs	r3, #16
 8005b54:	001a      	movs	r2, r3
 8005b56:	2100      	movs	r1, #0
 8005b58:	f006 fe81 	bl	800c85e <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8005b5c:	4b2d      	ldr	r3, [pc, #180]	; (8005c14 <MX_TIM21_Init+0xec>)
 8005b5e:	4a2e      	ldr	r2, [pc, #184]	; (8005c18 <MX_TIM21_Init+0xf0>)
 8005b60:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 1000 - 1;
 8005b62:	4b2c      	ldr	r3, [pc, #176]	; (8005c14 <MX_TIM21_Init+0xec>)
 8005b64:	4a2d      	ldr	r2, [pc, #180]	; (8005c1c <MX_TIM21_Init+0xf4>)
 8005b66:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b68:	4b2a      	ldr	r3, [pc, #168]	; (8005c14 <MX_TIM21_Init+0xec>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535 - 1;
 8005b6e:	4b29      	ldr	r3, [pc, #164]	; (8005c14 <MX_TIM21_Init+0xec>)
 8005b70:	4a2b      	ldr	r2, [pc, #172]	; (8005c20 <MX_TIM21_Init+0xf8>)
 8005b72:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b74:	4b27      	ldr	r3, [pc, #156]	; (8005c14 <MX_TIM21_Init+0xec>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b7a:	4b26      	ldr	r3, [pc, #152]	; (8005c14 <MX_TIM21_Init+0xec>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8005b80:	4b24      	ldr	r3, [pc, #144]	; (8005c14 <MX_TIM21_Init+0xec>)
 8005b82:	0018      	movs	r0, r3
 8005b84:	f004 fcec 	bl	800a560 <HAL_TIM_Base_Init>
 8005b88:	1e03      	subs	r3, r0, #0
 8005b8a:	d001      	beq.n	8005b90 <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 8005b8c:	f000 f932 	bl	8005df4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b90:	2118      	movs	r1, #24
 8005b92:	187b      	adds	r3, r7, r1
 8005b94:	2280      	movs	r2, #128	; 0x80
 8005b96:	0152      	lsls	r2, r2, #5
 8005b98:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8005b9a:	187a      	adds	r2, r7, r1
 8005b9c:	4b1d      	ldr	r3, [pc, #116]	; (8005c14 <MX_TIM21_Init+0xec>)
 8005b9e:	0011      	movs	r1, r2
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	f005 f8f7 	bl	800ad94 <HAL_TIM_ConfigClockSource>
 8005ba6:	1e03      	subs	r3, r0, #0
 8005ba8:	d001      	beq.n	8005bae <MX_TIM21_Init+0x86>
  {
    Error_Handler();
 8005baa:	f000 f923 	bl	8005df4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 8005bae:	4b19      	ldr	r3, [pc, #100]	; (8005c14 <MX_TIM21_Init+0xec>)
 8005bb0:	0018      	movs	r0, r3
 8005bb2:	f004 fe23 	bl	800a7fc <HAL_TIM_OC_Init>
 8005bb6:	1e03      	subs	r3, r0, #0
 8005bb8:	d001      	beq.n	8005bbe <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8005bba:	f000 f91b 	bl	8005df4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bbe:	2110      	movs	r1, #16
 8005bc0:	187b      	adds	r3, r7, r1
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bc6:	187b      	adds	r3, r7, r1
 8005bc8:	2200      	movs	r2, #0
 8005bca:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8005bcc:	187a      	adds	r2, r7, r1
 8005bce:	4b11      	ldr	r3, [pc, #68]	; (8005c14 <MX_TIM21_Init+0xec>)
 8005bd0:	0011      	movs	r1, r2
 8005bd2:	0018      	movs	r0, r3
 8005bd4:	f005 fdf6 	bl	800b7c4 <HAL_TIMEx_MasterConfigSynchronization>
 8005bd8:	1e03      	subs	r3, r0, #0
 8005bda:	d001      	beq.n	8005be0 <MX_TIM21_Init+0xb8>
  {
    Error_Handler();
 8005bdc:	f000 f90a 	bl	8005df4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8005be0:	003b      	movs	r3, r7
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8005be6:	003b      	movs	r3, r7
 8005be8:	2200      	movs	r2, #0
 8005bea:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005bec:	003b      	movs	r3, r7
 8005bee:	2200      	movs	r2, #0
 8005bf0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005bf2:	003b      	movs	r3, r7
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005bf8:	0039      	movs	r1, r7
 8005bfa:	4b06      	ldr	r3, [pc, #24]	; (8005c14 <MX_TIM21_Init+0xec>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	0018      	movs	r0, r3
 8005c00:	f004 ffbe 	bl	800ab80 <HAL_TIM_OC_ConfigChannel>
 8005c04:	1e03      	subs	r3, r0, #0
 8005c06:	d001      	beq.n	8005c0c <MX_TIM21_Init+0xe4>
  {
    Error_Handler();
 8005c08:	f000 f8f4 	bl	8005df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8005c0c:	46c0      	nop			; (mov r8, r8)
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	b00a      	add	sp, #40	; 0x28
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	20000240 	.word	0x20000240
 8005c18:	40010800 	.word	0x40010800
 8005c1c:	000003e7 	.word	0x000003e7
 8005c20:	0000fffe 	.word	0x0000fffe

08005c24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005c28:	4b14      	ldr	r3, [pc, #80]	; (8005c7c <MX_USART2_UART_Init+0x58>)
 8005c2a:	4a15      	ldr	r2, [pc, #84]	; (8005c80 <MX_USART2_UART_Init+0x5c>)
 8005c2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005c2e:	4b13      	ldr	r3, [pc, #76]	; (8005c7c <MX_USART2_UART_Init+0x58>)
 8005c30:	22e1      	movs	r2, #225	; 0xe1
 8005c32:	0252      	lsls	r2, r2, #9
 8005c34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005c36:	4b11      	ldr	r3, [pc, #68]	; (8005c7c <MX_USART2_UART_Init+0x58>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005c3c:	4b0f      	ldr	r3, [pc, #60]	; (8005c7c <MX_USART2_UART_Init+0x58>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005c42:	4b0e      	ldr	r3, [pc, #56]	; (8005c7c <MX_USART2_UART_Init+0x58>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005c48:	4b0c      	ldr	r3, [pc, #48]	; (8005c7c <MX_USART2_UART_Init+0x58>)
 8005c4a:	220c      	movs	r2, #12
 8005c4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c4e:	4b0b      	ldr	r3, [pc, #44]	; (8005c7c <MX_USART2_UART_Init+0x58>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c54:	4b09      	ldr	r3, [pc, #36]	; (8005c7c <MX_USART2_UART_Init+0x58>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c5a:	4b08      	ldr	r3, [pc, #32]	; (8005c7c <MX_USART2_UART_Init+0x58>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c60:	4b06      	ldr	r3, [pc, #24]	; (8005c7c <MX_USART2_UART_Init+0x58>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005c66:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <MX_USART2_UART_Init+0x58>)
 8005c68:	0018      	movs	r0, r3
 8005c6a:	f005 fe65 	bl	800b938 <HAL_UART_Init>
 8005c6e:	1e03      	subs	r3, r0, #0
 8005c70:	d001      	beq.n	8005c76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005c72:	f000 f8bf 	bl	8005df4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005c76:	46c0      	nop			; (mov r8, r8)
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	200001bc 	.word	0x200001bc
 8005c80:	40004400 	.word	0x40004400

08005c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005c84:	b590      	push	{r4, r7, lr}
 8005c86:	b089      	sub	sp, #36	; 0x24
 8005c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c8a:	240c      	movs	r4, #12
 8005c8c:	193b      	adds	r3, r7, r4
 8005c8e:	0018      	movs	r0, r3
 8005c90:	2314      	movs	r3, #20
 8005c92:	001a      	movs	r2, r3
 8005c94:	2100      	movs	r1, #0
 8005c96:	f006 fde2 	bl	800c85e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c9a:	4b52      	ldr	r3, [pc, #328]	; (8005de4 <MX_GPIO_Init+0x160>)
 8005c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c9e:	4b51      	ldr	r3, [pc, #324]	; (8005de4 <MX_GPIO_Init+0x160>)
 8005ca0:	2104      	movs	r1, #4
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ca6:	4b4f      	ldr	r3, [pc, #316]	; (8005de4 <MX_GPIO_Init+0x160>)
 8005ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005caa:	2204      	movs	r2, #4
 8005cac:	4013      	ands	r3, r2
 8005cae:	60bb      	str	r3, [r7, #8]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cb2:	4b4c      	ldr	r3, [pc, #304]	; (8005de4 <MX_GPIO_Init+0x160>)
 8005cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb6:	4b4b      	ldr	r3, [pc, #300]	; (8005de4 <MX_GPIO_Init+0x160>)
 8005cb8:	2101      	movs	r1, #1
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8005cbe:	4b49      	ldr	r3, [pc, #292]	; (8005de4 <MX_GPIO_Init+0x160>)
 8005cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	607b      	str	r3, [r7, #4]
 8005cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cca:	4b46      	ldr	r3, [pc, #280]	; (8005de4 <MX_GPIO_Init+0x160>)
 8005ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cce:	4b45      	ldr	r3, [pc, #276]	; (8005de4 <MX_GPIO_Init+0x160>)
 8005cd0:	2102      	movs	r1, #2
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8005cd6:	4b43      	ldr	r3, [pc, #268]	; (8005de4 <MX_GPIO_Init+0x160>)
 8005cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cda:	2202      	movs	r2, #2
 8005cdc:	4013      	ands	r3, r2
 8005cde:	603b      	str	r3, [r7, #0]
 8005ce0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8005ce2:	4b41      	ldr	r3, [pc, #260]	; (8005de8 <MX_GPIO_Init+0x164>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	0018      	movs	r0, r3
 8005cea:	f002 fc35 	bl	8008558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|NSS_Pin, GPIO_PIN_RESET);
 8005cee:	493f      	ldr	r1, [pc, #252]	; (8005dec <MX_GPIO_Init+0x168>)
 8005cf0:	23a0      	movs	r3, #160	; 0xa0
 8005cf2:	05db      	lsls	r3, r3, #23
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	0018      	movs	r0, r3
 8005cf8:	f002 fc2e 	bl	8008558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8005cfc:	193b      	adds	r3, r7, r4
 8005cfe:	2201      	movs	r2, #1
 8005d00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d02:	193b      	adds	r3, r7, r4
 8005d04:	2201      	movs	r2, #1
 8005d06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d08:	193b      	adds	r3, r7, r4
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d0e:	193b      	adds	r3, r7, r4
 8005d10:	2200      	movs	r2, #0
 8005d12:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8005d14:	193b      	adds	r3, r7, r4
 8005d16:	4a34      	ldr	r2, [pc, #208]	; (8005de8 <MX_GPIO_Init+0x164>)
 8005d18:	0019      	movs	r1, r3
 8005d1a:	0010      	movs	r0, r2
 8005d1c:	f002 f990 	bl	8008040 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin NSS_Pin */
  GPIO_InitStruct.Pin = LED_Pin|NSS_Pin;
 8005d20:	193b      	adds	r3, r7, r4
 8005d22:	4a32      	ldr	r2, [pc, #200]	; (8005dec <MX_GPIO_Init+0x168>)
 8005d24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d26:	193b      	adds	r3, r7, r4
 8005d28:	2201      	movs	r2, #1
 8005d2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d2c:	193b      	adds	r3, r7, r4
 8005d2e:	2200      	movs	r2, #0
 8005d30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d32:	193b      	adds	r3, r7, r4
 8005d34:	2200      	movs	r2, #0
 8005d36:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d38:	193a      	adds	r2, r7, r4
 8005d3a:	23a0      	movs	r3, #160	; 0xa0
 8005d3c:	05db      	lsls	r3, r3, #23
 8005d3e:	0011      	movs	r1, r2
 8005d40:	0018      	movs	r0, r3
 8005d42:	f002 f97d 	bl	8008040 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO2_Pin DIO1_Pin DIO0_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin|DIO1_Pin|DIO0_Pin;
 8005d46:	0021      	movs	r1, r4
 8005d48:	187b      	adds	r3, r7, r1
 8005d4a:	2213      	movs	r2, #19
 8005d4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005d4e:	187b      	adds	r3, r7, r1
 8005d50:	2288      	movs	r2, #136	; 0x88
 8005d52:	0352      	lsls	r2, r2, #13
 8005d54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d56:	187b      	adds	r3, r7, r1
 8005d58:	2200      	movs	r2, #0
 8005d5a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d5c:	000c      	movs	r4, r1
 8005d5e:	187b      	adds	r3, r7, r1
 8005d60:	4a23      	ldr	r2, [pc, #140]	; (8005df0 <MX_GPIO_Init+0x16c>)
 8005d62:	0019      	movs	r1, r3
 8005d64:	0010      	movs	r0, r2
 8005d66:	f002 f96b 	bl	8008040 <HAL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005d6a:	0021      	movs	r1, r4
 8005d6c:	187b      	adds	r3, r7, r1
 8005d6e:	2280      	movs	r2, #128	; 0x80
 8005d70:	0052      	lsls	r2, r2, #1
 8005d72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005d74:	000c      	movs	r4, r1
 8005d76:	193b      	adds	r3, r7, r4
 8005d78:	2211      	movs	r2, #17
 8005d7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d7c:	193b      	adds	r3, r7, r4
 8005d7e:	2200      	movs	r2, #0
 8005d80:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d82:	193b      	adds	r3, r7, r4
 8005d84:	2201      	movs	r2, #1
 8005d86:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d88:	193b      	adds	r3, r7, r4
 8005d8a:	4a19      	ldr	r2, [pc, #100]	; (8005df0 <MX_GPIO_Init+0x16c>)
 8005d8c:	0019      	movs	r1, r3
 8005d8e:	0010      	movs	r0, r2
 8005d90:	f002 f956 	bl	8008040 <HAL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005d94:	0021      	movs	r1, r4
 8005d96:	187b      	adds	r3, r7, r1
 8005d98:	2280      	movs	r2, #128	; 0x80
 8005d9a:	0092      	lsls	r2, r2, #2
 8005d9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005d9e:	187b      	adds	r3, r7, r1
 8005da0:	2211      	movs	r2, #17
 8005da2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005da4:	187b      	adds	r3, r7, r1
 8005da6:	2200      	movs	r2, #0
 8005da8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005daa:	187b      	adds	r3, r7, r1
 8005dac:	2201      	movs	r2, #1
 8005dae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005db0:	187b      	adds	r3, r7, r1
 8005db2:	4a0f      	ldr	r2, [pc, #60]	; (8005df0 <MX_GPIO_Init+0x16c>)
 8005db4:	0019      	movs	r1, r3
 8005db6:	0010      	movs	r0, r2
 8005db8:	f002 f942 	bl	8008040 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	2005      	movs	r0, #5
 8005dc2:	f002 f8f3 	bl	8007fac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8005dc6:	2005      	movs	r0, #5
 8005dc8:	f002 f910 	bl	8007fec <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8005dcc:	2200      	movs	r2, #0
 8005dce:	2100      	movs	r1, #0
 8005dd0:	2007      	movs	r0, #7
 8005dd2:	f002 f8eb 	bl	8007fac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8005dd6:	2007      	movs	r0, #7
 8005dd8:	f002 f908 	bl	8007fec <HAL_NVIC_EnableIRQ>

}
 8005ddc:	46c0      	nop			; (mov r8, r8)
 8005dde:	46bd      	mov	sp, r7
 8005de0:	b009      	add	sp, #36	; 0x24
 8005de2:	bd90      	pop	{r4, r7, pc}
 8005de4:	40021000 	.word	0x40021000
 8005de8:	50000800 	.word	0x50000800
 8005dec:	00008020 	.word	0x00008020
 8005df0:	50000400 	.word	0x50000400

08005df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005df8:	46c0      	nop			; (mov r8, r8)
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b082      	sub	sp, #8
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8005e08:	46c0      	nop			; (mov r8, r8)
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	b002      	add	sp, #8
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <os_init>:
static struct {
    osjob_t* scheduledjobs;
    osjob_t* runnablejobs;
} OS;

void os_init () {
 8005e10:	b580      	push	{r7, lr}
 8005e12:	af00      	add	r7, sp, #0
    memset(&OS, 0x00, sizeof(OS));
 8005e14:	4b07      	ldr	r3, [pc, #28]	; (8005e34 <os_init+0x24>)
 8005e16:	2208      	movs	r2, #8
 8005e18:	2100      	movs	r1, #0
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	f006 fd1f 	bl	800c85e <memset>
    hal_init();
 8005e20:	f7fb ff10 	bl	8001c44 <hal_init>
    radio_init();
 8005e24:	f000 fd26 	bl	8006874 <radio_init>
    LMIC_init();
 8005e28:	f7ff fb24 	bl	8005474 <LMIC_init>
}
 8005e2c:	46c0      	nop			; (mov r8, r8)
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	46c0      	nop			; (mov r8, r8)
 8005e34:	20000088 	.word	0x20000088

08005e38 <os_getTime>:

ostime_t os_getTime () {
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
    return hal_ticks();
 8005e3c:	f7fb fe20 	bl	8001a80 <hal_ticks>
 8005e40:	0003      	movs	r3, r0
}
 8005e42:	0018      	movs	r0, r3
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <unlinkjob>:

// unlink job from queue, return if removed
static int unlinkjob (osjob_t** pnext, osjob_t* job) {
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
    for( ; *pnext; pnext = &((*pnext)->next)) {
 8005e52:	e00d      	b.n	8005e70 <unlinkjob+0x28>
        if(*pnext == job) { // unlink
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d105      	bne.n	8005e6a <unlinkjob+0x22>
            *pnext = job->next;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	601a      	str	r2, [r3, #0]
            return 1;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e007      	b.n	8005e7a <unlinkjob+0x32>
    for( ; *pnext; pnext = &((*pnext)->next)) {
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	607b      	str	r3, [r7, #4]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1ed      	bne.n	8005e54 <unlinkjob+0xc>
        }
    }
    return 0;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	0018      	movs	r0, r3
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	b002      	add	sp, #8
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <os_clearCallback>:

// clear scheduled job
void os_clearCallback (osjob_t* job) {
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
    hal_disableIRQs();
 8005e8c:	f7fb feb4 	bl	8001bf8 <hal_disableIRQs>
    unlinkjob(&OS.scheduledjobs, job) || unlinkjob(&OS.runnablejobs, job);
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	4b0a      	ldr	r3, [pc, #40]	; (8005ebc <os_clearCallback+0x38>)
 8005e94:	0011      	movs	r1, r2
 8005e96:	0018      	movs	r0, r3
 8005e98:	f7ff ffd6 	bl	8005e48 <unlinkjob>
 8005e9c:	1e03      	subs	r3, r0, #0
 8005e9e:	d105      	bne.n	8005eac <os_clearCallback+0x28>
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	4b07      	ldr	r3, [pc, #28]	; (8005ec0 <os_clearCallback+0x3c>)
 8005ea4:	0011      	movs	r1, r2
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	f7ff ffce 	bl	8005e48 <unlinkjob>
 8005eac:	46c0      	nop			; (mov r8, r8)
    hal_enableIRQs();
 8005eae:	f7fb feb1 	bl	8001c14 <hal_enableIRQs>
}
 8005eb2:	46c0      	nop			; (mov r8, r8)
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	b002      	add	sp, #8
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	46c0      	nop			; (mov r8, r8)
 8005ebc:	20000088 	.word	0x20000088
 8005ec0:	2000008c 	.word	0x2000008c

08005ec4 <os_setCallback>:

// schedule immediately runnable job
void os_setCallback (osjob_t* job, osjobcb_t cb) {
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
    osjob_t** pnext;
    hal_disableIRQs();
 8005ece:	f7fb fe93 	bl	8001bf8 <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.runnablejobs, job);
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	4b0e      	ldr	r3, [pc, #56]	; (8005f10 <os_setCallback+0x4c>)
 8005ed6:	0011      	movs	r1, r2
 8005ed8:	0018      	movs	r0, r3
 8005eda:	f7ff ffb5 	bl	8005e48 <unlinkjob>
    // fill-in job
    job->func = cb;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	601a      	str	r2, [r3, #0]
    // add to end of run queue
    for(pnext=&OS.runnablejobs; *pnext; pnext=&((*pnext)->next));
 8005eea:	4b09      	ldr	r3, [pc, #36]	; (8005f10 <os_setCallback+0x4c>)
 8005eec:	60fb      	str	r3, [r7, #12]
 8005eee:	e002      	b.n	8005ef6 <os_setCallback+0x32>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	60fb      	str	r3, [r7, #12]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1f8      	bne.n	8005ef0 <os_setCallback+0x2c>
    *pnext = job;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 8005f04:	f7fb fe86 	bl	8001c14 <hal_enableIRQs>
}
 8005f08:	46c0      	nop			; (mov r8, r8)
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	b004      	add	sp, #16
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	2000008c 	.word	0x2000008c

08005f14 <os_setTimedCallback>:

// schedule timed job
void os_setTimedCallback (osjob_t* job, ostime_t time, osjobcb_t cb) {
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
    osjob_t** pnext;
    hal_disableIRQs();
 8005f20:	f7fb fe6a 	bl	8001bf8 <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.scheduledjobs, job);
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	4b16      	ldr	r3, [pc, #88]	; (8005f80 <os_setTimedCallback+0x6c>)
 8005f28:	0011      	movs	r1, r2
 8005f2a:	0018      	movs	r0, r3
 8005f2c:	f7ff ff8c 	bl	8005e48 <unlinkjob>
    // fill-in job
    job->deadline = time;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	605a      	str	r2, [r3, #4]
    job->func = cb;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]
    // insert into schedule
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 8005f42:	4b0f      	ldr	r3, [pc, #60]	; (8005f80 <os_setTimedCallback+0x6c>)
 8005f44:	617b      	str	r3, [r7, #20]
 8005f46:	e00e      	b.n	8005f66 <os_setTimedCallback+0x52>
        if((*pnext)->deadline - time > 0) { // (cmp diff, not abs!)
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	dd04      	ble.n	8005f60 <os_setTimedCallback+0x4c>
            // enqueue before next element and stop
            job->next = *pnext;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	601a      	str	r2, [r3, #0]
            break;
 8005f5e:	e006      	b.n	8005f6e <os_setTimedCallback+0x5a>
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	617b      	str	r3, [r7, #20]
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1ec      	bne.n	8005f48 <os_setTimedCallback+0x34>
        }
    }
    *pnext = job;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 8005f74:	f7fb fe4e 	bl	8001c14 <hal_enableIRQs>
}
 8005f78:	46c0      	nop			; (mov r8, r8)
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	b006      	add	sp, #24
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	20000088 	.word	0x20000088

08005f84 <os_runloop>:

// execute jobs from timer and from run queue
void os_runloop () {
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
    while(1) {
        osjob_t* j = NULL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	607b      	str	r3, [r7, #4]
        hal_disableIRQs();
 8005f8e:	f7fb fe33 	bl	8001bf8 <hal_disableIRQs>
        // check for runnable jobs
        if(OS.runnablejobs) {
 8005f92:	4b16      	ldr	r3, [pc, #88]	; (8005fec <os_runloop+0x68>)
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d007      	beq.n	8005faa <os_runloop+0x26>
            j = OS.runnablejobs;
 8005f9a:	4b14      	ldr	r3, [pc, #80]	; (8005fec <os_runloop+0x68>)
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	607b      	str	r3, [r7, #4]
            OS.runnablejobs = j->next;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	4b11      	ldr	r3, [pc, #68]	; (8005fec <os_runloop+0x68>)
 8005fa6:	605a      	str	r2, [r3, #4]
 8005fa8:	e015      	b.n	8005fd6 <os_runloop+0x52>
        } else if(OS.scheduledjobs && hal_checkTimer(OS.scheduledjobs->deadline)) { // check for expired timed jobs
 8005faa:	4b10      	ldr	r3, [pc, #64]	; (8005fec <os_runloop+0x68>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00f      	beq.n	8005fd2 <os_runloop+0x4e>
 8005fb2:	4b0e      	ldr	r3, [pc, #56]	; (8005fec <os_runloop+0x68>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	0018      	movs	r0, r3
 8005fba:	f7fb fdc1 	bl	8001b40 <hal_checkTimer>
 8005fbe:	1e03      	subs	r3, r0, #0
 8005fc0:	d007      	beq.n	8005fd2 <os_runloop+0x4e>
            j = OS.scheduledjobs;
 8005fc2:	4b0a      	ldr	r3, [pc, #40]	; (8005fec <os_runloop+0x68>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	607b      	str	r3, [r7, #4]
            OS.scheduledjobs = j->next;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	4b07      	ldr	r3, [pc, #28]	; (8005fec <os_runloop+0x68>)
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	e001      	b.n	8005fd6 <os_runloop+0x52>
        } else { // nothing pending
            hal_sleep(); // wake by irq (timer already restarted)
 8005fd2:	f7fb fe31 	bl	8001c38 <hal_sleep>
        }
        hal_enableIRQs();
 8005fd6:	f7fb fe1d 	bl	8001c14 <hal_enableIRQs>
        if(j) { // run job callback
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d0d4      	beq.n	8005f8a <os_runloop+0x6>
            j->func(j);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	0010      	movs	r0, r2
 8005fe8:	4798      	blx	r3
    while(1) {
 8005fea:	e7ce      	b.n	8005f8a <os_runloop+0x6>
 8005fec:	20000088 	.word	0x20000088

08005ff0 <writeReg>:
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif


static void writeReg (u1_t addr, u1_t data ) {
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	0002      	movs	r2, r0
 8005ff8:	1dfb      	adds	r3, r7, #7
 8005ffa:	701a      	strb	r2, [r3, #0]
 8005ffc:	1dbb      	adds	r3, r7, #6
 8005ffe:	1c0a      	adds	r2, r1, #0
 8006000:	701a      	strb	r2, [r3, #0]
    hal_pin_nss(0);
 8006002:	2000      	movs	r0, #0
 8006004:	f7fb fc99 	bl	800193a <hal_pin_nss>
    hal_spi(addr | 0x80);
 8006008:	1dfb      	adds	r3, r7, #7
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2280      	movs	r2, #128	; 0x80
 800600e:	4252      	negs	r2, r2
 8006010:	4313      	orrs	r3, r2
 8006012:	b2db      	uxtb	r3, r3
 8006014:	0018      	movs	r0, r3
 8006016:	f7fb fd05 	bl	8001a24 <hal_spi>
    hal_spi(data);
 800601a:	1dbb      	adds	r3, r7, #6
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	0018      	movs	r0, r3
 8006020:	f7fb fd00 	bl	8001a24 <hal_spi>
    hal_pin_nss(1);
 8006024:	2001      	movs	r0, #1
 8006026:	f7fb fc88 	bl	800193a <hal_pin_nss>
}
 800602a:	46c0      	nop			; (mov r8, r8)
 800602c:	46bd      	mov	sp, r7
 800602e:	b002      	add	sp, #8
 8006030:	bd80      	pop	{r7, pc}

08006032 <readReg>:

static u1_t readReg (u1_t addr) {
 8006032:	b5b0      	push	{r4, r5, r7, lr}
 8006034:	b084      	sub	sp, #16
 8006036:	af00      	add	r7, sp, #0
 8006038:	0002      	movs	r2, r0
 800603a:	1dfb      	adds	r3, r7, #7
 800603c:	701a      	strb	r2, [r3, #0]
    hal_pin_nss(0);
 800603e:	2000      	movs	r0, #0
 8006040:	f7fb fc7b 	bl	800193a <hal_pin_nss>
    hal_spi(addr & 0x7F);
 8006044:	1dfb      	adds	r3, r7, #7
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	227f      	movs	r2, #127	; 0x7f
 800604a:	4013      	ands	r3, r2
 800604c:	b2db      	uxtb	r3, r3
 800604e:	0018      	movs	r0, r3
 8006050:	f7fb fce8 	bl	8001a24 <hal_spi>
    u1_t val = hal_spi(0x00);
 8006054:	250f      	movs	r5, #15
 8006056:	197c      	adds	r4, r7, r5
 8006058:	2000      	movs	r0, #0
 800605a:	f7fb fce3 	bl	8001a24 <hal_spi>
 800605e:	0003      	movs	r3, r0
 8006060:	7023      	strb	r3, [r4, #0]
    hal_pin_nss(1);
 8006062:	2001      	movs	r0, #1
 8006064:	f7fb fc69 	bl	800193a <hal_pin_nss>
    return val;
 8006068:	197b      	adds	r3, r7, r5
 800606a:	781b      	ldrb	r3, [r3, #0]
}
 800606c:	0018      	movs	r0, r3
 800606e:	46bd      	mov	sp, r7
 8006070:	b004      	add	sp, #16
 8006072:	bdb0      	pop	{r4, r5, r7, pc}

08006074 <writeBuf>:

static void writeBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 8006074:	b590      	push	{r4, r7, lr}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6039      	str	r1, [r7, #0]
 800607c:	0011      	movs	r1, r2
 800607e:	1dfb      	adds	r3, r7, #7
 8006080:	1c02      	adds	r2, r0, #0
 8006082:	701a      	strb	r2, [r3, #0]
 8006084:	1dbb      	adds	r3, r7, #6
 8006086:	1c0a      	adds	r2, r1, #0
 8006088:	701a      	strb	r2, [r3, #0]
    hal_pin_nss(0);
 800608a:	2000      	movs	r0, #0
 800608c:	f7fb fc55 	bl	800193a <hal_pin_nss>
    hal_spi(addr | 0x80);
 8006090:	1dfb      	adds	r3, r7, #7
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2280      	movs	r2, #128	; 0x80
 8006096:	4252      	negs	r2, r2
 8006098:	4313      	orrs	r3, r2
 800609a:	b2db      	uxtb	r3, r3
 800609c:	0018      	movs	r0, r3
 800609e:	f7fb fcc1 	bl	8001a24 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 80060a2:	230f      	movs	r3, #15
 80060a4:	18fb      	adds	r3, r7, r3
 80060a6:	2200      	movs	r2, #0
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	e00d      	b.n	80060c8 <writeBuf+0x54>
        hal_spi(buf[i]);
 80060ac:	240f      	movs	r4, #15
 80060ae:	193b      	adds	r3, r7, r4
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	18d3      	adds	r3, r2, r3
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	0018      	movs	r0, r3
 80060ba:	f7fb fcb3 	bl	8001a24 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 80060be:	193b      	adds	r3, r7, r4
 80060c0:	781a      	ldrb	r2, [r3, #0]
 80060c2:	193b      	adds	r3, r7, r4
 80060c4:	3201      	adds	r2, #1
 80060c6:	701a      	strb	r2, [r3, #0]
 80060c8:	230f      	movs	r3, #15
 80060ca:	18fa      	adds	r2, r7, r3
 80060cc:	1dbb      	adds	r3, r7, #6
 80060ce:	7812      	ldrb	r2, [r2, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d3ea      	bcc.n	80060ac <writeBuf+0x38>
    }
    hal_pin_nss(1);
 80060d6:	2001      	movs	r0, #1
 80060d8:	f7fb fc2f 	bl	800193a <hal_pin_nss>
}
 80060dc:	46c0      	nop			; (mov r8, r8)
 80060de:	46bd      	mov	sp, r7
 80060e0:	b005      	add	sp, #20
 80060e2:	bd90      	pop	{r4, r7, pc}

080060e4 <readBuf>:

static void readBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 80060e4:	b5b0      	push	{r4, r5, r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6039      	str	r1, [r7, #0]
 80060ec:	0011      	movs	r1, r2
 80060ee:	1dfb      	adds	r3, r7, #7
 80060f0:	1c02      	adds	r2, r0, #0
 80060f2:	701a      	strb	r2, [r3, #0]
 80060f4:	1dbb      	adds	r3, r7, #6
 80060f6:	1c0a      	adds	r2, r1, #0
 80060f8:	701a      	strb	r2, [r3, #0]
    hal_pin_nss(0);
 80060fa:	2000      	movs	r0, #0
 80060fc:	f7fb fc1d 	bl	800193a <hal_pin_nss>
    hal_spi(addr & 0x7F);
 8006100:	1dfb      	adds	r3, r7, #7
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	227f      	movs	r2, #127	; 0x7f
 8006106:	4013      	ands	r3, r2
 8006108:	b2db      	uxtb	r3, r3
 800610a:	0018      	movs	r0, r3
 800610c:	f7fb fc8a 	bl	8001a24 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 8006110:	230f      	movs	r3, #15
 8006112:	18fb      	adds	r3, r7, r3
 8006114:	2200      	movs	r2, #0
 8006116:	701a      	strb	r2, [r3, #0]
 8006118:	e00e      	b.n	8006138 <readBuf+0x54>
        buf[i] = hal_spi(0x00);
 800611a:	250f      	movs	r5, #15
 800611c:	197b      	adds	r3, r7, r5
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	18d4      	adds	r4, r2, r3
 8006124:	2000      	movs	r0, #0
 8006126:	f7fb fc7d 	bl	8001a24 <hal_spi>
 800612a:	0003      	movs	r3, r0
 800612c:	7023      	strb	r3, [r4, #0]
    for (u1_t i=0; i<len; i++) {
 800612e:	197b      	adds	r3, r7, r5
 8006130:	781a      	ldrb	r2, [r3, #0]
 8006132:	197b      	adds	r3, r7, r5
 8006134:	3201      	adds	r2, #1
 8006136:	701a      	strb	r2, [r3, #0]
 8006138:	230f      	movs	r3, #15
 800613a:	18fa      	adds	r2, r7, r3
 800613c:	1dbb      	adds	r3, r7, #6
 800613e:	7812      	ldrb	r2, [r2, #0]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	429a      	cmp	r2, r3
 8006144:	d3e9      	bcc.n	800611a <readBuf+0x36>
    }
    hal_pin_nss(1);
 8006146:	2001      	movs	r0, #1
 8006148:	f7fb fbf7 	bl	800193a <hal_pin_nss>
}
 800614c:	46c0      	nop			; (mov r8, r8)
 800614e:	46bd      	mov	sp, r7
 8006150:	b004      	add	sp, #16
 8006152:	bdb0      	pop	{r4, r5, r7, pc}

08006154 <opmode>:

static void opmode (u1_t mode) {
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	0002      	movs	r2, r0
 800615c:	1dfb      	adds	r3, r7, #7
 800615e:	701a      	strb	r2, [r3, #0]
    writeReg(RegOpMode, (readReg(RegOpMode) & ~OPMODE_MASK) | mode);
 8006160:	2001      	movs	r0, #1
 8006162:	f7ff ff66 	bl	8006032 <readReg>
 8006166:	0003      	movs	r3, r0
 8006168:	b25b      	sxtb	r3, r3
 800616a:	2207      	movs	r2, #7
 800616c:	4393      	bics	r3, r2
 800616e:	b25a      	sxtb	r2, r3
 8006170:	1dfb      	adds	r3, r7, #7
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	b25b      	sxtb	r3, r3
 8006176:	4313      	orrs	r3, r2
 8006178:	b25b      	sxtb	r3, r3
 800617a:	b2db      	uxtb	r3, r3
 800617c:	0019      	movs	r1, r3
 800617e:	2001      	movs	r0, #1
 8006180:	f7ff ff36 	bl	8005ff0 <writeReg>
}
 8006184:	46c0      	nop			; (mov r8, r8)
 8006186:	46bd      	mov	sp, r7
 8006188:	b002      	add	sp, #8
 800618a:	bd80      	pop	{r7, pc}

0800618c <opmodeLora>:

static void opmodeLora() {
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
    u1_t u = OPMODE_LORA;
 8006192:	1dfb      	adds	r3, r7, #7
 8006194:	2280      	movs	r2, #128	; 0x80
 8006196:	701a      	strb	r2, [r3, #0]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 8006198:	1dfb      	adds	r3, r7, #7
 800619a:	1dfa      	adds	r2, r7, #7
 800619c:	7812      	ldrb	r2, [r2, #0]
 800619e:	2108      	movs	r1, #8
 80061a0:	430a      	orrs	r2, r1
 80061a2:	701a      	strb	r2, [r3, #0]
#endif
    writeReg(RegOpMode, u);
 80061a4:	1dfb      	adds	r3, r7, #7
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	0019      	movs	r1, r3
 80061aa:	2001      	movs	r0, #1
 80061ac:	f7ff ff20 	bl	8005ff0 <writeReg>
}
 80061b0:	46c0      	nop			; (mov r8, r8)
 80061b2:	46bd      	mov	sp, r7
 80061b4:	b002      	add	sp, #8
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <opmodeFSK>:

static void opmodeFSK() {
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
    u1_t u = 0;
 80061be:	1dfb      	adds	r3, r7, #7
 80061c0:	2200      	movs	r2, #0
 80061c2:	701a      	strb	r2, [r3, #0]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 80061c4:	1dfb      	adds	r3, r7, #7
 80061c6:	1dfa      	adds	r2, r7, #7
 80061c8:	7812      	ldrb	r2, [r2, #0]
 80061ca:	2108      	movs	r1, #8
 80061cc:	430a      	orrs	r2, r1
 80061ce:	701a      	strb	r2, [r3, #0]
#endif
    writeReg(RegOpMode, u);
 80061d0:	1dfb      	adds	r3, r7, #7
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	0019      	movs	r1, r3
 80061d6:	2001      	movs	r0, #1
 80061d8:	f7ff ff0a 	bl	8005ff0 <writeReg>
}
 80061dc:	46c0      	nop			; (mov r8, r8)
 80061de:	46bd      	mov	sp, r7
 80061e0:	b002      	add	sp, #8
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <configLoraModem>:

// configure LoRa modem (cfg1, cfg2)
static void configLoraModem () {
 80061e4:	b590      	push	{r4, r7, lr}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
    sf_t sf = getSf(LMIC.rps);
 80061ea:	4b61      	ldr	r3, [pc, #388]	; (8006370 <configLoraModem+0x18c>)
 80061ec:	89db      	ldrh	r3, [r3, #14]
 80061ee:	1d3c      	adds	r4, r7, #4
 80061f0:	0018      	movs	r0, r3
 80061f2:	f7fb fe71 	bl	8001ed8 <getSf>
 80061f6:	0003      	movs	r3, r0
 80061f8:	7023      	strb	r3, [r4, #0]

#ifdef CFG_sx1276_radio
        u1_t mc1 = 0, mc2 = 0, mc3 = 0;
 80061fa:	1dfb      	adds	r3, r7, #7
 80061fc:	2200      	movs	r2, #0
 80061fe:	701a      	strb	r2, [r3, #0]
 8006200:	1dbb      	adds	r3, r7, #6
 8006202:	2200      	movs	r2, #0
 8006204:	701a      	strb	r2, [r3, #0]
 8006206:	1d7b      	adds	r3, r7, #5
 8006208:	2200      	movs	r2, #0
 800620a:	701a      	strb	r2, [r3, #0]

        switch (getBw(LMIC.rps)) {
 800620c:	4b58      	ldr	r3, [pc, #352]	; (8006370 <configLoraModem+0x18c>)
 800620e:	89db      	ldrh	r3, [r3, #14]
 8006210:	0018      	movs	r0, r3
 8006212:	f7fb fe71 	bl	8001ef8 <getBw>
 8006216:	0003      	movs	r3, r0
 8006218:	2b02      	cmp	r3, #2
 800621a:	d014      	beq.n	8006246 <configLoraModem+0x62>
 800621c:	dc1b      	bgt.n	8006256 <configLoraModem+0x72>
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <configLoraModem+0x44>
 8006222:	2b01      	cmp	r3, #1
 8006224:	d007      	beq.n	8006236 <configLoraModem+0x52>
 8006226:	e016      	b.n	8006256 <configLoraModem+0x72>
        case BW125: mc1 |= SX1276_MC1_BW_125; break;
 8006228:	1dfb      	adds	r3, r7, #7
 800622a:	1dfa      	adds	r2, r7, #7
 800622c:	7812      	ldrb	r2, [r2, #0]
 800622e:	2170      	movs	r1, #112	; 0x70
 8006230:	430a      	orrs	r2, r1
 8006232:	701a      	strb	r2, [r3, #0]
 8006234:	e011      	b.n	800625a <configLoraModem+0x76>
        case BW250: mc1 |= SX1276_MC1_BW_250; break;
 8006236:	1dfb      	adds	r3, r7, #7
 8006238:	1dfa      	adds	r2, r7, #7
 800623a:	7812      	ldrb	r2, [r2, #0]
 800623c:	2180      	movs	r1, #128	; 0x80
 800623e:	4249      	negs	r1, r1
 8006240:	430a      	orrs	r2, r1
 8006242:	701a      	strb	r2, [r3, #0]
 8006244:	e009      	b.n	800625a <configLoraModem+0x76>
        case BW500: mc1 |= SX1276_MC1_BW_500; break;
 8006246:	1dfb      	adds	r3, r7, #7
 8006248:	1dfa      	adds	r2, r7, #7
 800624a:	7812      	ldrb	r2, [r2, #0]
 800624c:	2170      	movs	r1, #112	; 0x70
 800624e:	4249      	negs	r1, r1
 8006250:	430a      	orrs	r2, r1
 8006252:	701a      	strb	r2, [r3, #0]
 8006254:	e001      	b.n	800625a <configLoraModem+0x76>
        default:
            ASSERT(0);
 8006256:	f7fb fd0d 	bl	8001c74 <hal_failed>
        }
        switch( getCr(LMIC.rps) ) {
 800625a:	4b45      	ldr	r3, [pc, #276]	; (8006370 <configLoraModem+0x18c>)
 800625c:	89db      	ldrh	r3, [r3, #14]
 800625e:	0018      	movs	r0, r3
 8006260:	f7fb fe5c 	bl	8001f1c <getCr>
 8006264:	0003      	movs	r3, r0
 8006266:	2b03      	cmp	r3, #3
 8006268:	d01d      	beq.n	80062a6 <configLoraModem+0xc2>
 800626a:	dc23      	bgt.n	80062b4 <configLoraModem+0xd0>
 800626c:	2b02      	cmp	r3, #2
 800626e:	d013      	beq.n	8006298 <configLoraModem+0xb4>
 8006270:	dc20      	bgt.n	80062b4 <configLoraModem+0xd0>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <configLoraModem+0x98>
 8006276:	2b01      	cmp	r3, #1
 8006278:	d007      	beq.n	800628a <configLoraModem+0xa6>
 800627a:	e01b      	b.n	80062b4 <configLoraModem+0xd0>
        case CR_4_5: mc1 |= SX1276_MC1_CR_4_5; break;
 800627c:	1dfb      	adds	r3, r7, #7
 800627e:	1dfa      	adds	r2, r7, #7
 8006280:	7812      	ldrb	r2, [r2, #0]
 8006282:	2102      	movs	r1, #2
 8006284:	430a      	orrs	r2, r1
 8006286:	701a      	strb	r2, [r3, #0]
 8006288:	e016      	b.n	80062b8 <configLoraModem+0xd4>
        case CR_4_6: mc1 |= SX1276_MC1_CR_4_6; break;
 800628a:	1dfb      	adds	r3, r7, #7
 800628c:	1dfa      	adds	r2, r7, #7
 800628e:	7812      	ldrb	r2, [r2, #0]
 8006290:	2104      	movs	r1, #4
 8006292:	430a      	orrs	r2, r1
 8006294:	701a      	strb	r2, [r3, #0]
 8006296:	e00f      	b.n	80062b8 <configLoraModem+0xd4>
        case CR_4_7: mc1 |= SX1276_MC1_CR_4_7; break;
 8006298:	1dfb      	adds	r3, r7, #7
 800629a:	1dfa      	adds	r2, r7, #7
 800629c:	7812      	ldrb	r2, [r2, #0]
 800629e:	2106      	movs	r1, #6
 80062a0:	430a      	orrs	r2, r1
 80062a2:	701a      	strb	r2, [r3, #0]
 80062a4:	e008      	b.n	80062b8 <configLoraModem+0xd4>
        case CR_4_8: mc1 |= SX1276_MC1_CR_4_8; break;
 80062a6:	1dfb      	adds	r3, r7, #7
 80062a8:	1dfa      	adds	r2, r7, #7
 80062aa:	7812      	ldrb	r2, [r2, #0]
 80062ac:	2108      	movs	r1, #8
 80062ae:	430a      	orrs	r2, r1
 80062b0:	701a      	strb	r2, [r3, #0]
 80062b2:	e001      	b.n	80062b8 <configLoraModem+0xd4>
        default:
            ASSERT(0);
 80062b4:	f7fb fcde 	bl	8001c74 <hal_failed>
        }

        if (getIh(LMIC.rps)) {
 80062b8:	4b2d      	ldr	r3, [pc, #180]	; (8006370 <configLoraModem+0x18c>)
 80062ba:	89db      	ldrh	r3, [r3, #14]
 80062bc:	0018      	movs	r0, r3
 80062be:	f7fb fe81 	bl	8001fc4 <getIh>
 80062c2:	1e03      	subs	r3, r0, #0
 80062c4:	d010      	beq.n	80062e8 <configLoraModem+0x104>
            mc1 |= SX1276_MC1_IMPLICIT_HEADER_MODE_ON;
 80062c6:	1dfb      	adds	r3, r7, #7
 80062c8:	1dfa      	adds	r2, r7, #7
 80062ca:	7812      	ldrb	r2, [r2, #0]
 80062cc:	2101      	movs	r1, #1
 80062ce:	430a      	orrs	r2, r1
 80062d0:	701a      	strb	r2, [r3, #0]
            writeReg(LORARegPayloadLength, getIh(LMIC.rps)); // required length
 80062d2:	4b27      	ldr	r3, [pc, #156]	; (8006370 <configLoraModem+0x18c>)
 80062d4:	89db      	ldrh	r3, [r3, #14]
 80062d6:	0018      	movs	r0, r3
 80062d8:	f7fb fe74 	bl	8001fc4 <getIh>
 80062dc:	0003      	movs	r3, r0
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	0019      	movs	r1, r3
 80062e2:	2022      	movs	r0, #34	; 0x22
 80062e4:	f7ff fe84 	bl	8005ff0 <writeReg>
        }
        // set ModemConfig1
        writeReg(LORARegModemConfig1, mc1);
 80062e8:	1dfb      	adds	r3, r7, #7
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	0019      	movs	r1, r3
 80062ee:	201d      	movs	r0, #29
 80062f0:	f7ff fe7e 	bl	8005ff0 <writeReg>

        mc2 = (SX1272_MC2_SF7 + ((sf-1)<<4));
 80062f4:	1d3b      	adds	r3, r7, #4
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	011b      	lsls	r3, r3, #4
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	1dbb      	adds	r3, r7, #6
 8006302:	3270      	adds	r2, #112	; 0x70
 8006304:	701a      	strb	r2, [r3, #0]
        if (getNocrc(LMIC.rps) == 0) {
 8006306:	4b1a      	ldr	r3, [pc, #104]	; (8006370 <configLoraModem+0x18c>)
 8006308:	89db      	ldrh	r3, [r3, #14]
 800630a:	0018      	movs	r0, r3
 800630c:	f7fb fe32 	bl	8001f74 <getNocrc>
 8006310:	1e03      	subs	r3, r0, #0
 8006312:	d105      	bne.n	8006320 <configLoraModem+0x13c>
            mc2 |= SX1276_MC2_RX_PAYLOAD_CRCON;
 8006314:	1dbb      	adds	r3, r7, #6
 8006316:	1dba      	adds	r2, r7, #6
 8006318:	7812      	ldrb	r2, [r2, #0]
 800631a:	2104      	movs	r1, #4
 800631c:	430a      	orrs	r2, r1
 800631e:	701a      	strb	r2, [r3, #0]
        }
        writeReg(LORARegModemConfig2, mc2);
 8006320:	1dbb      	adds	r3, r7, #6
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	0019      	movs	r1, r3
 8006326:	201e      	movs	r0, #30
 8006328:	f7ff fe62 	bl	8005ff0 <writeReg>
        
        mc3 = SX1276_MC3_AGCAUTO;
 800632c:	1d7b      	adds	r3, r7, #5
 800632e:	2204      	movs	r2, #4
 8006330:	701a      	strb	r2, [r3, #0]
        if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
 8006332:	1d3b      	adds	r3, r7, #4
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	2b05      	cmp	r3, #5
 8006338:	d003      	beq.n	8006342 <configLoraModem+0x15e>
 800633a:	1d3b      	adds	r3, r7, #4
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	2b06      	cmp	r3, #6
 8006340:	d10c      	bne.n	800635c <configLoraModem+0x178>
 8006342:	4b0b      	ldr	r3, [pc, #44]	; (8006370 <configLoraModem+0x18c>)
 8006344:	89db      	ldrh	r3, [r3, #14]
 8006346:	0018      	movs	r0, r3
 8006348:	f7fb fdd6 	bl	8001ef8 <getBw>
 800634c:	1e03      	subs	r3, r0, #0
 800634e:	d105      	bne.n	800635c <configLoraModem+0x178>
            mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
 8006350:	1d7b      	adds	r3, r7, #5
 8006352:	1d7a      	adds	r2, r7, #5
 8006354:	7812      	ldrb	r2, [r2, #0]
 8006356:	2108      	movs	r1, #8
 8006358:	430a      	orrs	r2, r1
 800635a:	701a      	strb	r2, [r3, #0]
        }
        writeReg(LORARegModemConfig3, mc3);
 800635c:	1d7b      	adds	r3, r7, #5
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	0019      	movs	r1, r3
 8006362:	2026      	movs	r0, #38	; 0x26
 8006364:	f7ff fe44 	bl	8005ff0 <writeReg>
#endif

#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 8006368:	46c0      	nop			; (mov r8, r8)
 800636a:	46bd      	mov	sp, r7
 800636c:	b003      	add	sp, #12
 800636e:	bd90      	pop	{r4, r7, pc}
 8006370:	20000280 	.word	0x20000280

08006374 <configChannel>:

static void configChannel () {
 8006374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
    // set frequency: FQ = (FRF * 32 Mhz) / (2 ^ 19)
    u8_t frf = ((u8_t)LMIC.freq << 19) / 32000000;
 800637a:	4e1b      	ldr	r6, [pc, #108]	; (80063e8 <configChannel+0x74>)
 800637c:	68b6      	ldr	r6, [r6, #8]
 800637e:	0032      	movs	r2, r6
 8006380:	2600      	movs	r6, #0
 8006382:	0033      	movs	r3, r6
 8006384:	0b51      	lsrs	r1, r2, #13
 8006386:	04d0      	lsls	r0, r2, #19
 8006388:	4a18      	ldr	r2, [pc, #96]	; (80063ec <configChannel+0x78>)
 800638a:	2300      	movs	r3, #0
 800638c:	f7fa f856 	bl	800043c <__aeabi_uldivmod>
 8006390:	0002      	movs	r2, r0
 8006392:	000b      	movs	r3, r1
 8006394:	60ba      	str	r2, [r7, #8]
 8006396:	60fb      	str	r3, [r7, #12]
    writeReg(RegFrfMsb, (u1_t)(frf>>16));
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	041b      	lsls	r3, r3, #16
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	0c12      	lsrs	r2, r2, #16
 80063a0:	603a      	str	r2, [r7, #0]
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	431a      	orrs	r2, r3
 80063a6:	603a      	str	r2, [r7, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	0c1b      	lsrs	r3, r3, #16
 80063ac:	607b      	str	r3, [r7, #4]
 80063ae:	783b      	ldrb	r3, [r7, #0]
 80063b0:	0019      	movs	r1, r3
 80063b2:	2006      	movs	r0, #6
 80063b4:	f7ff fe1c 	bl	8005ff0 <writeReg>
    writeReg(RegFrfMid, (u1_t)(frf>> 8));
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	061b      	lsls	r3, r3, #24
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	0a14      	lsrs	r4, r2, #8
 80063c0:	431c      	orrs	r4, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	0a1d      	lsrs	r5, r3, #8
 80063c6:	b2e3      	uxtb	r3, r4
 80063c8:	0019      	movs	r1, r3
 80063ca:	2007      	movs	r0, #7
 80063cc:	f7ff fe10 	bl	8005ff0 <writeReg>
    writeReg(RegFrfLsb, (u1_t)(frf>> 0));
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	1c13      	adds	r3, r2, #0
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	0019      	movs	r1, r3
 80063da:	2008      	movs	r0, #8
 80063dc:	f7ff fe08 	bl	8005ff0 <writeReg>
}
 80063e0:	46c0      	nop			; (mov r8, r8)
 80063e2:	46bd      	mov	sp, r7
 80063e4:	b005      	add	sp, #20
 80063e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063e8:	20000280 	.word	0x20000280
 80063ec:	01e84800 	.word	0x01e84800

080063f0 <configPower>:



static void configPower () {
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
#ifdef CFG_sx1276_radio
    // no boost used for now
    s1_t pw = (s1_t)LMIC.txpow;
 80063f6:	1dfb      	adds	r3, r7, #7
 80063f8:	4a18      	ldr	r2, [pc, #96]	; (800645c <configPower+0x6c>)
 80063fa:	7c92      	ldrb	r2, [r2, #18]
 80063fc:	701a      	strb	r2, [r3, #0]
    if(pw >= 17) {
 80063fe:	1dfb      	adds	r3, r7, #7
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	b25b      	sxtb	r3, r3
 8006404:	2b10      	cmp	r3, #16
 8006406:	dd03      	ble.n	8006410 <configPower+0x20>
        pw = 15;
 8006408:	1dfb      	adds	r3, r7, #7
 800640a:	220f      	movs	r2, #15
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	e007      	b.n	8006420 <configPower+0x30>
    } else if(pw < 2) {
 8006410:	1dfb      	adds	r3, r7, #7
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	b25b      	sxtb	r3, r3
 8006416:	2b01      	cmp	r3, #1
 8006418:	dc02      	bgt.n	8006420 <configPower+0x30>
        pw = 2;
 800641a:	1dfb      	adds	r3, r7, #7
 800641c:	2202      	movs	r2, #2
 800641e:	701a      	strb	r2, [r3, #0]
    }
    // check board type for BOOST pin
    writeReg(RegPaConfig, (u1_t)(0x80|(pw&0xf)));
 8006420:	1dfb      	adds	r3, r7, #7
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	220f      	movs	r2, #15
 8006426:	4013      	ands	r3, r2
 8006428:	b25b      	sxtb	r3, r3
 800642a:	2280      	movs	r2, #128	; 0x80
 800642c:	4252      	negs	r2, r2
 800642e:	4313      	orrs	r3, r2
 8006430:	b25b      	sxtb	r3, r3
 8006432:	b2db      	uxtb	r3, r3
 8006434:	0019      	movs	r1, r3
 8006436:	2009      	movs	r0, #9
 8006438:	f7ff fdda 	bl	8005ff0 <writeReg>
    writeReg(RegPaDac, readReg(RegPaDac)|0x4);
 800643c:	205a      	movs	r0, #90	; 0x5a
 800643e:	f7ff fdf8 	bl	8006032 <readReg>
 8006442:	0003      	movs	r3, r0
 8006444:	001a      	movs	r2, r3
 8006446:	2304      	movs	r3, #4
 8006448:	4313      	orrs	r3, r2
 800644a:	b2db      	uxtb	r3, r3
 800644c:	0019      	movs	r1, r3
 800644e:	205a      	movs	r0, #90	; 0x5a
 8006450:	f7ff fdce 	bl	8005ff0 <writeReg>
    }
    writeReg(RegPaConfig, (u1_t)(0x80|(pw-2)));
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 8006454:	46c0      	nop			; (mov r8, r8)
 8006456:	46bd      	mov	sp, r7
 8006458:	b002      	add	sp, #8
 800645a:	bd80      	pop	{r7, pc}
 800645c:	20000280 	.word	0x20000280

08006460 <txfsk>:

static void txfsk () {
 8006460:	b580      	push	{r7, lr}
 8006462:	af00      	add	r7, sp, #0
    // select FSK modem (from sleep mode)
    writeReg(RegOpMode, 0x10); // FSK, BT=0.5
 8006464:	2110      	movs	r1, #16
 8006466:	2001      	movs	r0, #1
 8006468:	f7ff fdc2 	bl	8005ff0 <writeReg>
    ASSERT(readReg(RegOpMode) == 0x10);
 800646c:	2001      	movs	r0, #1
 800646e:	f7ff fde0 	bl	8006032 <readReg>
 8006472:	0003      	movs	r3, r0
 8006474:	2b10      	cmp	r3, #16
 8006476:	d001      	beq.n	800647c <txfsk+0x1c>
 8006478:	f7fb fbfc 	bl	8001c74 <hal_failed>
    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 800647c:	2001      	movs	r0, #1
 800647e:	f7ff fe69 	bl	8006154 <opmode>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8006482:	2102      	movs	r1, #2
 8006484:	2002      	movs	r0, #2
 8006486:	f7ff fdb3 	bl	8005ff0 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 800648a:	2180      	movs	r1, #128	; 0x80
 800648c:	2003      	movs	r0, #3
 800648e:	f7ff fdaf 	bl	8005ff0 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8006492:	2101      	movs	r1, #1
 8006494:	2004      	movs	r0, #4
 8006496:	f7ff fdab 	bl	8005ff0 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 800649a:	2199      	movs	r1, #153	; 0x99
 800649c:	2005      	movs	r0, #5
 800649e:	f7ff fda7 	bl	8005ff0 <writeReg>
    // frame and packet handler settings
    writeReg(FSKRegPreambleMsb, 0x00);
 80064a2:	2100      	movs	r1, #0
 80064a4:	2025      	movs	r0, #37	; 0x25
 80064a6:	f7ff fda3 	bl	8005ff0 <writeReg>
    writeReg(FSKRegPreambleLsb, 0x05);
 80064aa:	2105      	movs	r1, #5
 80064ac:	2026      	movs	r0, #38	; 0x26
 80064ae:	f7ff fd9f 	bl	8005ff0 <writeReg>
    writeReg(FSKRegSyncConfig, 0x12);
 80064b2:	2112      	movs	r1, #18
 80064b4:	2027      	movs	r0, #39	; 0x27
 80064b6:	f7ff fd9b 	bl	8005ff0 <writeReg>
    writeReg(FSKRegPacketConfig1, 0xD0);
 80064ba:	21d0      	movs	r1, #208	; 0xd0
 80064bc:	2030      	movs	r0, #48	; 0x30
 80064be:	f7ff fd97 	bl	8005ff0 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40);
 80064c2:	2140      	movs	r1, #64	; 0x40
 80064c4:	2031      	movs	r0, #49	; 0x31
 80064c6:	f7ff fd93 	bl	8005ff0 <writeReg>
    writeReg(FSKRegSyncValue1, 0xC1);
 80064ca:	21c1      	movs	r1, #193	; 0xc1
 80064cc:	2028      	movs	r0, #40	; 0x28
 80064ce:	f7ff fd8f 	bl	8005ff0 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 80064d2:	2194      	movs	r1, #148	; 0x94
 80064d4:	2029      	movs	r0, #41	; 0x29
 80064d6:	f7ff fd8b 	bl	8005ff0 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 80064da:	21c1      	movs	r1, #193	; 0xc1
 80064dc:	202a      	movs	r0, #42	; 0x2a
 80064de:	f7ff fd87 	bl	8005ff0 <writeReg>
    // configure frequency
    configChannel();
 80064e2:	f7ff ff47 	bl	8006374 <configChannel>
    // configure output power
    configPower();
 80064e6:	f7ff ff83 	bl	80063f0 <configPower>

    // set the IRQ mapping DIO0=PacketSent DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TXNOP);
 80064ea:	2134      	movs	r1, #52	; 0x34
 80064ec:	2040      	movs	r0, #64	; 0x40
 80064ee:	f7ff fd7f 	bl	8005ff0 <writeReg>

    // initialize the payload size and address pointers    
    writeReg(FSKRegPayloadLength, LMIC.dataLen+1); // (insert length byte into payload))
 80064f2:	4a12      	ldr	r2, [pc, #72]	; (800653c <txfsk+0xdc>)
 80064f4:	2348      	movs	r3, #72	; 0x48
 80064f6:	33ff      	adds	r3, #255	; 0xff
 80064f8:	5cd3      	ldrb	r3, [r2, r3]
 80064fa:	3301      	adds	r3, #1
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	0019      	movs	r1, r3
 8006500:	2032      	movs	r0, #50	; 0x32
 8006502:	f7ff fd75 	bl	8005ff0 <writeReg>

    // download length byte and buffer to the radio FIFO
    writeReg(RegFifo, LMIC.dataLen);
 8006506:	4a0d      	ldr	r2, [pc, #52]	; (800653c <txfsk+0xdc>)
 8006508:	2348      	movs	r3, #72	; 0x48
 800650a:	33ff      	adds	r3, #255	; 0xff
 800650c:	5cd3      	ldrb	r3, [r2, r3]
 800650e:	0019      	movs	r1, r3
 8006510:	2000      	movs	r0, #0
 8006512:	f7ff fd6d 	bl	8005ff0 <writeReg>
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8006516:	4a09      	ldr	r2, [pc, #36]	; (800653c <txfsk+0xdc>)
 8006518:	2348      	movs	r3, #72	; 0x48
 800651a:	33ff      	adds	r3, #255	; 0xff
 800651c:	5cd2      	ldrb	r2, [r2, r3]
 800651e:	4b08      	ldr	r3, [pc, #32]	; (8006540 <txfsk+0xe0>)
 8006520:	0019      	movs	r1, r3
 8006522:	2000      	movs	r0, #0
 8006524:	f7ff fda6 	bl	8006074 <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 8006528:	2001      	movs	r0, #1
 800652a:	f7fb f9fc 	bl	8001926 <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
 800652e:	2003      	movs	r0, #3
 8006530:	f7ff fe10 	bl	8006154 <opmode>
}
 8006534:	46c0      	nop			; (mov r8, r8)
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	46c0      	nop			; (mov r8, r8)
 800653c:	20000280 	.word	0x20000280
 8006540:	200003c8 	.word	0x200003c8

08006544 <txlora>:

static void txlora () {
 8006544:	b580      	push	{r7, lr}
 8006546:	af00      	add	r7, sp, #0
    // select LoRa modem (from sleep mode)
    //writeReg(RegOpMode, OPMODE_LORA);
    opmodeLora();
 8006548:	f7ff fe20 	bl	800618c <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 800654c:	2001      	movs	r0, #1
 800654e:	f7ff fd70 	bl	8006032 <readReg>
 8006552:	0003      	movs	r3, r0
 8006554:	b25b      	sxtb	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	db01      	blt.n	800655e <txlora+0x1a>
 800655a:	f7fb fb8b 	bl	8001c74 <hal_failed>

    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 800655e:	2001      	movs	r0, #1
 8006560:	f7ff fdf8 	bl	8006154 <opmode>
    // configure LoRa modem (cfg1, cfg2)
    configLoraModem();
 8006564:	f7ff fe3e 	bl	80061e4 <configLoraModem>
    // configure frequency
    configChannel();
 8006568:	f7ff ff04 	bl	8006374 <configChannel>
    // configure output power
    writeReg(RegPaRamp, (readReg(RegPaRamp) & 0xF0) | 0x08); // set PA ramp-up time 50 uSec
 800656c:	200a      	movs	r0, #10
 800656e:	f7ff fd60 	bl	8006032 <readReg>
 8006572:	0003      	movs	r3, r0
 8006574:	b25b      	sxtb	r3, r3
 8006576:	220f      	movs	r2, #15
 8006578:	4393      	bics	r3, r2
 800657a:	b25b      	sxtb	r3, r3
 800657c:	2208      	movs	r2, #8
 800657e:	4313      	orrs	r3, r2
 8006580:	b25b      	sxtb	r3, r3
 8006582:	b2db      	uxtb	r3, r3
 8006584:	0019      	movs	r1, r3
 8006586:	200a      	movs	r0, #10
 8006588:	f7ff fd32 	bl	8005ff0 <writeReg>
    configPower();
 800658c:	f7ff ff30 	bl	80063f0 <configPower>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8006590:	2134      	movs	r1, #52	; 0x34
 8006592:	2039      	movs	r0, #57	; 0x39
 8006594:	f7ff fd2c 	bl	8005ff0 <writeReg>
    
    // set the IRQ mapping DIO0=TxDone DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_TXDONE|MAP_DIO1_LORA_NOP|MAP_DIO2_LORA_NOP);
 8006598:	21f0      	movs	r1, #240	; 0xf0
 800659a:	2040      	movs	r0, #64	; 0x40
 800659c:	f7ff fd28 	bl	8005ff0 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 80065a0:	21ff      	movs	r1, #255	; 0xff
 80065a2:	2012      	movs	r0, #18
 80065a4:	f7ff fd24 	bl	8005ff0 <writeReg>
    // mask all IRQs but TxDone
    writeReg(LORARegIrqFlagsMask, ~IRQ_LORA_TXDONE_MASK);
 80065a8:	21f7      	movs	r1, #247	; 0xf7
 80065aa:	2011      	movs	r0, #17
 80065ac:	f7ff fd20 	bl	8005ff0 <writeReg>

    // initialize the payload size and address pointers    
    writeReg(LORARegFifoTxBaseAddr, 0x00);
 80065b0:	2100      	movs	r1, #0
 80065b2:	200e      	movs	r0, #14
 80065b4:	f7ff fd1c 	bl	8005ff0 <writeReg>
    writeReg(LORARegFifoAddrPtr, 0x00);
 80065b8:	2100      	movs	r1, #0
 80065ba:	200d      	movs	r0, #13
 80065bc:	f7ff fd18 	bl	8005ff0 <writeReg>
    writeReg(LORARegPayloadLength, LMIC.dataLen);
 80065c0:	4a0c      	ldr	r2, [pc, #48]	; (80065f4 <txlora+0xb0>)
 80065c2:	2348      	movs	r3, #72	; 0x48
 80065c4:	33ff      	adds	r3, #255	; 0xff
 80065c6:	5cd3      	ldrb	r3, [r2, r3]
 80065c8:	0019      	movs	r1, r3
 80065ca:	2022      	movs	r0, #34	; 0x22
 80065cc:	f7ff fd10 	bl	8005ff0 <writeReg>
       
    // download buffer to the radio FIFO
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 80065d0:	4a08      	ldr	r2, [pc, #32]	; (80065f4 <txlora+0xb0>)
 80065d2:	2348      	movs	r3, #72	; 0x48
 80065d4:	33ff      	adds	r3, #255	; 0xff
 80065d6:	5cd2      	ldrb	r2, [r2, r3]
 80065d8:	4b07      	ldr	r3, [pc, #28]	; (80065f8 <txlora+0xb4>)
 80065da:	0019      	movs	r1, r3
 80065dc:	2000      	movs	r0, #0
 80065de:	f7ff fd49 	bl	8006074 <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 80065e2:	2001      	movs	r0, #1
 80065e4:	f7fb f99f 	bl	8001926 <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
 80065e8:	2003      	movs	r0, #3
 80065ea:	f7ff fdb3 	bl	8006154 <opmode>
}
 80065ee:	46c0      	nop			; (mov r8, r8)
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	20000280 	.word	0x20000280
 80065f8:	200003c8 	.word	0x200003c8

080065fc <starttx>:

// start transmitter (buf=LMIC.frame, len=LMIC.dataLen)
static void starttx () {
 80065fc:	b580      	push	{r7, lr}
 80065fe:	af00      	add	r7, sp, #0
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 8006600:	2001      	movs	r0, #1
 8006602:	f7ff fd16 	bl	8006032 <readReg>
 8006606:	0003      	movs	r3, r0
 8006608:	001a      	movs	r2, r3
 800660a:	2307      	movs	r3, #7
 800660c:	4013      	ands	r3, r2
 800660e:	d001      	beq.n	8006614 <starttx+0x18>
 8006610:	f7fb fb30 	bl	8001c74 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 8006614:	4b07      	ldr	r3, [pc, #28]	; (8006634 <starttx+0x38>)
 8006616:	89db      	ldrh	r3, [r3, #14]
 8006618:	0018      	movs	r0, r3
 800661a:	f7fb fc5d 	bl	8001ed8 <getSf>
 800661e:	1e03      	subs	r3, r0, #0
 8006620:	d102      	bne.n	8006628 <starttx+0x2c>
        txfsk();
 8006622:	f7ff ff1d 	bl	8006460 <txfsk>
    } else { // LoRa modem
        txlora();
    }
    // the radio will go back to STANDBY mode as soon as the TX is finished
    // the corresponding IRQ will inform us about completion.
}
 8006626:	e001      	b.n	800662c <starttx+0x30>
        txlora();
 8006628:	f7ff ff8c 	bl	8006544 <txlora>
}
 800662c:	46c0      	nop			; (mov r8, r8)
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	46c0      	nop			; (mov r8, r8)
 8006634:	20000280 	.word	0x20000280

08006638 <rxlora>:
    [RXMODE_SCAN]   = IRQ_LORA_RXDONE_MASK,
    [RXMODE_RSSI]   = 0x00,
};

// start LoRa receiver (time=LMIC.rxtime, timeout=LMIC.rxsyms, result=LMIC.frame[LMIC.dataLen])
static void rxlora (u1_t rxmode) {
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	0002      	movs	r2, r0
 8006640:	1dfb      	adds	r3, r7, #7
 8006642:	701a      	strb	r2, [r3, #0]
    // select LoRa modem (from sleep mode)
    opmodeLora();
 8006644:	f7ff fda2 	bl	800618c <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 8006648:	2001      	movs	r0, #1
 800664a:	f7ff fcf2 	bl	8006032 <readReg>
 800664e:	0003      	movs	r3, r0
 8006650:	b25b      	sxtb	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	db01      	blt.n	800665a <rxlora+0x22>
 8006656:	f7fb fb0d 	bl	8001c74 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 800665a:	2001      	movs	r0, #1
 800665c:	f7ff fd7a 	bl	8006154 <opmode>
    // don't use MAC settings at startup
    if(rxmode == RXMODE_RSSI) { // use fixed settings for rssi scan
 8006660:	1dfb      	adds	r3, r7, #7
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	2b02      	cmp	r3, #2
 8006666:	d108      	bne.n	800667a <rxlora+0x42>
        writeReg(LORARegModemConfig1, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG1);
 8006668:	210a      	movs	r1, #10
 800666a:	201d      	movs	r0, #29
 800666c:	f7ff fcc0 	bl	8005ff0 <writeReg>
        writeReg(LORARegModemConfig2, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG2);
 8006670:	2170      	movs	r1, #112	; 0x70
 8006672:	201e      	movs	r0, #30
 8006674:	f7ff fcbc 	bl	8005ff0 <writeReg>
 8006678:	e003      	b.n	8006682 <rxlora+0x4a>
    } else { // single or continuous rx mode
        // configure LoRa modem (cfg1, cfg2)
        configLoraModem();
 800667a:	f7ff fdb3 	bl	80061e4 <configLoraModem>
        // configure frequency
        configChannel();
 800667e:	f7ff fe79 	bl	8006374 <configChannel>
    }
    // set LNA gain
    writeReg(RegLna, LNA_RX_GAIN); 
 8006682:	2121      	movs	r1, #33	; 0x21
 8006684:	200c      	movs	r0, #12
 8006686:	f7ff fcb3 	bl	8005ff0 <writeReg>
    // set max payload size
    writeReg(LORARegPayloadMaxLength, 64);
 800668a:	2140      	movs	r1, #64	; 0x40
 800668c:	2023      	movs	r0, #35	; 0x23
 800668e:	f7ff fcaf 	bl	8005ff0 <writeReg>
    // use inverted I/Q signal (prevent mote-to-mote communication)

    // XXX: use flag to switch on/off inversion
    if (LMIC.noRXIQinversion) {
 8006692:	4a29      	ldr	r2, [pc, #164]	; (8006738 <rxlora+0x100>)
 8006694:	23d4      	movs	r3, #212	; 0xd4
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	5cd3      	ldrb	r3, [r2, r3]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00d      	beq.n	80066ba <rxlora+0x82>
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) & ~(1<<6));
 800669e:	2033      	movs	r0, #51	; 0x33
 80066a0:	f7ff fcc7 	bl	8006032 <readReg>
 80066a4:	0003      	movs	r3, r0
 80066a6:	001a      	movs	r2, r3
 80066a8:	2340      	movs	r3, #64	; 0x40
 80066aa:	439a      	bics	r2, r3
 80066ac:	0013      	movs	r3, r2
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	0019      	movs	r1, r3
 80066b2:	2033      	movs	r0, #51	; 0x33
 80066b4:	f7ff fc9c 	bl	8005ff0 <writeReg>
 80066b8:	e00b      	b.n	80066d2 <rxlora+0x9a>
    } else {
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ)|(1<<6));
 80066ba:	2033      	movs	r0, #51	; 0x33
 80066bc:	f7ff fcb9 	bl	8006032 <readReg>
 80066c0:	0003      	movs	r3, r0
 80066c2:	001a      	movs	r2, r3
 80066c4:	2340      	movs	r3, #64	; 0x40
 80066c6:	4313      	orrs	r3, r2
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	0019      	movs	r1, r3
 80066cc:	2033      	movs	r0, #51	; 0x33
 80066ce:	f7ff fc8f 	bl	8005ff0 <writeReg>
    }

    // set symbol timeout (for single rx)
    writeReg(LORARegSymbTimeoutLsb, LMIC.rxsyms);
 80066d2:	4b19      	ldr	r3, [pc, #100]	; (8006738 <rxlora+0x100>)
 80066d4:	7c1b      	ldrb	r3, [r3, #16]
 80066d6:	0019      	movs	r1, r3
 80066d8:	201f      	movs	r0, #31
 80066da:	f7ff fc89 	bl	8005ff0 <writeReg>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 80066de:	2134      	movs	r1, #52	; 0x34
 80066e0:	2039      	movs	r0, #57	; 0x39
 80066e2:	f7ff fc85 	bl	8005ff0 <writeReg>
    
    // configure DIO mapping DIO0=RxDone DIO1=RxTout DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_RXDONE|MAP_DIO1_LORA_RXTOUT|MAP_DIO2_LORA_NOP);
 80066e6:	21c0      	movs	r1, #192	; 0xc0
 80066e8:	2040      	movs	r0, #64	; 0x40
 80066ea:	f7ff fc81 	bl	8005ff0 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 80066ee:	21ff      	movs	r1, #255	; 0xff
 80066f0:	2012      	movs	r0, #18
 80066f2:	f7ff fc7d 	bl	8005ff0 <writeReg>
    // enable required radio IRQs
    writeReg(LORARegIrqFlagsMask, ~rxlorairqmask[rxmode]);
 80066f6:	1dfb      	adds	r3, r7, #7
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	4a10      	ldr	r2, [pc, #64]	; (800673c <rxlora+0x104>)
 80066fc:	5cd3      	ldrb	r3, [r2, r3]
 80066fe:	43db      	mvns	r3, r3
 8006700:	b2db      	uxtb	r3, r3
 8006702:	0019      	movs	r1, r3
 8006704:	2011      	movs	r0, #17
 8006706:	f7ff fc73 	bl	8005ff0 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 800670a:	2000      	movs	r0, #0
 800670c:	f7fb f90b 	bl	8001926 <hal_pin_rxtx>

    // now instruct the radio to receive
    if (rxmode == RXMODE_SINGLE) { // single rx
 8006710:	1dfb      	adds	r3, r7, #7
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d108      	bne.n	800672a <rxlora+0xf2>
        hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8006718:	4b07      	ldr	r3, [pc, #28]	; (8006738 <rxlora+0x100>)
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	0018      	movs	r0, r3
 800671e:	f7fb f9ff 	bl	8001b20 <hal_waitUntil>
        opmode(OPMODE_RX_SINGLE);
 8006722:	2006      	movs	r0, #6
 8006724:	f7ff fd16 	bl	8006154 <opmode>
    } else { // continous rx (scan or rssi)
        opmode(OPMODE_RX); 
    }
}
 8006728:	e002      	b.n	8006730 <rxlora+0xf8>
        opmode(OPMODE_RX); 
 800672a:	2005      	movs	r0, #5
 800672c:	f7ff fd12 	bl	8006154 <opmode>
}
 8006730:	46c0      	nop			; (mov r8, r8)
 8006732:	46bd      	mov	sp, r7
 8006734:	b002      	add	sp, #8
 8006736:	bd80      	pop	{r7, pc}
 8006738:	20000280 	.word	0x20000280
 800673c:	0800e058 	.word	0x0800e058

08006740 <rxfsk>:

static void rxfsk (u1_t rxmode) {
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	0002      	movs	r2, r0
 8006748:	1dfb      	adds	r3, r7, #7
 800674a:	701a      	strb	r2, [r3, #0]
    // only single rx (no continuous scanning, no noise sampling)
    ASSERT( rxmode == RXMODE_SINGLE );
 800674c:	1dfb      	adds	r3, r7, #7
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <rxfsk+0x18>
 8006754:	f7fb fa8e 	bl	8001c74 <hal_failed>
    // select FSK modem (from sleep mode)
    //writeReg(RegOpMode, 0x00); // (not LoRa)
    opmodeFSK();
 8006758:	f7ff fd2e 	bl	80061b8 <opmodeFSK>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) == 0);
 800675c:	2001      	movs	r0, #1
 800675e:	f7ff fc68 	bl	8006032 <readReg>
 8006762:	0003      	movs	r3, r0
 8006764:	b25b      	sxtb	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	da01      	bge.n	800676e <rxfsk+0x2e>
 800676a:	f7fb fa83 	bl	8001c74 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 800676e:	2001      	movs	r0, #1
 8006770:	f7ff fcf0 	bl	8006154 <opmode>
    // configure frequency
    configChannel();
 8006774:	f7ff fdfe 	bl	8006374 <configChannel>
    // set LNA gain
    //writeReg(RegLna, 0x20|0x03); // max gain, boost enable
    writeReg(RegLna, LNA_RX_GAIN);
 8006778:	2121      	movs	r1, #33	; 0x21
 800677a:	200c      	movs	r0, #12
 800677c:	f7ff fc38 	bl	8005ff0 <writeReg>
    // configure receiver
    writeReg(FSKRegRxConfig, 0x1E); // AFC auto, AGC, trigger on preamble?!?
 8006780:	211e      	movs	r1, #30
 8006782:	200d      	movs	r0, #13
 8006784:	f7ff fc34 	bl	8005ff0 <writeReg>
    // set receiver bandwidth
    writeReg(FSKRegRxBw, 0x0B); // 50kHz SSb
 8006788:	210b      	movs	r1, #11
 800678a:	2012      	movs	r0, #18
 800678c:	f7ff fc30 	bl	8005ff0 <writeReg>
    // set AFC bandwidth
    writeReg(FSKRegAfcBw, 0x12); // 83.3kHz SSB
 8006790:	2112      	movs	r1, #18
 8006792:	2013      	movs	r0, #19
 8006794:	f7ff fc2c 	bl	8005ff0 <writeReg>
    // set preamble detection
    writeReg(FSKRegPreambleDetect, 0xAA); // enable, 2 bytes, 10 chip errors
 8006798:	21aa      	movs	r1, #170	; 0xaa
 800679a:	201f      	movs	r0, #31
 800679c:	f7ff fc28 	bl	8005ff0 <writeReg>
    // set sync config
    writeReg(FSKRegSyncConfig, 0x12); // no auto restart, preamble 0xAA, enable, fill FIFO, 3 bytes sync
 80067a0:	2112      	movs	r1, #18
 80067a2:	2027      	movs	r0, #39	; 0x27
 80067a4:	f7ff fc24 	bl	8005ff0 <writeReg>
    // set packet config
    writeReg(FSKRegPacketConfig1, 0xD8); // var-length, whitening, crc, no auto-clear, no adr filter
 80067a8:	21d8      	movs	r1, #216	; 0xd8
 80067aa:	2030      	movs	r0, #48	; 0x30
 80067ac:	f7ff fc20 	bl	8005ff0 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40); // packet mode
 80067b0:	2140      	movs	r1, #64	; 0x40
 80067b2:	2031      	movs	r0, #49	; 0x31
 80067b4:	f7ff fc1c 	bl	8005ff0 <writeReg>
    // set sync value
    writeReg(FSKRegSyncValue1, 0xC1);
 80067b8:	21c1      	movs	r1, #193	; 0xc1
 80067ba:	2028      	movs	r0, #40	; 0x28
 80067bc:	f7ff fc18 	bl	8005ff0 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 80067c0:	2194      	movs	r1, #148	; 0x94
 80067c2:	2029      	movs	r0, #41	; 0x29
 80067c4:	f7ff fc14 	bl	8005ff0 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 80067c8:	21c1      	movs	r1, #193	; 0xc1
 80067ca:	202a      	movs	r0, #42	; 0x2a
 80067cc:	f7ff fc10 	bl	8005ff0 <writeReg>
    // set preamble timeout
    writeReg(FSKRegRxTimeout2, 0xFF);//(LMIC.rxsyms+1)/2);
 80067d0:	21ff      	movs	r1, #255	; 0xff
 80067d2:	2021      	movs	r0, #33	; 0x21
 80067d4:	f7ff fc0c 	bl	8005ff0 <writeReg>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 80067d8:	2102      	movs	r1, #2
 80067da:	2002      	movs	r0, #2
 80067dc:	f7ff fc08 	bl	8005ff0 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 80067e0:	2180      	movs	r1, #128	; 0x80
 80067e2:	2003      	movs	r0, #3
 80067e4:	f7ff fc04 	bl	8005ff0 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 80067e8:	2101      	movs	r1, #1
 80067ea:	2004      	movs	r0, #4
 80067ec:	f7ff fc00 	bl	8005ff0 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 80067f0:	2199      	movs	r1, #153	; 0x99
 80067f2:	2005      	movs	r0, #5
 80067f4:	f7ff fbfc 	bl	8005ff0 <writeReg>
    
    // configure DIO mapping DIO0=PayloadReady DIO1=NOP DIO2=TimeOut
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TIMEOUT);
 80067f8:	2138      	movs	r1, #56	; 0x38
 80067fa:	2040      	movs	r0, #64	; 0x40
 80067fc:	f7ff fbf8 	bl	8005ff0 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 8006800:	2000      	movs	r0, #0
 8006802:	f7fb f890 	bl	8001926 <hal_pin_rxtx>
    
    // now instruct the radio to receive
    hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8006806:	4b06      	ldr	r3, [pc, #24]	; (8006820 <rxfsk+0xe0>)
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	0018      	movs	r0, r3
 800680c:	f7fb f988 	bl	8001b20 <hal_waitUntil>
    opmode(OPMODE_RX); // no single rx mode available in FSK
 8006810:	2005      	movs	r0, #5
 8006812:	f7ff fc9f 	bl	8006154 <opmode>
}
 8006816:	46c0      	nop			; (mov r8, r8)
 8006818:	46bd      	mov	sp, r7
 800681a:	b002      	add	sp, #8
 800681c:	bd80      	pop	{r7, pc}
 800681e:	46c0      	nop			; (mov r8, r8)
 8006820:	20000280 	.word	0x20000280

08006824 <startrx>:

static void startrx (u1_t rxmode) {
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	0002      	movs	r2, r0
 800682c:	1dfb      	adds	r3, r7, #7
 800682e:	701a      	strb	r2, [r3, #0]
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 8006830:	2001      	movs	r0, #1
 8006832:	f7ff fbfe 	bl	8006032 <readReg>
 8006836:	0003      	movs	r3, r0
 8006838:	001a      	movs	r2, r3
 800683a:	2307      	movs	r3, #7
 800683c:	4013      	ands	r3, r2
 800683e:	d001      	beq.n	8006844 <startrx+0x20>
 8006840:	f7fb fa18 	bl	8001c74 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 8006844:	4b0a      	ldr	r3, [pc, #40]	; (8006870 <startrx+0x4c>)
 8006846:	89db      	ldrh	r3, [r3, #14]
 8006848:	0018      	movs	r0, r3
 800684a:	f7fb fb45 	bl	8001ed8 <getSf>
 800684e:	1e03      	subs	r3, r0, #0
 8006850:	d105      	bne.n	800685e <startrx+0x3a>
        rxfsk(rxmode);
 8006852:	1dfb      	adds	r3, r7, #7
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	0018      	movs	r0, r3
 8006858:	f7ff ff72 	bl	8006740 <rxfsk>
    } else { // LoRa modem
        rxlora(rxmode);
    }
    // the radio will go back to STANDBY mode as soon as the RX is finished
    // or timed out, and the corresponding IRQ will inform us about completion.
}
 800685c:	e004      	b.n	8006868 <startrx+0x44>
        rxlora(rxmode);
 800685e:	1dfb      	adds	r3, r7, #7
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	0018      	movs	r0, r3
 8006864:	f7ff fee8 	bl	8006638 <rxlora>
}
 8006868:	46c0      	nop			; (mov r8, r8)
 800686a:	46bd      	mov	sp, r7
 800686c:	b002      	add	sp, #8
 800686e:	bd80      	pop	{r7, pc}
 8006870:	20000280 	.word	0x20000280

08006874 <radio_init>:

// get random seed from wideband noise rssi
void radio_init () {
 8006874:	b590      	push	{r4, r7, lr}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 800687a:	f7fb f9bd 	bl	8001bf8 <hal_disableIRQs>

    // manually reset radio
#ifdef CFG_sx1276_radio
    hal_pin_rst(0); // drive RST pin low
 800687e:	2000      	movs	r0, #0
 8006880:	f7fb f86e 	bl	8001960 <hal_pin_rst>
#else
    hal_pin_rst(1); // drive RST pin high
#endif
    hal_waitUntil(os_getTime()+ms2osticks(1)); // wait >100us
 8006884:	f7ff fad8 	bl	8005e38 <os_getTime>
 8006888:	0003      	movs	r3, r0
 800688a:	3320      	adds	r3, #32
 800688c:	0018      	movs	r0, r3
 800688e:	f7fb f947 	bl	8001b20 <hal_waitUntil>
    hal_pin_rst(2); // configure RST pin floating!
 8006892:	2002      	movs	r0, #2
 8006894:	f7fb f864 	bl	8001960 <hal_pin_rst>
    hal_waitUntil(os_getTime()+ms2osticks(5)); // wait 5ms
 8006898:	f7ff face 	bl	8005e38 <os_getTime>
 800689c:	0003      	movs	r3, r0
 800689e:	33a0      	adds	r3, #160	; 0xa0
 80068a0:	0018      	movs	r0, r3
 80068a2:	f7fb f93d 	bl	8001b20 <hal_waitUntil>

    opmode(OPMODE_SLEEP);
 80068a6:	2000      	movs	r0, #0
 80068a8:	f7ff fc54 	bl	8006154 <opmode>

    // some sanity checks, e.g., read version number
    u1_t v = readReg(RegVersion);
 80068ac:	1dfc      	adds	r4, r7, #7
 80068ae:	2042      	movs	r0, #66	; 0x42
 80068b0:	f7ff fbbf 	bl	8006032 <readReg>
 80068b4:	0003      	movs	r3, r0
 80068b6:	7023      	strb	r3, [r4, #0]
#ifdef CFG_sx1276_radio
    ASSERT(v == 0x12 ); 
 80068b8:	1dfb      	adds	r3, r7, #7
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	2b12      	cmp	r3, #18
 80068be:	d001      	beq.n	80068c4 <radio_init+0x50>
 80068c0:	f7fb f9d8 	bl	8001c74 <hal_failed>
    ASSERT(v == 0x22);
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif
    // seed 15-byte randomness via noise rssi
    rxlora(RXMODE_RSSI);
 80068c4:	2002      	movs	r0, #2
 80068c6:	f7ff feb7 	bl	8006638 <rxlora>
    while( (readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX ); // continuous rx
 80068ca:	46c0      	nop			; (mov r8, r8)
 80068cc:	2001      	movs	r0, #1
 80068ce:	f7ff fbb0 	bl	8006032 <readReg>
 80068d2:	0003      	movs	r3, r0
 80068d4:	001a      	movs	r2, r3
 80068d6:	2307      	movs	r3, #7
 80068d8:	4013      	ands	r3, r2
 80068da:	2b05      	cmp	r3, #5
 80068dc:	d1f6      	bne.n	80068cc <radio_init+0x58>
    for(int i=1; i<16; i++) {
 80068de:	2301      	movs	r3, #1
 80068e0:	60fb      	str	r3, [r7, #12]
 80068e2:	e031      	b.n	8006948 <radio_init+0xd4>
        for(int j=0; j<8; j++) {
 80068e4:	2300      	movs	r3, #0
 80068e6:	60bb      	str	r3, [r7, #8]
 80068e8:	e028      	b.n	800693c <radio_init+0xc8>
            u1_t b; // wait for two non-identical subsequent least-significant bits
            while( (b = readReg(LORARegRssiWideband) & 0x01) == (readReg(LORARegRssiWideband) & 0x01) );
 80068ea:	46c0      	nop			; (mov r8, r8)
 80068ec:	202c      	movs	r0, #44	; 0x2c
 80068ee:	f7ff fba0 	bl	8006032 <readReg>
 80068f2:	0003      	movs	r3, r0
 80068f4:	0019      	movs	r1, r3
 80068f6:	1dbb      	adds	r3, r7, #6
 80068f8:	2201      	movs	r2, #1
 80068fa:	400a      	ands	r2, r1
 80068fc:	701a      	strb	r2, [r3, #0]
 80068fe:	1dbb      	adds	r3, r7, #6
 8006900:	781c      	ldrb	r4, [r3, #0]
 8006902:	202c      	movs	r0, #44	; 0x2c
 8006904:	f7ff fb95 	bl	8006032 <readReg>
 8006908:	0003      	movs	r3, r0
 800690a:	001a      	movs	r2, r3
 800690c:	2301      	movs	r3, #1
 800690e:	4013      	ands	r3, r2
 8006910:	429c      	cmp	r4, r3
 8006912:	d0eb      	beq.n	80068ec <radio_init+0x78>
            randbuf[i] = (randbuf[i] << 1) | b;
 8006914:	4a14      	ldr	r2, [pc, #80]	; (8006968 <radio_init+0xf4>)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	18d3      	adds	r3, r2, r3
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	005b      	lsls	r3, r3, #1
 800691e:	b25a      	sxtb	r2, r3
 8006920:	1dbb      	adds	r3, r7, #6
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	b25b      	sxtb	r3, r3
 8006926:	4313      	orrs	r3, r2
 8006928:	b25b      	sxtb	r3, r3
 800692a:	b2d9      	uxtb	r1, r3
 800692c:	4a0e      	ldr	r2, [pc, #56]	; (8006968 <radio_init+0xf4>)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	18d3      	adds	r3, r2, r3
 8006932:	1c0a      	adds	r2, r1, #0
 8006934:	701a      	strb	r2, [r3, #0]
        for(int j=0; j<8; j++) {
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	3301      	adds	r3, #1
 800693a:	60bb      	str	r3, [r7, #8]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2b07      	cmp	r3, #7
 8006940:	ddd3      	ble.n	80068ea <radio_init+0x76>
    for(int i=1; i<16; i++) {
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3301      	adds	r3, #1
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2b0f      	cmp	r3, #15
 800694c:	ddca      	ble.n	80068e4 <radio_init+0x70>
        }
    }
    randbuf[0] = 16; // set initial index
 800694e:	4b06      	ldr	r3, [pc, #24]	; (8006968 <radio_init+0xf4>)
 8006950:	2210      	movs	r2, #16
 8006952:	701a      	strb	r2, [r3, #0]
    // Launch Rx chain calibration for HF band 
    writeReg(FSKRegImageCal, (readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_MASK)|RF_IMAGECAL_IMAGECAL_START);
    while((readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING) { ; }
#endif /* CFG_sx1276mb1_board */

    opmode(OPMODE_SLEEP);
 8006954:	2000      	movs	r0, #0
 8006956:	f7ff fbfd 	bl	8006154 <opmode>

    hal_enableIRQs();
 800695a:	f7fb f95b 	bl	8001c14 <hal_enableIRQs>
}
 800695e:	46c0      	nop			; (mov r8, r8)
 8006960:	46bd      	mov	sp, r7
 8006962:	b005      	add	sp, #20
 8006964:	bd90      	pop	{r4, r7, pc}
 8006966:	46c0      	nop			; (mov r8, r8)
 8006968:	20000090 	.word	0x20000090

0800696c <radio_rand1>:

// return next random byte derived from seed buffer
// (buf[0] holds index of next byte to be returned)
u1_t radio_rand1 () {
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
    u1_t i = randbuf[0];
 8006972:	1dfb      	adds	r3, r7, #7
 8006974:	4a14      	ldr	r2, [pc, #80]	; (80069c8 <radio_rand1+0x5c>)
 8006976:	7812      	ldrb	r2, [r2, #0]
 8006978:	701a      	strb	r2, [r3, #0]
    ASSERT( i != 0 );
 800697a:	1dfb      	adds	r3, r7, #7
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <radio_rand1+0x1a>
 8006982:	f7fb f977 	bl	8001c74 <hal_failed>
    if( i==16 ) {
 8006986:	1dfb      	adds	r3, r7, #7
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	2b10      	cmp	r3, #16
 800698c:	d108      	bne.n	80069a0 <radio_rand1+0x34>
        os_aes(AES_ENC, randbuf, 16); // encrypt seed with any key
 800698e:	4b0e      	ldr	r3, [pc, #56]	; (80069c8 <radio_rand1+0x5c>)
 8006990:	2210      	movs	r2, #16
 8006992:	0019      	movs	r1, r3
 8006994:	2000      	movs	r0, #0
 8006996:	f7fa f9bd 	bl	8000d14 <os_aes>
        i = 0;
 800699a:	1dfb      	adds	r3, r7, #7
 800699c:	2200      	movs	r2, #0
 800699e:	701a      	strb	r2, [r3, #0]
    }
    u1_t v = randbuf[i++];
 80069a0:	1dfb      	adds	r3, r7, #7
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	1dfa      	adds	r2, r7, #7
 80069a6:	1c59      	adds	r1, r3, #1
 80069a8:	7011      	strb	r1, [r2, #0]
 80069aa:	0019      	movs	r1, r3
 80069ac:	1dbb      	adds	r3, r7, #6
 80069ae:	4a06      	ldr	r2, [pc, #24]	; (80069c8 <radio_rand1+0x5c>)
 80069b0:	5c52      	ldrb	r2, [r2, r1]
 80069b2:	701a      	strb	r2, [r3, #0]
    randbuf[0] = i;
 80069b4:	4b04      	ldr	r3, [pc, #16]	; (80069c8 <radio_rand1+0x5c>)
 80069b6:	1dfa      	adds	r2, r7, #7
 80069b8:	7812      	ldrb	r2, [r2, #0]
 80069ba:	701a      	strb	r2, [r3, #0]
    return v;
 80069bc:	1dbb      	adds	r3, r7, #6
 80069be:	781b      	ldrb	r3, [r3, #0]
}
 80069c0:	0018      	movs	r0, r3
 80069c2:	46bd      	mov	sp, r7
 80069c4:	b002      	add	sp, #8
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	20000090 	.word	0x20000090

080069cc <radio_irq_handler>:
    [SF12] = us2osticks(31189), // (1022 ticks)
};

// called by hal ext IRQ handler
// (radio goes to stanby mode after tx/rx operations)
void radio_irq_handler (u1_t dio) {
 80069cc:	b5b0      	push	{r4, r5, r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	0002      	movs	r2, r0
 80069d4:	1dfb      	adds	r3, r7, #7
 80069d6:	701a      	strb	r2, [r3, #0]
    u1_t s = readReg(RegOpMode);
    u1_t c = readReg(LORARegModemConfig2);
    opmode(OPMODE_TX);
    return;
#else /* ! CFG_TxContinuousMode */
    ostime_t now = os_getTime();
 80069d8:	f7ff fa2e 	bl	8005e38 <os_getTime>
 80069dc:	0003      	movs	r3, r0
 80069de:	60fb      	str	r3, [r7, #12]
    if( (readReg(RegOpMode) & OPMODE_LORA) != 0) { // LORA modem
 80069e0:	2001      	movs	r0, #1
 80069e2:	f7ff fb26 	bl	8006032 <readReg>
 80069e6:	0003      	movs	r3, r0
 80069e8:	b25b      	sxtb	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	db00      	blt.n	80069f0 <radio_irq_handler+0x24>
 80069ee:	e07b      	b.n	8006ae8 <radio_irq_handler+0x11c>
        u1_t flags = readReg(LORARegIrqFlags);
 80069f0:	2509      	movs	r5, #9
 80069f2:	197c      	adds	r4, r7, r5
 80069f4:	2012      	movs	r0, #18
 80069f6:	f7ff fb1c 	bl	8006032 <readReg>
 80069fa:	0003      	movs	r3, r0
 80069fc:	7023      	strb	r3, [r4, #0]
        if( flags & IRQ_LORA_TXDONE_MASK ) {
 80069fe:	197b      	adds	r3, r7, r5
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	2208      	movs	r2, #8
 8006a04:	4013      	ands	r3, r2
 8006a06:	d004      	beq.n	8006a12 <radio_irq_handler+0x46>
            // save exact tx time
            LMIC.txend = now - us2osticks(43); // TXDONE FIXUP
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	1e5a      	subs	r2, r3, #1
 8006a0c:	4b60      	ldr	r3, [pc, #384]	; (8006b90 <radio_irq_handler+0x1c4>)
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	e061      	b.n	8006ad6 <radio_irq_handler+0x10a>
        } else if( flags & IRQ_LORA_RXDONE_MASK ) {
 8006a12:	2309      	movs	r3, #9
 8006a14:	18fb      	adds	r3, r7, r3
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	2240      	movs	r2, #64	; 0x40
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	d050      	beq.n	8006ac0 <radio_irq_handler+0xf4>
            // save exact rx time
            if(getBw(LMIC.rps) == BW125) {
 8006a1e:	4b5c      	ldr	r3, [pc, #368]	; (8006b90 <radio_irq_handler+0x1c4>)
 8006a20:	89db      	ldrh	r3, [r3, #14]
 8006a22:	0018      	movs	r0, r3
 8006a24:	f7fb fa68 	bl	8001ef8 <getBw>
 8006a28:	1e03      	subs	r3, r0, #0
 8006a2a:	d10d      	bne.n	8006a48 <radio_irq_handler+0x7c>
                now -= LORA_RXDONE_FIXUP[getSf(LMIC.rps)];
 8006a2c:	4b58      	ldr	r3, [pc, #352]	; (8006b90 <radio_irq_handler+0x1c4>)
 8006a2e:	89db      	ldrh	r3, [r3, #14]
 8006a30:	0018      	movs	r0, r3
 8006a32:	f7fb fa51 	bl	8001ed8 <getSf>
 8006a36:	0003      	movs	r3, r0
 8006a38:	001a      	movs	r2, r3
 8006a3a:	4b56      	ldr	r3, [pc, #344]	; (8006b94 <radio_irq_handler+0x1c8>)
 8006a3c:	0052      	lsls	r2, r2, #1
 8006a3e:	5ad3      	ldrh	r3, [r2, r3]
 8006a40:	001a      	movs	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	1a9b      	subs	r3, r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]
            }
            LMIC.rxtime = now;
 8006a48:	4b51      	ldr	r3, [pc, #324]	; (8006b90 <radio_irq_handler+0x1c4>)
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	605a      	str	r2, [r3, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 8006a4e:	201d      	movs	r0, #29
 8006a50:	f7ff faef 	bl	8006032 <readReg>
 8006a54:	0003      	movs	r3, r0
 8006a56:	001a      	movs	r2, r3
 8006a58:	2304      	movs	r3, #4
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	d005      	beq.n	8006a6a <radio_irq_handler+0x9e>
                readReg(LORARegPayloadLength) : readReg(LORARegRxNbBytes);
 8006a5e:	2022      	movs	r0, #34	; 0x22
 8006a60:	f7ff fae7 	bl	8006032 <readReg>
 8006a64:	0003      	movs	r3, r0
 8006a66:	0019      	movs	r1, r3
 8006a68:	e004      	b.n	8006a74 <radio_irq_handler+0xa8>
 8006a6a:	2013      	movs	r0, #19
 8006a6c:	f7ff fae1 	bl	8006032 <readReg>
 8006a70:	0003      	movs	r3, r0
 8006a72:	0019      	movs	r1, r3
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 8006a74:	4a46      	ldr	r2, [pc, #280]	; (8006b90 <radio_irq_handler+0x1c4>)
 8006a76:	2348      	movs	r3, #72	; 0x48
 8006a78:	33ff      	adds	r3, #255	; 0xff
 8006a7a:	54d1      	strb	r1, [r2, r3]
            // set FIFO read address pointer
            writeReg(LORARegFifoAddrPtr, readReg(LORARegFifoRxCurrentAddr)); 
 8006a7c:	2010      	movs	r0, #16
 8006a7e:	f7ff fad8 	bl	8006032 <readReg>
 8006a82:	0003      	movs	r3, r0
 8006a84:	0019      	movs	r1, r3
 8006a86:	200d      	movs	r0, #13
 8006a88:	f7ff fab2 	bl	8005ff0 <writeReg>
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8006a8c:	4a40      	ldr	r2, [pc, #256]	; (8006b90 <radio_irq_handler+0x1c4>)
 8006a8e:	2348      	movs	r3, #72	; 0x48
 8006a90:	33ff      	adds	r3, #255	; 0xff
 8006a92:	5cd2      	ldrb	r2, [r2, r3]
 8006a94:	4b40      	ldr	r3, [pc, #256]	; (8006b98 <radio_irq_handler+0x1cc>)
 8006a96:	0019      	movs	r1, r3
 8006a98:	2000      	movs	r0, #0
 8006a9a:	f7ff fb23 	bl	80060e4 <readBuf>
            // read rx quality parameters
            LMIC.snr  = readReg(LORARegPktSnrValue); // SNR [dB] * 4
 8006a9e:	2019      	movs	r0, #25
 8006aa0:	f7ff fac7 	bl	8006032 <readReg>
 8006aa4:	0003      	movs	r3, r0
 8006aa6:	b25a      	sxtb	r2, r3
 8006aa8:	4b39      	ldr	r3, [pc, #228]	; (8006b90 <radio_irq_handler+0x1c4>)
 8006aaa:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = readReg(LORARegPktRssiValue) - 125 + 64; // RSSI [dBm] (-196...+63)
 8006aac:	201a      	movs	r0, #26
 8006aae:	f7ff fac0 	bl	8006032 <readReg>
 8006ab2:	0003      	movs	r3, r0
 8006ab4:	3b3d      	subs	r3, #61	; 0x3d
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	b25a      	sxtb	r2, r3
 8006aba:	4b35      	ldr	r3, [pc, #212]	; (8006b90 <radio_irq_handler+0x1c4>)
 8006abc:	731a      	strb	r2, [r3, #12]
 8006abe:	e00a      	b.n	8006ad6 <radio_irq_handler+0x10a>
        } else if( flags & IRQ_LORA_RXTOUT_MASK ) {
 8006ac0:	2309      	movs	r3, #9
 8006ac2:	18fb      	adds	r3, r7, r3
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	b25b      	sxtb	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	da04      	bge.n	8006ad6 <radio_irq_handler+0x10a>
            // indicate timeout
            LMIC.dataLen = 0;
 8006acc:	4a30      	ldr	r2, [pc, #192]	; (8006b90 <radio_irq_handler+0x1c4>)
 8006ace:	2348      	movs	r3, #72	; 0x48
 8006ad0:	33ff      	adds	r3, #255	; 0xff
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	54d1      	strb	r1, [r2, r3]
        }
        // mask all radio IRQs
        writeReg(LORARegIrqFlagsMask, 0xFF);
 8006ad6:	21ff      	movs	r1, #255	; 0xff
 8006ad8:	2011      	movs	r0, #17
 8006ada:	f7ff fa89 	bl	8005ff0 <writeReg>
        // clear radio IRQ flags
        writeReg(LORARegIrqFlags, 0xFF);
 8006ade:	21ff      	movs	r1, #255	; 0xff
 8006ae0:	2012      	movs	r0, #18
 8006ae2:	f7ff fa85 	bl	8005ff0 <writeReg>
 8006ae6:	e045      	b.n	8006b74 <radio_irq_handler+0x1a8>
    } else { // FSK modem
        u1_t flags1 = readReg(FSKRegIrqFlags1);
 8006ae8:	230b      	movs	r3, #11
 8006aea:	18fc      	adds	r4, r7, r3
 8006aec:	203e      	movs	r0, #62	; 0x3e
 8006aee:	f7ff faa0 	bl	8006032 <readReg>
 8006af2:	0003      	movs	r3, r0
 8006af4:	7023      	strb	r3, [r4, #0]
        u1_t flags2 = readReg(FSKRegIrqFlags2);
 8006af6:	250a      	movs	r5, #10
 8006af8:	197c      	adds	r4, r7, r5
 8006afa:	203f      	movs	r0, #63	; 0x3f
 8006afc:	f7ff fa99 	bl	8006032 <readReg>
 8006b00:	0003      	movs	r3, r0
 8006b02:	7023      	strb	r3, [r4, #0]
        if( flags2 & IRQ_FSK2_PACKETSENT_MASK ) {
 8006b04:	197b      	adds	r3, r7, r5
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	2208      	movs	r2, #8
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	d003      	beq.n	8006b16 <radio_irq_handler+0x14a>
            // save exact tx time
            LMIC.txend = now;
 8006b0e:	4b20      	ldr	r3, [pc, #128]	; (8006b90 <radio_irq_handler+0x1c4>)
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	e02e      	b.n	8006b74 <radio_irq_handler+0x1a8>
        } else if( flags2 & IRQ_FSK2_PAYLOADREADY_MASK ) {
 8006b16:	230a      	movs	r3, #10
 8006b18:	18fb      	adds	r3, r7, r3
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	2204      	movs	r2, #4
 8006b1e:	4013      	ands	r3, r2
 8006b20:	d01b      	beq.n	8006b5a <radio_irq_handler+0x18e>
            // save exact rx time
            LMIC.rxtime = now;
 8006b22:	4b1b      	ldr	r3, [pc, #108]	; (8006b90 <radio_irq_handler+0x1c4>)
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	605a      	str	r2, [r3, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = readReg(FSKRegPayloadLength);
 8006b28:	2032      	movs	r0, #50	; 0x32
 8006b2a:	f7ff fa82 	bl	8006032 <readReg>
 8006b2e:	0003      	movs	r3, r0
 8006b30:	0019      	movs	r1, r3
 8006b32:	4a17      	ldr	r2, [pc, #92]	; (8006b90 <radio_irq_handler+0x1c4>)
 8006b34:	2348      	movs	r3, #72	; 0x48
 8006b36:	33ff      	adds	r3, #255	; 0xff
 8006b38:	54d1      	strb	r1, [r2, r3]
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8006b3a:	4a15      	ldr	r2, [pc, #84]	; (8006b90 <radio_irq_handler+0x1c4>)
 8006b3c:	2348      	movs	r3, #72	; 0x48
 8006b3e:	33ff      	adds	r3, #255	; 0xff
 8006b40:	5cd2      	ldrb	r2, [r2, r3]
 8006b42:	4b15      	ldr	r3, [pc, #84]	; (8006b98 <radio_irq_handler+0x1cc>)
 8006b44:	0019      	movs	r1, r3
 8006b46:	2000      	movs	r0, #0
 8006b48:	f7ff facc 	bl	80060e4 <readBuf>
            // read rx quality parameters
            LMIC.snr  = 0; // determine snr
 8006b4c:	4b10      	ldr	r3, [pc, #64]	; (8006b90 <radio_irq_handler+0x1c4>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = 0; // determine rssi
 8006b52:	4b0f      	ldr	r3, [pc, #60]	; (8006b90 <radio_irq_handler+0x1c4>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	731a      	strb	r2, [r3, #12]
 8006b58:	e00c      	b.n	8006b74 <radio_irq_handler+0x1a8>
        } else if( flags1 & IRQ_FSK1_TIMEOUT_MASK ) {
 8006b5a:	230b      	movs	r3, #11
 8006b5c:	18fb      	adds	r3, r7, r3
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	2204      	movs	r2, #4
 8006b62:	4013      	ands	r3, r2
 8006b64:	d005      	beq.n	8006b72 <radio_irq_handler+0x1a6>
            // indicate timeout
            LMIC.dataLen = 0;
 8006b66:	4a0a      	ldr	r2, [pc, #40]	; (8006b90 <radio_irq_handler+0x1c4>)
 8006b68:	2348      	movs	r3, #72	; 0x48
 8006b6a:	33ff      	adds	r3, #255	; 0xff
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	54d1      	strb	r1, [r2, r3]
 8006b70:	e000      	b.n	8006b74 <radio_irq_handler+0x1a8>
        } else {
            while(1);
 8006b72:	e7fe      	b.n	8006b72 <radio_irq_handler+0x1a6>
        }
    }
    // go from stanby to sleep
    opmode(OPMODE_SLEEP);
 8006b74:	2000      	movs	r0, #0
 8006b76:	f7ff faed 	bl	8006154 <opmode>
    // run os job (use preset func ptr)
    os_setCallback(&LMIC.osjob, LMIC.osjob.func);
 8006b7a:	4b05      	ldr	r3, [pc, #20]	; (8006b90 <radio_irq_handler+0x1c4>)
 8006b7c:	69da      	ldr	r2, [r3, #28]
 8006b7e:	4b07      	ldr	r3, [pc, #28]	; (8006b9c <radio_irq_handler+0x1d0>)
 8006b80:	0011      	movs	r1, r2
 8006b82:	0018      	movs	r0, r3
 8006b84:	f7ff f99e 	bl	8005ec4 <os_setCallback>
#endif /* ! CFG_TxContinuousMode */
}
 8006b88:	46c0      	nop			; (mov r8, r8)
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	b004      	add	sp, #16
 8006b8e:	bdb0      	pop	{r4, r5, r7, pc}
 8006b90:	20000280 	.word	0x20000280
 8006b94:	0800e05c 	.word	0x0800e05c
 8006b98:	200003c8 	.word	0x200003c8
 8006b9c:	20000294 	.word	0x20000294

08006ba0 <os_radio>:

void os_radio (u1_t mode) {
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	0002      	movs	r2, r0
 8006ba8:	1dfb      	adds	r3, r7, #7
 8006baa:	701a      	strb	r2, [r3, #0]
    hal_disableIRQs();
 8006bac:	f7fb f824 	bl	8001bf8 <hal_disableIRQs>
    switch (mode) {
 8006bb0:	1dfb      	adds	r3, r7, #7
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d013      	beq.n	8006be0 <os_radio+0x40>
 8006bb8:	dc16      	bgt.n	8006be8 <os_radio+0x48>
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d00c      	beq.n	8006bd8 <os_radio+0x38>
 8006bbe:	dc13      	bgt.n	8006be8 <os_radio+0x48>
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <os_radio+0x2a>
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d004      	beq.n	8006bd2 <os_radio+0x32>
 8006bc8:	e00e      	b.n	8006be8 <os_radio+0x48>
      case RADIO_RST:
        // put radio to sleep
        opmode(OPMODE_SLEEP);
 8006bca:	2000      	movs	r0, #0
 8006bcc:	f7ff fac2 	bl	8006154 <opmode>
        break;
 8006bd0:	e00a      	b.n	8006be8 <os_radio+0x48>

      case RADIO_TX:
        // transmit frame now
        starttx(); // buf=LMIC.frame, len=LMIC.dataLen
 8006bd2:	f7ff fd13 	bl	80065fc <starttx>
        break;
 8006bd6:	e007      	b.n	8006be8 <os_radio+0x48>
      
      case RADIO_RX:
        // receive frame now (exactly at rxtime)
        startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
 8006bd8:	2000      	movs	r0, #0
 8006bda:	f7ff fe23 	bl	8006824 <startrx>
        break;
 8006bde:	e003      	b.n	8006be8 <os_radio+0x48>

      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
 8006be0:	2001      	movs	r0, #1
 8006be2:	f7ff fe1f 	bl	8006824 <startrx>
        break;
 8006be6:	46c0      	nop			; (mov r8, r8)
    }
    hal_enableIRQs();
 8006be8:	f7fb f814 	bl	8001c14 <hal_enableIRQs>
}
 8006bec:	46c0      	nop			; (mov r8, r8)
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	b002      	add	sp, #8
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <Sdp800_Init>:
static const float scaleFactorTemperature = 200;

static uint8_t _i2cAddress;

//-----------------------------------------------------------------------------
void Sdp800_Init(uint8_t i2cAddress){
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	0002      	movs	r2, r0
 8006bfc:	1dfb      	adds	r3, r7, #7
 8006bfe:	701a      	strb	r2, [r3, #0]
  _i2cAddress = i2cAddress;
 8006c00:	4b04      	ldr	r3, [pc, #16]	; (8006c14 <Sdp800_Init+0x20>)
 8006c02:	1dfa      	adds	r2, r7, #7
 8006c04:	7812      	ldrb	r2, [r2, #0]
 8006c06:	701a      	strb	r2, [r3, #0]
  I2c_Init();
 8006c08:	f7fb f83c 	bl	8001c84 <I2c_Init>
}
 8006c0c:	46c0      	nop			; (mov r8, r8)
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	b002      	add	sp, #8
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	200000a0 	.word	0x200000a0

08006c18 <Sdp800_StartContinousMeasurement>:

//-----------------------------------------------------------------------------
Error Sdp800_StartContinousMeasurement(Sdp800TempComp  tempComp,
                                       Sdp800Averaging averaging)
{
 8006c18:	b590      	push	{r4, r7, lr}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	0002      	movs	r2, r0
 8006c20:	1dfb      	adds	r3, r7, #7
 8006c22:	701a      	strb	r2, [r3, #0]
 8006c24:	1dbb      	adds	r3, r7, #6
 8006c26:	1c0a      	adds	r2, r1, #0
 8006c28:	701a      	strb	r2, [r3, #0]
  Error error;
  Command command = COMMAND_UNDEFINED;
 8006c2a:	230c      	movs	r3, #12
 8006c2c:	18fb      	adds	r3, r7, r3
 8006c2e:	2200      	movs	r2, #0
 8006c30:	801a      	strh	r2, [r3, #0]
  
  // determine command code
  switch(tempComp) {
 8006c32:	1dfb      	adds	r3, r7, #7
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d002      	beq.n	8006c40 <Sdp800_StartContinousMeasurement+0x28>
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d011      	beq.n	8006c62 <Sdp800_StartContinousMeasurement+0x4a>
 8006c3e:	e024      	b.n	8006c8a <Sdp800_StartContinousMeasurement+0x72>
    case SDP800_TEMPCOMP_MASS_FLOW:
      switch(averaging) {
 8006c40:	1dbb      	adds	r3, r7, #6
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d006      	beq.n	8006c56 <Sdp800_StartContinousMeasurement+0x3e>
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d11b      	bne.n	8006c84 <Sdp800_StartContinousMeasurement+0x6c>
        case SDP800_AVERAGING_TILL_READ:
          command = COMMAND_START_MEASURMENT_MF_AVERAGE;
 8006c4c:	230c      	movs	r3, #12
 8006c4e:	18fb      	adds	r3, r7, r3
 8006c50:	4a1d      	ldr	r2, [pc, #116]	; (8006cc8 <Sdp800_StartContinousMeasurement+0xb0>)
 8006c52:	801a      	strh	r2, [r3, #0]
          break;
 8006c54:	e004      	b.n	8006c60 <Sdp800_StartContinousMeasurement+0x48>
        case SDP800_AVERAGING_NONE:
          command = COMMAND_START_MEASURMENT_MF_NONE;
 8006c56:	230c      	movs	r3, #12
 8006c58:	18fb      	adds	r3, r7, r3
 8006c5a:	4a1c      	ldr	r2, [pc, #112]	; (8006ccc <Sdp800_StartContinousMeasurement+0xb4>)
 8006c5c:	801a      	strh	r2, [r3, #0]
          break;
 8006c5e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006c60:	e010      	b.n	8006c84 <Sdp800_StartContinousMeasurement+0x6c>
    case SDP800_TEMPCOMP_DIFFERNTIAL_PRESSURE:
      switch(averaging) {
 8006c62:	1dbb      	adds	r3, r7, #6
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d006      	beq.n	8006c78 <Sdp800_StartContinousMeasurement+0x60>
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d10c      	bne.n	8006c88 <Sdp800_StartContinousMeasurement+0x70>
        case SDP800_AVERAGING_TILL_READ:
          command = COMMAND_START_MEASURMENT_DP_AVERAGE;
 8006c6e:	230c      	movs	r3, #12
 8006c70:	18fb      	adds	r3, r7, r3
 8006c72:	4a17      	ldr	r2, [pc, #92]	; (8006cd0 <Sdp800_StartContinousMeasurement+0xb8>)
 8006c74:	801a      	strh	r2, [r3, #0]
          break;
 8006c76:	e004      	b.n	8006c82 <Sdp800_StartContinousMeasurement+0x6a>
        case SDP800_AVERAGING_NONE:
          command = COMMAND_START_MEASURMENT_DP_NONE;
 8006c78:	230c      	movs	r3, #12
 8006c7a:	18fb      	adds	r3, r7, r3
 8006c7c:	4a15      	ldr	r2, [pc, #84]	; (8006cd4 <Sdp800_StartContinousMeasurement+0xbc>)
 8006c7e:	801a      	strh	r2, [r3, #0]
          break;
 8006c80:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006c82:	e001      	b.n	8006c88 <Sdp800_StartContinousMeasurement+0x70>
      break;
 8006c84:	46c0      	nop			; (mov r8, r8)
 8006c86:	e000      	b.n	8006c8a <Sdp800_StartContinousMeasurement+0x72>
      break;
 8006c88:	46c0      	nop			; (mov r8, r8)
  }
  
  if(COMMAND_UNDEFINED != command) {
 8006c8a:	220c      	movs	r2, #12
 8006c8c:	18bb      	adds	r3, r7, r2
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00d      	beq.n	8006cb0 <Sdp800_StartContinousMeasurement+0x98>
    error = ExecuteCommand(command);
 8006c94:	230f      	movs	r3, #15
 8006c96:	18fc      	adds	r4, r7, r3
 8006c98:	18bb      	adds	r3, r7, r2
 8006c9a:	881b      	ldrh	r3, [r3, #0]
 8006c9c:	0018      	movs	r0, r3
 8006c9e:	f000 f8cf 	bl	8006e40 <ExecuteCommand>
 8006ca2:	0003      	movs	r3, r0
 8006ca4:	7023      	strb	r3, [r4, #0]
    // wait 10 ms for startup
    DelayMicroSeconds(10000);
 8006ca6:	4b0c      	ldr	r3, [pc, #48]	; (8006cd8 <Sdp800_StartContinousMeasurement+0xc0>)
 8006ca8:	0018      	movs	r0, r3
 8006caa:	f000 faef 	bl	800728c <DelayMicroSeconds>
 8006cae:	e003      	b.n	8006cb8 <Sdp800_StartContinousMeasurement+0xa0>
  } else {
    error = ERROR_IVALID_PARAMETER;
 8006cb0:	230f      	movs	r3, #15
 8006cb2:	18fb      	adds	r3, r7, r3
 8006cb4:	22ff      	movs	r2, #255	; 0xff
 8006cb6:	701a      	strb	r2, [r3, #0]
  }
  
  return error;
 8006cb8:	230f      	movs	r3, #15
 8006cba:	18fb      	adds	r3, r7, r3
 8006cbc:	781b      	ldrb	r3, [r3, #0]
}
 8006cbe:	0018      	movs	r0, r3
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	b005      	add	sp, #20
 8006cc4:	bd90      	pop	{r4, r7, pc}
 8006cc6:	46c0      	nop			; (mov r8, r8)
 8006cc8:	00003603 	.word	0x00003603
 8006ccc:	00003608 	.word	0x00003608
 8006cd0:	00003615 	.word	0x00003615
 8006cd4:	0000361e 	.word	0x0000361e
 8006cd8:	00002710 	.word	0x00002710

08006cdc <Sdp800_ReadMeasurementResults>:
  return ExecuteCommand(COMMAND_STOP_CONTINOUS_MEASUREMENT);
}

//-----------------------------------------------------------------------------
Error Sdp800_ReadMeasurementResults(float* diffPressure, float* temperature)
{
 8006cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  Error error;
  int16_t  diffPressureTicks;
  int16_t  temperatureTicks;
  uint16_t scaleFactorDiffPressure;
  
  error = ReadMeasurementRawResults(&diffPressureTicks, &temperatureTicks,
 8006ce6:	250f      	movs	r5, #15
 8006ce8:	197c      	adds	r4, r7, r5
 8006cea:	2608      	movs	r6, #8
 8006cec:	19ba      	adds	r2, r7, r6
 8006cee:	230a      	movs	r3, #10
 8006cf0:	18f9      	adds	r1, r7, r3
 8006cf2:	200c      	movs	r0, #12
 8006cf4:	183b      	adds	r3, r7, r0
 8006cf6:	0018      	movs	r0, r3
 8006cf8:	f000 f85a 	bl	8006db0 <ReadMeasurementRawResults>
 8006cfc:	0003      	movs	r3, r0
 8006cfe:	7023      	strb	r3, [r4, #0]
                                    &scaleFactorDiffPressure);
  
  if(ERROR_NONE == error) {
 8006d00:	197b      	adds	r3, r7, r5
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d126      	bne.n	8006d56 <Sdp800_ReadMeasurementResults+0x7a>
    *diffPressure = (float)diffPressureTicks / (float)scaleFactorDiffPressure;
 8006d08:	200c      	movs	r0, #12
 8006d0a:	183b      	adds	r3, r7, r0
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	5e9b      	ldrsh	r3, [r3, r2]
 8006d10:	0018      	movs	r0, r3
 8006d12:	f7f9 fdf1 	bl	80008f8 <__aeabi_i2f>
 8006d16:	1c04      	adds	r4, r0, #0
 8006d18:	19bb      	adds	r3, r7, r6
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	0018      	movs	r0, r3
 8006d1e:	f7f9 fe31 	bl	8000984 <__aeabi_ui2f>
 8006d22:	1c03      	adds	r3, r0, #0
 8006d24:	1c19      	adds	r1, r3, #0
 8006d26:	1c20      	adds	r0, r4, #0
 8006d28:	f7f9 fcba 	bl	80006a0 <__aeabi_fdiv>
 8006d2c:	1c03      	adds	r3, r0, #0
 8006d2e:	1c1a      	adds	r2, r3, #0
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	601a      	str	r2, [r3, #0]
    *temperature  = (float)temperatureTicks / scaleFactorTemperature;
 8006d34:	230a      	movs	r3, #10
 8006d36:	18fb      	adds	r3, r7, r3
 8006d38:	2200      	movs	r2, #0
 8006d3a:	5e9b      	ldrsh	r3, [r3, r2]
 8006d3c:	0018      	movs	r0, r3
 8006d3e:	f7f9 fddb 	bl	80008f8 <__aeabi_i2f>
 8006d42:	1c03      	adds	r3, r0, #0
 8006d44:	4a07      	ldr	r2, [pc, #28]	; (8006d64 <Sdp800_ReadMeasurementResults+0x88>)
 8006d46:	1c11      	adds	r1, r2, #0
 8006d48:	1c18      	adds	r0, r3, #0
 8006d4a:	f7f9 fca9 	bl	80006a0 <__aeabi_fdiv>
 8006d4e:	1c03      	adds	r3, r0, #0
 8006d50:	1c1a      	adds	r2, r3, #0
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	601a      	str	r2, [r3, #0]
  }
  
  return error;
 8006d56:	230f      	movs	r3, #15
 8006d58:	18fb      	adds	r3, r7, r3
 8006d5a:	781b      	ldrb	r3, [r3, #0]
}
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	b005      	add	sp, #20
 8006d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d64:	43480000 	.word	0x43480000

08006d68 <Sdp800_SoftReset>:

//-----------------------------------------------------------------------------
Error Sdp800_SoftReset(void)
{
 8006d68:	b590      	push	{r4, r7, lr}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
  Error error;
  
  // write a start condition
  I2c_StartCondition();
 8006d6e:	f7fa ff99 	bl	8001ca4 <I2c_StartCondition>

  // write the upper 8 bits of reset
  error = I2c_WriteByte(0x00);
 8006d72:	1dfc      	adds	r4, r7, #7
 8006d74:	2000      	movs	r0, #0
 8006d76:	f7fa ffdd 	bl	8001d34 <I2c_WriteByte>
 8006d7a:	0003      	movs	r3, r0
 8006d7c:	7023      	strb	r3, [r4, #0]
  
  // write the lower 8 bits of reset
  if(ERROR_NONE == error) {
 8006d7e:	1dfb      	adds	r3, r7, #7
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d105      	bne.n	8006d92 <Sdp800_SoftReset+0x2a>
    error = I2c_WriteByte(0x06);
 8006d86:	1dfc      	adds	r4, r7, #7
 8006d88:	2006      	movs	r0, #6
 8006d8a:	f7fa ffd3 	bl	8001d34 <I2c_WriteByte>
 8006d8e:	0003      	movs	r3, r0
 8006d90:	7023      	strb	r3, [r4, #0]
  }
  
  I2c_StopCondition();
 8006d92:	f7fa ffab 	bl	8001cec <I2c_StopCondition>

  // wait 20 ms
  DelayMicroSeconds(20000); 
 8006d96:	4b05      	ldr	r3, [pc, #20]	; (8006dac <Sdp800_SoftReset+0x44>)
 8006d98:	0018      	movs	r0, r3
 8006d9a:	f000 fa77 	bl	800728c <DelayMicroSeconds>

  return error;
 8006d9e:	1dfb      	adds	r3, r7, #7
 8006da0:	781b      	ldrb	r3, [r3, #0]
}
 8006da2:	0018      	movs	r0, r3
 8006da4:	46bd      	mov	sp, r7
 8006da6:	b003      	add	sp, #12
 8006da8:	bd90      	pop	{r4, r7, pc}
 8006daa:	46c0      	nop			; (mov r8, r8)
 8006dac:	00004e20 	.word	0x00004e20

08006db0 <ReadMeasurementRawResults>:

//-----------------------------------------------------------------------------
static Error ReadMeasurementRawResults(int16_t*  diffPressureTicks,
                                       int16_t*  temperatureTicks,
                                       uint16_t* scaleFactor)
{
 8006db0:	b5b0      	push	{r4, r5, r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
  Error error;
  
  // write a start condition
  I2c_StartCondition();
 8006dbc:	f7fa ff72 	bl	8001ca4 <I2c_StartCondition>

  // write the sensor I2C address with the read flag
  error = I2c_WriteByte(_i2cAddress << 1 | 0x01);
 8006dc0:	4b1e      	ldr	r3, [pc, #120]	; (8006e3c <ReadMeasurementRawResults+0x8c>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	b25b      	sxtb	r3, r3
 8006dc8:	2201      	movs	r2, #1
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	b25b      	sxtb	r3, r3
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	2517      	movs	r5, #23
 8006dd2:	197c      	adds	r4, r7, r5
 8006dd4:	0018      	movs	r0, r3
 8006dd6:	f7fa ffad 	bl	8001d34 <I2c_WriteByte>
 8006dda:	0003      	movs	r3, r0
 8006ddc:	7023      	strb	r3, [r4, #0]
  
  // reas differnetial pressure ticks
  if(ERROR_NONE == error) {
 8006dde:	197b      	adds	r3, r7, r5
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d107      	bne.n	8006df6 <ReadMeasurementRawResults+0x46>
    error = ReadWordWithCrcCheck((uint16_t*)diffPressureTicks, true);
 8006de6:	197c      	adds	r4, r7, r5
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2101      	movs	r1, #1
 8006dec:	0018      	movs	r0, r3
 8006dee:	f000 f863 	bl	8006eb8 <ReadWordWithCrcCheck>
 8006df2:	0003      	movs	r3, r0
 8006df4:	7023      	strb	r3, [r4, #0]
  }
  
  // read temperature pressure ticks
  if(ERROR_NONE == error) {
 8006df6:	2217      	movs	r2, #23
 8006df8:	18bb      	adds	r3, r7, r2
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d107      	bne.n	8006e10 <ReadMeasurementRawResults+0x60>
    error = ReadWordWithCrcCheck((uint16_t*)temperatureTicks, true);
 8006e00:	18bc      	adds	r4, r7, r2
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2101      	movs	r1, #1
 8006e06:	0018      	movs	r0, r3
 8006e08:	f000 f856 	bl	8006eb8 <ReadWordWithCrcCheck>
 8006e0c:	0003      	movs	r3, r0
 8006e0e:	7023      	strb	r3, [r4, #0]
  }
  
  // read scale factor
  if(ERROR_NONE == error) {
 8006e10:	2217      	movs	r2, #23
 8006e12:	18bb      	adds	r3, r7, r2
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d107      	bne.n	8006e2a <ReadMeasurementRawResults+0x7a>
    error = ReadWordWithCrcCheck(scaleFactor, false);
 8006e1a:	18bc      	adds	r4, r7, r2
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2100      	movs	r1, #0
 8006e20:	0018      	movs	r0, r3
 8006e22:	f000 f849 	bl	8006eb8 <ReadWordWithCrcCheck>
 8006e26:	0003      	movs	r3, r0
 8006e28:	7023      	strb	r3, [r4, #0]
  }
  
  I2c_StopCondition();
 8006e2a:	f7fa ff5f 	bl	8001cec <I2c_StopCondition>
  
  return error;
 8006e2e:	2317      	movs	r3, #23
 8006e30:	18fb      	adds	r3, r7, r3
 8006e32:	781b      	ldrb	r3, [r3, #0]
}
 8006e34:	0018      	movs	r0, r3
 8006e36:	46bd      	mov	sp, r7
 8006e38:	b006      	add	sp, #24
 8006e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8006e3c:	200000a0 	.word	0x200000a0

08006e40 <ExecuteCommand>:

//-----------------------------------------------------------------------------
Error ExecuteCommand(Command cmd)
{
 8006e40:	b5b0      	push	{r4, r5, r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	0002      	movs	r2, r0
 8006e48:	1dbb      	adds	r3, r7, #6
 8006e4a:	801a      	strh	r2, [r3, #0]
  Error error;
  
  // write a start condition
  I2c_StartCondition();
 8006e4c:	f7fa ff2a 	bl	8001ca4 <I2c_StartCondition>

  // write the sensor I2C address with the write flag
  error = I2c_WriteByte(_i2cAddress << 1 | 0x00);
 8006e50:	4b18      	ldr	r3, [pc, #96]	; (8006eb4 <ExecuteCommand+0x74>)
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	18db      	adds	r3, r3, r3
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	250f      	movs	r5, #15
 8006e5a:	197c      	adds	r4, r7, r5
 8006e5c:	0018      	movs	r0, r3
 8006e5e:	f7fa ff69 	bl	8001d34 <I2c_WriteByte>
 8006e62:	0003      	movs	r3, r0
 8006e64:	7023      	strb	r3, [r4, #0]

  // write the upper 8 bits of the command
  if(ERROR_NONE == error) {
 8006e66:	002a      	movs	r2, r5
 8006e68:	18bb      	adds	r3, r7, r2
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10a      	bne.n	8006e86 <ExecuteCommand+0x46>
    error = I2c_WriteByte(cmd >> 8);
 8006e70:	1dbb      	adds	r3, r7, #6
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	0a1b      	lsrs	r3, r3, #8
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	18bc      	adds	r4, r7, r2
 8006e7c:	0018      	movs	r0, r3
 8006e7e:	f7fa ff59 	bl	8001d34 <I2c_WriteByte>
 8006e82:	0003      	movs	r3, r0
 8006e84:	7023      	strb	r3, [r4, #0]
  }
  
  // write the lower 8 bits of the command to the sensor
  if(ERROR_NONE == error) {
 8006e86:	220f      	movs	r2, #15
 8006e88:	18bb      	adds	r3, r7, r2
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d108      	bne.n	8006ea2 <ExecuteCommand+0x62>
    error = I2c_WriteByte(cmd & 0xFF);
 8006e90:	1dbb      	adds	r3, r7, #6
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	18bc      	adds	r4, r7, r2
 8006e98:	0018      	movs	r0, r3
 8006e9a:	f7fa ff4b 	bl	8001d34 <I2c_WriteByte>
 8006e9e:	0003      	movs	r3, r0
 8006ea0:	7023      	strb	r3, [r4, #0]
  }
  
  I2c_StopCondition();
 8006ea2:	f7fa ff23 	bl	8001cec <I2c_StopCondition>

  return error;
 8006ea6:	230f      	movs	r3, #15
 8006ea8:	18fb      	adds	r3, r7, r3
 8006eaa:	781b      	ldrb	r3, [r3, #0]
}
 8006eac:	0018      	movs	r0, r3
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	b004      	add	sp, #16
 8006eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8006eb4:	200000a0 	.word	0x200000a0

08006eb8 <ReadWordWithCrcCheck>:

//-----------------------------------------------------------------------------
static Error ReadWordWithCrcCheck(uint16_t *value, bool ack)
{
 8006eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	000a      	movs	r2, r1
 8006ec2:	1cfb      	adds	r3, r7, #3
 8006ec4:	701a      	strb	r2, [r3, #0]
  Error error;
  uint8_t bytes[2];
  uint8_t checksum;
 
  // read two data bytes and one checksum byte
  bytes[0] = I2c_ReadByte(ACK);
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	f7fa ff96 	bl	8001df8 <I2c_ReadByte>
 8006ecc:	0003      	movs	r3, r0
 8006ece:	001a      	movs	r2, r3
 8006ed0:	250c      	movs	r5, #12
 8006ed2:	197b      	adds	r3, r7, r5
 8006ed4:	701a      	strb	r2, [r3, #0]
  bytes[1] = I2c_ReadByte(ACK);
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	f7fa ff8e 	bl	8001df8 <I2c_ReadByte>
 8006edc:	0003      	movs	r3, r0
 8006ede:	001a      	movs	r2, r3
 8006ee0:	197b      	adds	r3, r7, r5
 8006ee2:	705a      	strb	r2, [r3, #1]
  checksum = I2c_ReadByte(ack ? ACK : NACK);
 8006ee4:	1cfb      	adds	r3, r7, #3
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	4053      	eors	r3, r2
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	260f      	movs	r6, #15
 8006ef0:	19bc      	adds	r4, r7, r6
 8006ef2:	0018      	movs	r0, r3
 8006ef4:	f7fa ff80 	bl	8001df8 <I2c_ReadByte>
 8006ef8:	0003      	movs	r3, r0
 8006efa:	7023      	strb	r3, [r4, #0]
  
  // verify checksum
  error = CheckCrc(bytes, 2, checksum);
 8006efc:	230e      	movs	r3, #14
 8006efe:	18fc      	adds	r4, r7, r3
 8006f00:	19bb      	adds	r3, r7, r6
 8006f02:	781a      	ldrb	r2, [r3, #0]
 8006f04:	197b      	adds	r3, r7, r5
 8006f06:	2102      	movs	r1, #2
 8006f08:	0018      	movs	r0, r3
 8006f0a:	f000 f815 	bl	8006f38 <CheckCrc>
 8006f0e:	0003      	movs	r3, r0
 8006f10:	7023      	strb	r3, [r4, #0]
  
  // combine the two bytes to a 16-bit value
  *value = (bytes[0] << 8) | bytes[1];
 8006f12:	197b      	adds	r3, r7, r5
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	021b      	lsls	r3, r3, #8
 8006f18:	b21a      	sxth	r2, r3
 8006f1a:	197b      	adds	r3, r7, r5
 8006f1c:	785b      	ldrb	r3, [r3, #1]
 8006f1e:	b21b      	sxth	r3, r3
 8006f20:	4313      	orrs	r3, r2
 8006f22:	b21b      	sxth	r3, r3
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	801a      	strh	r2, [r3, #0]
  
  return error;
 8006f2a:	230e      	movs	r3, #14
 8006f2c:	18fb      	adds	r3, r7, r3
 8006f2e:	781b      	ldrb	r3, [r3, #0]
}
 8006f30:	0018      	movs	r0, r3
 8006f32:	46bd      	mov	sp, r7
 8006f34:	b005      	add	sp, #20
 8006f36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f38 <CheckCrc>:

//-----------------------------------------------------------------------------
static Error CheckCrc(const uint8_t data[], uint8_t size, uint8_t checksum)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	0008      	movs	r0, r1
 8006f42:	0011      	movs	r1, r2
 8006f44:	1cfb      	adds	r3, r7, #3
 8006f46:	1c02      	adds	r2, r0, #0
 8006f48:	701a      	strb	r2, [r3, #0]
 8006f4a:	1cbb      	adds	r3, r7, #2
 8006f4c:	1c0a      	adds	r2, r1, #0
 8006f4e:	701a      	strb	r2, [r3, #0]
  uint8_t crc = 0xFF;
 8006f50:	2317      	movs	r3, #23
 8006f52:	18fb      	adds	r3, r7, r3
 8006f54:	22ff      	movs	r2, #255	; 0xff
 8006f56:	701a      	strb	r2, [r3, #0]
  
  // calculates 8-Bit checksum with given polynomial 0x31 (x^8 + x^5 + x^4 + 1)
  for(int i = 0; i < size; i++) {
 8006f58:	2300      	movs	r3, #0
 8006f5a:	613b      	str	r3, [r7, #16]
 8006f5c:	e032      	b.n	8006fc4 <CheckCrc+0x8c>
    crc ^= (data[i]);
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	18d3      	adds	r3, r2, r3
 8006f64:	7819      	ldrb	r1, [r3, #0]
 8006f66:	2217      	movs	r2, #23
 8006f68:	18bb      	adds	r3, r7, r2
 8006f6a:	18ba      	adds	r2, r7, r2
 8006f6c:	7812      	ldrb	r2, [r2, #0]
 8006f6e:	404a      	eors	r2, r1
 8006f70:	701a      	strb	r2, [r3, #0]
    for(uint8_t bit = 8; bit > 0; --bit) {
 8006f72:	230f      	movs	r3, #15
 8006f74:	18fb      	adds	r3, r7, r3
 8006f76:	2208      	movs	r2, #8
 8006f78:	701a      	strb	r2, [r3, #0]
 8006f7a:	e01b      	b.n	8006fb4 <CheckCrc+0x7c>
      if(crc & 0x80) crc = (crc << 1) ^ 0x31;
 8006f7c:	2117      	movs	r1, #23
 8006f7e:	187b      	adds	r3, r7, r1
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	b25b      	sxtb	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	da09      	bge.n	8006f9c <CheckCrc+0x64>
 8006f88:	187b      	adds	r3, r7, r1
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	b25b      	sxtb	r3, r3
 8006f90:	2231      	movs	r2, #49	; 0x31
 8006f92:	4053      	eors	r3, r2
 8006f94:	b25a      	sxtb	r2, r3
 8006f96:	187b      	adds	r3, r7, r1
 8006f98:	701a      	strb	r2, [r3, #0]
 8006f9a:	e005      	b.n	8006fa8 <CheckCrc+0x70>
      else           crc = (crc << 1);
 8006f9c:	2317      	movs	r3, #23
 8006f9e:	18fa      	adds	r2, r7, r3
 8006fa0:	18fb      	adds	r3, r7, r3
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	18db      	adds	r3, r3, r3
 8006fa6:	7013      	strb	r3, [r2, #0]
    for(uint8_t bit = 8; bit > 0; --bit) {
 8006fa8:	220f      	movs	r2, #15
 8006faa:	18bb      	adds	r3, r7, r2
 8006fac:	18ba      	adds	r2, r7, r2
 8006fae:	7812      	ldrb	r2, [r2, #0]
 8006fb0:	3a01      	subs	r2, #1
 8006fb2:	701a      	strb	r2, [r3, #0]
 8006fb4:	230f      	movs	r3, #15
 8006fb6:	18fb      	adds	r3, r7, r3
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1de      	bne.n	8006f7c <CheckCrc+0x44>
  for(int i = 0; i < size; i++) {
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	613b      	str	r3, [r7, #16]
 8006fc4:	1cfb      	adds	r3, r7, #3
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	dbc7      	blt.n	8006f5e <CheckCrc+0x26>
    }
  }
  
  // verify checksum
  return (crc == checksum) ? ERROR_NONE : ERROR_CHECKSUM;
 8006fce:	2317      	movs	r3, #23
 8006fd0:	18fa      	adds	r2, r7, r3
 8006fd2:	1cbb      	adds	r3, r7, #2
 8006fd4:	7812      	ldrb	r2, [r2, #0]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d101      	bne.n	8006fe0 <CheckCrc+0xa8>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	e000      	b.n	8006fe2 <CheckCrc+0xaa>
 8006fe0:	2302      	movs	r3, #2
}
 8006fe2:	0018      	movs	r0, r3
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	b006      	add	sp, #24
 8006fe8:	bd80      	pop	{r7, pc}
	...

08006fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ff0:	4b07      	ldr	r3, [pc, #28]	; (8007010 <HAL_MspInit+0x24>)
 8006ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ff4:	4b06      	ldr	r3, [pc, #24]	; (8007010 <HAL_MspInit+0x24>)
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ffc:	4b04      	ldr	r3, [pc, #16]	; (8007010 <HAL_MspInit+0x24>)
 8006ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007000:	4b03      	ldr	r3, [pc, #12]	; (8007010 <HAL_MspInit+0x24>)
 8007002:	2180      	movs	r1, #128	; 0x80
 8007004:	0549      	lsls	r1, r1, #21
 8007006:	430a      	orrs	r2, r1
 8007008:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800700a:	46c0      	nop			; (mov r8, r8)
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	40021000 	.word	0x40021000

08007014 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007014:	b590      	push	{r4, r7, lr}
 8007016:	b089      	sub	sp, #36	; 0x24
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800701c:	240c      	movs	r4, #12
 800701e:	193b      	adds	r3, r7, r4
 8007020:	0018      	movs	r0, r3
 8007022:	2314      	movs	r3, #20
 8007024:	001a      	movs	r2, r3
 8007026:	2100      	movs	r1, #0
 8007028:	f005 fc19 	bl	800c85e <memset>
  if(hadc->Instance==ADC1)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a14      	ldr	r2, [pc, #80]	; (8007084 <HAL_ADC_MspInit+0x70>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d122      	bne.n	800707c <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007036:	4b14      	ldr	r3, [pc, #80]	; (8007088 <HAL_ADC_MspInit+0x74>)
 8007038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800703a:	4b13      	ldr	r3, [pc, #76]	; (8007088 <HAL_ADC_MspInit+0x74>)
 800703c:	2180      	movs	r1, #128	; 0x80
 800703e:	0089      	lsls	r1, r1, #2
 8007040:	430a      	orrs	r2, r1
 8007042:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007044:	4b10      	ldr	r3, [pc, #64]	; (8007088 <HAL_ADC_MspInit+0x74>)
 8007046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007048:	4b0f      	ldr	r3, [pc, #60]	; (8007088 <HAL_ADC_MspInit+0x74>)
 800704a:	2101      	movs	r1, #1
 800704c:	430a      	orrs	r2, r1
 800704e:	62da      	str	r2, [r3, #44]	; 0x2c
 8007050:	4b0d      	ldr	r3, [pc, #52]	; (8007088 <HAL_ADC_MspInit+0x74>)
 8007052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007054:	2201      	movs	r2, #1
 8007056:	4013      	ands	r3, r2
 8007058:	60bb      	str	r3, [r7, #8]
 800705a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800705c:	193b      	adds	r3, r7, r4
 800705e:	2201      	movs	r2, #1
 8007060:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007062:	193b      	adds	r3, r7, r4
 8007064:	2203      	movs	r2, #3
 8007066:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007068:	193b      	adds	r3, r7, r4
 800706a:	2200      	movs	r2, #0
 800706c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800706e:	193a      	adds	r2, r7, r4
 8007070:	23a0      	movs	r3, #160	; 0xa0
 8007072:	05db      	lsls	r3, r3, #23
 8007074:	0011      	movs	r1, r2
 8007076:	0018      	movs	r0, r3
 8007078:	f000 ffe2 	bl	8008040 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800707c:	46c0      	nop			; (mov r8, r8)
 800707e:	46bd      	mov	sp, r7
 8007080:	b009      	add	sp, #36	; 0x24
 8007082:	bd90      	pop	{r4, r7, pc}
 8007084:	40012400 	.word	0x40012400
 8007088:	40021000 	.word	0x40021000

0800708c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800708c:	b590      	push	{r4, r7, lr}
 800708e:	b08b      	sub	sp, #44	; 0x2c
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007094:	2414      	movs	r4, #20
 8007096:	193b      	adds	r3, r7, r4
 8007098:	0018      	movs	r0, r3
 800709a:	2314      	movs	r3, #20
 800709c:	001a      	movs	r2, r3
 800709e:	2100      	movs	r1, #0
 80070a0:	f005 fbdd 	bl	800c85e <memset>
  if(hspi->Instance==SPI1)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a28      	ldr	r2, [pc, #160]	; (800714c <HAL_SPI_MspInit+0xc0>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d14a      	bne.n	8007144 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80070ae:	4b28      	ldr	r3, [pc, #160]	; (8007150 <HAL_SPI_MspInit+0xc4>)
 80070b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070b2:	4b27      	ldr	r3, [pc, #156]	; (8007150 <HAL_SPI_MspInit+0xc4>)
 80070b4:	2180      	movs	r1, #128	; 0x80
 80070b6:	0149      	lsls	r1, r1, #5
 80070b8:	430a      	orrs	r2, r1
 80070ba:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070bc:	4b24      	ldr	r3, [pc, #144]	; (8007150 <HAL_SPI_MspInit+0xc4>)
 80070be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c0:	4b23      	ldr	r3, [pc, #140]	; (8007150 <HAL_SPI_MspInit+0xc4>)
 80070c2:	2101      	movs	r1, #1
 80070c4:	430a      	orrs	r2, r1
 80070c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80070c8:	4b21      	ldr	r3, [pc, #132]	; (8007150 <HAL_SPI_MspInit+0xc4>)
 80070ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070cc:	2201      	movs	r2, #1
 80070ce:	4013      	ands	r3, r2
 80070d0:	613b      	str	r3, [r7, #16]
 80070d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070d4:	4b1e      	ldr	r3, [pc, #120]	; (8007150 <HAL_SPI_MspInit+0xc4>)
 80070d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d8:	4b1d      	ldr	r3, [pc, #116]	; (8007150 <HAL_SPI_MspInit+0xc4>)
 80070da:	2102      	movs	r1, #2
 80070dc:	430a      	orrs	r2, r1
 80070de:	62da      	str	r2, [r3, #44]	; 0x2c
 80070e0:	4b1b      	ldr	r3, [pc, #108]	; (8007150 <HAL_SPI_MspInit+0xc4>)
 80070e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e4:	2202      	movs	r2, #2
 80070e6:	4013      	ands	r3, r2
 80070e8:	60fb      	str	r3, [r7, #12]
 80070ea:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80070ec:	193b      	adds	r3, r7, r4
 80070ee:	22c0      	movs	r2, #192	; 0xc0
 80070f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070f2:	193b      	adds	r3, r7, r4
 80070f4:	2202      	movs	r2, #2
 80070f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070f8:	193b      	adds	r3, r7, r4
 80070fa:	2200      	movs	r2, #0
 80070fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070fe:	193b      	adds	r3, r7, r4
 8007100:	2203      	movs	r2, #3
 8007102:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8007104:	193b      	adds	r3, r7, r4
 8007106:	2200      	movs	r2, #0
 8007108:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800710a:	193a      	adds	r2, r7, r4
 800710c:	23a0      	movs	r3, #160	; 0xa0
 800710e:	05db      	lsls	r3, r3, #23
 8007110:	0011      	movs	r1, r2
 8007112:	0018      	movs	r0, r3
 8007114:	f000 ff94 	bl	8008040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007118:	0021      	movs	r1, r4
 800711a:	187b      	adds	r3, r7, r1
 800711c:	2208      	movs	r2, #8
 800711e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007120:	187b      	adds	r3, r7, r1
 8007122:	2202      	movs	r2, #2
 8007124:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007126:	187b      	adds	r3, r7, r1
 8007128:	2200      	movs	r2, #0
 800712a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800712c:	187b      	adds	r3, r7, r1
 800712e:	2203      	movs	r2, #3
 8007130:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8007132:	187b      	adds	r3, r7, r1
 8007134:	2200      	movs	r2, #0
 8007136:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007138:	187b      	adds	r3, r7, r1
 800713a:	4a06      	ldr	r2, [pc, #24]	; (8007154 <HAL_SPI_MspInit+0xc8>)
 800713c:	0019      	movs	r1, r3
 800713e:	0010      	movs	r0, r2
 8007140:	f000 ff7e 	bl	8008040 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007144:	46c0      	nop			; (mov r8, r8)
 8007146:	46bd      	mov	sp, r7
 8007148:	b00b      	add	sp, #44	; 0x2c
 800714a:	bd90      	pop	{r4, r7, pc}
 800714c:	40013000 	.word	0x40013000
 8007150:	40021000 	.word	0x40021000
 8007154:	50000400 	.word	0x50000400

08007158 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM21)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a0a      	ldr	r2, [pc, #40]	; (8007190 <HAL_TIM_Base_MspInit+0x38>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d10d      	bne.n	8007186 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 800716a:	4b0a      	ldr	r3, [pc, #40]	; (8007194 <HAL_TIM_Base_MspInit+0x3c>)
 800716c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800716e:	4b09      	ldr	r3, [pc, #36]	; (8007194 <HAL_TIM_Base_MspInit+0x3c>)
 8007170:	2104      	movs	r1, #4
 8007172:	430a      	orrs	r2, r1
 8007174:	635a      	str	r2, [r3, #52]	; 0x34
    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8007176:	2200      	movs	r2, #0
 8007178:	2100      	movs	r1, #0
 800717a:	2014      	movs	r0, #20
 800717c:	f000 ff16 	bl	8007fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8007180:	2014      	movs	r0, #20
 8007182:	f000 ff33 	bl	8007fec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8007186:	46c0      	nop			; (mov r8, r8)
 8007188:	46bd      	mov	sp, r7
 800718a:	b002      	add	sp, #8
 800718c:	bd80      	pop	{r7, pc}
 800718e:	46c0      	nop			; (mov r8, r8)
 8007190:	40010800 	.word	0x40010800
 8007194:	40021000 	.word	0x40021000

08007198 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007198:	b590      	push	{r4, r7, lr}
 800719a:	b089      	sub	sp, #36	; 0x24
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071a0:	240c      	movs	r4, #12
 80071a2:	193b      	adds	r3, r7, r4
 80071a4:	0018      	movs	r0, r3
 80071a6:	2314      	movs	r3, #20
 80071a8:	001a      	movs	r2, r3
 80071aa:	2100      	movs	r1, #0
 80071ac:	f005 fb57 	bl	800c85e <memset>
  if(huart->Instance==USART2)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a18      	ldr	r2, [pc, #96]	; (8007218 <HAL_UART_MspInit+0x80>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d129      	bne.n	800720e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80071ba:	4b18      	ldr	r3, [pc, #96]	; (800721c <HAL_UART_MspInit+0x84>)
 80071bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071be:	4b17      	ldr	r3, [pc, #92]	; (800721c <HAL_UART_MspInit+0x84>)
 80071c0:	2180      	movs	r1, #128	; 0x80
 80071c2:	0289      	lsls	r1, r1, #10
 80071c4:	430a      	orrs	r2, r1
 80071c6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071c8:	4b14      	ldr	r3, [pc, #80]	; (800721c <HAL_UART_MspInit+0x84>)
 80071ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071cc:	4b13      	ldr	r3, [pc, #76]	; (800721c <HAL_UART_MspInit+0x84>)
 80071ce:	2101      	movs	r1, #1
 80071d0:	430a      	orrs	r2, r1
 80071d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80071d4:	4b11      	ldr	r3, [pc, #68]	; (800721c <HAL_UART_MspInit+0x84>)
 80071d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d8:	2201      	movs	r2, #1
 80071da:	4013      	ands	r3, r2
 80071dc:	60bb      	str	r3, [r7, #8]
 80071de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80071e0:	0021      	movs	r1, r4
 80071e2:	187b      	adds	r3, r7, r1
 80071e4:	220c      	movs	r2, #12
 80071e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071e8:	187b      	adds	r3, r7, r1
 80071ea:	2202      	movs	r2, #2
 80071ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ee:	187b      	adds	r3, r7, r1
 80071f0:	2200      	movs	r2, #0
 80071f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071f4:	187b      	adds	r3, r7, r1
 80071f6:	2203      	movs	r2, #3
 80071f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80071fa:	187b      	adds	r3, r7, r1
 80071fc:	2204      	movs	r2, #4
 80071fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007200:	187a      	adds	r2, r7, r1
 8007202:	23a0      	movs	r3, #160	; 0xa0
 8007204:	05db      	lsls	r3, r3, #23
 8007206:	0011      	movs	r1, r2
 8007208:	0018      	movs	r0, r3
 800720a:	f000 ff19 	bl	8008040 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800720e:	46c0      	nop			; (mov r8, r8)
 8007210:	46bd      	mov	sp, r7
 8007212:	b009      	add	sp, #36	; 0x24
 8007214:	bd90      	pop	{r4, r7, pc}
 8007216:	46c0      	nop			; (mov r8, r8)
 8007218:	40004400 	.word	0x40004400
 800721c:	40021000 	.word	0x40021000

08007220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007224:	e7fe      	b.n	8007224 <NMI_Handler+0x4>

08007226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800722a:	e7fe      	b.n	800722a <HardFault_Handler+0x4>

0800722c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8007230:	46c0      	nop			; (mov r8, r8)
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800723a:	46c0      	nop			; (mov r8, r8)
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007244:	f000 f8b8 	bl	80073b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007248:	46c0      	nop			; (mov r8, r8)
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8007252:	2001      	movs	r0, #1
 8007254:	f001 f9fc 	bl	8008650 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8007258:	2002      	movs	r0, #2
 800725a:	f001 f9f9 	bl	8008650 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800725e:	46c0      	nop			; (mov r8, r8)
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8007268:	2010      	movs	r0, #16
 800726a:	f001 f9f1 	bl	8008650 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800726e:	46c0      	nop			; (mov r8, r8)
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8007278:	4b03      	ldr	r3, [pc, #12]	; (8007288 <TIM21_IRQHandler+0x14>)
 800727a:	0018      	movs	r0, r3
 800727c:	f003 fb98 	bl	800a9b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8007280:	46c0      	nop			; (mov r8, r8)
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	46c0      	nop			; (mov r8, r8)
 8007288:	20000240 	.word	0x20000240

0800728c <DelayMicroSeconds>:
#include "stdint.h"

//-----------------------------------------------------------------------------
/* -- adapt this delay for your uC -- */
void DelayMicroSeconds(uint32_t nbrOfUs)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
	HAL_Delay(nbrOfUs / 1000);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	22fa      	movs	r2, #250	; 0xfa
 8007298:	0091      	lsls	r1, r2, #2
 800729a:	0018      	movs	r0, r3
 800729c:	f7f8 ff34 	bl	8000108 <__udivsi3>
 80072a0:	0003      	movs	r3, r0
 80072a2:	0018      	movs	r0, r3
 80072a4:	f000 f8a4 	bl	80073f0 <HAL_Delay>
}
 80072a8:	46c0      	nop			; (mov r8, r8)
 80072aa:	46bd      	mov	sp, r7
 80072ac:	b002      	add	sp, #8
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80072b4:	46c0      	nop			; (mov r8, r8)
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
	...

080072bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80072bc:	480d      	ldr	r0, [pc, #52]	; (80072f4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80072be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80072c0:	480d      	ldr	r0, [pc, #52]	; (80072f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80072c2:	490e      	ldr	r1, [pc, #56]	; (80072fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80072c4:	4a0e      	ldr	r2, [pc, #56]	; (8007300 <LoopForever+0xe>)
  movs r3, #0
 80072c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80072c8:	e002      	b.n	80072d0 <LoopCopyDataInit>

080072ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80072ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80072cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80072ce:	3304      	adds	r3, #4

080072d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80072d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80072d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80072d4:	d3f9      	bcc.n	80072ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80072d6:	4a0b      	ldr	r2, [pc, #44]	; (8007304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80072d8:	4c0b      	ldr	r4, [pc, #44]	; (8007308 <LoopForever+0x16>)
  movs r3, #0
 80072da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80072dc:	e001      	b.n	80072e2 <LoopFillZerobss>

080072de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80072de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80072e0:	3204      	adds	r2, #4

080072e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80072e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80072e4:	d3fb      	bcc.n	80072de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80072e6:	f7ff ffe3 	bl	80072b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80072ea:	f005 fa8b 	bl	800c804 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80072ee:	f7fe fad5 	bl	800589c <main>

080072f2 <LoopForever>:

LoopForever:
    b LoopForever
 80072f2:	e7fe      	b.n	80072f2 <LoopForever>
   ldr   r0, =_estack
 80072f4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80072f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80072fc:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8007300:	0800e0e8 	.word	0x0800e0e8
  ldr r2, =_sbss
 8007304:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8007308:	20000498 	.word	0x20000498

0800730c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800730c:	e7fe      	b.n	800730c <ADC1_COMP_IRQHandler>
	...

08007310 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007316:	1dfb      	adds	r3, r7, #7
 8007318:	2200      	movs	r2, #0
 800731a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800731c:	4b0b      	ldr	r3, [pc, #44]	; (800734c <HAL_Init+0x3c>)
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	4b0a      	ldr	r3, [pc, #40]	; (800734c <HAL_Init+0x3c>)
 8007322:	2140      	movs	r1, #64	; 0x40
 8007324:	430a      	orrs	r2, r1
 8007326:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007328:	2000      	movs	r0, #0
 800732a:	f000 f811 	bl	8007350 <HAL_InitTick>
 800732e:	1e03      	subs	r3, r0, #0
 8007330:	d003      	beq.n	800733a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8007332:	1dfb      	adds	r3, r7, #7
 8007334:	2201      	movs	r2, #1
 8007336:	701a      	strb	r2, [r3, #0]
 8007338:	e001      	b.n	800733e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800733a:	f7ff fe57 	bl	8006fec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800733e:	1dfb      	adds	r3, r7, #7
 8007340:	781b      	ldrb	r3, [r3, #0]
}
 8007342:	0018      	movs	r0, r3
 8007344:	46bd      	mov	sp, r7
 8007346:	b002      	add	sp, #8
 8007348:	bd80      	pop	{r7, pc}
 800734a:	46c0      	nop			; (mov r8, r8)
 800734c:	40022000 	.word	0x40022000

08007350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007350:	b590      	push	{r4, r7, lr}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007358:	4b14      	ldr	r3, [pc, #80]	; (80073ac <HAL_InitTick+0x5c>)
 800735a:	681c      	ldr	r4, [r3, #0]
 800735c:	4b14      	ldr	r3, [pc, #80]	; (80073b0 <HAL_InitTick+0x60>)
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	0019      	movs	r1, r3
 8007362:	23fa      	movs	r3, #250	; 0xfa
 8007364:	0098      	lsls	r0, r3, #2
 8007366:	f7f8 fecf 	bl	8000108 <__udivsi3>
 800736a:	0003      	movs	r3, r0
 800736c:	0019      	movs	r1, r3
 800736e:	0020      	movs	r0, r4
 8007370:	f7f8 feca 	bl	8000108 <__udivsi3>
 8007374:	0003      	movs	r3, r0
 8007376:	0018      	movs	r0, r3
 8007378:	f000 fe54 	bl	8008024 <HAL_SYSTICK_Config>
 800737c:	1e03      	subs	r3, r0, #0
 800737e:	d001      	beq.n	8007384 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e00f      	b.n	80073a4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b03      	cmp	r3, #3
 8007388:	d80b      	bhi.n	80073a2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800738a:	6879      	ldr	r1, [r7, #4]
 800738c:	2301      	movs	r3, #1
 800738e:	425b      	negs	r3, r3
 8007390:	2200      	movs	r2, #0
 8007392:	0018      	movs	r0, r3
 8007394:	f000 fe0a 	bl	8007fac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007398:	4b06      	ldr	r3, [pc, #24]	; (80073b4 <HAL_InitTick+0x64>)
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800739e:	2300      	movs	r3, #0
 80073a0:	e000      	b.n	80073a4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
}
 80073a4:	0018      	movs	r0, r3
 80073a6:	46bd      	mov	sp, r7
 80073a8:	b003      	add	sp, #12
 80073aa:	bd90      	pop	{r4, r7, pc}
 80073ac:	2000004c 	.word	0x2000004c
 80073b0:	20000054 	.word	0x20000054
 80073b4:	20000050 	.word	0x20000050

080073b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80073bc:	4b05      	ldr	r3, [pc, #20]	; (80073d4 <HAL_IncTick+0x1c>)
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	001a      	movs	r2, r3
 80073c2:	4b05      	ldr	r3, [pc, #20]	; (80073d8 <HAL_IncTick+0x20>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	18d2      	adds	r2, r2, r3
 80073c8:	4b03      	ldr	r3, [pc, #12]	; (80073d8 <HAL_IncTick+0x20>)
 80073ca:	601a      	str	r2, [r3, #0]
}
 80073cc:	46c0      	nop			; (mov r8, r8)
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	46c0      	nop			; (mov r8, r8)
 80073d4:	20000054 	.word	0x20000054
 80073d8:	20000494 	.word	0x20000494

080073dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	af00      	add	r7, sp, #0
  return uwTick;
 80073e0:	4b02      	ldr	r3, [pc, #8]	; (80073ec <HAL_GetTick+0x10>)
 80073e2:	681b      	ldr	r3, [r3, #0]
}
 80073e4:	0018      	movs	r0, r3
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	46c0      	nop			; (mov r8, r8)
 80073ec:	20000494 	.word	0x20000494

080073f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80073f8:	f7ff fff0 	bl	80073dc <HAL_GetTick>
 80073fc:	0003      	movs	r3, r0
 80073fe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	3301      	adds	r3, #1
 8007408:	d005      	beq.n	8007416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800740a:	4b0a      	ldr	r3, [pc, #40]	; (8007434 <HAL_Delay+0x44>)
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	001a      	movs	r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	189b      	adds	r3, r3, r2
 8007414:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007416:	46c0      	nop			; (mov r8, r8)
 8007418:	f7ff ffe0 	bl	80073dc <HAL_GetTick>
 800741c:	0002      	movs	r2, r0
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	429a      	cmp	r2, r3
 8007426:	d8f7      	bhi.n	8007418 <HAL_Delay+0x28>
  {
  }
}
 8007428:	46c0      	nop			; (mov r8, r8)
 800742a:	46c0      	nop			; (mov r8, r8)
 800742c:	46bd      	mov	sp, r7
 800742e:	b004      	add	sp, #16
 8007430:	bd80      	pop	{r7, pc}
 8007432:	46c0      	nop			; (mov r8, r8)
 8007434:	20000054 	.word	0x20000054

08007438 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d102      	bne.n	800744c <HAL_ADC_Init+0x14>
  {
    return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	f000 fb90 	bl	8007b6c <HAL_ADC_Init+0x734>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4ac0      	ldr	r2, [pc, #768]	; (8007754 <HAL_ADC_Init+0x31c>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d006      	beq.n	8007464 <HAL_ADC_Init+0x2c>
 8007456:	23ce      	movs	r3, #206	; 0xce
 8007458:	005a      	lsls	r2, r3, #1
 800745a:	4bbf      	ldr	r3, [pc, #764]	; (8007758 <HAL_ADC_Init+0x320>)
 800745c:	0011      	movs	r1, r2
 800745e:	0018      	movs	r0, r3
 8007460:	f7fe fccd 	bl	8005dfe <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d05f      	beq.n	800752c <HAL_ADC_Init+0xf4>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	23c0      	movs	r3, #192	; 0xc0
 8007472:	061b      	lsls	r3, r3, #24
 8007474:	429a      	cmp	r2, r3
 8007476:	d059      	beq.n	800752c <HAL_ADC_Init+0xf4>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	2380      	movs	r3, #128	; 0x80
 800747e:	05db      	lsls	r3, r3, #23
 8007480:	429a      	cmp	r2, r3
 8007482:	d053      	beq.n	800752c <HAL_ADC_Init+0xf4>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	2380      	movs	r3, #128	; 0x80
 800748a:	061b      	lsls	r3, r3, #24
 800748c:	429a      	cmp	r2, r3
 800748e:	d04d      	beq.n	800752c <HAL_ADC_Init+0xf4>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d049      	beq.n	800752c <HAL_ADC_Init+0xf4>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	2380      	movs	r3, #128	; 0x80
 800749e:	02db      	lsls	r3, r3, #11
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d043      	beq.n	800752c <HAL_ADC_Init+0xf4>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685a      	ldr	r2, [r3, #4]
 80074a8:	2380      	movs	r3, #128	; 0x80
 80074aa:	031b      	lsls	r3, r3, #12
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d03d      	beq.n	800752c <HAL_ADC_Init+0xf4>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	23c0      	movs	r3, #192	; 0xc0
 80074b6:	031b      	lsls	r3, r3, #12
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d037      	beq.n	800752c <HAL_ADC_Init+0xf4>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	2380      	movs	r3, #128	; 0x80
 80074c2:	035b      	lsls	r3, r3, #13
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d031      	beq.n	800752c <HAL_ADC_Init+0xf4>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	23a0      	movs	r3, #160	; 0xa0
 80074ce:	035b      	lsls	r3, r3, #13
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d02b      	beq.n	800752c <HAL_ADC_Init+0xf4>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685a      	ldr	r2, [r3, #4]
 80074d8:	23c0      	movs	r3, #192	; 0xc0
 80074da:	035b      	lsls	r3, r3, #13
 80074dc:	429a      	cmp	r2, r3
 80074de:	d025      	beq.n	800752c <HAL_ADC_Init+0xf4>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	23e0      	movs	r3, #224	; 0xe0
 80074e6:	035b      	lsls	r3, r3, #13
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d01f      	beq.n	800752c <HAL_ADC_Init+0xf4>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	2380      	movs	r3, #128	; 0x80
 80074f2:	039b      	lsls	r3, r3, #14
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d019      	beq.n	800752c <HAL_ADC_Init+0xf4>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	2390      	movs	r3, #144	; 0x90
 80074fe:	039b      	lsls	r3, r3, #14
 8007500:	429a      	cmp	r2, r3
 8007502:	d013      	beq.n	800752c <HAL_ADC_Init+0xf4>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	23a0      	movs	r3, #160	; 0xa0
 800750a:	039b      	lsls	r3, r3, #14
 800750c:	429a      	cmp	r2, r3
 800750e:	d00d      	beq.n	800752c <HAL_ADC_Init+0xf4>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	23b0      	movs	r3, #176	; 0xb0
 8007516:	039b      	lsls	r3, r3, #14
 8007518:	429a      	cmp	r2, r3
 800751a:	d007      	beq.n	800752c <HAL_ADC_Init+0xf4>
 800751c:	239e      	movs	r3, #158	; 0x9e
 800751e:	33ff      	adds	r3, #255	; 0xff
 8007520:	001a      	movs	r2, r3
 8007522:	4b8d      	ldr	r3, [pc, #564]	; (8007758 <HAL_ADC_Init+0x320>)
 8007524:	0011      	movs	r1, r2
 8007526:	0018      	movs	r0, r3
 8007528:	f7fe fc69 	bl	8005dfe <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d012      	beq.n	800755a <HAL_ADC_Init+0x122>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	2b08      	cmp	r3, #8
 800753a:	d00e      	beq.n	800755a <HAL_ADC_Init+0x122>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	2b10      	cmp	r3, #16
 8007542:	d00a      	beq.n	800755a <HAL_ADC_Init+0x122>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	2b18      	cmp	r3, #24
 800754a:	d006      	beq.n	800755a <HAL_ADC_Init+0x122>
 800754c:	23cf      	movs	r3, #207	; 0xcf
 800754e:	005a      	lsls	r2, r3, #1
 8007550:	4b81      	ldr	r3, [pc, #516]	; (8007758 <HAL_ADC_Init+0x320>)
 8007552:	0011      	movs	r1, r2
 8007554:	0018      	movs	r0, r3
 8007556:	f7fe fc52 	bl	8005dfe <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00b      	beq.n	800757a <HAL_ADC_Init+0x142>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	2b20      	cmp	r3, #32
 8007568:	d007      	beq.n	800757a <HAL_ADC_Init+0x142>
 800756a:	23a0      	movs	r3, #160	; 0xa0
 800756c:	33ff      	adds	r3, #255	; 0xff
 800756e:	001a      	movs	r2, r3
 8007570:	4b79      	ldr	r3, [pc, #484]	; (8007758 <HAL_ADC_Init+0x320>)
 8007572:	0011      	movs	r1, r2
 8007574:	0018      	movs	r0, r3
 8007576:	f7fe fc42 	bl	8005dfe <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d00a      	beq.n	8007598 <HAL_ADC_Init+0x160>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	2b02      	cmp	r3, #2
 8007588:	d006      	beq.n	8007598 <HAL_ADC_Init+0x160>
 800758a:	23d0      	movs	r3, #208	; 0xd0
 800758c:	005a      	lsls	r2, r3, #1
 800758e:	4b72      	ldr	r3, [pc, #456]	; (8007758 <HAL_ADC_Init+0x320>)
 8007590:	0011      	movs	r1, r2
 8007592:	0018      	movs	r0, r3
 8007594:	f7fe fc33 	bl	8005dfe <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2220      	movs	r2, #32
 800759c:	5c9b      	ldrb	r3, [r3, r2]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00c      	beq.n	80075bc <HAL_ADC_Init+0x184>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2220      	movs	r2, #32
 80075a6:	5c9b      	ldrb	r3, [r3, r2]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d007      	beq.n	80075bc <HAL_ADC_Init+0x184>
 80075ac:	23a2      	movs	r3, #162	; 0xa2
 80075ae:	33ff      	adds	r3, #255	; 0xff
 80075b0:	001a      	movs	r2, r3
 80075b2:	4b69      	ldr	r3, [pc, #420]	; (8007758 <HAL_ADC_Init+0x320>)
 80075b4:	0011      	movs	r1, r2
 80075b6:	0018      	movs	r0, r3
 80075b8:	f7fe fc21 	bl	8005dfe <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2221      	movs	r2, #33	; 0x21
 80075c0:	5c9b      	ldrb	r3, [r3, r2]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00b      	beq.n	80075de <HAL_ADC_Init+0x1a6>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2221      	movs	r2, #33	; 0x21
 80075ca:	5c9b      	ldrb	r3, [r3, r2]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d006      	beq.n	80075de <HAL_ADC_Init+0x1a6>
 80075d0:	23d1      	movs	r3, #209	; 0xd1
 80075d2:	005a      	lsls	r2, r3, #1
 80075d4:	4b60      	ldr	r3, [pc, #384]	; (8007758 <HAL_ADC_Init+0x320>)
 80075d6:	0011      	movs	r1, r2
 80075d8:	0018      	movs	r0, r3
 80075da:	f7fe fc10 	bl	8005dfe <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d019      	beq.n	800761a <HAL_ADC_Init+0x1e2>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075ea:	2380      	movs	r3, #128	; 0x80
 80075ec:	00db      	lsls	r3, r3, #3
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d013      	beq.n	800761a <HAL_ADC_Init+0x1e2>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075f6:	2380      	movs	r3, #128	; 0x80
 80075f8:	011b      	lsls	r3, r3, #4
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d00d      	beq.n	800761a <HAL_ADC_Init+0x1e2>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007602:	23c0      	movs	r3, #192	; 0xc0
 8007604:	011b      	lsls	r3, r3, #4
 8007606:	429a      	cmp	r2, r3
 8007608:	d007      	beq.n	800761a <HAL_ADC_Init+0x1e2>
 800760a:	23a4      	movs	r3, #164	; 0xa4
 800760c:	33ff      	adds	r3, #255	; 0xff
 800760e:	001a      	movs	r2, r3
 8007610:	4b51      	ldr	r3, [pc, #324]	; (8007758 <HAL_ADC_Init+0x320>)
 8007612:	0011      	movs	r1, r2
 8007614:	0018      	movs	r0, r3
 8007616:	f7fe fbf2 	bl	8005dfe <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761e:	2b00      	cmp	r3, #0
 8007620:	d036      	beq.n	8007690 <HAL_ADC_Init+0x258>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007626:	2b40      	cmp	r3, #64	; 0x40
 8007628:	d032      	beq.n	8007690 <HAL_ADC_Init+0x258>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762e:	2b80      	cmp	r3, #128	; 0x80
 8007630:	d02e      	beq.n	8007690 <HAL_ADC_Init+0x258>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	2bc0      	cmp	r3, #192	; 0xc0
 8007638:	d02a      	beq.n	8007690 <HAL_ADC_Init+0x258>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800763e:	2380      	movs	r3, #128	; 0x80
 8007640:	005b      	lsls	r3, r3, #1
 8007642:	429a      	cmp	r2, r3
 8007644:	d024      	beq.n	8007690 <HAL_ADC_Init+0x258>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800764a:	2380      	movs	r3, #128	; 0x80
 800764c:	005b      	lsls	r3, r3, #1
 800764e:	429a      	cmp	r2, r3
 8007650:	d01e      	beq.n	8007690 <HAL_ADC_Init+0x258>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007656:	23a0      	movs	r3, #160	; 0xa0
 8007658:	005b      	lsls	r3, r3, #1
 800765a:	429a      	cmp	r2, r3
 800765c:	d018      	beq.n	8007690 <HAL_ADC_Init+0x258>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007662:	23c0      	movs	r3, #192	; 0xc0
 8007664:	005b      	lsls	r3, r3, #1
 8007666:	429a      	cmp	r2, r3
 8007668:	d012      	beq.n	8007690 <HAL_ADC_Init+0x258>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800766e:	23e0      	movs	r3, #224	; 0xe0
 8007670:	005b      	lsls	r3, r3, #1
 8007672:	429a      	cmp	r2, r3
 8007674:	d00c      	beq.n	8007690 <HAL_ADC_Init+0x258>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800767a:	23c2      	movs	r3, #194	; 0xc2
 800767c:	33ff      	adds	r3, #255	; 0xff
 800767e:	429a      	cmp	r2, r3
 8007680:	d006      	beq.n	8007690 <HAL_ADC_Init+0x258>
 8007682:	23d2      	movs	r3, #210	; 0xd2
 8007684:	005a      	lsls	r2, r3, #1
 8007686:	4b34      	ldr	r3, [pc, #208]	; (8007758 <HAL_ADC_Init+0x320>)
 8007688:	0011      	movs	r1, r2
 800768a:	0018      	movs	r0, r3
 800768c:	f7fe fbb7 	bl	8005dfe <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	222c      	movs	r2, #44	; 0x2c
 8007694:	5c9b      	ldrb	r3, [r3, r2]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00c      	beq.n	80076b4 <HAL_ADC_Init+0x27c>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	222c      	movs	r2, #44	; 0x2c
 800769e:	5c9b      	ldrb	r3, [r3, r2]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d007      	beq.n	80076b4 <HAL_ADC_Init+0x27c>
 80076a4:	23a6      	movs	r3, #166	; 0xa6
 80076a6:	33ff      	adds	r3, #255	; 0xff
 80076a8:	001a      	movs	r2, r3
 80076aa:	4b2b      	ldr	r3, [pc, #172]	; (8007758 <HAL_ADC_Init+0x320>)
 80076ac:	0011      	movs	r1, r2
 80076ae:	0018      	movs	r0, r3
 80076b0:	f7fe fba5 	bl	8005dfe <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	2b04      	cmp	r3, #4
 80076ba:	d00a      	beq.n	80076d2 <HAL_ADC_Init+0x29a>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	2b08      	cmp	r3, #8
 80076c2:	d006      	beq.n	80076d2 <HAL_ADC_Init+0x29a>
 80076c4:	23d3      	movs	r3, #211	; 0xd3
 80076c6:	005a      	lsls	r2, r3, #1
 80076c8:	4b23      	ldr	r3, [pc, #140]	; (8007758 <HAL_ADC_Init+0x320>)
 80076ca:	0011      	movs	r1, r2
 80076cc:	0018      	movs	r0, r3
 80076ce:	f7fe fb96 	bl	8005dfe <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00d      	beq.n	80076f6 <HAL_ADC_Init+0x2be>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076de:	2380      	movs	r3, #128	; 0x80
 80076e0:	015b      	lsls	r3, r3, #5
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d007      	beq.n	80076f6 <HAL_ADC_Init+0x2be>
 80076e6:	23a8      	movs	r3, #168	; 0xa8
 80076e8:	33ff      	adds	r3, #255	; 0xff
 80076ea:	001a      	movs	r2, r3
 80076ec:	4b1a      	ldr	r3, [pc, #104]	; (8007758 <HAL_ADC_Init+0x320>)
 80076ee:	0011      	movs	r1, r2
 80076f0:	0018      	movs	r0, r3
 80076f2:	f7fe fb84 	bl	8005dfe <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00a      	beq.n	8007714 <HAL_ADC_Init+0x2dc>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d006      	beq.n	8007714 <HAL_ADC_Init+0x2dc>
 8007706:	23d4      	movs	r3, #212	; 0xd4
 8007708:	005a      	lsls	r2, r3, #1
 800770a:	4b13      	ldr	r3, [pc, #76]	; (8007758 <HAL_ADC_Init+0x320>)
 800770c:	0011      	movs	r1, r2
 800770e:	0018      	movs	r0, r3
 8007710:	f7fe fb75 	bl	8005dfe <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerFrequencyMode));
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00b      	beq.n	8007734 <HAL_ADC_Init+0x2fc>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007720:	2b01      	cmp	r3, #1
 8007722:	d007      	beq.n	8007734 <HAL_ADC_Init+0x2fc>
 8007724:	23aa      	movs	r3, #170	; 0xaa
 8007726:	33ff      	adds	r3, #255	; 0xff
 8007728:	001a      	movs	r2, r3
 800772a:	4b0b      	ldr	r3, [pc, #44]	; (8007758 <HAL_ADC_Init+0x320>)
 800772c:	0011      	movs	r1, r2
 800772e:	0018      	movs	r0, r3
 8007730:	f7fe fb65 	bl	8005dfe <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	69db      	ldr	r3, [r3, #28]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00f      	beq.n	800775c <HAL_ADC_Init+0x324>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	69db      	ldr	r3, [r3, #28]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d00b      	beq.n	800775c <HAL_ADC_Init+0x324>
 8007744:	23d5      	movs	r3, #213	; 0xd5
 8007746:	005a      	lsls	r2, r3, #1
 8007748:	4b03      	ldr	r3, [pc, #12]	; (8007758 <HAL_ADC_Init+0x320>)
 800774a:	0011      	movs	r1, r2
 800774c:	0018      	movs	r0, r3
 800774e:	f7fe fb56 	bl	8005dfe <assert_failed>
 8007752:	e003      	b.n	800775c <HAL_ADC_Init+0x324>
 8007754:	40012400 	.word	0x40012400
 8007758:	0800cb68 	.word	0x0800cb68
  assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTime));
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007760:	2b00      	cmp	r3, #0
 8007762:	d023      	beq.n	80077ac <HAL_ADC_Init+0x374>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007768:	2b01      	cmp	r3, #1
 800776a:	d01f      	beq.n	80077ac <HAL_ADC_Init+0x374>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007770:	2b02      	cmp	r3, #2
 8007772:	d01b      	beq.n	80077ac <HAL_ADC_Init+0x374>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007778:	2b03      	cmp	r3, #3
 800777a:	d017      	beq.n	80077ac <HAL_ADC_Init+0x374>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007780:	2b04      	cmp	r3, #4
 8007782:	d013      	beq.n	80077ac <HAL_ADC_Init+0x374>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007788:	2b05      	cmp	r3, #5
 800778a:	d00f      	beq.n	80077ac <HAL_ADC_Init+0x374>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007790:	2b06      	cmp	r3, #6
 8007792:	d00b      	beq.n	80077ac <HAL_ADC_Init+0x374>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007798:	2b07      	cmp	r3, #7
 800779a:	d007      	beq.n	80077ac <HAL_ADC_Init+0x374>
 800779c:	23ac      	movs	r3, #172	; 0xac
 800779e:	33ff      	adds	r3, #255	; 0xff
 80077a0:	001a      	movs	r2, r3
 80077a2:	4bd3      	ldr	r3, [pc, #844]	; (8007af0 <HAL_ADC_Init+0x6b8>)
 80077a4:	0011      	movs	r1, r2
 80077a6:	0018      	movs	r0, r3
 80077a8:	f7fe fb29 	bl	8005dfe <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00a      	beq.n	80077ca <HAL_ADC_Init+0x392>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d006      	beq.n	80077ca <HAL_ADC_Init+0x392>
 80077bc:	23d6      	movs	r3, #214	; 0xd6
 80077be:	005a      	lsls	r2, r3, #1
 80077c0:	4bcb      	ldr	r3, [pc, #812]	; (8007af0 <HAL_ADC_Init+0x6b8>)
 80077c2:	0011      	movs	r1, r2
 80077c4:	0018      	movs	r0, r3
 80077c6:	f7fe fb1a 	bl	8005dfe <assert_failed>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10a      	bne.n	80077e8 <HAL_ADC_Init+0x3b0>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2250      	movs	r2, #80	; 0x50
 80077dc:	2100      	movs	r1, #0
 80077de:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	0018      	movs	r0, r3
 80077e4:	f7ff fc16 	bl	8007014 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ec:	2210      	movs	r2, #16
 80077ee:	4013      	ands	r3, r2
 80077f0:	2b10      	cmp	r3, #16
 80077f2:	d005      	beq.n	8007800 <HAL_ADC_Init+0x3c8>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	2204      	movs	r2, #4
 80077fc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80077fe:	d00b      	beq.n	8007818 <HAL_ADC_Init+0x3e0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007804:	2210      	movs	r2, #16
 8007806:	431a      	orrs	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2250      	movs	r2, #80	; 0x50
 8007810:	2100      	movs	r1, #0
 8007812:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e1a9      	b.n	8007b6c <HAL_ADC_Init+0x734>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800781c:	4ab5      	ldr	r2, [pc, #724]	; (8007af4 <HAL_ADC_Init+0x6bc>)
 800781e:	4013      	ands	r3, r2
 8007820:	2202      	movs	r2, #2
 8007822:	431a      	orrs	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	2203      	movs	r2, #3
 8007830:	4013      	ands	r3, r2
 8007832:	2b01      	cmp	r3, #1
 8007834:	d108      	bne.n	8007848 <HAL_ADC_Init+0x410>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2201      	movs	r2, #1
 800783e:	4013      	ands	r3, r2
 8007840:	2b01      	cmp	r3, #1
 8007842:	d101      	bne.n	8007848 <HAL_ADC_Init+0x410>
 8007844:	2301      	movs	r3, #1
 8007846:	e000      	b.n	800784a <HAL_ADC_Init+0x412>
 8007848:	2300      	movs	r3, #0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d149      	bne.n	80078e2 <HAL_ADC_Init+0x4aa>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	23c0      	movs	r3, #192	; 0xc0
 8007854:	061b      	lsls	r3, r3, #24
 8007856:	429a      	cmp	r2, r3
 8007858:	d00b      	beq.n	8007872 <HAL_ADC_Init+0x43a>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685a      	ldr	r2, [r3, #4]
 800785e:	2380      	movs	r3, #128	; 0x80
 8007860:	05db      	lsls	r3, r3, #23
 8007862:	429a      	cmp	r2, r3
 8007864:	d005      	beq.n	8007872 <HAL_ADC_Init+0x43a>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685a      	ldr	r2, [r3, #4]
 800786a:	2380      	movs	r3, #128	; 0x80
 800786c:	061b      	lsls	r3, r3, #24
 800786e:	429a      	cmp	r2, r3
 8007870:	d111      	bne.n	8007896 <HAL_ADC_Init+0x45e>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	691a      	ldr	r2, [r3, #16]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	0092      	lsls	r2, r2, #2
 800787e:	0892      	lsrs	r2, r2, #2
 8007880:	611a      	str	r2, [r3, #16]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6919      	ldr	r1, [r3, #16]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	430a      	orrs	r2, r1
 8007892:	611a      	str	r2, [r3, #16]
 8007894:	e014      	b.n	80078c0 <HAL_ADC_Init+0x488>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	691a      	ldr	r2, [r3, #16]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	0092      	lsls	r2, r2, #2
 80078a2:	0892      	lsrs	r2, r2, #2
 80078a4:	611a      	str	r2, [r3, #16]
 80078a6:	4b94      	ldr	r3, [pc, #592]	; (8007af8 <HAL_ADC_Init+0x6c0>)
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	4b93      	ldr	r3, [pc, #588]	; (8007af8 <HAL_ADC_Init+0x6c0>)
 80078ac:	4993      	ldr	r1, [pc, #588]	; (8007afc <HAL_ADC_Init+0x6c4>)
 80078ae:	400a      	ands	r2, r1
 80078b0:	601a      	str	r2, [r3, #0]
 80078b2:	4b91      	ldr	r3, [pc, #580]	; (8007af8 <HAL_ADC_Init+0x6c0>)
 80078b4:	6819      	ldr	r1, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	4b8f      	ldr	r3, [pc, #572]	; (8007af8 <HAL_ADC_Init+0x6c0>)
 80078bc:	430a      	orrs	r2, r1
 80078be:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68da      	ldr	r2, [r3, #12]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2118      	movs	r1, #24
 80078cc:	438a      	bics	r2, r1
 80078ce:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68d9      	ldr	r1, [r3, #12]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	689a      	ldr	r2, [r3, #8]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80078e2:	4b85      	ldr	r3, [pc, #532]	; (8007af8 <HAL_ADC_Init+0x6c0>)
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	4b84      	ldr	r3, [pc, #528]	; (8007af8 <HAL_ADC_Init+0x6c0>)
 80078e8:	4985      	ldr	r1, [pc, #532]	; (8007b00 <HAL_ADC_Init+0x6c8>)
 80078ea:	400a      	ands	r2, r1
 80078ec:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80078ee:	4b82      	ldr	r3, [pc, #520]	; (8007af8 <HAL_ADC_Init+0x6c0>)
 80078f0:	6819      	ldr	r1, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f6:	065a      	lsls	r2, r3, #25
 80078f8:	4b7f      	ldr	r3, [pc, #508]	; (8007af8 <HAL_ADC_Init+0x6c0>)
 80078fa:	430a      	orrs	r2, r1
 80078fc:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	2380      	movs	r3, #128	; 0x80
 8007906:	055b      	lsls	r3, r3, #21
 8007908:	4013      	ands	r3, r2
 800790a:	d108      	bne.n	800791e <HAL_ADC_Init+0x4e6>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	689a      	ldr	r2, [r3, #8]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2180      	movs	r1, #128	; 0x80
 8007918:	0549      	lsls	r1, r1, #21
 800791a:	430a      	orrs	r2, r1
 800791c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68da      	ldr	r2, [r3, #12]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4976      	ldr	r1, [pc, #472]	; (8007b04 <HAL_ADC_Init+0x6cc>)
 800792a:	400a      	ands	r2, r1
 800792c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68d9      	ldr	r1, [r3, #12]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	2b02      	cmp	r3, #2
 800793e:	d101      	bne.n	8007944 <HAL_ADC_Init+0x50c>
 8007940:	2304      	movs	r3, #4
 8007942:	e000      	b.n	8007946 <HAL_ADC_Init+0x50e>
 8007944:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8007946:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2020      	movs	r0, #32
 800794c:	5c1b      	ldrb	r3, [r3, r0]
 800794e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8007950:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	202c      	movs	r0, #44	; 0x2c
 8007956:	5c1b      	ldrb	r3, [r3, r0]
 8007958:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800795a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8007960:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8007968:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8007970:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	430a      	orrs	r2, r1
 8007978:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800797e:	23c2      	movs	r3, #194	; 0xc2
 8007980:	33ff      	adds	r3, #255	; 0xff
 8007982:	429a      	cmp	r2, r3
 8007984:	d00b      	beq.n	800799e <HAL_ADC_Init+0x566>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68d9      	ldr	r1, [r3, #12]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8007994:	431a      	orrs	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	430a      	orrs	r2, r1
 800799c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2221      	movs	r2, #33	; 0x21
 80079a2:	5c9b      	ldrb	r3, [r3, r2]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d11a      	bne.n	80079de <HAL_ADC_Init+0x5a6>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2220      	movs	r2, #32
 80079ac:	5c9b      	ldrb	r3, [r3, r2]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d109      	bne.n	80079c6 <HAL_ADC_Init+0x58e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68da      	ldr	r2, [r3, #12]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2180      	movs	r1, #128	; 0x80
 80079be:	0249      	lsls	r1, r1, #9
 80079c0:	430a      	orrs	r2, r1
 80079c2:	60da      	str	r2, [r3, #12]
 80079c4:	e00b      	b.n	80079de <HAL_ADC_Init+0x5a6>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ca:	2220      	movs	r2, #32
 80079cc:	431a      	orrs	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d6:	2201      	movs	r2, #1
 80079d8:	431a      	orrs	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d000      	beq.n	80079e8 <HAL_ADC_Init+0x5b0>
 80079e6:	e095      	b.n	8007b14 <HAL_ADC_Init+0x6dc>
  {
    assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversample.Ratio));
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d022      	beq.n	8007a36 <HAL_ADC_Init+0x5fe>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f4:	2b04      	cmp	r3, #4
 80079f6:	d01e      	beq.n	8007a36 <HAL_ADC_Init+0x5fe>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fc:	2b08      	cmp	r3, #8
 80079fe:	d01a      	beq.n	8007a36 <HAL_ADC_Init+0x5fe>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a04:	2b0c      	cmp	r3, #12
 8007a06:	d016      	beq.n	8007a36 <HAL_ADC_Init+0x5fe>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0c:	2b10      	cmp	r3, #16
 8007a0e:	d012      	beq.n	8007a36 <HAL_ADC_Init+0x5fe>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a14:	2b14      	cmp	r3, #20
 8007a16:	d00e      	beq.n	8007a36 <HAL_ADC_Init+0x5fe>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1c:	2b18      	cmp	r3, #24
 8007a1e:	d00a      	beq.n	8007a36 <HAL_ADC_Init+0x5fe>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a24:	2b1c      	cmp	r3, #28
 8007a26:	d006      	beq.n	8007a36 <HAL_ADC_Init+0x5fe>
 8007a28:	2393      	movs	r3, #147	; 0x93
 8007a2a:	009a      	lsls	r2, r3, #2
 8007a2c:	4b30      	ldr	r3, [pc, #192]	; (8007af0 <HAL_ADC_Init+0x6b8>)
 8007a2e:	0011      	movs	r1, r2
 8007a30:	0018      	movs	r0, r3
 8007a32:	f7fe f9e4 	bl	8005dfe <assert_failed>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversample.RightBitShift));
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d027      	beq.n	8007a8e <HAL_ADC_Init+0x656>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a42:	2b20      	cmp	r3, #32
 8007a44:	d023      	beq.n	8007a8e <HAL_ADC_Init+0x656>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a4a:	2b40      	cmp	r3, #64	; 0x40
 8007a4c:	d01f      	beq.n	8007a8e <HAL_ADC_Init+0x656>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a52:	2b60      	cmp	r3, #96	; 0x60
 8007a54:	d01b      	beq.n	8007a8e <HAL_ADC_Init+0x656>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a5a:	2b80      	cmp	r3, #128	; 0x80
 8007a5c:	d017      	beq.n	8007a8e <HAL_ADC_Init+0x656>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a62:	2ba0      	cmp	r3, #160	; 0xa0
 8007a64:	d013      	beq.n	8007a8e <HAL_ADC_Init+0x656>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a6a:	2bc0      	cmp	r3, #192	; 0xc0
 8007a6c:	d00f      	beq.n	8007a8e <HAL_ADC_Init+0x656>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a72:	2be0      	cmp	r3, #224	; 0xe0
 8007a74:	d00b      	beq.n	8007a8e <HAL_ADC_Init+0x656>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a7a:	2380      	movs	r3, #128	; 0x80
 8007a7c:	005b      	lsls	r3, r3, #1
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d005      	beq.n	8007a8e <HAL_ADC_Init+0x656>
 8007a82:	4a21      	ldr	r2, [pc, #132]	; (8007b08 <HAL_ADC_Init+0x6d0>)
 8007a84:	4b1a      	ldr	r3, [pc, #104]	; (8007af0 <HAL_ADC_Init+0x6b8>)
 8007a86:	0011      	movs	r1, r2
 8007a88:	0018      	movs	r0, r3
 8007a8a:	f7fe f9b8 	bl	8005dfe <assert_failed>
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversample.TriggeredMode));
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00b      	beq.n	8007aae <HAL_ADC_Init+0x676>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a9a:	2380      	movs	r3, #128	; 0x80
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d005      	beq.n	8007aae <HAL_ADC_Init+0x676>
 8007aa2:	4a1a      	ldr	r2, [pc, #104]	; (8007b0c <HAL_ADC_Init+0x6d4>)
 8007aa4:	4b12      	ldr	r3, [pc, #72]	; (8007af0 <HAL_ADC_Init+0x6b8>)
 8007aa6:	0011      	movs	r1, r2
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	f7fe f9a8 	bl	8005dfe <assert_failed>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	691a      	ldr	r2, [r3, #16]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4915      	ldr	r1, [pc, #84]	; (8007b10 <HAL_ADC_Init+0x6d8>)
 8007aba:	400a      	ands	r2, r1
 8007abc:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6919      	ldr	r1, [r3, #16]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8007acc:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8007ad2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	430a      	orrs	r2, r1
 8007ada:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	691a      	ldr	r2, [r3, #16]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2101      	movs	r1, #1
 8007ae8:	430a      	orrs	r2, r1
 8007aea:	611a      	str	r2, [r3, #16]
 8007aec:	e021      	b.n	8007b32 <HAL_ADC_Init+0x6fa>
 8007aee:	46c0      	nop			; (mov r8, r8)
 8007af0:	0800cb68 	.word	0x0800cb68
 8007af4:	fffffefd 	.word	0xfffffefd
 8007af8:	40012708 	.word	0x40012708
 8007afc:	ffc3ffff 	.word	0xffc3ffff
 8007b00:	fdffffff 	.word	0xfdffffff
 8007b04:	fffe0219 	.word	0xfffe0219
 8007b08:	0000024d 	.word	0x0000024d
 8007b0c:	0000024e 	.word	0x0000024e
 8007b10:	fffffc03 	.word	0xfffffc03
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d107      	bne.n	8007b32 <HAL_ADC_Init+0x6fa>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	691a      	ldr	r2, [r3, #16]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2101      	movs	r1, #1
 8007b2e:	438a      	bics	r2, r1
 8007b30:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	695a      	ldr	r2, [r3, #20]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2107      	movs	r1, #7
 8007b3e:	438a      	bics	r2, r1
 8007b40:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6959      	ldr	r1, [r3, #20]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	430a      	orrs	r2, r1
 8007b52:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5e:	2203      	movs	r2, #3
 8007b60:	4393      	bics	r3, r2
 8007b62:	2201      	movs	r2, #1
 8007b64:	431a      	orrs	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	0018      	movs	r0, r3
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	b002      	add	sp, #8
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a88      	ldr	r2, [pc, #544]	; (8007da4 <HAL_ADC_ConfigChannel+0x230>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d005      	beq.n	8007b94 <HAL_ADC_ConfigChannel+0x20>
 8007b88:	4a87      	ldr	r2, [pc, #540]	; (8007da8 <HAL_ADC_ConfigChannel+0x234>)
 8007b8a:	4b88      	ldr	r3, [pc, #544]	; (8007dac <HAL_ADC_ConfigChannel+0x238>)
 8007b8c:	0011      	movs	r1, r2
 8007b8e:	0018      	movs	r0, r3
 8007b90:	f7fe f935 	bl	8005dfe <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d100      	bne.n	8007b9e <HAL_ADC_ConfigChannel+0x2a>
 8007b9c:	e05f      	b.n	8007c5e <HAL_ADC_ConfigChannel+0xea>
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a83      	ldr	r2, [pc, #524]	; (8007db0 <HAL_ADC_ConfigChannel+0x23c>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d05a      	beq.n	8007c5e <HAL_ADC_ConfigChannel+0xea>
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a81      	ldr	r2, [pc, #516]	; (8007db4 <HAL_ADC_ConfigChannel+0x240>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d055      	beq.n	8007c5e <HAL_ADC_ConfigChannel+0xea>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a80      	ldr	r2, [pc, #512]	; (8007db8 <HAL_ADC_ConfigChannel+0x244>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d050      	beq.n	8007c5e <HAL_ADC_ConfigChannel+0xea>
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a7e      	ldr	r2, [pc, #504]	; (8007dbc <HAL_ADC_ConfigChannel+0x248>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d04b      	beq.n	8007c5e <HAL_ADC_ConfigChannel+0xea>
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a7d      	ldr	r2, [pc, #500]	; (8007dc0 <HAL_ADC_ConfigChannel+0x24c>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d046      	beq.n	8007c5e <HAL_ADC_ConfigChannel+0xea>
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a7b      	ldr	r2, [pc, #492]	; (8007dc4 <HAL_ADC_ConfigChannel+0x250>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d041      	beq.n	8007c5e <HAL_ADC_ConfigChannel+0xea>
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a7a      	ldr	r2, [pc, #488]	; (8007dc8 <HAL_ADC_ConfigChannel+0x254>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d03c      	beq.n	8007c5e <HAL_ADC_ConfigChannel+0xea>
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a78      	ldr	r2, [pc, #480]	; (8007dcc <HAL_ADC_ConfigChannel+0x258>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d037      	beq.n	8007c5e <HAL_ADC_ConfigChannel+0xea>
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a77      	ldr	r2, [pc, #476]	; (8007dd0 <HAL_ADC_ConfigChannel+0x25c>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d032      	beq.n	8007c5e <HAL_ADC_ConfigChannel+0xea>
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a75      	ldr	r2, [pc, #468]	; (8007dd4 <HAL_ADC_ConfigChannel+0x260>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d02d      	beq.n	8007c5e <HAL_ADC_ConfigChannel+0xea>
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a74      	ldr	r2, [pc, #464]	; (8007dd8 <HAL_ADC_ConfigChannel+0x264>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d028      	beq.n	8007c5e <HAL_ADC_ConfigChannel+0xea>
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a72      	ldr	r2, [pc, #456]	; (8007ddc <HAL_ADC_ConfigChannel+0x268>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d023      	beq.n	8007c5e <HAL_ADC_ConfigChannel+0xea>
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a71      	ldr	r2, [pc, #452]	; (8007de0 <HAL_ADC_ConfigChannel+0x26c>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d01e      	beq.n	8007c5e <HAL_ADC_ConfigChannel+0xea>
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a6f      	ldr	r2, [pc, #444]	; (8007de4 <HAL_ADC_ConfigChannel+0x270>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d019      	beq.n	8007c5e <HAL_ADC_ConfigChannel+0xea>
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a6e      	ldr	r2, [pc, #440]	; (8007de8 <HAL_ADC_ConfigChannel+0x274>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d014      	beq.n	8007c5e <HAL_ADC_ConfigChannel+0xea>
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a6c      	ldr	r2, [pc, #432]	; (8007dec <HAL_ADC_ConfigChannel+0x278>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d00f      	beq.n	8007c5e <HAL_ADC_ConfigChannel+0xea>
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a6b      	ldr	r2, [pc, #428]	; (8007df0 <HAL_ADC_ConfigChannel+0x27c>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d00a      	beq.n	8007c5e <HAL_ADC_ConfigChannel+0xea>
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a69      	ldr	r2, [pc, #420]	; (8007df4 <HAL_ADC_ConfigChannel+0x280>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d005      	beq.n	8007c5e <HAL_ADC_ConfigChannel+0xea>
 8007c52:	4a69      	ldr	r2, [pc, #420]	; (8007df8 <HAL_ADC_ConfigChannel+0x284>)
 8007c54:	4b55      	ldr	r3, [pc, #340]	; (8007dac <HAL_ADC_ConfigChannel+0x238>)
 8007c56:	0011      	movs	r1, r2
 8007c58:	0018      	movs	r0, r3
 8007c5a:	f7fe f8d0 	bl	8005dfe <assert_failed>
  assert_param(IS_ADC_RANK(sConfig->Rank));
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	2380      	movs	r3, #128	; 0x80
 8007c64:	015b      	lsls	r3, r3, #5
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d00a      	beq.n	8007c80 <HAL_ADC_ConfigChannel+0x10c>
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	4a63      	ldr	r2, [pc, #396]	; (8007dfc <HAL_ADC_ConfigChannel+0x288>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d005      	beq.n	8007c80 <HAL_ADC_ConfigChannel+0x10c>
 8007c74:	4a62      	ldr	r2, [pc, #392]	; (8007e00 <HAL_ADC_ConfigChannel+0x28c>)
 8007c76:	4b4d      	ldr	r3, [pc, #308]	; (8007dac <HAL_ADC_ConfigChannel+0x238>)
 8007c78:	0011      	movs	r1, r2
 8007c7a:	0018      	movs	r0, r3
 8007c7c:	f7fe f8bf 	bl	8005dfe <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2250      	movs	r2, #80	; 0x50
 8007c84:	5c9b      	ldrb	r3, [r3, r2]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d101      	bne.n	8007c8e <HAL_ADC_ConfigChannel+0x11a>
 8007c8a:	2302      	movs	r3, #2
 8007c8c:	e085      	b.n	8007d9a <HAL_ADC_ConfigChannel+0x226>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2250      	movs	r2, #80	; 0x50
 8007c92:	2101      	movs	r1, #1
 8007c94:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	2204      	movs	r2, #4
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	d00b      	beq.n	8007cba <HAL_ADC_ConfigChannel+0x146>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca6:	2220      	movs	r2, #32
 8007ca8:	431a      	orrs	r2, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2250      	movs	r2, #80	; 0x50
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e06f      	b.n	8007d9a <HAL_ADC_ConfigChannel+0x226>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	4a4f      	ldr	r2, [pc, #316]	; (8007dfc <HAL_ADC_ConfigChannel+0x288>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d035      	beq.n	8007d30 <HAL_ADC_ConfigChannel+0x1bc>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	035b      	lsls	r3, r3, #13
 8007cd0:	0b5a      	lsrs	r2, r3, #13
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	2380      	movs	r3, #128	; 0x80
 8007ce0:	02db      	lsls	r3, r3, #11
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	d009      	beq.n	8007cfa <HAL_ADC_ConfigChannel+0x186>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8007ce6:	4b47      	ldr	r3, [pc, #284]	; (8007e04 <HAL_ADC_ConfigChannel+0x290>)
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	4b46      	ldr	r3, [pc, #280]	; (8007e04 <HAL_ADC_ConfigChannel+0x290>)
 8007cec:	2180      	movs	r1, #128	; 0x80
 8007cee:	0409      	lsls	r1, r1, #16
 8007cf0:	430a      	orrs	r2, r1
 8007cf2:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8007cf4:	200a      	movs	r0, #10
 8007cf6:	f000 f88d 	bl	8007e14 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	2380      	movs	r3, #128	; 0x80
 8007d00:	029b      	lsls	r3, r3, #10
 8007d02:	4013      	ands	r3, r2
 8007d04:	d006      	beq.n	8007d14 <HAL_ADC_ConfigChannel+0x1a0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8007d06:	4b3f      	ldr	r3, [pc, #252]	; (8007e04 <HAL_ADC_ConfigChannel+0x290>)
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	4b3e      	ldr	r3, [pc, #248]	; (8007e04 <HAL_ADC_ConfigChannel+0x290>)
 8007d0c:	2180      	movs	r1, #128	; 0x80
 8007d0e:	03c9      	lsls	r1, r1, #15
 8007d10:	430a      	orrs	r2, r1
 8007d12:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	2380      	movs	r3, #128	; 0x80
 8007d1a:	025b      	lsls	r3, r3, #9
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	d037      	beq.n	8007d90 <HAL_ADC_ConfigChannel+0x21c>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8007d20:	4b38      	ldr	r3, [pc, #224]	; (8007e04 <HAL_ADC_ConfigChannel+0x290>)
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	4b37      	ldr	r3, [pc, #220]	; (8007e04 <HAL_ADC_ConfigChannel+0x290>)
 8007d26:	2180      	movs	r1, #128	; 0x80
 8007d28:	0449      	lsls	r1, r1, #17
 8007d2a:	430a      	orrs	r2, r1
 8007d2c:	601a      	str	r2, [r3, #0]
 8007d2e:	e02f      	b.n	8007d90 <HAL_ADC_ConfigChannel+0x21c>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	035b      	lsls	r3, r3, #13
 8007d3c:	0b5b      	lsrs	r3, r3, #13
 8007d3e:	43d9      	mvns	r1, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	400a      	ands	r2, r1
 8007d46:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	2380      	movs	r3, #128	; 0x80
 8007d4e:	02db      	lsls	r3, r3, #11
 8007d50:	4013      	ands	r3, r2
 8007d52:	d005      	beq.n	8007d60 <HAL_ADC_ConfigChannel+0x1ec>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8007d54:	4b2b      	ldr	r3, [pc, #172]	; (8007e04 <HAL_ADC_ConfigChannel+0x290>)
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	4b2a      	ldr	r3, [pc, #168]	; (8007e04 <HAL_ADC_ConfigChannel+0x290>)
 8007d5a:	492b      	ldr	r1, [pc, #172]	; (8007e08 <HAL_ADC_ConfigChannel+0x294>)
 8007d5c:	400a      	ands	r2, r1
 8007d5e:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	2380      	movs	r3, #128	; 0x80
 8007d66:	029b      	lsls	r3, r3, #10
 8007d68:	4013      	ands	r3, r2
 8007d6a:	d005      	beq.n	8007d78 <HAL_ADC_ConfigChannel+0x204>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8007d6c:	4b25      	ldr	r3, [pc, #148]	; (8007e04 <HAL_ADC_ConfigChannel+0x290>)
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	4b24      	ldr	r3, [pc, #144]	; (8007e04 <HAL_ADC_ConfigChannel+0x290>)
 8007d72:	4926      	ldr	r1, [pc, #152]	; (8007e0c <HAL_ADC_ConfigChannel+0x298>)
 8007d74:	400a      	ands	r2, r1
 8007d76:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	2380      	movs	r3, #128	; 0x80
 8007d7e:	025b      	lsls	r3, r3, #9
 8007d80:	4013      	ands	r3, r2
 8007d82:	d005      	beq.n	8007d90 <HAL_ADC_ConfigChannel+0x21c>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8007d84:	4b1f      	ldr	r3, [pc, #124]	; (8007e04 <HAL_ADC_ConfigChannel+0x290>)
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	4b1e      	ldr	r3, [pc, #120]	; (8007e04 <HAL_ADC_ConfigChannel+0x290>)
 8007d8a:	4921      	ldr	r1, [pc, #132]	; (8007e10 <HAL_ADC_ConfigChannel+0x29c>)
 8007d8c:	400a      	ands	r2, r1
 8007d8e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2250      	movs	r2, #80	; 0x50
 8007d94:	2100      	movs	r1, #0
 8007d96:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	0018      	movs	r0, r3
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	b002      	add	sp, #8
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	46c0      	nop			; (mov r8, r8)
 8007da4:	40012400 	.word	0x40012400
 8007da8:	00000789 	.word	0x00000789
 8007dac:	0800cb68 	.word	0x0800cb68
 8007db0:	04000002 	.word	0x04000002
 8007db4:	08000004 	.word	0x08000004
 8007db8:	0c000008 	.word	0x0c000008
 8007dbc:	10000010 	.word	0x10000010
 8007dc0:	14000020 	.word	0x14000020
 8007dc4:	18000040 	.word	0x18000040
 8007dc8:	1c000080 	.word	0x1c000080
 8007dcc:	20000100 	.word	0x20000100
 8007dd0:	24000200 	.word	0x24000200
 8007dd4:	28000400 	.word	0x28000400
 8007dd8:	2c000800 	.word	0x2c000800
 8007ddc:	30001000 	.word	0x30001000
 8007de0:	34002000 	.word	0x34002000
 8007de4:	38004000 	.word	0x38004000
 8007de8:	3c008000 	.word	0x3c008000
 8007dec:	48040000 	.word	0x48040000
 8007df0:	44020000 	.word	0x44020000
 8007df4:	40010000 	.word	0x40010000
 8007df8:	0000078a 	.word	0x0000078a
 8007dfc:	00001001 	.word	0x00001001
 8007e00:	0000078b 	.word	0x0000078b
 8007e04:	40012708 	.word	0x40012708
 8007e08:	ff7fffff 	.word	0xff7fffff
 8007e0c:	ffbfffff 	.word	0xffbfffff
 8007e10:	feffffff 	.word	0xfeffffff

08007e14 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8007e1c:	4b0b      	ldr	r3, [pc, #44]	; (8007e4c <ADC_DelayMicroSecond+0x38>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	490b      	ldr	r1, [pc, #44]	; (8007e50 <ADC_DelayMicroSecond+0x3c>)
 8007e22:	0018      	movs	r0, r3
 8007e24:	f7f8 f970 	bl	8000108 <__udivsi3>
 8007e28:	0003      	movs	r3, r0
 8007e2a:	001a      	movs	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4353      	muls	r3, r2
 8007e30:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8007e32:	e002      	b.n	8007e3a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	3b01      	subs	r3, #1
 8007e38:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1f9      	bne.n	8007e34 <ADC_DelayMicroSecond+0x20>
  } 
}
 8007e40:	46c0      	nop			; (mov r8, r8)
 8007e42:	46c0      	nop			; (mov r8, r8)
 8007e44:	46bd      	mov	sp, r7
 8007e46:	b004      	add	sp, #16
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	46c0      	nop			; (mov r8, r8)
 8007e4c:	2000004c 	.word	0x2000004c
 8007e50:	000f4240 	.word	0x000f4240

08007e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	0002      	movs	r2, r0
 8007e5c:	1dfb      	adds	r3, r7, #7
 8007e5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007e60:	1dfb      	adds	r3, r7, #7
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	2b7f      	cmp	r3, #127	; 0x7f
 8007e66:	d809      	bhi.n	8007e7c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e68:	1dfb      	adds	r3, r7, #7
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	001a      	movs	r2, r3
 8007e6e:	231f      	movs	r3, #31
 8007e70:	401a      	ands	r2, r3
 8007e72:	4b04      	ldr	r3, [pc, #16]	; (8007e84 <__NVIC_EnableIRQ+0x30>)
 8007e74:	2101      	movs	r1, #1
 8007e76:	4091      	lsls	r1, r2
 8007e78:	000a      	movs	r2, r1
 8007e7a:	601a      	str	r2, [r3, #0]
  }
}
 8007e7c:	46c0      	nop			; (mov r8, r8)
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	b002      	add	sp, #8
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	e000e100 	.word	0xe000e100

08007e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007e88:	b590      	push	{r4, r7, lr}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	0002      	movs	r2, r0
 8007e90:	6039      	str	r1, [r7, #0]
 8007e92:	1dfb      	adds	r3, r7, #7
 8007e94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007e96:	1dfb      	adds	r3, r7, #7
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	2b7f      	cmp	r3, #127	; 0x7f
 8007e9c:	d828      	bhi.n	8007ef0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007e9e:	4a2f      	ldr	r2, [pc, #188]	; (8007f5c <__NVIC_SetPriority+0xd4>)
 8007ea0:	1dfb      	adds	r3, r7, #7
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	b25b      	sxtb	r3, r3
 8007ea6:	089b      	lsrs	r3, r3, #2
 8007ea8:	33c0      	adds	r3, #192	; 0xc0
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	589b      	ldr	r3, [r3, r2]
 8007eae:	1dfa      	adds	r2, r7, #7
 8007eb0:	7812      	ldrb	r2, [r2, #0]
 8007eb2:	0011      	movs	r1, r2
 8007eb4:	2203      	movs	r2, #3
 8007eb6:	400a      	ands	r2, r1
 8007eb8:	00d2      	lsls	r2, r2, #3
 8007eba:	21ff      	movs	r1, #255	; 0xff
 8007ebc:	4091      	lsls	r1, r2
 8007ebe:	000a      	movs	r2, r1
 8007ec0:	43d2      	mvns	r2, r2
 8007ec2:	401a      	ands	r2, r3
 8007ec4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	019b      	lsls	r3, r3, #6
 8007eca:	22ff      	movs	r2, #255	; 0xff
 8007ecc:	401a      	ands	r2, r3
 8007ece:	1dfb      	adds	r3, r7, #7
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	0018      	movs	r0, r3
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	4003      	ands	r3, r0
 8007ed8:	00db      	lsls	r3, r3, #3
 8007eda:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007edc:	481f      	ldr	r0, [pc, #124]	; (8007f5c <__NVIC_SetPriority+0xd4>)
 8007ede:	1dfb      	adds	r3, r7, #7
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	b25b      	sxtb	r3, r3
 8007ee4:	089b      	lsrs	r3, r3, #2
 8007ee6:	430a      	orrs	r2, r1
 8007ee8:	33c0      	adds	r3, #192	; 0xc0
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8007eee:	e031      	b.n	8007f54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007ef0:	4a1b      	ldr	r2, [pc, #108]	; (8007f60 <__NVIC_SetPriority+0xd8>)
 8007ef2:	1dfb      	adds	r3, r7, #7
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	0019      	movs	r1, r3
 8007ef8:	230f      	movs	r3, #15
 8007efa:	400b      	ands	r3, r1
 8007efc:	3b08      	subs	r3, #8
 8007efe:	089b      	lsrs	r3, r3, #2
 8007f00:	3306      	adds	r3, #6
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	18d3      	adds	r3, r2, r3
 8007f06:	3304      	adds	r3, #4
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	1dfa      	adds	r2, r7, #7
 8007f0c:	7812      	ldrb	r2, [r2, #0]
 8007f0e:	0011      	movs	r1, r2
 8007f10:	2203      	movs	r2, #3
 8007f12:	400a      	ands	r2, r1
 8007f14:	00d2      	lsls	r2, r2, #3
 8007f16:	21ff      	movs	r1, #255	; 0xff
 8007f18:	4091      	lsls	r1, r2
 8007f1a:	000a      	movs	r2, r1
 8007f1c:	43d2      	mvns	r2, r2
 8007f1e:	401a      	ands	r2, r3
 8007f20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	019b      	lsls	r3, r3, #6
 8007f26:	22ff      	movs	r2, #255	; 0xff
 8007f28:	401a      	ands	r2, r3
 8007f2a:	1dfb      	adds	r3, r7, #7
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	0018      	movs	r0, r3
 8007f30:	2303      	movs	r3, #3
 8007f32:	4003      	ands	r3, r0
 8007f34:	00db      	lsls	r3, r3, #3
 8007f36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007f38:	4809      	ldr	r0, [pc, #36]	; (8007f60 <__NVIC_SetPriority+0xd8>)
 8007f3a:	1dfb      	adds	r3, r7, #7
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	001c      	movs	r4, r3
 8007f40:	230f      	movs	r3, #15
 8007f42:	4023      	ands	r3, r4
 8007f44:	3b08      	subs	r3, #8
 8007f46:	089b      	lsrs	r3, r3, #2
 8007f48:	430a      	orrs	r2, r1
 8007f4a:	3306      	adds	r3, #6
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	18c3      	adds	r3, r0, r3
 8007f50:	3304      	adds	r3, #4
 8007f52:	601a      	str	r2, [r3, #0]
}
 8007f54:	46c0      	nop			; (mov r8, r8)
 8007f56:	46bd      	mov	sp, r7
 8007f58:	b003      	add	sp, #12
 8007f5a:	bd90      	pop	{r4, r7, pc}
 8007f5c:	e000e100 	.word	0xe000e100
 8007f60:	e000ed00 	.word	0xe000ed00

08007f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	1e5a      	subs	r2, r3, #1
 8007f70:	2380      	movs	r3, #128	; 0x80
 8007f72:	045b      	lsls	r3, r3, #17
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d301      	bcc.n	8007f7c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e010      	b.n	8007f9e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f7c:	4b0a      	ldr	r3, [pc, #40]	; (8007fa8 <SysTick_Config+0x44>)
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	3a01      	subs	r2, #1
 8007f82:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007f84:	2301      	movs	r3, #1
 8007f86:	425b      	negs	r3, r3
 8007f88:	2103      	movs	r1, #3
 8007f8a:	0018      	movs	r0, r3
 8007f8c:	f7ff ff7c 	bl	8007e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007f90:	4b05      	ldr	r3, [pc, #20]	; (8007fa8 <SysTick_Config+0x44>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007f96:	4b04      	ldr	r3, [pc, #16]	; (8007fa8 <SysTick_Config+0x44>)
 8007f98:	2207      	movs	r2, #7
 8007f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	0018      	movs	r0, r3
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	b002      	add	sp, #8
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	46c0      	nop			; (mov r8, r8)
 8007fa8:	e000e010 	.word	0xe000e010

08007fac <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60b9      	str	r1, [r7, #8]
 8007fb4:	607a      	str	r2, [r7, #4]
 8007fb6:	230f      	movs	r3, #15
 8007fb8:	18fb      	adds	r3, r7, r3
 8007fba:	1c02      	adds	r2, r0, #0
 8007fbc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2b0f      	cmp	r3, #15
 8007fc2:	d904      	bls.n	8007fce <HAL_NVIC_SetPriority+0x22>
 8007fc4:	4b08      	ldr	r3, [pc, #32]	; (8007fe8 <HAL_NVIC_SetPriority+0x3c>)
 8007fc6:	2187      	movs	r1, #135	; 0x87
 8007fc8:	0018      	movs	r0, r3
 8007fca:	f7fd ff18 	bl	8005dfe <assert_failed>
  NVIC_SetPriority(IRQn,PreemptPriority);
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	230f      	movs	r3, #15
 8007fd2:	18fb      	adds	r3, r7, r3
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	b25b      	sxtb	r3, r3
 8007fd8:	0011      	movs	r1, r2
 8007fda:	0018      	movs	r0, r3
 8007fdc:	f7ff ff54 	bl	8007e88 <__NVIC_SetPriority>
}
 8007fe0:	46c0      	nop			; (mov r8, r8)
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	b004      	add	sp, #16
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	0800cba0 	.word	0x0800cba0

08007fec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	0002      	movs	r2, r0
 8007ff4:	1dfb      	adds	r3, r7, #7
 8007ff6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8007ff8:	1dfb      	adds	r3, r7, #7
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	2b7f      	cmp	r3, #127	; 0x7f
 8007ffe:	d904      	bls.n	800800a <HAL_NVIC_EnableIRQ+0x1e>
 8008000:	4b07      	ldr	r3, [pc, #28]	; (8008020 <HAL_NVIC_EnableIRQ+0x34>)
 8008002:	2197      	movs	r1, #151	; 0x97
 8008004:	0018      	movs	r0, r3
 8008006:	f7fd fefa 	bl	8005dfe <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800800a:	1dfb      	adds	r3, r7, #7
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	b25b      	sxtb	r3, r3
 8008010:	0018      	movs	r0, r3
 8008012:	f7ff ff1f 	bl	8007e54 <__NVIC_EnableIRQ>
}
 8008016:	46c0      	nop			; (mov r8, r8)
 8008018:	46bd      	mov	sp, r7
 800801a:	b002      	add	sp, #8
 800801c:	bd80      	pop	{r7, pc}
 800801e:	46c0      	nop			; (mov r8, r8)
 8008020:	0800cba0 	.word	0x0800cba0

08008024 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	0018      	movs	r0, r3
 8008030:	f7ff ff98 	bl	8007f64 <SysTick_Config>
 8008034:	0003      	movs	r3, r0
}
 8008036:	0018      	movs	r0, r3
 8008038:	46bd      	mov	sp, r7
 800803a:	b002      	add	sp, #8
 800803c:	bd80      	pop	{r7, pc}
	...

08008040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800804a:	2300      	movs	r3, #0
 800804c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800804e:	2300      	movs	r3, #0
 8008050:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8008052:	2300      	movs	r3, #0
 8008054:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d03c      	beq.n	80080d8 <HAL_GPIO_Init+0x98>
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d038      	beq.n	80080d8 <HAL_GPIO_Init+0x98>
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	2b11      	cmp	r3, #17
 800806c:	d034      	beq.n	80080d8 <HAL_GPIO_Init+0x98>
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	2b02      	cmp	r3, #2
 8008074:	d030      	beq.n	80080d8 <HAL_GPIO_Init+0x98>
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	2b12      	cmp	r3, #18
 800807c:	d02c      	beq.n	80080d8 <HAL_GPIO_Init+0x98>
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	685a      	ldr	r2, [r3, #4]
 8008082:	2388      	movs	r3, #136	; 0x88
 8008084:	035b      	lsls	r3, r3, #13
 8008086:	429a      	cmp	r2, r3
 8008088:	d026      	beq.n	80080d8 <HAL_GPIO_Init+0x98>
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	685a      	ldr	r2, [r3, #4]
 800808e:	2384      	movs	r3, #132	; 0x84
 8008090:	039b      	lsls	r3, r3, #14
 8008092:	429a      	cmp	r2, r3
 8008094:	d020      	beq.n	80080d8 <HAL_GPIO_Init+0x98>
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	685a      	ldr	r2, [r3, #4]
 800809a:	23c4      	movs	r3, #196	; 0xc4
 800809c:	039b      	lsls	r3, r3, #14
 800809e:	429a      	cmp	r2, r3
 80080a0:	d01a      	beq.n	80080d8 <HAL_GPIO_Init+0x98>
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	2390      	movs	r3, #144	; 0x90
 80080a8:	035b      	lsls	r3, r3, #13
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d014      	beq.n	80080d8 <HAL_GPIO_Init+0x98>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	685a      	ldr	r2, [r3, #4]
 80080b2:	2388      	movs	r3, #136	; 0x88
 80080b4:	039b      	lsls	r3, r3, #14
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d00e      	beq.n	80080d8 <HAL_GPIO_Init+0x98>
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	23c8      	movs	r3, #200	; 0xc8
 80080c0:	039b      	lsls	r3, r3, #14
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d008      	beq.n	80080d8 <HAL_GPIO_Init+0x98>
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d004      	beq.n	80080d8 <HAL_GPIO_Init+0x98>
 80080ce:	4b39      	ldr	r3, [pc, #228]	; (80081b4 <HAL_GPIO_Init+0x174>)
 80080d0:	21a3      	movs	r1, #163	; 0xa3
 80080d2:	0018      	movs	r0, r3
 80080d4:	f7fd fe93 	bl	8005dfe <assert_failed>
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	23a0      	movs	r3, #160	; 0xa0
 80080dc:	05db      	lsls	r3, r3, #23
 80080de:	429a      	cmp	r2, r3
 80080e0:	d10c      	bne.n	80080fc <HAL_GPIO_Init+0xbc>
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	041b      	lsls	r3, r3, #16
 80080e8:	0c1b      	lsrs	r3, r3, #16
 80080ea:	d007      	beq.n	80080fc <HAL_GPIO_Init+0xbc>
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a31      	ldr	r2, [pc, #196]	; (80081b8 <HAL_GPIO_Init+0x178>)
 80080f2:	4313      	orrs	r3, r2
 80080f4:	4a30      	ldr	r2, [pc, #192]	; (80081b8 <HAL_GPIO_Init+0x178>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d100      	bne.n	80080fc <HAL_GPIO_Init+0xbc>
 80080fa:	e20e      	b.n	800851a <HAL_GPIO_Init+0x4da>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a2f      	ldr	r2, [pc, #188]	; (80081bc <HAL_GPIO_Init+0x17c>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d10c      	bne.n	800811e <HAL_GPIO_Init+0xde>
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	041b      	lsls	r3, r3, #16
 800810a:	0c1b      	lsrs	r3, r3, #16
 800810c:	d007      	beq.n	800811e <HAL_GPIO_Init+0xde>
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a29      	ldr	r2, [pc, #164]	; (80081b8 <HAL_GPIO_Init+0x178>)
 8008114:	4313      	orrs	r3, r2
 8008116:	4a28      	ldr	r2, [pc, #160]	; (80081b8 <HAL_GPIO_Init+0x178>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d100      	bne.n	800811e <HAL_GPIO_Init+0xde>
 800811c:	e1fd      	b.n	800851a <HAL_GPIO_Init+0x4da>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a27      	ldr	r2, [pc, #156]	; (80081c0 <HAL_GPIO_Init+0x180>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d10c      	bne.n	8008140 <HAL_GPIO_Init+0x100>
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	041b      	lsls	r3, r3, #16
 800812c:	0c1b      	lsrs	r3, r3, #16
 800812e:	d007      	beq.n	8008140 <HAL_GPIO_Init+0x100>
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a20      	ldr	r2, [pc, #128]	; (80081b8 <HAL_GPIO_Init+0x178>)
 8008136:	4313      	orrs	r3, r2
 8008138:	4a1f      	ldr	r2, [pc, #124]	; (80081b8 <HAL_GPIO_Init+0x178>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d100      	bne.n	8008140 <HAL_GPIO_Init+0x100>
 800813e:	e1ec      	b.n	800851a <HAL_GPIO_Init+0x4da>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a20      	ldr	r2, [pc, #128]	; (80081c4 <HAL_GPIO_Init+0x184>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d10c      	bne.n	8008162 <HAL_GPIO_Init+0x122>
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	041b      	lsls	r3, r3, #16
 800814e:	0c1b      	lsrs	r3, r3, #16
 8008150:	d007      	beq.n	8008162 <HAL_GPIO_Init+0x122>
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a18      	ldr	r2, [pc, #96]	; (80081b8 <HAL_GPIO_Init+0x178>)
 8008158:	4313      	orrs	r3, r2
 800815a:	4a17      	ldr	r2, [pc, #92]	; (80081b8 <HAL_GPIO_Init+0x178>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d100      	bne.n	8008162 <HAL_GPIO_Init+0x122>
 8008160:	e1db      	b.n	800851a <HAL_GPIO_Init+0x4da>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a18      	ldr	r2, [pc, #96]	; (80081c8 <HAL_GPIO_Init+0x188>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d10c      	bne.n	8008184 <HAL_GPIO_Init+0x144>
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	041b      	lsls	r3, r3, #16
 8008170:	0c1b      	lsrs	r3, r3, #16
 8008172:	d007      	beq.n	8008184 <HAL_GPIO_Init+0x144>
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a0f      	ldr	r2, [pc, #60]	; (80081b8 <HAL_GPIO_Init+0x178>)
 800817a:	4313      	orrs	r3, r2
 800817c:	4a0e      	ldr	r2, [pc, #56]	; (80081b8 <HAL_GPIO_Init+0x178>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d100      	bne.n	8008184 <HAL_GPIO_Init+0x144>
 8008182:	e1ca      	b.n	800851a <HAL_GPIO_Init+0x4da>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a11      	ldr	r2, [pc, #68]	; (80081cc <HAL_GPIO_Init+0x18c>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d10c      	bne.n	80081a6 <HAL_GPIO_Init+0x166>
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a0f      	ldr	r2, [pc, #60]	; (80081d0 <HAL_GPIO_Init+0x190>)
 8008192:	4013      	ands	r3, r2
 8008194:	d007      	beq.n	80081a6 <HAL_GPIO_Init+0x166>
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a0d      	ldr	r2, [pc, #52]	; (80081d0 <HAL_GPIO_Init+0x190>)
 800819c:	4313      	orrs	r3, r2
 800819e:	4a0c      	ldr	r2, [pc, #48]	; (80081d0 <HAL_GPIO_Init+0x190>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d100      	bne.n	80081a6 <HAL_GPIO_Init+0x166>
 80081a4:	e1b9      	b.n	800851a <HAL_GPIO_Init+0x4da>
 80081a6:	4b03      	ldr	r3, [pc, #12]	; (80081b4 <HAL_GPIO_Init+0x174>)
 80081a8:	21a4      	movs	r1, #164	; 0xa4
 80081aa:	0018      	movs	r0, r3
 80081ac:	f7fd fe27 	bl	8005dfe <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80081b0:	e1b3      	b.n	800851a <HAL_GPIO_Init+0x4da>
 80081b2:	46c0      	nop			; (mov r8, r8)
 80081b4:	0800cbdc 	.word	0x0800cbdc
 80081b8:	0000ffff 	.word	0x0000ffff
 80081bc:	50000400 	.word	0x50000400
 80081c0:	50000800 	.word	0x50000800
 80081c4:	50000c00 	.word	0x50000c00
 80081c8:	50001000 	.word	0x50001000
 80081cc:	50001c00 	.word	0x50001c00
 80081d0:	00000603 	.word	0x00000603
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2101      	movs	r1, #1
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	4091      	lsls	r1, r2
 80081de:	000a      	movs	r2, r1
 80081e0:	4013      	ands	r3, r2
 80081e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d100      	bne.n	80081ec <HAL_GPIO_Init+0x1ac>
 80081ea:	e193      	b.n	8008514 <HAL_GPIO_Init+0x4d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	2203      	movs	r2, #3
 80081f2:	4013      	ands	r3, r2
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d005      	beq.n	8008204 <HAL_GPIO_Init+0x1c4>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	2203      	movs	r2, #3
 80081fe:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008200:	2b02      	cmp	r3, #2
 8008202:	d145      	bne.n	8008290 <HAL_GPIO_Init+0x250>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d010      	beq.n	800822e <HAL_GPIO_Init+0x1ee>
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d00c      	beq.n	800822e <HAL_GPIO_Init+0x1ee>
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	2b02      	cmp	r3, #2
 800821a:	d008      	beq.n	800822e <HAL_GPIO_Init+0x1ee>
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	2b03      	cmp	r3, #3
 8008222:	d004      	beq.n	800822e <HAL_GPIO_Init+0x1ee>
 8008224:	4bc3      	ldr	r3, [pc, #780]	; (8008534 <HAL_GPIO_Init+0x4f4>)
 8008226:	21b4      	movs	r1, #180	; 0xb4
 8008228:	0018      	movs	r0, r3
 800822a:	f7fd fde8 	bl	8005dfe <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	005b      	lsls	r3, r3, #1
 8008238:	2203      	movs	r2, #3
 800823a:	409a      	lsls	r2, r3
 800823c:	0013      	movs	r3, r2
 800823e:	43da      	mvns	r2, r3
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	4013      	ands	r3, r2
 8008244:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	68da      	ldr	r2, [r3, #12]
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	005b      	lsls	r3, r3, #1
 800824e:	409a      	lsls	r2, r3
 8008250:	0013      	movs	r3, r2
 8008252:	693a      	ldr	r2, [r7, #16]
 8008254:	4313      	orrs	r3, r2
 8008256:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008264:	2201      	movs	r2, #1
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	409a      	lsls	r2, r3
 800826a:	0013      	movs	r3, r2
 800826c:	43da      	mvns	r2, r3
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	4013      	ands	r3, r2
 8008272:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	091b      	lsrs	r3, r3, #4
 800827a:	2201      	movs	r2, #1
 800827c:	401a      	ands	r2, r3
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	409a      	lsls	r2, r3
 8008282:	0013      	movs	r3, r2
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	4313      	orrs	r3, r2
 8008288:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	2203      	movs	r2, #3
 8008296:	4013      	ands	r3, r2
 8008298:	2b03      	cmp	r3, #3
 800829a:	d028      	beq.n	80082ee <HAL_GPIO_Init+0x2ae>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00c      	beq.n	80082be <HAL_GPIO_Init+0x27e>
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d008      	beq.n	80082be <HAL_GPIO_Init+0x27e>
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d004      	beq.n	80082be <HAL_GPIO_Init+0x27e>
 80082b4:	4b9f      	ldr	r3, [pc, #636]	; (8008534 <HAL_GPIO_Init+0x4f4>)
 80082b6:	21c5      	movs	r1, #197	; 0xc5
 80082b8:	0018      	movs	r0, r3
 80082ba:	f7fd fda0 	bl	8005dfe <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	005b      	lsls	r3, r3, #1
 80082c8:	2203      	movs	r2, #3
 80082ca:	409a      	lsls	r2, r3
 80082cc:	0013      	movs	r3, r2
 80082ce:	43da      	mvns	r2, r3
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	4013      	ands	r3, r2
 80082d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	689a      	ldr	r2, [r3, #8]
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	005b      	lsls	r3, r3, #1
 80082de:	409a      	lsls	r2, r3
 80082e0:	0013      	movs	r3, r2
 80082e2:	693a      	ldr	r2, [r7, #16]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	693a      	ldr	r2, [r7, #16]
 80082ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	2203      	movs	r2, #3
 80082f4:	4013      	ands	r3, r2
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d14a      	bne.n	8008390 <HAL_GPIO_Init+0x350>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	23a0      	movs	r3, #160	; 0xa0
 80082fe:	05db      	lsls	r3, r3, #23
 8008300:	429a      	cmp	r2, r3
 8008302:	d018      	beq.n	8008336 <HAL_GPIO_Init+0x2f6>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a8c      	ldr	r2, [pc, #560]	; (8008538 <HAL_GPIO_Init+0x4f8>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d014      	beq.n	8008336 <HAL_GPIO_Init+0x2f6>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a8b      	ldr	r2, [pc, #556]	; (800853c <HAL_GPIO_Init+0x4fc>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d010      	beq.n	8008336 <HAL_GPIO_Init+0x2f6>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a8a      	ldr	r2, [pc, #552]	; (8008540 <HAL_GPIO_Init+0x500>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d00c      	beq.n	8008336 <HAL_GPIO_Init+0x2f6>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a89      	ldr	r2, [pc, #548]	; (8008544 <HAL_GPIO_Init+0x504>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d008      	beq.n	8008336 <HAL_GPIO_Init+0x2f6>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a88      	ldr	r2, [pc, #544]	; (8008548 <HAL_GPIO_Init+0x508>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d004      	beq.n	8008336 <HAL_GPIO_Init+0x2f6>
 800832c:	4b81      	ldr	r3, [pc, #516]	; (8008534 <HAL_GPIO_Init+0x4f4>)
 800832e:	21d2      	movs	r1, #210	; 0xd2
 8008330:	0018      	movs	r0, r3
 8008332:	f7fd fd64 	bl	8005dfe <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	2b07      	cmp	r3, #7
 800833c:	d904      	bls.n	8008348 <HAL_GPIO_Init+0x308>
 800833e:	4b7d      	ldr	r3, [pc, #500]	; (8008534 <HAL_GPIO_Init+0x4f4>)
 8008340:	21d3      	movs	r1, #211	; 0xd3
 8008342:	0018      	movs	r0, r3
 8008344:	f7fd fd5b 	bl	8005dfe <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	08da      	lsrs	r2, r3, #3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3208      	adds	r2, #8
 8008350:	0092      	lsls	r2, r2, #2
 8008352:	58d3      	ldr	r3, [r2, r3]
 8008354:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	2207      	movs	r2, #7
 800835a:	4013      	ands	r3, r2
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	220f      	movs	r2, #15
 8008360:	409a      	lsls	r2, r3
 8008362:	0013      	movs	r3, r2
 8008364:	43da      	mvns	r2, r3
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	4013      	ands	r3, r2
 800836a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	691a      	ldr	r2, [r3, #16]
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	2107      	movs	r1, #7
 8008374:	400b      	ands	r3, r1
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	409a      	lsls	r2, r3
 800837a:	0013      	movs	r3, r2
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	4313      	orrs	r3, r2
 8008380:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	08da      	lsrs	r2, r3, #3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	3208      	adds	r2, #8
 800838a:	0092      	lsls	r2, r2, #2
 800838c:	6939      	ldr	r1, [r7, #16]
 800838e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	005b      	lsls	r3, r3, #1
 800839a:	2203      	movs	r2, #3
 800839c:	409a      	lsls	r2, r3
 800839e:	0013      	movs	r3, r2
 80083a0:	43da      	mvns	r2, r3
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	4013      	ands	r3, r2
 80083a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	2203      	movs	r2, #3
 80083ae:	401a      	ands	r2, r3
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	005b      	lsls	r3, r3, #1
 80083b4:	409a      	lsls	r2, r3
 80083b6:	0013      	movs	r3, r2
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	685a      	ldr	r2, [r3, #4]
 80083c8:	23c0      	movs	r3, #192	; 0xc0
 80083ca:	029b      	lsls	r3, r3, #10
 80083cc:	4013      	ands	r3, r2
 80083ce:	d100      	bne.n	80083d2 <HAL_GPIO_Init+0x392>
 80083d0:	e0a0      	b.n	8008514 <HAL_GPIO_Init+0x4d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083d2:	4b5e      	ldr	r3, [pc, #376]	; (800854c <HAL_GPIO_Init+0x50c>)
 80083d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083d6:	4b5d      	ldr	r3, [pc, #372]	; (800854c <HAL_GPIO_Init+0x50c>)
 80083d8:	2101      	movs	r1, #1
 80083da:	430a      	orrs	r2, r1
 80083dc:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80083de:	4a5c      	ldr	r2, [pc, #368]	; (8008550 <HAL_GPIO_Init+0x510>)
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	089b      	lsrs	r3, r3, #2
 80083e4:	3302      	adds	r3, #2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	589b      	ldr	r3, [r3, r2]
 80083ea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	2203      	movs	r2, #3
 80083f0:	4013      	ands	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	220f      	movs	r2, #15
 80083f6:	409a      	lsls	r2, r3
 80083f8:	0013      	movs	r3, r2
 80083fa:	43da      	mvns	r2, r3
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	4013      	ands	r3, r2
 8008400:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	23a0      	movs	r3, #160	; 0xa0
 8008406:	05db      	lsls	r3, r3, #23
 8008408:	429a      	cmp	r2, r3
 800840a:	d01f      	beq.n	800844c <HAL_GPIO_Init+0x40c>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a4a      	ldr	r2, [pc, #296]	; (8008538 <HAL_GPIO_Init+0x4f8>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d019      	beq.n	8008448 <HAL_GPIO_Init+0x408>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a49      	ldr	r2, [pc, #292]	; (800853c <HAL_GPIO_Init+0x4fc>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d013      	beq.n	8008444 <HAL_GPIO_Init+0x404>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a48      	ldr	r2, [pc, #288]	; (8008540 <HAL_GPIO_Init+0x500>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d00d      	beq.n	8008440 <HAL_GPIO_Init+0x400>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a47      	ldr	r2, [pc, #284]	; (8008544 <HAL_GPIO_Init+0x504>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d007      	beq.n	800843c <HAL_GPIO_Init+0x3fc>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a46      	ldr	r2, [pc, #280]	; (8008548 <HAL_GPIO_Init+0x508>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d101      	bne.n	8008438 <HAL_GPIO_Init+0x3f8>
 8008434:	2305      	movs	r3, #5
 8008436:	e00a      	b.n	800844e <HAL_GPIO_Init+0x40e>
 8008438:	2306      	movs	r3, #6
 800843a:	e008      	b.n	800844e <HAL_GPIO_Init+0x40e>
 800843c:	2304      	movs	r3, #4
 800843e:	e006      	b.n	800844e <HAL_GPIO_Init+0x40e>
 8008440:	2303      	movs	r3, #3
 8008442:	e004      	b.n	800844e <HAL_GPIO_Init+0x40e>
 8008444:	2302      	movs	r3, #2
 8008446:	e002      	b.n	800844e <HAL_GPIO_Init+0x40e>
 8008448:	2301      	movs	r3, #1
 800844a:	e000      	b.n	800844e <HAL_GPIO_Init+0x40e>
 800844c:	2300      	movs	r3, #0
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	2103      	movs	r1, #3
 8008452:	400a      	ands	r2, r1
 8008454:	0092      	lsls	r2, r2, #2
 8008456:	4093      	lsls	r3, r2
 8008458:	693a      	ldr	r2, [r7, #16]
 800845a:	4313      	orrs	r3, r2
 800845c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800845e:	493c      	ldr	r1, [pc, #240]	; (8008550 <HAL_GPIO_Init+0x510>)
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	089b      	lsrs	r3, r3, #2
 8008464:	3302      	adds	r3, #2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800846c:	4b39      	ldr	r3, [pc, #228]	; (8008554 <HAL_GPIO_Init+0x514>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	43da      	mvns	r2, r3
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	4013      	ands	r3, r2
 800847a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	685a      	ldr	r2, [r3, #4]
 8008480:	2380      	movs	r3, #128	; 0x80
 8008482:	025b      	lsls	r3, r3, #9
 8008484:	4013      	ands	r3, r2
 8008486:	d003      	beq.n	8008490 <HAL_GPIO_Init+0x450>
        {
          temp |= iocurrent;
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	4313      	orrs	r3, r2
 800848e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8008490:	4b30      	ldr	r3, [pc, #192]	; (8008554 <HAL_GPIO_Init+0x514>)
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8008496:	4b2f      	ldr	r3, [pc, #188]	; (8008554 <HAL_GPIO_Init+0x514>)
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	43da      	mvns	r2, r3
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	4013      	ands	r3, r2
 80084a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	685a      	ldr	r2, [r3, #4]
 80084aa:	2380      	movs	r3, #128	; 0x80
 80084ac:	029b      	lsls	r3, r3, #10
 80084ae:	4013      	ands	r3, r2
 80084b0:	d003      	beq.n	80084ba <HAL_GPIO_Init+0x47a>
        {
          temp |= iocurrent;
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80084ba:	4b26      	ldr	r3, [pc, #152]	; (8008554 <HAL_GPIO_Init+0x514>)
 80084bc:	693a      	ldr	r2, [r7, #16]
 80084be:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80084c0:	4b24      	ldr	r3, [pc, #144]	; (8008554 <HAL_GPIO_Init+0x514>)
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	43da      	mvns	r2, r3
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	4013      	ands	r3, r2
 80084ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	685a      	ldr	r2, [r3, #4]
 80084d4:	2380      	movs	r3, #128	; 0x80
 80084d6:	035b      	lsls	r3, r3, #13
 80084d8:	4013      	ands	r3, r2
 80084da:	d003      	beq.n	80084e4 <HAL_GPIO_Init+0x4a4>
        {
          temp |= iocurrent;
 80084dc:	693a      	ldr	r2, [r7, #16]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80084e4:	4b1b      	ldr	r3, [pc, #108]	; (8008554 <HAL_GPIO_Init+0x514>)
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80084ea:	4b1a      	ldr	r3, [pc, #104]	; (8008554 <HAL_GPIO_Init+0x514>)
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	43da      	mvns	r2, r3
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	4013      	ands	r3, r2
 80084f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	685a      	ldr	r2, [r3, #4]
 80084fe:	2380      	movs	r3, #128	; 0x80
 8008500:	039b      	lsls	r3, r3, #14
 8008502:	4013      	ands	r3, r2
 8008504:	d003      	beq.n	800850e <HAL_GPIO_Init+0x4ce>
        {
          temp |= iocurrent;
 8008506:	693a      	ldr	r2, [r7, #16]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	4313      	orrs	r3, r2
 800850c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800850e:	4b11      	ldr	r3, [pc, #68]	; (8008554 <HAL_GPIO_Init+0x514>)
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	3301      	adds	r3, #1
 8008518:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	40da      	lsrs	r2, r3
 8008522:	1e13      	subs	r3, r2, #0
 8008524:	d000      	beq.n	8008528 <HAL_GPIO_Init+0x4e8>
 8008526:	e655      	b.n	80081d4 <HAL_GPIO_Init+0x194>
  }
}
 8008528:	46c0      	nop			; (mov r8, r8)
 800852a:	46c0      	nop			; (mov r8, r8)
 800852c:	46bd      	mov	sp, r7
 800852e:	b006      	add	sp, #24
 8008530:	bd80      	pop	{r7, pc}
 8008532:	46c0      	nop			; (mov r8, r8)
 8008534:	0800cbdc 	.word	0x0800cbdc
 8008538:	50000400 	.word	0x50000400
 800853c:	50000800 	.word	0x50000800
 8008540:	50000c00 	.word	0x50000c00
 8008544:	50001000 	.word	0x50001000
 8008548:	50001c00 	.word	0x50001c00
 800854c:	40021000 	.word	0x40021000
 8008550:	40010000 	.word	0x40010000
 8008554:	40010400 	.word	0x40010400

08008558 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	0008      	movs	r0, r1
 8008562:	0011      	movs	r1, r2
 8008564:	1cbb      	adds	r3, r7, #2
 8008566:	1c02      	adds	r2, r0, #0
 8008568:	801a      	strh	r2, [r3, #0]
 800856a:	1c7b      	adds	r3, r7, #1
 800856c:	1c0a      	adds	r2, r1, #0
 800856e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	23a0      	movs	r3, #160	; 0xa0
 8008574:	05db      	lsls	r3, r3, #23
 8008576:	429a      	cmp	r2, r3
 8008578:	d103      	bne.n	8008582 <HAL_GPIO_WritePin+0x2a>
 800857a:	1cbb      	adds	r3, r7, #2
 800857c:	881b      	ldrh	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d137      	bne.n	80085f2 <HAL_GPIO_WritePin+0x9a>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a2b      	ldr	r2, [pc, #172]	; (8008634 <HAL_GPIO_WritePin+0xdc>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d103      	bne.n	8008592 <HAL_GPIO_WritePin+0x3a>
 800858a:	1cbb      	adds	r3, r7, #2
 800858c:	881b      	ldrh	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d12f      	bne.n	80085f2 <HAL_GPIO_WritePin+0x9a>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a28      	ldr	r2, [pc, #160]	; (8008638 <HAL_GPIO_WritePin+0xe0>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d103      	bne.n	80085a2 <HAL_GPIO_WritePin+0x4a>
 800859a:	1cbb      	adds	r3, r7, #2
 800859c:	881b      	ldrh	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d127      	bne.n	80085f2 <HAL_GPIO_WritePin+0x9a>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a25      	ldr	r2, [pc, #148]	; (800863c <HAL_GPIO_WritePin+0xe4>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d103      	bne.n	80085b2 <HAL_GPIO_WritePin+0x5a>
 80085aa:	1cbb      	adds	r3, r7, #2
 80085ac:	881b      	ldrh	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d11f      	bne.n	80085f2 <HAL_GPIO_WritePin+0x9a>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a22      	ldr	r2, [pc, #136]	; (8008640 <HAL_GPIO_WritePin+0xe8>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d103      	bne.n	80085c2 <HAL_GPIO_WritePin+0x6a>
 80085ba:	1cbb      	adds	r3, r7, #2
 80085bc:	881b      	ldrh	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d117      	bne.n	80085f2 <HAL_GPIO_WritePin+0x9a>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a1f      	ldr	r2, [pc, #124]	; (8008644 <HAL_GPIO_WritePin+0xec>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d10c      	bne.n	80085e4 <HAL_GPIO_WritePin+0x8c>
 80085ca:	1cbb      	adds	r3, r7, #2
 80085cc:	881b      	ldrh	r3, [r3, #0]
 80085ce:	4a1e      	ldr	r2, [pc, #120]	; (8008648 <HAL_GPIO_WritePin+0xf0>)
 80085d0:	4013      	ands	r3, r2
 80085d2:	d007      	beq.n	80085e4 <HAL_GPIO_WritePin+0x8c>
 80085d4:	1cbb      	adds	r3, r7, #2
 80085d6:	881b      	ldrh	r3, [r3, #0]
 80085d8:	4a1b      	ldr	r2, [pc, #108]	; (8008648 <HAL_GPIO_WritePin+0xf0>)
 80085da:	4313      	orrs	r3, r2
 80085dc:	b29b      	uxth	r3, r3
 80085de:	4a1a      	ldr	r2, [pc, #104]	; (8008648 <HAL_GPIO_WritePin+0xf0>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d006      	beq.n	80085f2 <HAL_GPIO_WritePin+0x9a>
 80085e4:	23cb      	movs	r3, #203	; 0xcb
 80085e6:	005a      	lsls	r2, r3, #1
 80085e8:	4b18      	ldr	r3, [pc, #96]	; (800864c <HAL_GPIO_WritePin+0xf4>)
 80085ea:	0011      	movs	r1, r2
 80085ec:	0018      	movs	r0, r3
 80085ee:	f7fd fc06 	bl	8005dfe <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80085f2:	1c7b      	adds	r3, r7, #1
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00b      	beq.n	8008612 <HAL_GPIO_WritePin+0xba>
 80085fa:	1c7b      	adds	r3, r7, #1
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d007      	beq.n	8008612 <HAL_GPIO_WritePin+0xba>
 8008602:	2398      	movs	r3, #152	; 0x98
 8008604:	33ff      	adds	r3, #255	; 0xff
 8008606:	001a      	movs	r2, r3
 8008608:	4b10      	ldr	r3, [pc, #64]	; (800864c <HAL_GPIO_WritePin+0xf4>)
 800860a:	0011      	movs	r1, r2
 800860c:	0018      	movs	r0, r3
 800860e:	f7fd fbf6 	bl	8005dfe <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8008612:	1c7b      	adds	r3, r7, #1
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d004      	beq.n	8008624 <HAL_GPIO_WritePin+0xcc>
  {
    GPIOx->BSRR = GPIO_Pin;
 800861a:	1cbb      	adds	r3, r7, #2
 800861c:	881a      	ldrh	r2, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8008622:	e003      	b.n	800862c <HAL_GPIO_WritePin+0xd4>
    GPIOx->BRR = GPIO_Pin ;
 8008624:	1cbb      	adds	r3, r7, #2
 8008626:	881a      	ldrh	r2, [r3, #0]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800862c:	46c0      	nop			; (mov r8, r8)
 800862e:	46bd      	mov	sp, r7
 8008630:	b002      	add	sp, #8
 8008632:	bd80      	pop	{r7, pc}
 8008634:	50000400 	.word	0x50000400
 8008638:	50000800 	.word	0x50000800
 800863c:	50000c00 	.word	0x50000c00
 8008640:	50001000 	.word	0x50001000
 8008644:	50001c00 	.word	0x50001c00
 8008648:	00000603 	.word	0x00000603
 800864c:	0800cbdc 	.word	0x0800cbdc

08008650 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	0002      	movs	r2, r0
 8008658:	1dbb      	adds	r3, r7, #6
 800865a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800865c:	4b09      	ldr	r3, [pc, #36]	; (8008684 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	1dba      	adds	r2, r7, #6
 8008662:	8812      	ldrh	r2, [r2, #0]
 8008664:	4013      	ands	r3, r2
 8008666:	d008      	beq.n	800867a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008668:	4b06      	ldr	r3, [pc, #24]	; (8008684 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800866a:	1dba      	adds	r2, r7, #6
 800866c:	8812      	ldrh	r2, [r2, #0]
 800866e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008670:	1dbb      	adds	r3, r7, #6
 8008672:	881b      	ldrh	r3, [r3, #0]
 8008674:	0018      	movs	r0, r3
 8008676:	f7f9 f9b1 	bl	80019dc <HAL_GPIO_EXTI_Callback>
  }
}
 800867a:	46c0      	nop			; (mov r8, r8)
 800867c:	46bd      	mov	sp, r7
 800867e:	b002      	add	sp, #8
 8008680:	bd80      	pop	{r7, pc}
 8008682:	46c0      	nop			; (mov r8, r8)
 8008684:	40010400 	.word	0x40010400

08008688 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008688:	b5b0      	push	{r4, r5, r7, lr}
 800868a:	b08a      	sub	sp, #40	; 0x28
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d102      	bne.n	800869c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	f000 fd81 	bl	800919e <HAL_RCC_OscConfig+0xb16>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d024      	beq.n	80086ee <HAL_RCC_OscConfig+0x66>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2201      	movs	r2, #1
 80086aa:	4013      	ands	r3, r2
 80086ac:	d11f      	bne.n	80086ee <HAL_RCC_OscConfig+0x66>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2202      	movs	r2, #2
 80086b4:	4013      	ands	r3, r2
 80086b6:	d11a      	bne.n	80086ee <HAL_RCC_OscConfig+0x66>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2220      	movs	r2, #32
 80086be:	4013      	ands	r3, r2
 80086c0:	d115      	bne.n	80086ee <HAL_RCC_OscConfig+0x66>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2208      	movs	r2, #8
 80086c8:	4013      	ands	r3, r2
 80086ca:	d110      	bne.n	80086ee <HAL_RCC_OscConfig+0x66>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2204      	movs	r2, #4
 80086d2:	4013      	ands	r3, r2
 80086d4:	d10b      	bne.n	80086ee <HAL_RCC_OscConfig+0x66>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2210      	movs	r2, #16
 80086dc:	4013      	ands	r3, r2
 80086de:	d106      	bne.n	80086ee <HAL_RCC_OscConfig+0x66>
 80086e0:	23b0      	movs	r3, #176	; 0xb0
 80086e2:	005a      	lsls	r2, r3, #1
 80086e4:	4bc9      	ldr	r3, [pc, #804]	; (8008a0c <HAL_RCC_OscConfig+0x384>)
 80086e6:	0011      	movs	r1, r2
 80086e8:	0018      	movs	r0, r3
 80086ea:	f7fd fb88 	bl	8005dfe <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086ee:	4bc8      	ldr	r3, [pc, #800]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	220c      	movs	r2, #12
 80086f4:	4013      	ands	r3, r2
 80086f6:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80086f8:	4bc5      	ldr	r3, [pc, #788]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 80086fa:	68da      	ldr	r2, [r3, #12]
 80086fc:	2380      	movs	r3, #128	; 0x80
 80086fe:	025b      	lsls	r3, r3, #9
 8008700:	4013      	ands	r3, r2
 8008702:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2201      	movs	r2, #1
 800870a:	4013      	ands	r3, r2
 800870c:	d100      	bne.n	8008710 <HAL_RCC_OscConfig+0x88>
 800870e:	e097      	b.n	8008840 <HAL_RCC_OscConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d013      	beq.n	8008740 <HAL_RCC_OscConfig+0xb8>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685a      	ldr	r2, [r3, #4]
 800871c:	2380      	movs	r3, #128	; 0x80
 800871e:	025b      	lsls	r3, r3, #9
 8008720:	429a      	cmp	r2, r3
 8008722:	d00d      	beq.n	8008740 <HAL_RCC_OscConfig+0xb8>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685a      	ldr	r2, [r3, #4]
 8008728:	23a0      	movs	r3, #160	; 0xa0
 800872a:	02db      	lsls	r3, r3, #11
 800872c:	429a      	cmp	r2, r3
 800872e:	d007      	beq.n	8008740 <HAL_RCC_OscConfig+0xb8>
 8008730:	236a      	movs	r3, #106	; 0x6a
 8008732:	33ff      	adds	r3, #255	; 0xff
 8008734:	001a      	movs	r2, r3
 8008736:	4bb5      	ldr	r3, [pc, #724]	; (8008a0c <HAL_RCC_OscConfig+0x384>)
 8008738:	0011      	movs	r1, r2
 800873a:	0018      	movs	r0, r3
 800873c:	f7fd fb5f 	bl	8005dfe <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	2b08      	cmp	r3, #8
 8008744:	d007      	beq.n	8008756 <HAL_RCC_OscConfig+0xce>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	2b0c      	cmp	r3, #12
 800874a:	d112      	bne.n	8008772 <HAL_RCC_OscConfig+0xea>
 800874c:	69ba      	ldr	r2, [r7, #24]
 800874e:	2380      	movs	r3, #128	; 0x80
 8008750:	025b      	lsls	r3, r3, #9
 8008752:	429a      	cmp	r2, r3
 8008754:	d10d      	bne.n	8008772 <HAL_RCC_OscConfig+0xea>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008756:	4bae      	ldr	r3, [pc, #696]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	2380      	movs	r3, #128	; 0x80
 800875c:	029b      	lsls	r3, r3, #10
 800875e:	4013      	ands	r3, r2
 8008760:	d100      	bne.n	8008764 <HAL_RCC_OscConfig+0xdc>
 8008762:	e06c      	b.n	800883e <HAL_RCC_OscConfig+0x1b6>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d168      	bne.n	800883e <HAL_RCC_OscConfig+0x1b6>
      {
        return HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	f000 fd16 	bl	800919e <HAL_RCC_OscConfig+0xb16>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	685a      	ldr	r2, [r3, #4]
 8008776:	2380      	movs	r3, #128	; 0x80
 8008778:	025b      	lsls	r3, r3, #9
 800877a:	429a      	cmp	r2, r3
 800877c:	d107      	bne.n	800878e <HAL_RCC_OscConfig+0x106>
 800877e:	4ba4      	ldr	r3, [pc, #656]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	4ba3      	ldr	r3, [pc, #652]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 8008784:	2180      	movs	r1, #128	; 0x80
 8008786:	0249      	lsls	r1, r1, #9
 8008788:	430a      	orrs	r2, r1
 800878a:	601a      	str	r2, [r3, #0]
 800878c:	e027      	b.n	80087de <HAL_RCC_OscConfig+0x156>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	685a      	ldr	r2, [r3, #4]
 8008792:	23a0      	movs	r3, #160	; 0xa0
 8008794:	02db      	lsls	r3, r3, #11
 8008796:	429a      	cmp	r2, r3
 8008798:	d10e      	bne.n	80087b8 <HAL_RCC_OscConfig+0x130>
 800879a:	4b9d      	ldr	r3, [pc, #628]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	4b9c      	ldr	r3, [pc, #624]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 80087a0:	2180      	movs	r1, #128	; 0x80
 80087a2:	02c9      	lsls	r1, r1, #11
 80087a4:	430a      	orrs	r2, r1
 80087a6:	601a      	str	r2, [r3, #0]
 80087a8:	4b99      	ldr	r3, [pc, #612]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	4b98      	ldr	r3, [pc, #608]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 80087ae:	2180      	movs	r1, #128	; 0x80
 80087b0:	0249      	lsls	r1, r1, #9
 80087b2:	430a      	orrs	r2, r1
 80087b4:	601a      	str	r2, [r3, #0]
 80087b6:	e012      	b.n	80087de <HAL_RCC_OscConfig+0x156>
 80087b8:	4b95      	ldr	r3, [pc, #596]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	4b94      	ldr	r3, [pc, #592]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 80087be:	4995      	ldr	r1, [pc, #596]	; (8008a14 <HAL_RCC_OscConfig+0x38c>)
 80087c0:	400a      	ands	r2, r1
 80087c2:	601a      	str	r2, [r3, #0]
 80087c4:	4b92      	ldr	r3, [pc, #584]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	2380      	movs	r3, #128	; 0x80
 80087ca:	025b      	lsls	r3, r3, #9
 80087cc:	4013      	ands	r3, r2
 80087ce:	60fb      	str	r3, [r7, #12]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	4b8f      	ldr	r3, [pc, #572]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	4b8e      	ldr	r3, [pc, #568]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 80087d8:	498f      	ldr	r1, [pc, #572]	; (8008a18 <HAL_RCC_OscConfig+0x390>)
 80087da:	400a      	ands	r2, r1
 80087dc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d015      	beq.n	8008812 <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087e6:	f7fe fdf9 	bl	80073dc <HAL_GetTick>
 80087ea:	0003      	movs	r3, r0
 80087ec:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80087ee:	e009      	b.n	8008804 <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087f0:	f7fe fdf4 	bl	80073dc <HAL_GetTick>
 80087f4:	0002      	movs	r2, r0
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	2b64      	cmp	r3, #100	; 0x64
 80087fc:	d902      	bls.n	8008804 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	f000 fccd 	bl	800919e <HAL_RCC_OscConfig+0xb16>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008804:	4b82      	ldr	r3, [pc, #520]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	2380      	movs	r3, #128	; 0x80
 800880a:	029b      	lsls	r3, r3, #10
 800880c:	4013      	ands	r3, r2
 800880e:	d0ef      	beq.n	80087f0 <HAL_RCC_OscConfig+0x168>
 8008810:	e016      	b.n	8008840 <HAL_RCC_OscConfig+0x1b8>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008812:	f7fe fde3 	bl	80073dc <HAL_GetTick>
 8008816:	0003      	movs	r3, r0
 8008818:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800881a:	e009      	b.n	8008830 <HAL_RCC_OscConfig+0x1a8>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800881c:	f7fe fdde 	bl	80073dc <HAL_GetTick>
 8008820:	0002      	movs	r2, r0
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	2b64      	cmp	r3, #100	; 0x64
 8008828:	d902      	bls.n	8008830 <HAL_RCC_OscConfig+0x1a8>
          {
            return HAL_TIMEOUT;
 800882a:	2303      	movs	r3, #3
 800882c:	f000 fcb7 	bl	800919e <HAL_RCC_OscConfig+0xb16>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008830:	4b77      	ldr	r3, [pc, #476]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	2380      	movs	r3, #128	; 0x80
 8008836:	029b      	lsls	r3, r3, #10
 8008838:	4013      	ands	r3, r2
 800883a:	d1ef      	bne.n	800881c <HAL_RCC_OscConfig+0x194>
 800883c:	e000      	b.n	8008840 <HAL_RCC_OscConfig+0x1b8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800883e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2202      	movs	r2, #2
 8008846:	4013      	ands	r3, r2
 8008848:	d100      	bne.n	800884c <HAL_RCC_OscConfig+0x1c4>
 800884a:	e0c8      	b.n	80089de <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d01a      	beq.n	800888a <HAL_RCC_OscConfig+0x202>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d016      	beq.n	800888a <HAL_RCC_OscConfig+0x202>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	2b09      	cmp	r3, #9
 8008862:	d012      	beq.n	800888a <HAL_RCC_OscConfig+0x202>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	2b20      	cmp	r3, #32
 800886a:	d00e      	beq.n	800888a <HAL_RCC_OscConfig+0x202>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	2b21      	cmp	r3, #33	; 0x21
 8008872:	d00a      	beq.n	800888a <HAL_RCC_OscConfig+0x202>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	2b29      	cmp	r3, #41	; 0x29
 800887a:	d006      	beq.n	800888a <HAL_RCC_OscConfig+0x202>
 800887c:	23ce      	movs	r3, #206	; 0xce
 800887e:	005a      	lsls	r2, r3, #1
 8008880:	4b62      	ldr	r3, [pc, #392]	; (8008a0c <HAL_RCC_OscConfig+0x384>)
 8008882:	0011      	movs	r1, r2
 8008884:	0018      	movs	r0, r3
 8008886:	f7fd faba 	bl	8005dfe <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	2b1f      	cmp	r3, #31
 8008890:	d907      	bls.n	80088a2 <HAL_RCC_OscConfig+0x21a>
 8008892:	239e      	movs	r3, #158	; 0x9e
 8008894:	33ff      	adds	r3, #255	; 0xff
 8008896:	001a      	movs	r2, r3
 8008898:	4b5c      	ldr	r3, [pc, #368]	; (8008a0c <HAL_RCC_OscConfig+0x384>)
 800889a:	0011      	movs	r1, r2
 800889c:	0018      	movs	r0, r3
 800889e:	f7fd faae 	bl	8005dfe <assert_failed>

    hsi_state = RCC_OscInitStruct->HSIState;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80088a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088aa:	2220      	movs	r2, #32
 80088ac:	4013      	ands	r3, r2
 80088ae:	d009      	beq.n	80088c4 <HAL_RCC_OscConfig+0x23c>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80088b0:	4b57      	ldr	r3, [pc, #348]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	4b56      	ldr	r3, [pc, #344]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 80088b6:	2120      	movs	r1, #32
 80088b8:	430a      	orrs	r2, r1
 80088ba:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80088bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088be:	2220      	movs	r2, #32
 80088c0:	4393      	bics	r3, r2
 80088c2:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	2b04      	cmp	r3, #4
 80088c8:	d005      	beq.n	80088d6 <HAL_RCC_OscConfig+0x24e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	2b0c      	cmp	r3, #12
 80088ce:	d140      	bne.n	8008952 <HAL_RCC_OscConfig+0x2ca>
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d13d      	bne.n	8008952 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80088d6:	4b4e      	ldr	r3, [pc, #312]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2204      	movs	r2, #4
 80088dc:	4013      	ands	r3, r2
 80088de:	d005      	beq.n	80088ec <HAL_RCC_OscConfig+0x264>
 80088e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d102      	bne.n	80088ec <HAL_RCC_OscConfig+0x264>
      {
        return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	f000 fc59 	bl	800919e <HAL_RCC_OscConfig+0xb16>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088ec:	4b48      	ldr	r3, [pc, #288]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	4a4a      	ldr	r2, [pc, #296]	; (8008a1c <HAL_RCC_OscConfig+0x394>)
 80088f2:	4013      	ands	r3, r2
 80088f4:	0019      	movs	r1, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	021a      	lsls	r2, r3, #8
 80088fc:	4b44      	ldr	r3, [pc, #272]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 80088fe:	430a      	orrs	r2, r1
 8008900:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008902:	4b43      	ldr	r3, [pc, #268]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2209      	movs	r2, #9
 8008908:	4393      	bics	r3, r2
 800890a:	0019      	movs	r1, r3
 800890c:	4b40      	ldr	r3, [pc, #256]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 800890e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008910:	430a      	orrs	r2, r1
 8008912:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008914:	f000 fe4e 	bl	80095b4 <HAL_RCC_GetSysClockFreq>
 8008918:	0001      	movs	r1, r0
 800891a:	4b3d      	ldr	r3, [pc, #244]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	091b      	lsrs	r3, r3, #4
 8008920:	220f      	movs	r2, #15
 8008922:	4013      	ands	r3, r2
 8008924:	4a3e      	ldr	r2, [pc, #248]	; (8008a20 <HAL_RCC_OscConfig+0x398>)
 8008926:	5cd3      	ldrb	r3, [r2, r3]
 8008928:	000a      	movs	r2, r1
 800892a:	40da      	lsrs	r2, r3
 800892c:	4b3d      	ldr	r3, [pc, #244]	; (8008a24 <HAL_RCC_OscConfig+0x39c>)
 800892e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8008930:	4b3d      	ldr	r3, [pc, #244]	; (8008a28 <HAL_RCC_OscConfig+0x3a0>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2513      	movs	r5, #19
 8008936:	197c      	adds	r4, r7, r5
 8008938:	0018      	movs	r0, r3
 800893a:	f7fe fd09 	bl	8007350 <HAL_InitTick>
 800893e:	0003      	movs	r3, r0
 8008940:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8008942:	197b      	adds	r3, r7, r5
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d049      	beq.n	80089de <HAL_RCC_OscConfig+0x356>
      {
        return status;
 800894a:	197b      	adds	r3, r7, r5
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	f000 fc26 	bl	800919e <HAL_RCC_OscConfig+0xb16>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8008952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008954:	2b00      	cmp	r3, #0
 8008956:	d028      	beq.n	80089aa <HAL_RCC_OscConfig+0x322>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008958:	4b2d      	ldr	r3, [pc, #180]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2209      	movs	r2, #9
 800895e:	4393      	bics	r3, r2
 8008960:	0019      	movs	r1, r3
 8008962:	4b2b      	ldr	r3, [pc, #172]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 8008964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008966:	430a      	orrs	r2, r1
 8008968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800896a:	f7fe fd37 	bl	80073dc <HAL_GetTick>
 800896e:	0003      	movs	r3, r0
 8008970:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008972:	e009      	b.n	8008988 <HAL_RCC_OscConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008974:	f7fe fd32 	bl	80073dc <HAL_GetTick>
 8008978:	0002      	movs	r2, r0
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	2b02      	cmp	r3, #2
 8008980:	d902      	bls.n	8008988 <HAL_RCC_OscConfig+0x300>
          {
            return HAL_TIMEOUT;
 8008982:	2303      	movs	r3, #3
 8008984:	f000 fc0b 	bl	800919e <HAL_RCC_OscConfig+0xb16>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008988:	4b21      	ldr	r3, [pc, #132]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2204      	movs	r2, #4
 800898e:	4013      	ands	r3, r2
 8008990:	d0f0      	beq.n	8008974 <HAL_RCC_OscConfig+0x2ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008992:	4b1f      	ldr	r3, [pc, #124]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	4a21      	ldr	r2, [pc, #132]	; (8008a1c <HAL_RCC_OscConfig+0x394>)
 8008998:	4013      	ands	r3, r2
 800899a:	0019      	movs	r1, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	021a      	lsls	r2, r3, #8
 80089a2:	4b1b      	ldr	r3, [pc, #108]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 80089a4:	430a      	orrs	r2, r1
 80089a6:	605a      	str	r2, [r3, #4]
 80089a8:	e019      	b.n	80089de <HAL_RCC_OscConfig+0x356>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089aa:	4b19      	ldr	r3, [pc, #100]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	4b18      	ldr	r3, [pc, #96]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 80089b0:	2101      	movs	r1, #1
 80089b2:	438a      	bics	r2, r1
 80089b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089b6:	f7fe fd11 	bl	80073dc <HAL_GetTick>
 80089ba:	0003      	movs	r3, r0
 80089bc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80089be:	e009      	b.n	80089d4 <HAL_RCC_OscConfig+0x34c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089c0:	f7fe fd0c 	bl	80073dc <HAL_GetTick>
 80089c4:	0002      	movs	r2, r0
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d902      	bls.n	80089d4 <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_TIMEOUT;
 80089ce:	2303      	movs	r3, #3
 80089d0:	f000 fbe5 	bl	800919e <HAL_RCC_OscConfig+0xb16>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80089d4:	4b0e      	ldr	r3, [pc, #56]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2204      	movs	r2, #4
 80089da:	4013      	ands	r3, r2
 80089dc:	d1f0      	bne.n	80089c0 <HAL_RCC_OscConfig+0x338>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2210      	movs	r2, #16
 80089e4:	4013      	ands	r3, r2
 80089e6:	d100      	bne.n	80089ea <HAL_RCC_OscConfig+0x362>
 80089e8:	e127      	b.n	8008c3a <HAL_RCC_OscConfig+0x5b2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d000      	beq.n	80089f2 <HAL_RCC_OscConfig+0x36a>
 80089f0:	e08c      	b.n	8008b0c <HAL_RCC_OscConfig+0x484>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80089f2:	4b07      	ldr	r3, [pc, #28]	; (8008a10 <HAL_RCC_OscConfig+0x388>)
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	2380      	movs	r3, #128	; 0x80
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4013      	ands	r3, r2
 80089fc:	d016      	beq.n	8008a2c <HAL_RCC_OscConfig+0x3a4>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	69db      	ldr	r3, [r3, #28]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d112      	bne.n	8008a2c <HAL_RCC_OscConfig+0x3a4>
      {
        return HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	f000 fbc9 	bl	800919e <HAL_RCC_OscConfig+0xb16>
 8008a0c:	0800cc18 	.word	0x0800cc18
 8008a10:	40021000 	.word	0x40021000
 8008a14:	fffeffff 	.word	0xfffeffff
 8008a18:	fffbffff 	.word	0xfffbffff
 8008a1c:	ffffe0ff 	.word	0xffffe0ff
 8008a20:	0800e06c 	.word	0x0800e06c
 8008a24:	2000004c 	.word	0x2000004c
 8008a28:	20000050 	.word	0x20000050
      }
      /* Otherwise, just the calibration and MSI range change are allowed */
      else
      {
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a1b      	ldr	r3, [r3, #32]
 8008a30:	2bff      	cmp	r3, #255	; 0xff
 8008a32:	d906      	bls.n	8008a42 <HAL_RCC_OscConfig+0x3ba>
 8008a34:	2380      	movs	r3, #128	; 0x80
 8008a36:	009a      	lsls	r2, r3, #2
 8008a38:	4bcb      	ldr	r3, [pc, #812]	; (8008d68 <HAL_RCC_OscConfig+0x6e0>)
 8008a3a:	0011      	movs	r1, r2
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	f7fd f9de 	bl	8005dfe <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d029      	beq.n	8008a9e <HAL_RCC_OscConfig+0x416>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a4e:	2380      	movs	r3, #128	; 0x80
 8008a50:	019b      	lsls	r3, r3, #6
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d023      	beq.n	8008a9e <HAL_RCC_OscConfig+0x416>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a5a:	2380      	movs	r3, #128	; 0x80
 8008a5c:	01db      	lsls	r3, r3, #7
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d01d      	beq.n	8008a9e <HAL_RCC_OscConfig+0x416>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a66:	23c0      	movs	r3, #192	; 0xc0
 8008a68:	01db      	lsls	r3, r3, #7
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d017      	beq.n	8008a9e <HAL_RCC_OscConfig+0x416>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a72:	2380      	movs	r3, #128	; 0x80
 8008a74:	021b      	lsls	r3, r3, #8
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d011      	beq.n	8008a9e <HAL_RCC_OscConfig+0x416>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a7e:	23a0      	movs	r3, #160	; 0xa0
 8008a80:	021b      	lsls	r3, r3, #8
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d00b      	beq.n	8008a9e <HAL_RCC_OscConfig+0x416>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a8a:	23c0      	movs	r3, #192	; 0xc0
 8008a8c:	021b      	lsls	r3, r3, #8
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d005      	beq.n	8008a9e <HAL_RCC_OscConfig+0x416>
 8008a92:	4ab6      	ldr	r2, [pc, #728]	; (8008d6c <HAL_RCC_OscConfig+0x6e4>)
 8008a94:	4bb4      	ldr	r3, [pc, #720]	; (8008d68 <HAL_RCC_OscConfig+0x6e0>)
 8008a96:	0011      	movs	r1, r2
 8008a98:	0018      	movs	r0, r3
 8008a9a:	f7fd f9b0 	bl	8005dfe <assert_failed>

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008a9e:	4bb4      	ldr	r3, [pc, #720]	; (8008d70 <HAL_RCC_OscConfig+0x6e8>)
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	4ab4      	ldr	r2, [pc, #720]	; (8008d74 <HAL_RCC_OscConfig+0x6ec>)
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	0019      	movs	r1, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008aac:	4bb0      	ldr	r3, [pc, #704]	; (8008d70 <HAL_RCC_OscConfig+0x6e8>)
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008ab2:	4baf      	ldr	r3, [pc, #700]	; (8008d70 <HAL_RCC_OscConfig+0x6e8>)
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	021b      	lsls	r3, r3, #8
 8008ab8:	0a19      	lsrs	r1, r3, #8
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a1b      	ldr	r3, [r3, #32]
 8008abe:	061a      	lsls	r2, r3, #24
 8008ac0:	4bab      	ldr	r3, [pc, #684]	; (8008d70 <HAL_RCC_OscConfig+0x6e8>)
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aca:	0b5b      	lsrs	r3, r3, #13
 8008acc:	3301      	adds	r3, #1
 8008ace:	2280      	movs	r2, #128	; 0x80
 8008ad0:	0212      	lsls	r2, r2, #8
 8008ad2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8008ad4:	4ba6      	ldr	r3, [pc, #664]	; (8008d70 <HAL_RCC_OscConfig+0x6e8>)
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	091b      	lsrs	r3, r3, #4
 8008ada:	210f      	movs	r1, #15
 8008adc:	400b      	ands	r3, r1
 8008ade:	49a6      	ldr	r1, [pc, #664]	; (8008d78 <HAL_RCC_OscConfig+0x6f0>)
 8008ae0:	5ccb      	ldrb	r3, [r1, r3]
 8008ae2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008ae4:	4ba5      	ldr	r3, [pc, #660]	; (8008d7c <HAL_RCC_OscConfig+0x6f4>)
 8008ae6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8008ae8:	4ba5      	ldr	r3, [pc, #660]	; (8008d80 <HAL_RCC_OscConfig+0x6f8>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2513      	movs	r5, #19
 8008aee:	197c      	adds	r4, r7, r5
 8008af0:	0018      	movs	r0, r3
 8008af2:	f7fe fc2d 	bl	8007350 <HAL_InitTick>
 8008af6:	0003      	movs	r3, r0
 8008af8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8008afa:	197b      	adds	r3, r7, r5
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d100      	bne.n	8008b04 <HAL_RCC_OscConfig+0x47c>
 8008b02:	e09a      	b.n	8008c3a <HAL_RCC_OscConfig+0x5b2>
        {
          return status;
 8008b04:	197b      	adds	r3, r7, r5
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	f000 fb49 	bl	800919e <HAL_RCC_OscConfig+0xb16>
      }
    }
    else
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	69db      	ldr	r3, [r3, #28]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00a      	beq.n	8008b2a <HAL_RCC_OscConfig+0x4a2>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	69db      	ldr	r3, [r3, #28]
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d006      	beq.n	8008b2a <HAL_RCC_OscConfig+0x4a2>
 8008b1c:	2386      	movs	r3, #134	; 0x86
 8008b1e:	009a      	lsls	r2, r3, #2
 8008b20:	4b91      	ldr	r3, [pc, #580]	; (8008d68 <HAL_RCC_OscConfig+0x6e0>)
 8008b22:	0011      	movs	r1, r2
 8008b24:	0018      	movs	r0, r3
 8008b26:	f7fd f96a 	bl	8005dfe <assert_failed>

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	69db      	ldr	r3, [r3, #28]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d100      	bne.n	8008b34 <HAL_RCC_OscConfig+0x4ac>
 8008b32:	e068      	b.n	8008c06 <HAL_RCC_OscConfig+0x57e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008b34:	4b8e      	ldr	r3, [pc, #568]	; (8008d70 <HAL_RCC_OscConfig+0x6e8>)
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	4b8d      	ldr	r3, [pc, #564]	; (8008d70 <HAL_RCC_OscConfig+0x6e8>)
 8008b3a:	2180      	movs	r1, #128	; 0x80
 8008b3c:	0049      	lsls	r1, r1, #1
 8008b3e:	430a      	orrs	r2, r1
 8008b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b42:	f7fe fc4b 	bl	80073dc <HAL_GetTick>
 8008b46:	0003      	movs	r3, r0
 8008b48:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008b4a:	e008      	b.n	8008b5e <HAL_RCC_OscConfig+0x4d6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008b4c:	f7fe fc46 	bl	80073dc <HAL_GetTick>
 8008b50:	0002      	movs	r2, r0
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	1ad3      	subs	r3, r2, r3
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d901      	bls.n	8008b5e <HAL_RCC_OscConfig+0x4d6>
          {
            return HAL_TIMEOUT;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e31f      	b.n	800919e <HAL_RCC_OscConfig+0xb16>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008b5e:	4b84      	ldr	r3, [pc, #528]	; (8008d70 <HAL_RCC_OscConfig+0x6e8>)
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	2380      	movs	r3, #128	; 0x80
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4013      	ands	r3, r2
 8008b68:	d0f0      	beq.n	8008b4c <HAL_RCC_OscConfig+0x4c4>
          }
        }
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a1b      	ldr	r3, [r3, #32]
 8008b6e:	2bff      	cmp	r3, #255	; 0xff
 8008b70:	d906      	bls.n	8008b80 <HAL_RCC_OscConfig+0x4f8>
 8008b72:	238b      	movs	r3, #139	; 0x8b
 8008b74:	009a      	lsls	r2, r3, #2
 8008b76:	4b7c      	ldr	r3, [pc, #496]	; (8008d68 <HAL_RCC_OscConfig+0x6e0>)
 8008b78:	0011      	movs	r1, r2
 8008b7a:	0018      	movs	r0, r3
 8008b7c:	f7fd f93f 	bl	8005dfe <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d029      	beq.n	8008bdc <HAL_RCC_OscConfig+0x554>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b8c:	2380      	movs	r3, #128	; 0x80
 8008b8e:	019b      	lsls	r3, r3, #6
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d023      	beq.n	8008bdc <HAL_RCC_OscConfig+0x554>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b98:	2380      	movs	r3, #128	; 0x80
 8008b9a:	01db      	lsls	r3, r3, #7
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d01d      	beq.n	8008bdc <HAL_RCC_OscConfig+0x554>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ba4:	23c0      	movs	r3, #192	; 0xc0
 8008ba6:	01db      	lsls	r3, r3, #7
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d017      	beq.n	8008bdc <HAL_RCC_OscConfig+0x554>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bb0:	2380      	movs	r3, #128	; 0x80
 8008bb2:	021b      	lsls	r3, r3, #8
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d011      	beq.n	8008bdc <HAL_RCC_OscConfig+0x554>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bbc:	23a0      	movs	r3, #160	; 0xa0
 8008bbe:	021b      	lsls	r3, r3, #8
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d00b      	beq.n	8008bdc <HAL_RCC_OscConfig+0x554>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bc8:	23c0      	movs	r3, #192	; 0xc0
 8008bca:	021b      	lsls	r3, r3, #8
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d005      	beq.n	8008bdc <HAL_RCC_OscConfig+0x554>
 8008bd0:	4a6c      	ldr	r2, [pc, #432]	; (8008d84 <HAL_RCC_OscConfig+0x6fc>)
 8008bd2:	4b65      	ldr	r3, [pc, #404]	; (8008d68 <HAL_RCC_OscConfig+0x6e0>)
 8008bd4:	0011      	movs	r1, r2
 8008bd6:	0018      	movs	r0, r3
 8008bd8:	f7fd f911 	bl	8005dfe <assert_failed>

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008bdc:	4b64      	ldr	r3, [pc, #400]	; (8008d70 <HAL_RCC_OscConfig+0x6e8>)
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	4a64      	ldr	r2, [pc, #400]	; (8008d74 <HAL_RCC_OscConfig+0x6ec>)
 8008be2:	4013      	ands	r3, r2
 8008be4:	0019      	movs	r1, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bea:	4b61      	ldr	r3, [pc, #388]	; (8008d70 <HAL_RCC_OscConfig+0x6e8>)
 8008bec:	430a      	orrs	r2, r1
 8008bee:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008bf0:	4b5f      	ldr	r3, [pc, #380]	; (8008d70 <HAL_RCC_OscConfig+0x6e8>)
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	021b      	lsls	r3, r3, #8
 8008bf6:	0a19      	lsrs	r1, r3, #8
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a1b      	ldr	r3, [r3, #32]
 8008bfc:	061a      	lsls	r2, r3, #24
 8008bfe:	4b5c      	ldr	r3, [pc, #368]	; (8008d70 <HAL_RCC_OscConfig+0x6e8>)
 8008c00:	430a      	orrs	r2, r1
 8008c02:	605a      	str	r2, [r3, #4]
 8008c04:	e019      	b.n	8008c3a <HAL_RCC_OscConfig+0x5b2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008c06:	4b5a      	ldr	r3, [pc, #360]	; (8008d70 <HAL_RCC_OscConfig+0x6e8>)
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	4b59      	ldr	r3, [pc, #356]	; (8008d70 <HAL_RCC_OscConfig+0x6e8>)
 8008c0c:	495e      	ldr	r1, [pc, #376]	; (8008d88 <HAL_RCC_OscConfig+0x700>)
 8008c0e:	400a      	ands	r2, r1
 8008c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c12:	f7fe fbe3 	bl	80073dc <HAL_GetTick>
 8008c16:	0003      	movs	r3, r0
 8008c18:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008c1a:	e008      	b.n	8008c2e <HAL_RCC_OscConfig+0x5a6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008c1c:	f7fe fbde 	bl	80073dc <HAL_GetTick>
 8008c20:	0002      	movs	r2, r0
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	1ad3      	subs	r3, r2, r3
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	d901      	bls.n	8008c2e <HAL_RCC_OscConfig+0x5a6>
          {
            return HAL_TIMEOUT;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	e2b7      	b.n	800919e <HAL_RCC_OscConfig+0xb16>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008c2e:	4b50      	ldr	r3, [pc, #320]	; (8008d70 <HAL_RCC_OscConfig+0x6e8>)
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	2380      	movs	r3, #128	; 0x80
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4013      	ands	r3, r2
 8008c38:	d1f0      	bne.n	8008c1c <HAL_RCC_OscConfig+0x594>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2208      	movs	r2, #8
 8008c40:	4013      	ands	r3, r2
 8008c42:	d044      	beq.n	8008cce <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	695b      	ldr	r3, [r3, #20]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d009      	beq.n	8008c60 <HAL_RCC_OscConfig+0x5d8>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	695b      	ldr	r3, [r3, #20]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d005      	beq.n	8008c60 <HAL_RCC_OscConfig+0x5d8>
 8008c54:	4a4d      	ldr	r2, [pc, #308]	; (8008d8c <HAL_RCC_OscConfig+0x704>)
 8008c56:	4b44      	ldr	r3, [pc, #272]	; (8008d68 <HAL_RCC_OscConfig+0x6e0>)
 8008c58:	0011      	movs	r1, r2
 8008c5a:	0018      	movs	r0, r3
 8008c5c:	f7fd f8cf 	bl	8005dfe <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	695b      	ldr	r3, [r3, #20]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d019      	beq.n	8008c9c <HAL_RCC_OscConfig+0x614>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c68:	4b41      	ldr	r3, [pc, #260]	; (8008d70 <HAL_RCC_OscConfig+0x6e8>)
 8008c6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c6c:	4b40      	ldr	r3, [pc, #256]	; (8008d70 <HAL_RCC_OscConfig+0x6e8>)
 8008c6e:	2101      	movs	r1, #1
 8008c70:	430a      	orrs	r2, r1
 8008c72:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c74:	f7fe fbb2 	bl	80073dc <HAL_GetTick>
 8008c78:	0003      	movs	r3, r0
 8008c7a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008c7c:	e008      	b.n	8008c90 <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c7e:	f7fe fbad 	bl	80073dc <HAL_GetTick>
 8008c82:	0002      	movs	r2, r0
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d901      	bls.n	8008c90 <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	e286      	b.n	800919e <HAL_RCC_OscConfig+0xb16>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008c90:	4b37      	ldr	r3, [pc, #220]	; (8008d70 <HAL_RCC_OscConfig+0x6e8>)
 8008c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c94:	2202      	movs	r2, #2
 8008c96:	4013      	ands	r3, r2
 8008c98:	d0f1      	beq.n	8008c7e <HAL_RCC_OscConfig+0x5f6>
 8008c9a:	e018      	b.n	8008cce <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c9c:	4b34      	ldr	r3, [pc, #208]	; (8008d70 <HAL_RCC_OscConfig+0x6e8>)
 8008c9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ca0:	4b33      	ldr	r3, [pc, #204]	; (8008d70 <HAL_RCC_OscConfig+0x6e8>)
 8008ca2:	2101      	movs	r1, #1
 8008ca4:	438a      	bics	r2, r1
 8008ca6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ca8:	f7fe fb98 	bl	80073dc <HAL_GetTick>
 8008cac:	0003      	movs	r3, r0
 8008cae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008cb0:	e008      	b.n	8008cc4 <HAL_RCC_OscConfig+0x63c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008cb2:	f7fe fb93 	bl	80073dc <HAL_GetTick>
 8008cb6:	0002      	movs	r2, r0
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	d901      	bls.n	8008cc4 <HAL_RCC_OscConfig+0x63c>
        {
          return HAL_TIMEOUT;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	e26c      	b.n	800919e <HAL_RCC_OscConfig+0xb16>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008cc4:	4b2a      	ldr	r3, [pc, #168]	; (8008d70 <HAL_RCC_OscConfig+0x6e8>)
 8008cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc8:	2202      	movs	r2, #2
 8008cca:	4013      	ands	r3, r2
 8008ccc:	d1f1      	bne.n	8008cb2 <HAL_RCC_OscConfig+0x62a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2204      	movs	r2, #4
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	d100      	bne.n	8008cda <HAL_RCC_OscConfig+0x652>
 8008cd8:	e0de      	b.n	8008e98 <HAL_RCC_OscConfig+0x810>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cda:	2323      	movs	r3, #35	; 0x23
 8008cdc:	18fb      	adds	r3, r7, r3
 8008cde:	2200      	movs	r2, #0
 8008ce0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d011      	beq.n	8008d0e <HAL_RCC_OscConfig+0x686>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	689a      	ldr	r2, [r3, #8]
 8008cee:	2380      	movs	r3, #128	; 0x80
 8008cf0:	005b      	lsls	r3, r3, #1
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d00b      	beq.n	8008d0e <HAL_RCC_OscConfig+0x686>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	689a      	ldr	r2, [r3, #8]
 8008cfa:	23a0      	movs	r3, #160	; 0xa0
 8008cfc:	00db      	lsls	r3, r3, #3
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d005      	beq.n	8008d0e <HAL_RCC_OscConfig+0x686>
 8008d02:	4a23      	ldr	r2, [pc, #140]	; (8008d90 <HAL_RCC_OscConfig+0x708>)
 8008d04:	4b18      	ldr	r3, [pc, #96]	; (8008d68 <HAL_RCC_OscConfig+0x6e0>)
 8008d06:	0011      	movs	r1, r2
 8008d08:	0018      	movs	r0, r3
 8008d0a:	f7fd f878 	bl	8005dfe <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d0e:	4b18      	ldr	r3, [pc, #96]	; (8008d70 <HAL_RCC_OscConfig+0x6e8>)
 8008d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d12:	2380      	movs	r3, #128	; 0x80
 8008d14:	055b      	lsls	r3, r3, #21
 8008d16:	4013      	ands	r3, r2
 8008d18:	d10a      	bne.n	8008d30 <HAL_RCC_OscConfig+0x6a8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d1a:	4b15      	ldr	r3, [pc, #84]	; (8008d70 <HAL_RCC_OscConfig+0x6e8>)
 8008d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d1e:	4b14      	ldr	r3, [pc, #80]	; (8008d70 <HAL_RCC_OscConfig+0x6e8>)
 8008d20:	2180      	movs	r1, #128	; 0x80
 8008d22:	0549      	lsls	r1, r1, #21
 8008d24:	430a      	orrs	r2, r1
 8008d26:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8008d28:	2323      	movs	r3, #35	; 0x23
 8008d2a:	18fb      	adds	r3, r7, r3
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d30:	4b18      	ldr	r3, [pc, #96]	; (8008d94 <HAL_RCC_OscConfig+0x70c>)
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	2380      	movs	r3, #128	; 0x80
 8008d36:	005b      	lsls	r3, r3, #1
 8008d38:	4013      	ands	r3, r2
 8008d3a:	d133      	bne.n	8008da4 <HAL_RCC_OscConfig+0x71c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008d3c:	4b15      	ldr	r3, [pc, #84]	; (8008d94 <HAL_RCC_OscConfig+0x70c>)
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	4b14      	ldr	r3, [pc, #80]	; (8008d94 <HAL_RCC_OscConfig+0x70c>)
 8008d42:	2180      	movs	r1, #128	; 0x80
 8008d44:	0049      	lsls	r1, r1, #1
 8008d46:	430a      	orrs	r2, r1
 8008d48:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d4a:	f7fe fb47 	bl	80073dc <HAL_GetTick>
 8008d4e:	0003      	movs	r3, r0
 8008d50:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d52:	e021      	b.n	8008d98 <HAL_RCC_OscConfig+0x710>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d54:	f7fe fb42 	bl	80073dc <HAL_GetTick>
 8008d58:	0002      	movs	r2, r0
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	2b64      	cmp	r3, #100	; 0x64
 8008d60:	d91a      	bls.n	8008d98 <HAL_RCC_OscConfig+0x710>
        {
          return HAL_TIMEOUT;
 8008d62:	2303      	movs	r3, #3
 8008d64:	e21b      	b.n	800919e <HAL_RCC_OscConfig+0xb16>
 8008d66:	46c0      	nop			; (mov r8, r8)
 8008d68:	0800cc18 	.word	0x0800cc18
 8008d6c:	00000201 	.word	0x00000201
 8008d70:	40021000 	.word	0x40021000
 8008d74:	ffff1fff 	.word	0xffff1fff
 8008d78:	0800e06c 	.word	0x0800e06c
 8008d7c:	2000004c 	.word	0x2000004c
 8008d80:	20000050 	.word	0x20000050
 8008d84:	0000022d 	.word	0x0000022d
 8008d88:	fffffeff 	.word	0xfffffeff
 8008d8c:	0000024b 	.word	0x0000024b
 8008d90:	00000277 	.word	0x00000277
 8008d94:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d98:	4bca      	ldr	r3, [pc, #808]	; (80090c4 <HAL_RCC_OscConfig+0xa3c>)
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	2380      	movs	r3, #128	; 0x80
 8008d9e:	005b      	lsls	r3, r3, #1
 8008da0:	4013      	ands	r3, r2
 8008da2:	d0d7      	beq.n	8008d54 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	689a      	ldr	r2, [r3, #8]
 8008da8:	2380      	movs	r3, #128	; 0x80
 8008daa:	005b      	lsls	r3, r3, #1
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d107      	bne.n	8008dc0 <HAL_RCC_OscConfig+0x738>
 8008db0:	4bc5      	ldr	r3, [pc, #788]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8008db2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008db4:	4bc4      	ldr	r3, [pc, #784]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8008db6:	2180      	movs	r1, #128	; 0x80
 8008db8:	0049      	lsls	r1, r1, #1
 8008dba:	430a      	orrs	r2, r1
 8008dbc:	651a      	str	r2, [r3, #80]	; 0x50
 8008dbe:	e031      	b.n	8008e24 <HAL_RCC_OscConfig+0x79c>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10c      	bne.n	8008de2 <HAL_RCC_OscConfig+0x75a>
 8008dc8:	4bbf      	ldr	r3, [pc, #764]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8008dca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008dcc:	4bbe      	ldr	r3, [pc, #760]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8008dce:	49bf      	ldr	r1, [pc, #764]	; (80090cc <HAL_RCC_OscConfig+0xa44>)
 8008dd0:	400a      	ands	r2, r1
 8008dd2:	651a      	str	r2, [r3, #80]	; 0x50
 8008dd4:	4bbc      	ldr	r3, [pc, #752]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8008dd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008dd8:	4bbb      	ldr	r3, [pc, #748]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8008dda:	49bd      	ldr	r1, [pc, #756]	; (80090d0 <HAL_RCC_OscConfig+0xa48>)
 8008ddc:	400a      	ands	r2, r1
 8008dde:	651a      	str	r2, [r3, #80]	; 0x50
 8008de0:	e020      	b.n	8008e24 <HAL_RCC_OscConfig+0x79c>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	689a      	ldr	r2, [r3, #8]
 8008de6:	23a0      	movs	r3, #160	; 0xa0
 8008de8:	00db      	lsls	r3, r3, #3
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d10e      	bne.n	8008e0c <HAL_RCC_OscConfig+0x784>
 8008dee:	4bb6      	ldr	r3, [pc, #728]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8008df0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008df2:	4bb5      	ldr	r3, [pc, #724]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8008df4:	2180      	movs	r1, #128	; 0x80
 8008df6:	00c9      	lsls	r1, r1, #3
 8008df8:	430a      	orrs	r2, r1
 8008dfa:	651a      	str	r2, [r3, #80]	; 0x50
 8008dfc:	4bb2      	ldr	r3, [pc, #712]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8008dfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e00:	4bb1      	ldr	r3, [pc, #708]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8008e02:	2180      	movs	r1, #128	; 0x80
 8008e04:	0049      	lsls	r1, r1, #1
 8008e06:	430a      	orrs	r2, r1
 8008e08:	651a      	str	r2, [r3, #80]	; 0x50
 8008e0a:	e00b      	b.n	8008e24 <HAL_RCC_OscConfig+0x79c>
 8008e0c:	4bae      	ldr	r3, [pc, #696]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8008e0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e10:	4bad      	ldr	r3, [pc, #692]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8008e12:	49ae      	ldr	r1, [pc, #696]	; (80090cc <HAL_RCC_OscConfig+0xa44>)
 8008e14:	400a      	ands	r2, r1
 8008e16:	651a      	str	r2, [r3, #80]	; 0x50
 8008e18:	4bab      	ldr	r3, [pc, #684]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8008e1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e1c:	4baa      	ldr	r3, [pc, #680]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8008e1e:	49ac      	ldr	r1, [pc, #688]	; (80090d0 <HAL_RCC_OscConfig+0xa48>)
 8008e20:	400a      	ands	r2, r1
 8008e22:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d015      	beq.n	8008e58 <HAL_RCC_OscConfig+0x7d0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e2c:	f7fe fad6 	bl	80073dc <HAL_GetTick>
 8008e30:	0003      	movs	r3, r0
 8008e32:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e34:	e009      	b.n	8008e4a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e36:	f7fe fad1 	bl	80073dc <HAL_GetTick>
 8008e3a:	0002      	movs	r2, r0
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	4aa4      	ldr	r2, [pc, #656]	; (80090d4 <HAL_RCC_OscConfig+0xa4c>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d901      	bls.n	8008e4a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8008e46:	2303      	movs	r3, #3
 8008e48:	e1a9      	b.n	800919e <HAL_RCC_OscConfig+0xb16>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e4a:	4b9f      	ldr	r3, [pc, #636]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8008e4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e4e:	2380      	movs	r3, #128	; 0x80
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4013      	ands	r3, r2
 8008e54:	d0ef      	beq.n	8008e36 <HAL_RCC_OscConfig+0x7ae>
 8008e56:	e014      	b.n	8008e82 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e58:	f7fe fac0 	bl	80073dc <HAL_GetTick>
 8008e5c:	0003      	movs	r3, r0
 8008e5e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e60:	e009      	b.n	8008e76 <HAL_RCC_OscConfig+0x7ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e62:	f7fe fabb 	bl	80073dc <HAL_GetTick>
 8008e66:	0002      	movs	r2, r0
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	1ad3      	subs	r3, r2, r3
 8008e6c:	4a99      	ldr	r2, [pc, #612]	; (80090d4 <HAL_RCC_OscConfig+0xa4c>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d901      	bls.n	8008e76 <HAL_RCC_OscConfig+0x7ee>
        {
          return HAL_TIMEOUT;
 8008e72:	2303      	movs	r3, #3
 8008e74:	e193      	b.n	800919e <HAL_RCC_OscConfig+0xb16>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e76:	4b94      	ldr	r3, [pc, #592]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8008e78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e7a:	2380      	movs	r3, #128	; 0x80
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4013      	ands	r3, r2
 8008e80:	d1ef      	bne.n	8008e62 <HAL_RCC_OscConfig+0x7da>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008e82:	2323      	movs	r3, #35	; 0x23
 8008e84:	18fb      	adds	r3, r7, r3
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d105      	bne.n	8008e98 <HAL_RCC_OscConfig+0x810>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e8c:	4b8e      	ldr	r3, [pc, #568]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8008e8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e90:	4b8d      	ldr	r3, [pc, #564]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8008e92:	4991      	ldr	r1, [pc, #580]	; (80090d8 <HAL_RCC_OscConfig+0xa50>)
 8008e94:	400a      	ands	r2, r1
 8008e96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2220      	movs	r2, #32
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	d057      	beq.n	8008f52 <HAL_RCC_OscConfig+0x8ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d009      	beq.n	8008ebe <HAL_RCC_OscConfig+0x836>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d005      	beq.n	8008ebe <HAL_RCC_OscConfig+0x836>
 8008eb2:	4a8a      	ldr	r2, [pc, #552]	; (80090dc <HAL_RCC_OscConfig+0xa54>)
 8008eb4:	4b8a      	ldr	r3, [pc, #552]	; (80090e0 <HAL_RCC_OscConfig+0xa58>)
 8008eb6:	0011      	movs	r1, r2
 8008eb8:	0018      	movs	r0, r3
 8008eba:	f7fc ffa0 	bl	8005dfe <assert_failed>

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	699b      	ldr	r3, [r3, #24]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d026      	beq.n	8008f14 <HAL_RCC_OscConfig+0x88c>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8008ec6:	4b80      	ldr	r3, [pc, #512]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8008ec8:	689a      	ldr	r2, [r3, #8]
 8008eca:	4b7f      	ldr	r3, [pc, #508]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8008ecc:	2101      	movs	r1, #1
 8008ece:	430a      	orrs	r2, r1
 8008ed0:	609a      	str	r2, [r3, #8]
 8008ed2:	4b7d      	ldr	r3, [pc, #500]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8008ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ed6:	4b7c      	ldr	r3, [pc, #496]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8008ed8:	2101      	movs	r1, #1
 8008eda:	430a      	orrs	r2, r1
 8008edc:	635a      	str	r2, [r3, #52]	; 0x34
 8008ede:	4b81      	ldr	r3, [pc, #516]	; (80090e4 <HAL_RCC_OscConfig+0xa5c>)
 8008ee0:	6a1a      	ldr	r2, [r3, #32]
 8008ee2:	4b80      	ldr	r3, [pc, #512]	; (80090e4 <HAL_RCC_OscConfig+0xa5c>)
 8008ee4:	2180      	movs	r1, #128	; 0x80
 8008ee6:	0189      	lsls	r1, r1, #6
 8008ee8:	430a      	orrs	r2, r1
 8008eea:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008eec:	f7fe fa76 	bl	80073dc <HAL_GetTick>
 8008ef0:	0003      	movs	r3, r0
 8008ef2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008ef4:	e008      	b.n	8008f08 <HAL_RCC_OscConfig+0x880>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ef6:	f7fe fa71 	bl	80073dc <HAL_GetTick>
 8008efa:	0002      	movs	r2, r0
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d901      	bls.n	8008f08 <HAL_RCC_OscConfig+0x880>
          {
            return HAL_TIMEOUT;
 8008f04:	2303      	movs	r3, #3
 8008f06:	e14a      	b.n	800919e <HAL_RCC_OscConfig+0xb16>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008f08:	4b6f      	ldr	r3, [pc, #444]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	2202      	movs	r2, #2
 8008f0e:	4013      	ands	r3, r2
 8008f10:	d0f1      	beq.n	8008ef6 <HAL_RCC_OscConfig+0x86e>
 8008f12:	e01e      	b.n	8008f52 <HAL_RCC_OscConfig+0x8ca>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8008f14:	4b6c      	ldr	r3, [pc, #432]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8008f16:	689a      	ldr	r2, [r3, #8]
 8008f18:	4b6b      	ldr	r3, [pc, #428]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8008f1a:	2101      	movs	r1, #1
 8008f1c:	438a      	bics	r2, r1
 8008f1e:	609a      	str	r2, [r3, #8]
 8008f20:	4b70      	ldr	r3, [pc, #448]	; (80090e4 <HAL_RCC_OscConfig+0xa5c>)
 8008f22:	6a1a      	ldr	r2, [r3, #32]
 8008f24:	4b6f      	ldr	r3, [pc, #444]	; (80090e4 <HAL_RCC_OscConfig+0xa5c>)
 8008f26:	4970      	ldr	r1, [pc, #448]	; (80090e8 <HAL_RCC_OscConfig+0xa60>)
 8008f28:	400a      	ands	r2, r1
 8008f2a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f2c:	f7fe fa56 	bl	80073dc <HAL_GetTick>
 8008f30:	0003      	movs	r3, r0
 8008f32:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008f34:	e008      	b.n	8008f48 <HAL_RCC_OscConfig+0x8c0>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008f36:	f7fe fa51 	bl	80073dc <HAL_GetTick>
 8008f3a:	0002      	movs	r2, r0
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	1ad3      	subs	r3, r2, r3
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d901      	bls.n	8008f48 <HAL_RCC_OscConfig+0x8c0>
          {
            return HAL_TIMEOUT;
 8008f44:	2303      	movs	r3, #3
 8008f46:	e12a      	b.n	800919e <HAL_RCC_OscConfig+0xb16>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008f48:	4b5f      	ldr	r3, [pc, #380]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	2202      	movs	r2, #2
 8008f4e:	4013      	ands	r3, r2
 8008f50:	d1f1      	bne.n	8008f36 <HAL_RCC_OscConfig+0x8ae>
  }
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00d      	beq.n	8008f76 <HAL_RCC_OscConfig+0x8ee>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d009      	beq.n	8008f76 <HAL_RCC_OscConfig+0x8ee>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d005      	beq.n	8008f76 <HAL_RCC_OscConfig+0x8ee>
 8008f6a:	4a60      	ldr	r2, [pc, #384]	; (80090ec <HAL_RCC_OscConfig+0xa64>)
 8008f6c:	4b5c      	ldr	r3, [pc, #368]	; (80090e0 <HAL_RCC_OscConfig+0xa58>)
 8008f6e:	0011      	movs	r1, r2
 8008f70:	0018      	movs	r0, r3
 8008f72:	f7fc ff44 	bl	8005dfe <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d100      	bne.n	8008f80 <HAL_RCC_OscConfig+0x8f8>
 8008f7e:	e10d      	b.n	800919c <HAL_RCC_OscConfig+0xb14>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	2b0c      	cmp	r3, #12
 8008f84:	d100      	bne.n	8008f88 <HAL_RCC_OscConfig+0x900>
 8008f86:	e0e6      	b.n	8009156 <HAL_RCC_OscConfig+0xace>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d000      	beq.n	8008f92 <HAL_RCC_OscConfig+0x90a>
 8008f90:	e0c6      	b.n	8009120 <HAL_RCC_OscConfig+0xa98>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00b      	beq.n	8008fb2 <HAL_RCC_OscConfig+0x92a>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f9e:	2380      	movs	r3, #128	; 0x80
 8008fa0:	025b      	lsls	r3, r3, #9
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d005      	beq.n	8008fb2 <HAL_RCC_OscConfig+0x92a>
 8008fa6:	4a52      	ldr	r2, [pc, #328]	; (80090f0 <HAL_RCC_OscConfig+0xa68>)
 8008fa8:	4b4d      	ldr	r3, [pc, #308]	; (80090e0 <HAL_RCC_OscConfig+0xa58>)
 8008faa:	0011      	movs	r1, r2
 8008fac:	0018      	movs	r0, r3
 8008fae:	f7fc ff26 	bl	8005dfe <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d035      	beq.n	8009026 <HAL_RCC_OscConfig+0x99e>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fbe:	2380      	movs	r3, #128	; 0x80
 8008fc0:	02db      	lsls	r3, r3, #11
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d02f      	beq.n	8009026 <HAL_RCC_OscConfig+0x99e>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fca:	2380      	movs	r3, #128	; 0x80
 8008fcc:	031b      	lsls	r3, r3, #12
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d029      	beq.n	8009026 <HAL_RCC_OscConfig+0x99e>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fd6:	23c0      	movs	r3, #192	; 0xc0
 8008fd8:	031b      	lsls	r3, r3, #12
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d023      	beq.n	8009026 <HAL_RCC_OscConfig+0x99e>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fe2:	2380      	movs	r3, #128	; 0x80
 8008fe4:	035b      	lsls	r3, r3, #13
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d01d      	beq.n	8009026 <HAL_RCC_OscConfig+0x99e>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fee:	23a0      	movs	r3, #160	; 0xa0
 8008ff0:	035b      	lsls	r3, r3, #13
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d017      	beq.n	8009026 <HAL_RCC_OscConfig+0x99e>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ffa:	23c0      	movs	r3, #192	; 0xc0
 8008ffc:	035b      	lsls	r3, r3, #13
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d011      	beq.n	8009026 <HAL_RCC_OscConfig+0x99e>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009006:	23e0      	movs	r3, #224	; 0xe0
 8009008:	035b      	lsls	r3, r3, #13
 800900a:	429a      	cmp	r2, r3
 800900c:	d00b      	beq.n	8009026 <HAL_RCC_OscConfig+0x99e>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009012:	2380      	movs	r3, #128	; 0x80
 8009014:	039b      	lsls	r3, r3, #14
 8009016:	429a      	cmp	r2, r3
 8009018:	d005      	beq.n	8009026 <HAL_RCC_OscConfig+0x99e>
 800901a:	4a36      	ldr	r2, [pc, #216]	; (80090f4 <HAL_RCC_OscConfig+0xa6c>)
 800901c:	4b30      	ldr	r3, [pc, #192]	; (80090e0 <HAL_RCC_OscConfig+0xa58>)
 800901e:	0011      	movs	r1, r2
 8009020:	0018      	movs	r0, r3
 8009022:	f7fc feec 	bl	8005dfe <assert_failed>
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800902a:	2380      	movs	r3, #128	; 0x80
 800902c:	03db      	lsls	r3, r3, #15
 800902e:	429a      	cmp	r2, r3
 8009030:	d012      	beq.n	8009058 <HAL_RCC_OscConfig+0x9d0>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009036:	2380      	movs	r3, #128	; 0x80
 8009038:	041b      	lsls	r3, r3, #16
 800903a:	429a      	cmp	r2, r3
 800903c:	d00c      	beq.n	8009058 <HAL_RCC_OscConfig+0x9d0>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009042:	23c0      	movs	r3, #192	; 0xc0
 8009044:	041b      	lsls	r3, r3, #16
 8009046:	429a      	cmp	r2, r3
 8009048:	d006      	beq.n	8009058 <HAL_RCC_OscConfig+0x9d0>
 800904a:	23bd      	movs	r3, #189	; 0xbd
 800904c:	009a      	lsls	r2, r3, #2
 800904e:	4b24      	ldr	r3, [pc, #144]	; (80090e0 <HAL_RCC_OscConfig+0xa58>)
 8009050:	0011      	movs	r1, r2
 8009052:	0018      	movs	r0, r3
 8009054:	f7fc fed3 	bl	8005dfe <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009058:	4b1b      	ldr	r3, [pc, #108]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	4b1a      	ldr	r3, [pc, #104]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 800905e:	4926      	ldr	r1, [pc, #152]	; (80090f8 <HAL_RCC_OscConfig+0xa70>)
 8009060:	400a      	ands	r2, r1
 8009062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009064:	f7fe f9ba 	bl	80073dc <HAL_GetTick>
 8009068:	0003      	movs	r3, r0
 800906a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800906c:	e008      	b.n	8009080 <HAL_RCC_OscConfig+0x9f8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800906e:	f7fe f9b5 	bl	80073dc <HAL_GetTick>
 8009072:	0002      	movs	r2, r0
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	2b02      	cmp	r3, #2
 800907a:	d901      	bls.n	8009080 <HAL_RCC_OscConfig+0x9f8>
          {
            return HAL_TIMEOUT;
 800907c:	2303      	movs	r3, #3
 800907e:	e08e      	b.n	800919e <HAL_RCC_OscConfig+0xb16>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009080:	4b11      	ldr	r3, [pc, #68]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	2380      	movs	r3, #128	; 0x80
 8009086:	049b      	lsls	r3, r3, #18
 8009088:	4013      	ands	r3, r2
 800908a:	d1f0      	bne.n	800906e <HAL_RCC_OscConfig+0x9e6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800908c:	4b0e      	ldr	r3, [pc, #56]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	4a1a      	ldr	r2, [pc, #104]	; (80090fc <HAL_RCC_OscConfig+0xa74>)
 8009092:	4013      	ands	r3, r2
 8009094:	0019      	movs	r1, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800909e:	431a      	orrs	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090a4:	431a      	orrs	r2, r3
 80090a6:	4b08      	ldr	r3, [pc, #32]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 80090a8:	430a      	orrs	r2, r1
 80090aa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80090ac:	4b06      	ldr	r3, [pc, #24]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	4b05      	ldr	r3, [pc, #20]	; (80090c8 <HAL_RCC_OscConfig+0xa40>)
 80090b2:	2180      	movs	r1, #128	; 0x80
 80090b4:	0449      	lsls	r1, r1, #17
 80090b6:	430a      	orrs	r2, r1
 80090b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090ba:	f7fe f98f 	bl	80073dc <HAL_GetTick>
 80090be:	0003      	movs	r3, r0
 80090c0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80090c2:	e026      	b.n	8009112 <HAL_RCC_OscConfig+0xa8a>
 80090c4:	40007000 	.word	0x40007000
 80090c8:	40021000 	.word	0x40021000
 80090cc:	fffffeff 	.word	0xfffffeff
 80090d0:	fffffbff 	.word	0xfffffbff
 80090d4:	00001388 	.word	0x00001388
 80090d8:	efffffff 	.word	0xefffffff
 80090dc:	000002bf 	.word	0x000002bf
 80090e0:	0800cc18 	.word	0x0800cc18
 80090e4:	40010000 	.word	0x40010000
 80090e8:	ffffdfff 	.word	0xffffdfff
 80090ec:	000002e9 	.word	0x000002e9
 80090f0:	000002f2 	.word	0x000002f2
 80090f4:	000002f3 	.word	0x000002f3
 80090f8:	feffffff 	.word	0xfeffffff
 80090fc:	ff02ffff 	.word	0xff02ffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009100:	f7fe f96c 	bl	80073dc <HAL_GetTick>
 8009104:	0002      	movs	r2, r0
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	2b02      	cmp	r3, #2
 800910c:	d901      	bls.n	8009112 <HAL_RCC_OscConfig+0xa8a>
          {
            return HAL_TIMEOUT;
 800910e:	2303      	movs	r3, #3
 8009110:	e045      	b.n	800919e <HAL_RCC_OscConfig+0xb16>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8009112:	4b25      	ldr	r3, [pc, #148]	; (80091a8 <HAL_RCC_OscConfig+0xb20>)
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	2380      	movs	r3, #128	; 0x80
 8009118:	049b      	lsls	r3, r3, #18
 800911a:	4013      	ands	r3, r2
 800911c:	d0f0      	beq.n	8009100 <HAL_RCC_OscConfig+0xa78>
 800911e:	e03d      	b.n	800919c <HAL_RCC_OscConfig+0xb14>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009120:	4b21      	ldr	r3, [pc, #132]	; (80091a8 <HAL_RCC_OscConfig+0xb20>)
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	4b20      	ldr	r3, [pc, #128]	; (80091a8 <HAL_RCC_OscConfig+0xb20>)
 8009126:	4921      	ldr	r1, [pc, #132]	; (80091ac <HAL_RCC_OscConfig+0xb24>)
 8009128:	400a      	ands	r2, r1
 800912a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800912c:	f7fe f956 	bl	80073dc <HAL_GetTick>
 8009130:	0003      	movs	r3, r0
 8009132:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009134:	e008      	b.n	8009148 <HAL_RCC_OscConfig+0xac0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009136:	f7fe f951 	bl	80073dc <HAL_GetTick>
 800913a:	0002      	movs	r2, r0
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	1ad3      	subs	r3, r2, r3
 8009140:	2b02      	cmp	r3, #2
 8009142:	d901      	bls.n	8009148 <HAL_RCC_OscConfig+0xac0>
          {
            return HAL_TIMEOUT;
 8009144:	2303      	movs	r3, #3
 8009146:	e02a      	b.n	800919e <HAL_RCC_OscConfig+0xb16>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009148:	4b17      	ldr	r3, [pc, #92]	; (80091a8 <HAL_RCC_OscConfig+0xb20>)
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	2380      	movs	r3, #128	; 0x80
 800914e:	049b      	lsls	r3, r3, #18
 8009150:	4013      	ands	r3, r2
 8009152:	d1f0      	bne.n	8009136 <HAL_RCC_OscConfig+0xaae>
 8009154:	e022      	b.n	800919c <HAL_RCC_OscConfig+0xb14>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915a:	2b01      	cmp	r3, #1
 800915c:	d101      	bne.n	8009162 <HAL_RCC_OscConfig+0xada>
      {
        return HAL_ERROR;
 800915e:	2301      	movs	r3, #1
 8009160:	e01d      	b.n	800919e <HAL_RCC_OscConfig+0xb16>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009162:	4b11      	ldr	r3, [pc, #68]	; (80091a8 <HAL_RCC_OscConfig+0xb20>)
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009168:	69ba      	ldr	r2, [r7, #24]
 800916a:	2380      	movs	r3, #128	; 0x80
 800916c:	025b      	lsls	r3, r3, #9
 800916e:	401a      	ands	r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009174:	429a      	cmp	r2, r3
 8009176:	d10f      	bne.n	8009198 <HAL_RCC_OscConfig+0xb10>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009178:	69ba      	ldr	r2, [r7, #24]
 800917a:	23f0      	movs	r3, #240	; 0xf0
 800917c:	039b      	lsls	r3, r3, #14
 800917e:	401a      	ands	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009184:	429a      	cmp	r2, r3
 8009186:	d107      	bne.n	8009198 <HAL_RCC_OscConfig+0xb10>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8009188:	69ba      	ldr	r2, [r7, #24]
 800918a:	23c0      	movs	r3, #192	; 0xc0
 800918c:	041b      	lsls	r3, r3, #16
 800918e:	401a      	ands	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009194:	429a      	cmp	r2, r3
 8009196:	d001      	beq.n	800919c <HAL_RCC_OscConfig+0xb14>
        {
          return HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	e000      	b.n	800919e <HAL_RCC_OscConfig+0xb16>
        }
      }
    }
  }
  return HAL_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	0018      	movs	r0, r3
 80091a0:	46bd      	mov	sp, r7
 80091a2:	b00a      	add	sp, #40	; 0x28
 80091a4:	bdb0      	pop	{r4, r5, r7, pc}
 80091a6:	46c0      	nop			; (mov r8, r8)
 80091a8:	40021000 	.word	0x40021000
 80091ac:	feffffff 	.word	0xfeffffff

080091b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80091b0:	b5b0      	push	{r4, r5, r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d101      	bne.n	80091c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e1e1      	b.n	8009588 <HAL_RCC_ClockConfig+0x3d8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2201      	movs	r2, #1
 80091ca:	4013      	ands	r3, r2
 80091cc:	d114      	bne.n	80091f8 <HAL_RCC_ClockConfig+0x48>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2202      	movs	r2, #2
 80091d4:	4013      	ands	r3, r2
 80091d6:	d10f      	bne.n	80091f8 <HAL_RCC_ClockConfig+0x48>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2204      	movs	r2, #4
 80091de:	4013      	ands	r3, r2
 80091e0:	d10a      	bne.n	80091f8 <HAL_RCC_ClockConfig+0x48>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2208      	movs	r2, #8
 80091e8:	4013      	ands	r3, r2
 80091ea:	d105      	bne.n	80091f8 <HAL_RCC_ClockConfig+0x48>
 80091ec:	4a9b      	ldr	r2, [pc, #620]	; (800945c <HAL_RCC_ClockConfig+0x2ac>)
 80091ee:	4b9c      	ldr	r3, [pc, #624]	; (8009460 <HAL_RCC_ClockConfig+0x2b0>)
 80091f0:	0011      	movs	r1, r2
 80091f2:	0018      	movs	r0, r3
 80091f4:	f7fc fe03 	bl	8005dfe <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d009      	beq.n	8009212 <HAL_RCC_ClockConfig+0x62>
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d006      	beq.n	8009212 <HAL_RCC_ClockConfig+0x62>
 8009204:	23da      	movs	r3, #218	; 0xda
 8009206:	009a      	lsls	r2, r3, #2
 8009208:	4b95      	ldr	r3, [pc, #596]	; (8009460 <HAL_RCC_ClockConfig+0x2b0>)
 800920a:	0011      	movs	r1, r2
 800920c:	0018      	movs	r0, r3
 800920e:	f7fc fdf6 	bl	8005dfe <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009212:	4b94      	ldr	r3, [pc, #592]	; (8009464 <HAL_RCC_ClockConfig+0x2b4>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2201      	movs	r2, #1
 8009218:	4013      	ands	r3, r2
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	429a      	cmp	r2, r3
 800921e:	d91e      	bls.n	800925e <HAL_RCC_ClockConfig+0xae>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009220:	4b90      	ldr	r3, [pc, #576]	; (8009464 <HAL_RCC_ClockConfig+0x2b4>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2201      	movs	r2, #1
 8009226:	4393      	bics	r3, r2
 8009228:	0019      	movs	r1, r3
 800922a:	4b8e      	ldr	r3, [pc, #568]	; (8009464 <HAL_RCC_ClockConfig+0x2b4>)
 800922c:	683a      	ldr	r2, [r7, #0]
 800922e:	430a      	orrs	r2, r1
 8009230:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009232:	f7fe f8d3 	bl	80073dc <HAL_GetTick>
 8009236:	0003      	movs	r3, r0
 8009238:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800923a:	e009      	b.n	8009250 <HAL_RCC_ClockConfig+0xa0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800923c:	f7fe f8ce 	bl	80073dc <HAL_GetTick>
 8009240:	0002      	movs	r2, r0
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	4a88      	ldr	r2, [pc, #544]	; (8009468 <HAL_RCC_ClockConfig+0x2b8>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d901      	bls.n	8009250 <HAL_RCC_ClockConfig+0xa0>
      {
        return HAL_TIMEOUT;
 800924c:	2303      	movs	r3, #3
 800924e:	e19b      	b.n	8009588 <HAL_RCC_ClockConfig+0x3d8>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009250:	4b84      	ldr	r3, [pc, #528]	; (8009464 <HAL_RCC_ClockConfig+0x2b4>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2201      	movs	r2, #1
 8009256:	4013      	ands	r3, r2
 8009258:	683a      	ldr	r2, [r7, #0]
 800925a:	429a      	cmp	r2, r3
 800925c:	d1ee      	bne.n	800923c <HAL_RCC_ClockConfig+0x8c>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2202      	movs	r2, #2
 8009264:	4013      	ands	r3, r2
 8009266:	d034      	beq.n	80092d2 <HAL_RCC_ClockConfig+0x122>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d026      	beq.n	80092be <HAL_RCC_ClockConfig+0x10e>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	2b80      	cmp	r3, #128	; 0x80
 8009276:	d022      	beq.n	80092be <HAL_RCC_ClockConfig+0x10e>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	2b90      	cmp	r3, #144	; 0x90
 800927e:	d01e      	beq.n	80092be <HAL_RCC_ClockConfig+0x10e>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	2ba0      	cmp	r3, #160	; 0xa0
 8009286:	d01a      	beq.n	80092be <HAL_RCC_ClockConfig+0x10e>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	2bb0      	cmp	r3, #176	; 0xb0
 800928e:	d016      	beq.n	80092be <HAL_RCC_ClockConfig+0x10e>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	2bc0      	cmp	r3, #192	; 0xc0
 8009296:	d012      	beq.n	80092be <HAL_RCC_ClockConfig+0x10e>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	2bd0      	cmp	r3, #208	; 0xd0
 800929e:	d00e      	beq.n	80092be <HAL_RCC_ClockConfig+0x10e>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	2be0      	cmp	r3, #224	; 0xe0
 80092a6:	d00a      	beq.n	80092be <HAL_RCC_ClockConfig+0x10e>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	2bf0      	cmp	r3, #240	; 0xf0
 80092ae:	d006      	beq.n	80092be <HAL_RCC_ClockConfig+0x10e>
 80092b0:	23e1      	movs	r3, #225	; 0xe1
 80092b2:	009a      	lsls	r2, r3, #2
 80092b4:	4b6a      	ldr	r3, [pc, #424]	; (8009460 <HAL_RCC_ClockConfig+0x2b0>)
 80092b6:	0011      	movs	r1, r2
 80092b8:	0018      	movs	r0, r3
 80092ba:	f7fc fda0 	bl	8005dfe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80092be:	4b6b      	ldr	r3, [pc, #428]	; (800946c <HAL_RCC_ClockConfig+0x2bc>)
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	22f0      	movs	r2, #240	; 0xf0
 80092c4:	4393      	bics	r3, r2
 80092c6:	0019      	movs	r1, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	689a      	ldr	r2, [r3, #8]
 80092cc:	4b67      	ldr	r3, [pc, #412]	; (800946c <HAL_RCC_ClockConfig+0x2bc>)
 80092ce:	430a      	orrs	r2, r1
 80092d0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2201      	movs	r2, #1
 80092d8:	4013      	ands	r3, r2
 80092da:	d100      	bne.n	80092de <HAL_RCC_ClockConfig+0x12e>
 80092dc:	e09f      	b.n	800941e <HAL_RCC_ClockConfig+0x26e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d011      	beq.n	800930a <HAL_RCC_ClockConfig+0x15a>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d00d      	beq.n	800930a <HAL_RCC_ClockConfig+0x15a>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	d009      	beq.n	800930a <HAL_RCC_ClockConfig+0x15a>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	2b03      	cmp	r3, #3
 80092fc:	d005      	beq.n	800930a <HAL_RCC_ClockConfig+0x15a>
 80092fe:	4a5c      	ldr	r2, [pc, #368]	; (8009470 <HAL_RCC_ClockConfig+0x2c0>)
 8009300:	4b57      	ldr	r3, [pc, #348]	; (8009460 <HAL_RCC_ClockConfig+0x2b0>)
 8009302:	0011      	movs	r1, r2
 8009304:	0018      	movs	r0, r3
 8009306:	f7fc fd7a 	bl	8005dfe <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	2b02      	cmp	r3, #2
 8009310:	d107      	bne.n	8009322 <HAL_RCC_ClockConfig+0x172>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009312:	4b56      	ldr	r3, [pc, #344]	; (800946c <HAL_RCC_ClockConfig+0x2bc>)
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	2380      	movs	r3, #128	; 0x80
 8009318:	029b      	lsls	r3, r3, #10
 800931a:	4013      	ands	r3, r2
 800931c:	d120      	bne.n	8009360 <HAL_RCC_ClockConfig+0x1b0>
      {
        return HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	e132      	b.n	8009588 <HAL_RCC_ClockConfig+0x3d8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	2b03      	cmp	r3, #3
 8009328:	d107      	bne.n	800933a <HAL_RCC_ClockConfig+0x18a>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800932a:	4b50      	ldr	r3, [pc, #320]	; (800946c <HAL_RCC_ClockConfig+0x2bc>)
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	2380      	movs	r3, #128	; 0x80
 8009330:	049b      	lsls	r3, r3, #18
 8009332:	4013      	ands	r3, r2
 8009334:	d114      	bne.n	8009360 <HAL_RCC_ClockConfig+0x1b0>
      {
        return HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	e126      	b.n	8009588 <HAL_RCC_ClockConfig+0x3d8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	2b01      	cmp	r3, #1
 8009340:	d106      	bne.n	8009350 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009342:	4b4a      	ldr	r3, [pc, #296]	; (800946c <HAL_RCC_ClockConfig+0x2bc>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2204      	movs	r2, #4
 8009348:	4013      	ands	r3, r2
 800934a:	d109      	bne.n	8009360 <HAL_RCC_ClockConfig+0x1b0>
      {
        return HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	e11b      	b.n	8009588 <HAL_RCC_ClockConfig+0x3d8>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009350:	4b46      	ldr	r3, [pc, #280]	; (800946c <HAL_RCC_ClockConfig+0x2bc>)
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	2380      	movs	r3, #128	; 0x80
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	4013      	ands	r3, r2
 800935a:	d101      	bne.n	8009360 <HAL_RCC_ClockConfig+0x1b0>
      {
        return HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	e113      	b.n	8009588 <HAL_RCC_ClockConfig+0x3d8>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009360:	4b42      	ldr	r3, [pc, #264]	; (800946c <HAL_RCC_ClockConfig+0x2bc>)
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	2203      	movs	r2, #3
 8009366:	4393      	bics	r3, r2
 8009368:	0019      	movs	r1, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	4b3f      	ldr	r3, [pc, #252]	; (800946c <HAL_RCC_ClockConfig+0x2bc>)
 8009370:	430a      	orrs	r2, r1
 8009372:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009374:	f7fe f832 	bl	80073dc <HAL_GetTick>
 8009378:	0003      	movs	r3, r0
 800937a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	2b02      	cmp	r3, #2
 8009382:	d111      	bne.n	80093a8 <HAL_RCC_ClockConfig+0x1f8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009384:	e009      	b.n	800939a <HAL_RCC_ClockConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009386:	f7fe f829 	bl	80073dc <HAL_GetTick>
 800938a:	0002      	movs	r2, r0
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	1ad3      	subs	r3, r2, r3
 8009390:	4a35      	ldr	r2, [pc, #212]	; (8009468 <HAL_RCC_ClockConfig+0x2b8>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d901      	bls.n	800939a <HAL_RCC_ClockConfig+0x1ea>
        {
          return HAL_TIMEOUT;
 8009396:	2303      	movs	r3, #3
 8009398:	e0f6      	b.n	8009588 <HAL_RCC_ClockConfig+0x3d8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800939a:	4b34      	ldr	r3, [pc, #208]	; (800946c <HAL_RCC_ClockConfig+0x2bc>)
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	220c      	movs	r2, #12
 80093a0:	4013      	ands	r3, r2
 80093a2:	2b08      	cmp	r3, #8
 80093a4:	d1ef      	bne.n	8009386 <HAL_RCC_ClockConfig+0x1d6>
 80093a6:	e03a      	b.n	800941e <HAL_RCC_ClockConfig+0x26e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	2b03      	cmp	r3, #3
 80093ae:	d111      	bne.n	80093d4 <HAL_RCC_ClockConfig+0x224>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80093b0:	e009      	b.n	80093c6 <HAL_RCC_ClockConfig+0x216>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093b2:	f7fe f813 	bl	80073dc <HAL_GetTick>
 80093b6:	0002      	movs	r2, r0
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	4a2a      	ldr	r2, [pc, #168]	; (8009468 <HAL_RCC_ClockConfig+0x2b8>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d901      	bls.n	80093c6 <HAL_RCC_ClockConfig+0x216>
        {
          return HAL_TIMEOUT;
 80093c2:	2303      	movs	r3, #3
 80093c4:	e0e0      	b.n	8009588 <HAL_RCC_ClockConfig+0x3d8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80093c6:	4b29      	ldr	r3, [pc, #164]	; (800946c <HAL_RCC_ClockConfig+0x2bc>)
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	220c      	movs	r2, #12
 80093cc:	4013      	ands	r3, r2
 80093ce:	2b0c      	cmp	r3, #12
 80093d0:	d1ef      	bne.n	80093b2 <HAL_RCC_ClockConfig+0x202>
 80093d2:	e024      	b.n	800941e <HAL_RCC_ClockConfig+0x26e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d11b      	bne.n	8009414 <HAL_RCC_ClockConfig+0x264>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80093dc:	e009      	b.n	80093f2 <HAL_RCC_ClockConfig+0x242>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093de:	f7fd fffd 	bl	80073dc <HAL_GetTick>
 80093e2:	0002      	movs	r2, r0
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	1ad3      	subs	r3, r2, r3
 80093e8:	4a1f      	ldr	r2, [pc, #124]	; (8009468 <HAL_RCC_ClockConfig+0x2b8>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d901      	bls.n	80093f2 <HAL_RCC_ClockConfig+0x242>
        {
          return HAL_TIMEOUT;
 80093ee:	2303      	movs	r3, #3
 80093f0:	e0ca      	b.n	8009588 <HAL_RCC_ClockConfig+0x3d8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80093f2:	4b1e      	ldr	r3, [pc, #120]	; (800946c <HAL_RCC_ClockConfig+0x2bc>)
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	220c      	movs	r2, #12
 80093f8:	4013      	ands	r3, r2
 80093fa:	2b04      	cmp	r3, #4
 80093fc:	d1ef      	bne.n	80093de <HAL_RCC_ClockConfig+0x22e>
 80093fe:	e00e      	b.n	800941e <HAL_RCC_ClockConfig+0x26e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009400:	f7fd ffec 	bl	80073dc <HAL_GetTick>
 8009404:	0002      	movs	r2, r0
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	4a17      	ldr	r2, [pc, #92]	; (8009468 <HAL_RCC_ClockConfig+0x2b8>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d901      	bls.n	8009414 <HAL_RCC_ClockConfig+0x264>
        {
          return HAL_TIMEOUT;
 8009410:	2303      	movs	r3, #3
 8009412:	e0b9      	b.n	8009588 <HAL_RCC_ClockConfig+0x3d8>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009414:	4b15      	ldr	r3, [pc, #84]	; (800946c <HAL_RCC_ClockConfig+0x2bc>)
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	220c      	movs	r2, #12
 800941a:	4013      	ands	r3, r2
 800941c:	d1f0      	bne.n	8009400 <HAL_RCC_ClockConfig+0x250>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800941e:	4b11      	ldr	r3, [pc, #68]	; (8009464 <HAL_RCC_ClockConfig+0x2b4>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2201      	movs	r2, #1
 8009424:	4013      	ands	r3, r2
 8009426:	683a      	ldr	r2, [r7, #0]
 8009428:	429a      	cmp	r2, r3
 800942a:	d22a      	bcs.n	8009482 <HAL_RCC_ClockConfig+0x2d2>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800942c:	4b0d      	ldr	r3, [pc, #52]	; (8009464 <HAL_RCC_ClockConfig+0x2b4>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2201      	movs	r2, #1
 8009432:	4393      	bics	r3, r2
 8009434:	0019      	movs	r1, r3
 8009436:	4b0b      	ldr	r3, [pc, #44]	; (8009464 <HAL_RCC_ClockConfig+0x2b4>)
 8009438:	683a      	ldr	r2, [r7, #0]
 800943a:	430a      	orrs	r2, r1
 800943c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800943e:	f7fd ffcd 	bl	80073dc <HAL_GetTick>
 8009442:	0003      	movs	r3, r0
 8009444:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009446:	e015      	b.n	8009474 <HAL_RCC_ClockConfig+0x2c4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009448:	f7fd ffc8 	bl	80073dc <HAL_GetTick>
 800944c:	0002      	movs	r2, r0
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	4a05      	ldr	r2, [pc, #20]	; (8009468 <HAL_RCC_ClockConfig+0x2b8>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d90d      	bls.n	8009474 <HAL_RCC_ClockConfig+0x2c4>
      {
        return HAL_TIMEOUT;
 8009458:	2303      	movs	r3, #3
 800945a:	e095      	b.n	8009588 <HAL_RCC_ClockConfig+0x3d8>
 800945c:	00000367 	.word	0x00000367
 8009460:	0800cc18 	.word	0x0800cc18
 8009464:	40022000 	.word	0x40022000
 8009468:	00001388 	.word	0x00001388
 800946c:	40021000 	.word	0x40021000
 8009470:	0000038b 	.word	0x0000038b
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009474:	4b46      	ldr	r3, [pc, #280]	; (8009590 <HAL_RCC_ClockConfig+0x3e0>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2201      	movs	r2, #1
 800947a:	4013      	ands	r3, r2
 800947c:	683a      	ldr	r2, [r7, #0]
 800947e:	429a      	cmp	r2, r3
 8009480:	d1e2      	bne.n	8009448 <HAL_RCC_ClockConfig+0x298>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2204      	movs	r2, #4
 8009488:	4013      	ands	r3, r2
 800948a:	d02b      	beq.n	80094e4 <HAL_RCC_ClockConfig+0x334>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d01d      	beq.n	80094d0 <HAL_RCC_ClockConfig+0x320>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	68da      	ldr	r2, [r3, #12]
 8009498:	2380      	movs	r3, #128	; 0x80
 800949a:	00db      	lsls	r3, r3, #3
 800949c:	429a      	cmp	r2, r3
 800949e:	d017      	beq.n	80094d0 <HAL_RCC_ClockConfig+0x320>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	68da      	ldr	r2, [r3, #12]
 80094a4:	23a0      	movs	r3, #160	; 0xa0
 80094a6:	00db      	lsls	r3, r3, #3
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d011      	beq.n	80094d0 <HAL_RCC_ClockConfig+0x320>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	68da      	ldr	r2, [r3, #12]
 80094b0:	23c0      	movs	r3, #192	; 0xc0
 80094b2:	00db      	lsls	r3, r3, #3
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d00b      	beq.n	80094d0 <HAL_RCC_ClockConfig+0x320>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	68da      	ldr	r2, [r3, #12]
 80094bc:	23e0      	movs	r3, #224	; 0xe0
 80094be:	00db      	lsls	r3, r3, #3
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d005      	beq.n	80094d0 <HAL_RCC_ClockConfig+0x320>
 80094c4:	4a33      	ldr	r2, [pc, #204]	; (8009594 <HAL_RCC_ClockConfig+0x3e4>)
 80094c6:	4b34      	ldr	r3, [pc, #208]	; (8009598 <HAL_RCC_ClockConfig+0x3e8>)
 80094c8:	0011      	movs	r1, r2
 80094ca:	0018      	movs	r0, r3
 80094cc:	f7fc fc97 	bl	8005dfe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80094d0:	4b32      	ldr	r3, [pc, #200]	; (800959c <HAL_RCC_ClockConfig+0x3ec>)
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	4a32      	ldr	r2, [pc, #200]	; (80095a0 <HAL_RCC_ClockConfig+0x3f0>)
 80094d6:	4013      	ands	r3, r2
 80094d8:	0019      	movs	r1, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68da      	ldr	r2, [r3, #12]
 80094de:	4b2f      	ldr	r3, [pc, #188]	; (800959c <HAL_RCC_ClockConfig+0x3ec>)
 80094e0:	430a      	orrs	r2, r1
 80094e2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2208      	movs	r2, #8
 80094ea:	4013      	ands	r3, r2
 80094ec:	d02d      	beq.n	800954a <HAL_RCC_ClockConfig+0x39a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	691b      	ldr	r3, [r3, #16]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d01e      	beq.n	8009534 <HAL_RCC_ClockConfig+0x384>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	691a      	ldr	r2, [r3, #16]
 80094fa:	2380      	movs	r3, #128	; 0x80
 80094fc:	00db      	lsls	r3, r3, #3
 80094fe:	429a      	cmp	r2, r3
 8009500:	d018      	beq.n	8009534 <HAL_RCC_ClockConfig+0x384>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	691a      	ldr	r2, [r3, #16]
 8009506:	23a0      	movs	r3, #160	; 0xa0
 8009508:	00db      	lsls	r3, r3, #3
 800950a:	429a      	cmp	r2, r3
 800950c:	d012      	beq.n	8009534 <HAL_RCC_ClockConfig+0x384>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	691a      	ldr	r2, [r3, #16]
 8009512:	23c0      	movs	r3, #192	; 0xc0
 8009514:	00db      	lsls	r3, r3, #3
 8009516:	429a      	cmp	r2, r3
 8009518:	d00c      	beq.n	8009534 <HAL_RCC_ClockConfig+0x384>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	691a      	ldr	r2, [r3, #16]
 800951e:	23e0      	movs	r3, #224	; 0xe0
 8009520:	00db      	lsls	r3, r3, #3
 8009522:	429a      	cmp	r2, r3
 8009524:	d006      	beq.n	8009534 <HAL_RCC_ClockConfig+0x384>
 8009526:	23ff      	movs	r3, #255	; 0xff
 8009528:	009a      	lsls	r2, r3, #2
 800952a:	4b1b      	ldr	r3, [pc, #108]	; (8009598 <HAL_RCC_ClockConfig+0x3e8>)
 800952c:	0011      	movs	r1, r2
 800952e:	0018      	movs	r0, r3
 8009530:	f7fc fc65 	bl	8005dfe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009534:	4b19      	ldr	r3, [pc, #100]	; (800959c <HAL_RCC_ClockConfig+0x3ec>)
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	4a1a      	ldr	r2, [pc, #104]	; (80095a4 <HAL_RCC_ClockConfig+0x3f4>)
 800953a:	4013      	ands	r3, r2
 800953c:	0019      	movs	r1, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	00da      	lsls	r2, r3, #3
 8009544:	4b15      	ldr	r3, [pc, #84]	; (800959c <HAL_RCC_ClockConfig+0x3ec>)
 8009546:	430a      	orrs	r2, r1
 8009548:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800954a:	f000 f833 	bl	80095b4 <HAL_RCC_GetSysClockFreq>
 800954e:	0001      	movs	r1, r0
 8009550:	4b12      	ldr	r3, [pc, #72]	; (800959c <HAL_RCC_ClockConfig+0x3ec>)
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	091b      	lsrs	r3, r3, #4
 8009556:	220f      	movs	r2, #15
 8009558:	4013      	ands	r3, r2
 800955a:	4a13      	ldr	r2, [pc, #76]	; (80095a8 <HAL_RCC_ClockConfig+0x3f8>)
 800955c:	5cd3      	ldrb	r3, [r2, r3]
 800955e:	000a      	movs	r2, r1
 8009560:	40da      	lsrs	r2, r3
 8009562:	4b12      	ldr	r3, [pc, #72]	; (80095ac <HAL_RCC_ClockConfig+0x3fc>)
 8009564:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009566:	4b12      	ldr	r3, [pc, #72]	; (80095b0 <HAL_RCC_ClockConfig+0x400>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	250b      	movs	r5, #11
 800956c:	197c      	adds	r4, r7, r5
 800956e:	0018      	movs	r0, r3
 8009570:	f7fd feee 	bl	8007350 <HAL_InitTick>
 8009574:	0003      	movs	r3, r0
 8009576:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8009578:	197b      	adds	r3, r7, r5
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d002      	beq.n	8009586 <HAL_RCC_ClockConfig+0x3d6>
  {
    return status;
 8009580:	197b      	adds	r3, r7, r5
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	e000      	b.n	8009588 <HAL_RCC_ClockConfig+0x3d8>
  }

  return HAL_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	0018      	movs	r0, r3
 800958a:	46bd      	mov	sp, r7
 800958c:	b004      	add	sp, #16
 800958e:	bdb0      	pop	{r4, r5, r7, pc}
 8009590:	40022000 	.word	0x40022000
 8009594:	000003f5 	.word	0x000003f5
 8009598:	0800cc18 	.word	0x0800cc18
 800959c:	40021000 	.word	0x40021000
 80095a0:	fffff8ff 	.word	0xfffff8ff
 80095a4:	ffffc7ff 	.word	0xffffc7ff
 80095a8:	0800e06c 	.word	0x0800e06c
 80095ac:	2000004c 	.word	0x2000004c
 80095b0:	20000050 	.word	0x20000050

080095b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095b4:	b5b0      	push	{r4, r5, r7, lr}
 80095b6:	b08e      	sub	sp, #56	; 0x38
 80095b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80095ba:	4b4c      	ldr	r3, [pc, #304]	; (80096ec <HAL_RCC_GetSysClockFreq+0x138>)
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80095c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095c2:	230c      	movs	r3, #12
 80095c4:	4013      	ands	r3, r2
 80095c6:	2b0c      	cmp	r3, #12
 80095c8:	d014      	beq.n	80095f4 <HAL_RCC_GetSysClockFreq+0x40>
 80095ca:	d900      	bls.n	80095ce <HAL_RCC_GetSysClockFreq+0x1a>
 80095cc:	e07b      	b.n	80096c6 <HAL_RCC_GetSysClockFreq+0x112>
 80095ce:	2b04      	cmp	r3, #4
 80095d0:	d002      	beq.n	80095d8 <HAL_RCC_GetSysClockFreq+0x24>
 80095d2:	2b08      	cmp	r3, #8
 80095d4:	d00b      	beq.n	80095ee <HAL_RCC_GetSysClockFreq+0x3a>
 80095d6:	e076      	b.n	80096c6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80095d8:	4b44      	ldr	r3, [pc, #272]	; (80096ec <HAL_RCC_GetSysClockFreq+0x138>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2210      	movs	r2, #16
 80095de:	4013      	ands	r3, r2
 80095e0:	d002      	beq.n	80095e8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80095e2:	4b43      	ldr	r3, [pc, #268]	; (80096f0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80095e4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80095e6:	e07c      	b.n	80096e2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80095e8:	4b42      	ldr	r3, [pc, #264]	; (80096f4 <HAL_RCC_GetSysClockFreq+0x140>)
 80095ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80095ec:	e079      	b.n	80096e2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80095ee:	4b42      	ldr	r3, [pc, #264]	; (80096f8 <HAL_RCC_GetSysClockFreq+0x144>)
 80095f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80095f2:	e076      	b.n	80096e2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80095f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f6:	0c9a      	lsrs	r2, r3, #18
 80095f8:	230f      	movs	r3, #15
 80095fa:	401a      	ands	r2, r3
 80095fc:	4b3f      	ldr	r3, [pc, #252]	; (80096fc <HAL_RCC_GetSysClockFreq+0x148>)
 80095fe:	5c9b      	ldrb	r3, [r3, r2]
 8009600:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8009602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009604:	0d9a      	lsrs	r2, r3, #22
 8009606:	2303      	movs	r3, #3
 8009608:	4013      	ands	r3, r2
 800960a:	3301      	adds	r3, #1
 800960c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800960e:	4b37      	ldr	r3, [pc, #220]	; (80096ec <HAL_RCC_GetSysClockFreq+0x138>)
 8009610:	68da      	ldr	r2, [r3, #12]
 8009612:	2380      	movs	r3, #128	; 0x80
 8009614:	025b      	lsls	r3, r3, #9
 8009616:	4013      	ands	r3, r2
 8009618:	d01a      	beq.n	8009650 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800961a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961c:	61bb      	str	r3, [r7, #24]
 800961e:	2300      	movs	r3, #0
 8009620:	61fb      	str	r3, [r7, #28]
 8009622:	4a35      	ldr	r2, [pc, #212]	; (80096f8 <HAL_RCC_GetSysClockFreq+0x144>)
 8009624:	2300      	movs	r3, #0
 8009626:	69b8      	ldr	r0, [r7, #24]
 8009628:	69f9      	ldr	r1, [r7, #28]
 800962a:	f7f6 ff27 	bl	800047c <__aeabi_lmul>
 800962e:	0002      	movs	r2, r0
 8009630:	000b      	movs	r3, r1
 8009632:	0010      	movs	r0, r2
 8009634:	0019      	movs	r1, r3
 8009636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009638:	613b      	str	r3, [r7, #16]
 800963a:	2300      	movs	r3, #0
 800963c:	617b      	str	r3, [r7, #20]
 800963e:	693a      	ldr	r2, [r7, #16]
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	f7f6 fefb 	bl	800043c <__aeabi_uldivmod>
 8009646:	0002      	movs	r2, r0
 8009648:	000b      	movs	r3, r1
 800964a:	0013      	movs	r3, r2
 800964c:	637b      	str	r3, [r7, #52]	; 0x34
 800964e:	e037      	b.n	80096c0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8009650:	4b26      	ldr	r3, [pc, #152]	; (80096ec <HAL_RCC_GetSysClockFreq+0x138>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2210      	movs	r2, #16
 8009656:	4013      	ands	r3, r2
 8009658:	d01a      	beq.n	8009690 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800965a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965c:	60bb      	str	r3, [r7, #8]
 800965e:	2300      	movs	r3, #0
 8009660:	60fb      	str	r3, [r7, #12]
 8009662:	4a23      	ldr	r2, [pc, #140]	; (80096f0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8009664:	2300      	movs	r3, #0
 8009666:	68b8      	ldr	r0, [r7, #8]
 8009668:	68f9      	ldr	r1, [r7, #12]
 800966a:	f7f6 ff07 	bl	800047c <__aeabi_lmul>
 800966e:	0002      	movs	r2, r0
 8009670:	000b      	movs	r3, r1
 8009672:	0010      	movs	r0, r2
 8009674:	0019      	movs	r1, r3
 8009676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009678:	603b      	str	r3, [r7, #0]
 800967a:	2300      	movs	r3, #0
 800967c:	607b      	str	r3, [r7, #4]
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f7f6 fedb 	bl	800043c <__aeabi_uldivmod>
 8009686:	0002      	movs	r2, r0
 8009688:	000b      	movs	r3, r1
 800968a:	0013      	movs	r3, r2
 800968c:	637b      	str	r3, [r7, #52]	; 0x34
 800968e:	e017      	b.n	80096c0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009692:	0018      	movs	r0, r3
 8009694:	2300      	movs	r3, #0
 8009696:	0019      	movs	r1, r3
 8009698:	4a16      	ldr	r2, [pc, #88]	; (80096f4 <HAL_RCC_GetSysClockFreq+0x140>)
 800969a:	2300      	movs	r3, #0
 800969c:	f7f6 feee 	bl	800047c <__aeabi_lmul>
 80096a0:	0002      	movs	r2, r0
 80096a2:	000b      	movs	r3, r1
 80096a4:	0010      	movs	r0, r2
 80096a6:	0019      	movs	r1, r3
 80096a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096aa:	001c      	movs	r4, r3
 80096ac:	2300      	movs	r3, #0
 80096ae:	001d      	movs	r5, r3
 80096b0:	0022      	movs	r2, r4
 80096b2:	002b      	movs	r3, r5
 80096b4:	f7f6 fec2 	bl	800043c <__aeabi_uldivmod>
 80096b8:	0002      	movs	r2, r0
 80096ba:	000b      	movs	r3, r1
 80096bc:	0013      	movs	r3, r2
 80096be:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80096c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80096c4:	e00d      	b.n	80096e2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80096c6:	4b09      	ldr	r3, [pc, #36]	; (80096ec <HAL_RCC_GetSysClockFreq+0x138>)
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	0b5b      	lsrs	r3, r3, #13
 80096cc:	2207      	movs	r2, #7
 80096ce:	4013      	ands	r3, r2
 80096d0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80096d2:	6a3b      	ldr	r3, [r7, #32]
 80096d4:	3301      	adds	r3, #1
 80096d6:	2280      	movs	r2, #128	; 0x80
 80096d8:	0212      	lsls	r2, r2, #8
 80096da:	409a      	lsls	r2, r3
 80096dc:	0013      	movs	r3, r2
 80096de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80096e0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80096e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80096e4:	0018      	movs	r0, r3
 80096e6:	46bd      	mov	sp, r7
 80096e8:	b00e      	add	sp, #56	; 0x38
 80096ea:	bdb0      	pop	{r4, r5, r7, pc}
 80096ec:	40021000 	.word	0x40021000
 80096f0:	003d0900 	.word	0x003d0900
 80096f4:	00f42400 	.word	0x00f42400
 80096f8:	007a1200 	.word	0x007a1200
 80096fc:	0800e084 	.word	0x0800e084

08009700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009704:	4b02      	ldr	r3, [pc, #8]	; (8009710 <HAL_RCC_GetHCLKFreq+0x10>)
 8009706:	681b      	ldr	r3, [r3, #0]
}
 8009708:	0018      	movs	r0, r3
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	46c0      	nop			; (mov r8, r8)
 8009710:	2000004c 	.word	0x2000004c

08009714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009718:	f7ff fff2 	bl	8009700 <HAL_RCC_GetHCLKFreq>
 800971c:	0001      	movs	r1, r0
 800971e:	4b06      	ldr	r3, [pc, #24]	; (8009738 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	0a1b      	lsrs	r3, r3, #8
 8009724:	2207      	movs	r2, #7
 8009726:	4013      	ands	r3, r2
 8009728:	4a04      	ldr	r2, [pc, #16]	; (800973c <HAL_RCC_GetPCLK1Freq+0x28>)
 800972a:	5cd3      	ldrb	r3, [r2, r3]
 800972c:	40d9      	lsrs	r1, r3
 800972e:	000b      	movs	r3, r1
}
 8009730:	0018      	movs	r0, r3
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	46c0      	nop			; (mov r8, r8)
 8009738:	40021000 	.word	0x40021000
 800973c:	0800e07c 	.word	0x0800e07c

08009740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009744:	f7ff ffdc 	bl	8009700 <HAL_RCC_GetHCLKFreq>
 8009748:	0001      	movs	r1, r0
 800974a:	4b06      	ldr	r3, [pc, #24]	; (8009764 <HAL_RCC_GetPCLK2Freq+0x24>)
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	0adb      	lsrs	r3, r3, #11
 8009750:	2207      	movs	r2, #7
 8009752:	4013      	ands	r3, r2
 8009754:	4a04      	ldr	r2, [pc, #16]	; (8009768 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009756:	5cd3      	ldrb	r3, [r2, r3]
 8009758:	40d9      	lsrs	r1, r3
 800975a:	000b      	movs	r3, r1
}
 800975c:	0018      	movs	r0, r3
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	46c0      	nop			; (mov r8, r8)
 8009764:	40021000 	.word	0x40021000
 8009768:	0800e07c 	.word	0x0800e07c

0800976c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b086      	sub	sp, #24
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8009774:	2317      	movs	r3, #23
 8009776:	18fb      	adds	r3, r7, r3
 8009778:	2200      	movs	r2, #0
 800977a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	23a0      	movs	r3, #160	; 0xa0
 8009782:	011b      	lsls	r3, r3, #4
 8009784:	429a      	cmp	r2, r3
 8009786:	d304      	bcc.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8009788:	4b8f      	ldr	r3, [pc, #572]	; (80099c8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800978a:	2168      	movs	r1, #104	; 0x68
 800978c:	0018      	movs	r0, r3
 800978e:	f7fc fb36 	bl	8005dfe <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2220      	movs	r2, #32
 8009798:	4013      	ands	r3, r2
 800979a:	d106      	bne.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x3e>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	2380      	movs	r3, #128	; 0x80
 80097a2:	011b      	lsls	r3, r3, #4
 80097a4:	4013      	ands	r3, r2
 80097a6:	d100      	bne.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x3e>
 80097a8:	e14b      	b.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
#endif /* LCD */
     )
  {
    /* check for RTC Parameters used to output RTCCLK */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2220      	movs	r2, #32
 80097b0:	4013      	ands	r3, r2
 80097b2:	d02c      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d028      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685a      	ldr	r2, [r3, #4]
 80097c0:	2380      	movs	r3, #128	; 0x80
 80097c2:	025b      	lsls	r3, r3, #9
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d022      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	2380      	movs	r3, #128	; 0x80
 80097ce:	029b      	lsls	r3, r3, #10
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d01c      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685a      	ldr	r2, [r3, #4]
 80097d8:	23c0      	movs	r3, #192	; 0xc0
 80097da:	029b      	lsls	r3, r3, #10
 80097dc:	429a      	cmp	r2, r3
 80097de:	d016      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	685a      	ldr	r2, [r3, #4]
 80097e4:	2398      	movs	r3, #152	; 0x98
 80097e6:	035b      	lsls	r3, r3, #13
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d010      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	685a      	ldr	r2, [r3, #4]
 80097f0:	238c      	movs	r3, #140	; 0x8c
 80097f2:	039b      	lsls	r3, r3, #14
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d00a      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	685a      	ldr	r2, [r3, #4]
 80097fc:	23cc      	movs	r3, #204	; 0xcc
 80097fe:	039b      	lsls	r3, r3, #14
 8009800:	429a      	cmp	r2, r3
 8009802:	d004      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8009804:	4b70      	ldr	r3, [pc, #448]	; (80099c8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8009806:	2174      	movs	r1, #116	; 0x74
 8009808:	0018      	movs	r0, r3
 800980a:	f7fc faf8 	bl	8005dfe <assert_failed>
    }

#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	2380      	movs	r3, #128	; 0x80
 8009814:	011b      	lsls	r3, r3, #4
 8009816:	4013      	ands	r3, r2
 8009818:	d02c      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x108>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d028      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	689a      	ldr	r2, [r3, #8]
 8009826:	2380      	movs	r3, #128	; 0x80
 8009828:	025b      	lsls	r3, r3, #9
 800982a:	429a      	cmp	r2, r3
 800982c:	d022      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	689a      	ldr	r2, [r3, #8]
 8009832:	2380      	movs	r3, #128	; 0x80
 8009834:	029b      	lsls	r3, r3, #10
 8009836:	429a      	cmp	r2, r3
 8009838:	d01c      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	689a      	ldr	r2, [r3, #8]
 800983e:	23c0      	movs	r3, #192	; 0xc0
 8009840:	029b      	lsls	r3, r3, #10
 8009842:	429a      	cmp	r2, r3
 8009844:	d016      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	689a      	ldr	r2, [r3, #8]
 800984a:	2398      	movs	r3, #152	; 0x98
 800984c:	035b      	lsls	r3, r3, #13
 800984e:	429a      	cmp	r2, r3
 8009850:	d010      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	689a      	ldr	r2, [r3, #8]
 8009856:	238c      	movs	r3, #140	; 0x8c
 8009858:	039b      	lsls	r3, r3, #14
 800985a:	429a      	cmp	r2, r3
 800985c:	d00a      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	689a      	ldr	r2, [r3, #8]
 8009862:	23cc      	movs	r3, #204	; 0xcc
 8009864:	039b      	lsls	r3, r3, #14
 8009866:	429a      	cmp	r2, r3
 8009868:	d004      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800986a:	4b57      	ldr	r3, [pc, #348]	; (80099c8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800986c:	217a      	movs	r1, #122	; 0x7a
 800986e:	0018      	movs	r0, r3
 8009870:	f7fc fac5 	bl	8005dfe <assert_failed>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009874:	4b55      	ldr	r3, [pc, #340]	; (80099cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009878:	2380      	movs	r3, #128	; 0x80
 800987a:	055b      	lsls	r3, r3, #21
 800987c:	4013      	ands	r3, r2
 800987e:	d10a      	bne.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009880:	4b52      	ldr	r3, [pc, #328]	; (80099cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009884:	4b51      	ldr	r3, [pc, #324]	; (80099cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009886:	2180      	movs	r1, #128	; 0x80
 8009888:	0549      	lsls	r1, r1, #21
 800988a:	430a      	orrs	r2, r1
 800988c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800988e:	2317      	movs	r3, #23
 8009890:	18fb      	adds	r3, r7, r3
 8009892:	2201      	movs	r2, #1
 8009894:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009896:	4b4e      	ldr	r3, [pc, #312]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	2380      	movs	r3, #128	; 0x80
 800989c:	005b      	lsls	r3, r3, #1
 800989e:	4013      	ands	r3, r2
 80098a0:	d11a      	bne.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80098a2:	4b4b      	ldr	r3, [pc, #300]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	4b4a      	ldr	r3, [pc, #296]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80098a8:	2180      	movs	r1, #128	; 0x80
 80098aa:	0049      	lsls	r1, r1, #1
 80098ac:	430a      	orrs	r2, r1
 80098ae:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80098b0:	f7fd fd94 	bl	80073dc <HAL_GetTick>
 80098b4:	0003      	movs	r3, r0
 80098b6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098b8:	e008      	b.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098ba:	f7fd fd8f 	bl	80073dc <HAL_GetTick>
 80098be:	0002      	movs	r2, r0
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	1ad3      	subs	r3, r2, r3
 80098c4:	2b64      	cmp	r3, #100	; 0x64
 80098c6:	d901      	bls.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x160>
        {
          return HAL_TIMEOUT;
 80098c8:	2303      	movs	r3, #3
 80098ca:	e1c5      	b.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098cc:	4b40      	ldr	r3, [pc, #256]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	2380      	movs	r3, #128	; 0x80
 80098d2:	005b      	lsls	r3, r3, #1
 80098d4:	4013      	ands	r3, r2
 80098d6:	d0f0      	beq.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80098d8:	4b3c      	ldr	r3, [pc, #240]	; (80099cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	23c0      	movs	r3, #192	; 0xc0
 80098de:	039b      	lsls	r3, r3, #14
 80098e0:	4013      	ands	r3, r2
 80098e2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	685a      	ldr	r2, [r3, #4]
 80098e8:	23c0      	movs	r3, #192	; 0xc0
 80098ea:	039b      	lsls	r3, r3, #14
 80098ec:	4013      	ands	r3, r2
 80098ee:	68fa      	ldr	r2, [r7, #12]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d107      	bne.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x198>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	689a      	ldr	r2, [r3, #8]
 80098f8:	23c0      	movs	r3, #192	; 0xc0
 80098fa:	039b      	lsls	r3, r3, #14
 80098fc:	4013      	ands	r3, r2
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	429a      	cmp	r2, r3
 8009902:	d013      	beq.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	685a      	ldr	r2, [r3, #4]
 8009908:	23c0      	movs	r3, #192	; 0xc0
 800990a:	029b      	lsls	r3, r3, #10
 800990c:	401a      	ands	r2, r3
 800990e:	23c0      	movs	r3, #192	; 0xc0
 8009910:	029b      	lsls	r3, r3, #10
 8009912:	429a      	cmp	r2, r3
 8009914:	d10a      	bne.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009916:	4b2d      	ldr	r3, [pc, #180]	; (80099cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	2380      	movs	r3, #128	; 0x80
 800991c:	029b      	lsls	r3, r3, #10
 800991e:	401a      	ands	r2, r3
 8009920:	2380      	movs	r3, #128	; 0x80
 8009922:	029b      	lsls	r3, r3, #10
 8009924:	429a      	cmp	r2, r3
 8009926:	d101      	bne.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8009928:	2301      	movs	r3, #1
 800992a:	e195      	b.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800992c:	4b27      	ldr	r3, [pc, #156]	; (80099cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800992e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009930:	23c0      	movs	r3, #192	; 0xc0
 8009932:	029b      	lsls	r3, r3, #10
 8009934:	4013      	ands	r3, r2
 8009936:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d056      	beq.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x280>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	685a      	ldr	r2, [r3, #4]
 8009942:	23c0      	movs	r3, #192	; 0xc0
 8009944:	029b      	lsls	r3, r3, #10
 8009946:	4013      	ands	r3, r2
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	429a      	cmp	r2, r3
 800994c:	d004      	beq.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2220      	movs	r2, #32
 8009954:	4013      	ands	r3, r2
 8009956:	d10d      	bne.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x208>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	689a      	ldr	r2, [r3, #8]
 800995c:	23c0      	movs	r3, #192	; 0xc0
 800995e:	029b      	lsls	r3, r3, #10
 8009960:	4013      	ands	r3, r2
 8009962:	68fa      	ldr	r2, [r7, #12]
 8009964:	429a      	cmp	r2, r3
 8009966:	d041      	beq.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x280>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	2380      	movs	r3, #128	; 0x80
 800996e:	011b      	lsls	r3, r3, #4
 8009970:	4013      	ands	r3, r2
 8009972:	d03b      	beq.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x280>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8009974:	4b15      	ldr	r3, [pc, #84]	; (80099cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009978:	4a16      	ldr	r2, [pc, #88]	; (80099d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800997a:	4013      	ands	r3, r2
 800997c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800997e:	4b13      	ldr	r3, [pc, #76]	; (80099cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009980:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009982:	4b12      	ldr	r3, [pc, #72]	; (80099cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009984:	2180      	movs	r1, #128	; 0x80
 8009986:	0309      	lsls	r1, r1, #12
 8009988:	430a      	orrs	r2, r1
 800998a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800998c:	4b0f      	ldr	r3, [pc, #60]	; (80099cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800998e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009990:	4b0e      	ldr	r3, [pc, #56]	; (80099cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009992:	4911      	ldr	r1, [pc, #68]	; (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009994:	400a      	ands	r2, r1
 8009996:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8009998:	4b0c      	ldr	r3, [pc, #48]	; (80099cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800999e:	68fa      	ldr	r2, [r7, #12]
 80099a0:	2380      	movs	r3, #128	; 0x80
 80099a2:	005b      	lsls	r3, r3, #1
 80099a4:	4013      	ands	r3, r2
 80099a6:	d021      	beq.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x280>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099a8:	f7fd fd18 	bl	80073dc <HAL_GetTick>
 80099ac:	0003      	movs	r3, r0
 80099ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099b0:	e016      	b.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099b2:	f7fd fd13 	bl	80073dc <HAL_GetTick>
 80099b6:	0002      	movs	r2, r0
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	1ad3      	subs	r3, r2, r3
 80099bc:	4a07      	ldr	r2, [pc, #28]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d90e      	bls.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
          {
            return HAL_TIMEOUT;
 80099c2:	2303      	movs	r3, #3
 80099c4:	e148      	b.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80099c6:	46c0      	nop			; (mov r8, r8)
 80099c8:	0800cc50 	.word	0x0800cc50
 80099cc:	40021000 	.word	0x40021000
 80099d0:	40007000 	.word	0x40007000
 80099d4:	fffcffff 	.word	0xfffcffff
 80099d8:	fff7ffff 	.word	0xfff7ffff
 80099dc:	00001388 	.word	0x00001388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099e0:	4b9f      	ldr	r3, [pc, #636]	; (8009c60 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 80099e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80099e4:	2380      	movs	r3, #128	; 0x80
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	4013      	ands	r3, r2
 80099ea:	d0e2      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x246>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	685a      	ldr	r2, [r3, #4]
 80099f0:	23c0      	movs	r3, #192	; 0xc0
 80099f2:	029b      	lsls	r3, r3, #10
 80099f4:	401a      	ands	r2, r3
 80099f6:	23c0      	movs	r3, #192	; 0xc0
 80099f8:	029b      	lsls	r3, r3, #10
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d10c      	bne.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80099fe:	4b98      	ldr	r3, [pc, #608]	; (8009c60 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a98      	ldr	r2, [pc, #608]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8009a04:	4013      	ands	r3, r2
 8009a06:	0019      	movs	r1, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	685a      	ldr	r2, [r3, #4]
 8009a0c:	23c0      	movs	r3, #192	; 0xc0
 8009a0e:	039b      	lsls	r3, r3, #14
 8009a10:	401a      	ands	r2, r3
 8009a12:	4b93      	ldr	r3, [pc, #588]	; (8009c60 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8009a14:	430a      	orrs	r2, r1
 8009a16:	601a      	str	r2, [r3, #0]
 8009a18:	4b91      	ldr	r3, [pc, #580]	; (8009c60 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8009a1a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	23c0      	movs	r3, #192	; 0xc0
 8009a22:	029b      	lsls	r3, r3, #10
 8009a24:	401a      	ands	r2, r3
 8009a26:	4b8e      	ldr	r3, [pc, #568]	; (8009c60 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8009a28:	430a      	orrs	r2, r1
 8009a2a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009a2c:	2317      	movs	r3, #23
 8009a2e:	18fb      	adds	r3, r7, r3
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d105      	bne.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a36:	4b8a      	ldr	r3, [pc, #552]	; (8009c60 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8009a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a3a:	4b89      	ldr	r3, [pc, #548]	; (8009c60 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8009a3c:	498a      	ldr	r1, [pc, #552]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009a3e:	400a      	ands	r2, r1
 8009a40:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2201      	movs	r2, #1
 8009a48:	4013      	ands	r3, r2
 8009a4a:	d01e      	beq.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d010      	beq.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d00c      	beq.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	2b03      	cmp	r3, #3
 8009a62:	d008      	beq.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d004      	beq.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8009a6c:	4b7f      	ldr	r3, [pc, #508]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x500>)
 8009a6e:	21dd      	movs	r1, #221	; 0xdd
 8009a70:	0018      	movs	r0, r3
 8009a72:	f7fc f9c4 	bl	8005dfe <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009a76:	4b7a      	ldr	r3, [pc, #488]	; (8009c60 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8009a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a7a:	2203      	movs	r2, #3
 8009a7c:	4393      	bics	r3, r2
 8009a7e:	0019      	movs	r1, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	68da      	ldr	r2, [r3, #12]
 8009a84:	4b76      	ldr	r3, [pc, #472]	; (8009c60 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8009a86:	430a      	orrs	r2, r1
 8009a88:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2202      	movs	r2, #2
 8009a90:	4013      	ands	r3, r2
 8009a92:	d01e      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d010      	beq.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x352>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	691b      	ldr	r3, [r3, #16]
 8009aa0:	2b04      	cmp	r3, #4
 8009aa2:	d00c      	beq.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x352>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	691b      	ldr	r3, [r3, #16]
 8009aa8:	2b0c      	cmp	r3, #12
 8009aaa:	d008      	beq.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x352>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	2b08      	cmp	r3, #8
 8009ab2:	d004      	beq.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x352>
 8009ab4:	4b6d      	ldr	r3, [pc, #436]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x500>)
 8009ab6:	21e8      	movs	r1, #232	; 0xe8
 8009ab8:	0018      	movs	r0, r3
 8009aba:	f7fc f9a0 	bl	8005dfe <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009abe:	4b68      	ldr	r3, [pc, #416]	; (8009c60 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8009ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ac2:	220c      	movs	r2, #12
 8009ac4:	4393      	bics	r3, r2
 8009ac6:	0019      	movs	r1, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	691a      	ldr	r2, [r3, #16]
 8009acc:	4b64      	ldr	r3, [pc, #400]	; (8009c60 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8009ace:	430a      	orrs	r2, r1
 8009ad0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2204      	movs	r2, #4
 8009ad8:	4013      	ands	r3, r2
 8009ada:	d024      	beq.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	695b      	ldr	r3, [r3, #20]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d016      	beq.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	695a      	ldr	r2, [r3, #20]
 8009ae8:	2380      	movs	r3, #128	; 0x80
 8009aea:	00db      	lsls	r3, r3, #3
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d010      	beq.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	695a      	ldr	r2, [r3, #20]
 8009af4:	23c0      	movs	r3, #192	; 0xc0
 8009af6:	011b      	lsls	r3, r3, #4
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d00a      	beq.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	695a      	ldr	r2, [r3, #20]
 8009b00:	2380      	movs	r3, #128	; 0x80
 8009b02:	011b      	lsls	r3, r3, #4
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d004      	beq.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8009b08:	4b58      	ldr	r3, [pc, #352]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x500>)
 8009b0a:	21f2      	movs	r1, #242	; 0xf2
 8009b0c:	0018      	movs	r0, r3
 8009b0e:	f7fc f976 	bl	8005dfe <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009b12:	4b53      	ldr	r3, [pc, #332]	; (8009c60 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8009b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b16:	4a56      	ldr	r2, [pc, #344]	; (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009b18:	4013      	ands	r3, r2
 8009b1a:	0019      	movs	r1, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	695a      	ldr	r2, [r3, #20]
 8009b20:	4b4f      	ldr	r3, [pc, #316]	; (8009c60 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8009b22:	430a      	orrs	r2, r1
 8009b24:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2208      	movs	r2, #8
 8009b2c:	4013      	ands	r3, r2
 8009b2e:	d01e      	beq.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x402>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	699b      	ldr	r3, [r3, #24]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d010      	beq.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	699a      	ldr	r2, [r3, #24]
 8009b3c:	2380      	movs	r3, #128	; 0x80
 8009b3e:	015b      	lsls	r3, r3, #5
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d00a      	beq.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	699a      	ldr	r2, [r3, #24]
 8009b48:	2380      	movs	r3, #128	; 0x80
 8009b4a:	019b      	lsls	r3, r3, #6
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d004      	beq.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 8009b50:	4b46      	ldr	r3, [pc, #280]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x500>)
 8009b52:	21fc      	movs	r1, #252	; 0xfc
 8009b54:	0018      	movs	r0, r3
 8009b56:	f7fc f952 	bl	8005dfe <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009b5a:	4b41      	ldr	r3, [pc, #260]	; (8009c60 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8009b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b5e:	4a45      	ldr	r2, [pc, #276]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8009b60:	4013      	ands	r3, r2
 8009b62:	0019      	movs	r1, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	699a      	ldr	r2, [r3, #24]
 8009b68:	4b3d      	ldr	r3, [pc, #244]	; (8009c60 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8009b6a:	430a      	orrs	r2, r1
 8009b6c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	2380      	movs	r3, #128	; 0x80
 8009b74:	005b      	lsls	r3, r3, #1
 8009b76:	4013      	ands	r3, r2
 8009b78:	d021      	beq.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	69db      	ldr	r3, [r3, #28]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d013      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	69da      	ldr	r2, [r3, #28]
 8009b86:	2380      	movs	r3, #128	; 0x80
 8009b88:	025b      	lsls	r3, r3, #9
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d00d      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	69da      	ldr	r2, [r3, #28]
 8009b92:	2380      	movs	r3, #128	; 0x80
 8009b94:	029b      	lsls	r3, r3, #10
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d007      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009b9a:	2308      	movs	r3, #8
 8009b9c:	33ff      	adds	r3, #255	; 0xff
 8009b9e:	001a      	movs	r2, r3
 8009ba0:	4b32      	ldr	r3, [pc, #200]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x500>)
 8009ba2:	0011      	movs	r1, r2
 8009ba4:	0018      	movs	r0, r3
 8009ba6:	f7fc f92a 	bl	8005dfe <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009baa:	4b2d      	ldr	r3, [pc, #180]	; (8009c60 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8009bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bae:	4a32      	ldr	r2, [pc, #200]	; (8009c78 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	0019      	movs	r1, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	69da      	ldr	r2, [r3, #28]
 8009bb8:	4b29      	ldr	r3, [pc, #164]	; (8009c60 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8009bba:	430a      	orrs	r2, r1
 8009bbc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2240      	movs	r2, #64	; 0x40
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	d01a      	beq.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x492>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bcc:	2380      	movs	r3, #128	; 0x80
 8009bce:	04db      	lsls	r3, r3, #19
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d00a      	beq.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d006      	beq.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8009bdc:	2389      	movs	r3, #137	; 0x89
 8009bde:	005a      	lsls	r2, r3, #1
 8009be0:	4b22      	ldr	r3, [pc, #136]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x500>)
 8009be2:	0011      	movs	r1, r2
 8009be4:	0018      	movs	r0, r3
 8009be6:	f7fc f90a 	bl	8005dfe <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009bea:	4b1d      	ldr	r3, [pc, #116]	; (8009c60 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8009bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bee:	4a23      	ldr	r2, [pc, #140]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8009bf0:	4013      	ands	r3, r2
 8009bf2:	0019      	movs	r1, r3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bf8:	4b19      	ldr	r3, [pc, #100]	; (8009c60 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8009bfa:	430a      	orrs	r2, r1
 8009bfc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2280      	movs	r2, #128	; 0x80
 8009c04:	4013      	ands	r3, r2
 8009c06:	d026      	beq.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6a1b      	ldr	r3, [r3, #32]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d018      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x4d6>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6a1a      	ldr	r2, [r3, #32]
 8009c14:	2380      	movs	r3, #128	; 0x80
 8009c16:	02db      	lsls	r3, r3, #11
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d012      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x4d6>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6a1a      	ldr	r2, [r3, #32]
 8009c20:	2380      	movs	r3, #128	; 0x80
 8009c22:	031b      	lsls	r3, r3, #12
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d00c      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x4d6>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6a1a      	ldr	r2, [r3, #32]
 8009c2c:	23c0      	movs	r3, #192	; 0xc0
 8009c2e:	031b      	lsls	r3, r3, #12
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d006      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x4d6>
 8009c34:	238d      	movs	r3, #141	; 0x8d
 8009c36:	005a      	lsls	r2, r3, #1
 8009c38:	4b0c      	ldr	r3, [pc, #48]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x500>)
 8009c3a:	0011      	movs	r1, r2
 8009c3c:	0018      	movs	r0, r3
 8009c3e:	f7fc f8de 	bl	8005dfe <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8009c42:	4b07      	ldr	r3, [pc, #28]	; (8009c60 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8009c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c46:	4a0e      	ldr	r2, [pc, #56]	; (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8009c48:	4013      	ands	r3, r2
 8009c4a:	0019      	movs	r1, r3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a1a      	ldr	r2, [r3, #32]
 8009c50:	4b03      	ldr	r3, [pc, #12]	; (8009c60 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8009c52:	430a      	orrs	r2, r1
 8009c54:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	0018      	movs	r0, r3
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	b006      	add	sp, #24
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	40021000 	.word	0x40021000
 8009c64:	ffcfffff 	.word	0xffcfffff
 8009c68:	efffffff 	.word	0xefffffff
 8009c6c:	0800cc50 	.word	0x0800cc50
 8009c70:	fffff3ff 	.word	0xfffff3ff
 8009c74:	ffffcfff 	.word	0xffffcfff
 8009c78:	fffcffff 	.word	0xfffcffff
 8009c7c:	fbffffff 	.word	0xfbffffff
 8009c80:	fff3ffff 	.word	0xfff3ffff

08009c84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d101      	bne.n	8009c96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	e1a4      	b.n	8009fe0 <HAL_SPI_Init+0x35c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a7f      	ldr	r2, [pc, #508]	; (8009e98 <HAL_SPI_Init+0x214>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d00b      	beq.n	8009cb8 <HAL_SPI_Init+0x34>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a7d      	ldr	r2, [pc, #500]	; (8009e9c <HAL_SPI_Init+0x218>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d006      	beq.n	8009cb8 <HAL_SPI_Init+0x34>
 8009caa:	23a5      	movs	r3, #165	; 0xa5
 8009cac:	005a      	lsls	r2, r3, #1
 8009cae:	4b7c      	ldr	r3, [pc, #496]	; (8009ea0 <HAL_SPI_Init+0x21c>)
 8009cb0:	0011      	movs	r1, r2
 8009cb2:	0018      	movs	r0, r3
 8009cb4:	f7fc f8a3 	bl	8005dfe <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00d      	beq.n	8009cdc <HAL_SPI_Init+0x58>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	685a      	ldr	r2, [r3, #4]
 8009cc4:	2382      	movs	r3, #130	; 0x82
 8009cc6:	005b      	lsls	r3, r3, #1
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d007      	beq.n	8009cdc <HAL_SPI_Init+0x58>
 8009ccc:	234c      	movs	r3, #76	; 0x4c
 8009cce:	33ff      	adds	r3, #255	; 0xff
 8009cd0:	001a      	movs	r2, r3
 8009cd2:	4b73      	ldr	r3, [pc, #460]	; (8009ea0 <HAL_SPI_Init+0x21c>)
 8009cd4:	0011      	movs	r1, r2
 8009cd6:	0018      	movs	r0, r3
 8009cd8:	f7fc f891 	bl	8005dfe <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d012      	beq.n	8009d0a <HAL_SPI_Init+0x86>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	689a      	ldr	r2, [r3, #8]
 8009ce8:	2380      	movs	r3, #128	; 0x80
 8009cea:	00db      	lsls	r3, r3, #3
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d00c      	beq.n	8009d0a <HAL_SPI_Init+0x86>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	689a      	ldr	r2, [r3, #8]
 8009cf4:	2380      	movs	r3, #128	; 0x80
 8009cf6:	021b      	lsls	r3, r3, #8
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d006      	beq.n	8009d0a <HAL_SPI_Init+0x86>
 8009cfc:	23a6      	movs	r3, #166	; 0xa6
 8009cfe:	005a      	lsls	r2, r3, #1
 8009d00:	4b67      	ldr	r3, [pc, #412]	; (8009ea0 <HAL_SPI_Init+0x21c>)
 8009d02:	0011      	movs	r1, r2
 8009d04:	0018      	movs	r0, r3
 8009d06:	f7fc f87a 	bl	8005dfe <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	68da      	ldr	r2, [r3, #12]
 8009d0e:	2380      	movs	r3, #128	; 0x80
 8009d10:	011b      	lsls	r3, r3, #4
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d00b      	beq.n	8009d2e <HAL_SPI_Init+0xaa>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d007      	beq.n	8009d2e <HAL_SPI_Init+0xaa>
 8009d1e:	234e      	movs	r3, #78	; 0x4e
 8009d20:	33ff      	adds	r3, #255	; 0xff
 8009d22:	001a      	movs	r2, r3
 8009d24:	4b5e      	ldr	r3, [pc, #376]	; (8009ea0 <HAL_SPI_Init+0x21c>)
 8009d26:	0011      	movs	r1, r2
 8009d28:	0018      	movs	r0, r3
 8009d2a:	f7fc f868 	bl	8005dfe <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	699a      	ldr	r2, [r3, #24]
 8009d32:	2380      	movs	r3, #128	; 0x80
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d010      	beq.n	8009d5c <HAL_SPI_Init+0xd8>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	699b      	ldr	r3, [r3, #24]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d00c      	beq.n	8009d5c <HAL_SPI_Init+0xd8>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	699a      	ldr	r2, [r3, #24]
 8009d46:	2380      	movs	r3, #128	; 0x80
 8009d48:	02db      	lsls	r3, r3, #11
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d006      	beq.n	8009d5c <HAL_SPI_Init+0xd8>
 8009d4e:	23a7      	movs	r3, #167	; 0xa7
 8009d50:	005a      	lsls	r2, r3, #1
 8009d52:	4b53      	ldr	r3, [pc, #332]	; (8009ea0 <HAL_SPI_Init+0x21c>)
 8009d54:	0011      	movs	r1, r2
 8009d56:	0018      	movs	r0, r3
 8009d58:	f7fc f851 	bl	8005dfe <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	69db      	ldr	r3, [r3, #28]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d023      	beq.n	8009dac <HAL_SPI_Init+0x128>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	69db      	ldr	r3, [r3, #28]
 8009d68:	2b08      	cmp	r3, #8
 8009d6a:	d01f      	beq.n	8009dac <HAL_SPI_Init+0x128>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	69db      	ldr	r3, [r3, #28]
 8009d70:	2b10      	cmp	r3, #16
 8009d72:	d01b      	beq.n	8009dac <HAL_SPI_Init+0x128>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	69db      	ldr	r3, [r3, #28]
 8009d78:	2b18      	cmp	r3, #24
 8009d7a:	d017      	beq.n	8009dac <HAL_SPI_Init+0x128>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	69db      	ldr	r3, [r3, #28]
 8009d80:	2b20      	cmp	r3, #32
 8009d82:	d013      	beq.n	8009dac <HAL_SPI_Init+0x128>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	69db      	ldr	r3, [r3, #28]
 8009d88:	2b28      	cmp	r3, #40	; 0x28
 8009d8a:	d00f      	beq.n	8009dac <HAL_SPI_Init+0x128>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	69db      	ldr	r3, [r3, #28]
 8009d90:	2b30      	cmp	r3, #48	; 0x30
 8009d92:	d00b      	beq.n	8009dac <HAL_SPI_Init+0x128>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	69db      	ldr	r3, [r3, #28]
 8009d98:	2b38      	cmp	r3, #56	; 0x38
 8009d9a:	d007      	beq.n	8009dac <HAL_SPI_Init+0x128>
 8009d9c:	2350      	movs	r3, #80	; 0x50
 8009d9e:	33ff      	adds	r3, #255	; 0xff
 8009da0:	001a      	movs	r2, r3
 8009da2:	4b3f      	ldr	r3, [pc, #252]	; (8009ea0 <HAL_SPI_Init+0x21c>)
 8009da4:	0011      	movs	r1, r2
 8009da6:	0018      	movs	r0, r3
 8009da8:	f7fc f829 	bl	8005dfe <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a1b      	ldr	r3, [r3, #32]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d00a      	beq.n	8009dca <HAL_SPI_Init+0x146>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6a1b      	ldr	r3, [r3, #32]
 8009db8:	2b80      	cmp	r3, #128	; 0x80
 8009dba:	d006      	beq.n	8009dca <HAL_SPI_Init+0x146>
 8009dbc:	23a8      	movs	r3, #168	; 0xa8
 8009dbe:	005a      	lsls	r2, r3, #1
 8009dc0:	4b37      	ldr	r3, [pc, #220]	; (8009ea0 <HAL_SPI_Init+0x21c>)
 8009dc2:	0011      	movs	r1, r2
 8009dc4:	0018      	movs	r0, r3
 8009dc6:	f7fc f81a 	bl	8005dfe <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00b      	beq.n	8009dea <HAL_SPI_Init+0x166>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd6:	2b10      	cmp	r3, #16
 8009dd8:	d007      	beq.n	8009dea <HAL_SPI_Init+0x166>
 8009dda:	2352      	movs	r3, #82	; 0x52
 8009ddc:	33ff      	adds	r3, #255	; 0xff
 8009dde:	001a      	movs	r2, r3
 8009de0:	4b2f      	ldr	r3, [pc, #188]	; (8009ea0 <HAL_SPI_Init+0x21c>)
 8009de2:	0011      	movs	r1, r2
 8009de4:	0018      	movs	r0, r3
 8009de6:	f7fc f80a 	bl	8005dfe <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d158      	bne.n	8009ea4 <HAL_SPI_Init+0x220>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00a      	beq.n	8009e10 <HAL_SPI_Init+0x18c>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	d006      	beq.n	8009e10 <HAL_SPI_Init+0x18c>
 8009e02:	23aa      	movs	r3, #170	; 0xaa
 8009e04:	005a      	lsls	r2, r3, #1
 8009e06:	4b26      	ldr	r3, [pc, #152]	; (8009ea0 <HAL_SPI_Init+0x21c>)
 8009e08:	0011      	movs	r1, r2
 8009e0a:	0018      	movs	r0, r3
 8009e0c:	f7fb fff7 	bl	8005dfe <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	695b      	ldr	r3, [r3, #20]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00b      	beq.n	8009e30 <HAL_SPI_Init+0x1ac>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	695b      	ldr	r3, [r3, #20]
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d007      	beq.n	8009e30 <HAL_SPI_Init+0x1ac>
 8009e20:	2356      	movs	r3, #86	; 0x56
 8009e22:	33ff      	adds	r3, #255	; 0xff
 8009e24:	001a      	movs	r2, r3
 8009e26:	4b1e      	ldr	r3, [pc, #120]	; (8009ea0 <HAL_SPI_Init+0x21c>)
 8009e28:	0011      	movs	r1, r2
 8009e2a:	0018      	movs	r0, r3
 8009e2c:	f7fb ffe7 	bl	8005dfe <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	685a      	ldr	r2, [r3, #4]
 8009e34:	2382      	movs	r3, #130	; 0x82
 8009e36:	005b      	lsls	r3, r3, #1
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d129      	bne.n	8009e90 <HAL_SPI_Init+0x20c>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	69db      	ldr	r3, [r3, #28]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d100      	bne.n	8009e46 <HAL_SPI_Init+0x1c2>
 8009e44:	e05c      	b.n	8009f00 <HAL_SPI_Init+0x27c>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	69db      	ldr	r3, [r3, #28]
 8009e4a:	2b08      	cmp	r3, #8
 8009e4c:	d058      	beq.n	8009f00 <HAL_SPI_Init+0x27c>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	69db      	ldr	r3, [r3, #28]
 8009e52:	2b10      	cmp	r3, #16
 8009e54:	d054      	beq.n	8009f00 <HAL_SPI_Init+0x27c>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	69db      	ldr	r3, [r3, #28]
 8009e5a:	2b18      	cmp	r3, #24
 8009e5c:	d050      	beq.n	8009f00 <HAL_SPI_Init+0x27c>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	69db      	ldr	r3, [r3, #28]
 8009e62:	2b20      	cmp	r3, #32
 8009e64:	d04c      	beq.n	8009f00 <HAL_SPI_Init+0x27c>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	69db      	ldr	r3, [r3, #28]
 8009e6a:	2b28      	cmp	r3, #40	; 0x28
 8009e6c:	d048      	beq.n	8009f00 <HAL_SPI_Init+0x27c>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	69db      	ldr	r3, [r3, #28]
 8009e72:	2b30      	cmp	r3, #48	; 0x30
 8009e74:	d044      	beq.n	8009f00 <HAL_SPI_Init+0x27c>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	69db      	ldr	r3, [r3, #28]
 8009e7a:	2b38      	cmp	r3, #56	; 0x38
 8009e7c:	d040      	beq.n	8009f00 <HAL_SPI_Init+0x27c>
 8009e7e:	235a      	movs	r3, #90	; 0x5a
 8009e80:	33ff      	adds	r3, #255	; 0xff
 8009e82:	001a      	movs	r2, r3
 8009e84:	4b06      	ldr	r3, [pc, #24]	; (8009ea0 <HAL_SPI_Init+0x21c>)
 8009e86:	0011      	movs	r1, r2
 8009e88:	0018      	movs	r0, r3
 8009e8a:	f7fb ffb8 	bl	8005dfe <assert_failed>
 8009e8e:	e037      	b.n	8009f00 <HAL_SPI_Init+0x27c>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	61da      	str	r2, [r3, #28]
 8009e96:	e033      	b.n	8009f00 <HAL_SPI_Init+0x27c>
 8009e98:	40013000 	.word	0x40013000
 8009e9c:	40003800 	.word	0x40003800
 8009ea0:	0800cc8c 	.word	0x0800cc8c
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	69db      	ldr	r3, [r3, #28]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d023      	beq.n	8009ef4 <HAL_SPI_Init+0x270>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	69db      	ldr	r3, [r3, #28]
 8009eb0:	2b08      	cmp	r3, #8
 8009eb2:	d01f      	beq.n	8009ef4 <HAL_SPI_Init+0x270>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	69db      	ldr	r3, [r3, #28]
 8009eb8:	2b10      	cmp	r3, #16
 8009eba:	d01b      	beq.n	8009ef4 <HAL_SPI_Init+0x270>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	69db      	ldr	r3, [r3, #28]
 8009ec0:	2b18      	cmp	r3, #24
 8009ec2:	d017      	beq.n	8009ef4 <HAL_SPI_Init+0x270>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	69db      	ldr	r3, [r3, #28]
 8009ec8:	2b20      	cmp	r3, #32
 8009eca:	d013      	beq.n	8009ef4 <HAL_SPI_Init+0x270>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	69db      	ldr	r3, [r3, #28]
 8009ed0:	2b28      	cmp	r3, #40	; 0x28
 8009ed2:	d00f      	beq.n	8009ef4 <HAL_SPI_Init+0x270>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	69db      	ldr	r3, [r3, #28]
 8009ed8:	2b30      	cmp	r3, #48	; 0x30
 8009eda:	d00b      	beq.n	8009ef4 <HAL_SPI_Init+0x270>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	69db      	ldr	r3, [r3, #28]
 8009ee0:	2b38      	cmp	r3, #56	; 0x38
 8009ee2:	d007      	beq.n	8009ef4 <HAL_SPI_Init+0x270>
 8009ee4:	2364      	movs	r3, #100	; 0x64
 8009ee6:	33ff      	adds	r3, #255	; 0xff
 8009ee8:	001a      	movs	r2, r3
 8009eea:	4b3f      	ldr	r3, [pc, #252]	; (8009fe8 <HAL_SPI_Init+0x364>)
 8009eec:	0011      	movs	r1, r2
 8009eee:	0018      	movs	r0, r3
 8009ef0:	f7fb ff85 	bl	8005dfe <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2251      	movs	r2, #81	; 0x51
 8009f0a:	5c9b      	ldrb	r3, [r3, r2]
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d107      	bne.n	8009f22 <HAL_SPI_Init+0x29e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2250      	movs	r2, #80	; 0x50
 8009f16:	2100      	movs	r1, #0
 8009f18:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	0018      	movs	r0, r3
 8009f1e:	f7fd f8b5 	bl	800708c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2251      	movs	r2, #81	; 0x51
 8009f26:	2102      	movs	r1, #2
 8009f28:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	2140      	movs	r1, #64	; 0x40
 8009f36:	438a      	bics	r2, r1
 8009f38:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	685a      	ldr	r2, [r3, #4]
 8009f3e:	2382      	movs	r3, #130	; 0x82
 8009f40:	005b      	lsls	r3, r3, #1
 8009f42:	401a      	ands	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6899      	ldr	r1, [r3, #8]
 8009f48:	2384      	movs	r3, #132	; 0x84
 8009f4a:	021b      	lsls	r3, r3, #8
 8009f4c:	400b      	ands	r3, r1
 8009f4e:	431a      	orrs	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	68d9      	ldr	r1, [r3, #12]
 8009f54:	2380      	movs	r3, #128	; 0x80
 8009f56:	011b      	lsls	r3, r3, #4
 8009f58:	400b      	ands	r3, r1
 8009f5a:	431a      	orrs	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	691b      	ldr	r3, [r3, #16]
 8009f60:	2102      	movs	r1, #2
 8009f62:	400b      	ands	r3, r1
 8009f64:	431a      	orrs	r2, r3
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	695b      	ldr	r3, [r3, #20]
 8009f6a:	2101      	movs	r1, #1
 8009f6c:	400b      	ands	r3, r1
 8009f6e:	431a      	orrs	r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6999      	ldr	r1, [r3, #24]
 8009f74:	2380      	movs	r3, #128	; 0x80
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	400b      	ands	r3, r1
 8009f7a:	431a      	orrs	r2, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	69db      	ldr	r3, [r3, #28]
 8009f80:	2138      	movs	r1, #56	; 0x38
 8009f82:	400b      	ands	r3, r1
 8009f84:	431a      	orrs	r2, r3
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a1b      	ldr	r3, [r3, #32]
 8009f8a:	2180      	movs	r1, #128	; 0x80
 8009f8c:	400b      	ands	r3, r1
 8009f8e:	431a      	orrs	r2, r3
 8009f90:	0011      	movs	r1, r2
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f96:	2380      	movs	r3, #128	; 0x80
 8009f98:	019b      	lsls	r3, r3, #6
 8009f9a:	401a      	ands	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	430a      	orrs	r2, r1
 8009fa2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	699b      	ldr	r3, [r3, #24]
 8009fa8:	0c1b      	lsrs	r3, r3, #16
 8009faa:	2204      	movs	r2, #4
 8009fac:	4013      	ands	r3, r2
 8009fae:	0019      	movs	r1, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb4:	2210      	movs	r2, #16
 8009fb6:	401a      	ands	r2, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	430a      	orrs	r2, r1
 8009fbe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	69da      	ldr	r2, [r3, #28]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4908      	ldr	r1, [pc, #32]	; (8009fec <HAL_SPI_Init+0x368>)
 8009fcc:	400a      	ands	r2, r1
 8009fce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2251      	movs	r2, #81	; 0x51
 8009fda:	2101      	movs	r1, #1
 8009fdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	0018      	movs	r0, r3
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	b002      	add	sp, #8
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	0800cc8c 	.word	0x0800cc8c
 8009fec:	fffff7ff 	.word	0xfffff7ff

08009ff0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b08c      	sub	sp, #48	; 0x30
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
 8009ffc:	001a      	movs	r2, r3
 8009ffe:	1cbb      	adds	r3, r7, #2
 800a000:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a002:	2301      	movs	r3, #1
 800a004:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a006:	232b      	movs	r3, #43	; 0x2b
 800a008:	18fb      	adds	r3, r7, r3
 800a00a:	2200      	movs	r2, #0
 800a00c:	701a      	strb	r2, [r3, #0]

  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d014      	beq.n	800a040 <HAL_SPI_TransmitReceive+0x50>
  {
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pTxData));
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	2201      	movs	r2, #1
 800a01a:	4013      	ands	r3, r2
 800a01c:	d005      	beq.n	800a02a <HAL_SPI_TransmitReceive+0x3a>
 800a01e:	4ac6      	ldr	r2, [pc, #792]	; (800a338 <HAL_SPI_TransmitReceive+0x348>)
 800a020:	4bc6      	ldr	r3, [pc, #792]	; (800a33c <HAL_SPI_TransmitReceive+0x34c>)
 800a022:	0011      	movs	r1, r2
 800a024:	0018      	movs	r0, r3
 800a026:	f7fb feea 	bl	8005dfe <assert_failed>
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pRxData));
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2201      	movs	r2, #1
 800a02e:	4013      	ands	r3, r2
 800a030:	d006      	beq.n	800a040 <HAL_SPI_TransmitReceive+0x50>
 800a032:	2393      	movs	r3, #147	; 0x93
 800a034:	00da      	lsls	r2, r3, #3
 800a036:	4bc1      	ldr	r3, [pc, #772]	; (800a33c <HAL_SPI_TransmitReceive+0x34c>)
 800a038:	0011      	movs	r1, r2
 800a03a:	0018      	movs	r0, r3
 800a03c:	f7fb fedf 	bl	8005dfe <assert_failed>
  }

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d005      	beq.n	800a054 <HAL_SPI_TransmitReceive+0x64>
 800a048:	4abd      	ldr	r2, [pc, #756]	; (800a340 <HAL_SPI_TransmitReceive+0x350>)
 800a04a:	4bbc      	ldr	r3, [pc, #752]	; (800a33c <HAL_SPI_TransmitReceive+0x34c>)
 800a04c:	0011      	movs	r1, r2
 800a04e:	0018      	movs	r0, r3
 800a050:	f7fb fed5 	bl	8005dfe <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2250      	movs	r2, #80	; 0x50
 800a058:	5c9b      	ldrb	r3, [r3, r2]
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d101      	bne.n	800a062 <HAL_SPI_TransmitReceive+0x72>
 800a05e:	2302      	movs	r3, #2
 800a060:	e1a6      	b.n	800a3b0 <HAL_SPI_TransmitReceive+0x3c0>
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2250      	movs	r2, #80	; 0x50
 800a066:	2101      	movs	r1, #1
 800a068:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a06a:	f7fd f9b7 	bl	80073dc <HAL_GetTick>
 800a06e:	0003      	movs	r3, r0
 800a070:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a072:	2023      	movs	r0, #35	; 0x23
 800a074:	183b      	adds	r3, r7, r0
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	2151      	movs	r1, #81	; 0x51
 800a07a:	5c52      	ldrb	r2, [r2, r1]
 800a07c:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a084:	231a      	movs	r3, #26
 800a086:	18fb      	adds	r3, r7, r3
 800a088:	1cba      	adds	r2, r7, #2
 800a08a:	8812      	ldrh	r2, [r2, #0]
 800a08c:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a08e:	183b      	adds	r3, r7, r0
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	2b01      	cmp	r3, #1
 800a094:	d011      	beq.n	800a0ba <HAL_SPI_TransmitReceive+0xca>
 800a096:	69fa      	ldr	r2, [r7, #28]
 800a098:	2382      	movs	r3, #130	; 0x82
 800a09a:	005b      	lsls	r3, r3, #1
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d107      	bne.n	800a0b0 <HAL_SPI_TransmitReceive+0xc0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d103      	bne.n	800a0b0 <HAL_SPI_TransmitReceive+0xc0>
 800a0a8:	183b      	adds	r3, r7, r0
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	2b04      	cmp	r3, #4
 800a0ae:	d004      	beq.n	800a0ba <HAL_SPI_TransmitReceive+0xca>
  {
    errorcode = HAL_BUSY;
 800a0b0:	232b      	movs	r3, #43	; 0x2b
 800a0b2:	18fb      	adds	r3, r7, r3
 800a0b4:	2202      	movs	r2, #2
 800a0b6:	701a      	strb	r2, [r3, #0]
    goto error;
 800a0b8:	e16f      	b.n	800a39a <HAL_SPI_TransmitReceive+0x3aa>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d006      	beq.n	800a0ce <HAL_SPI_TransmitReceive+0xde>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d003      	beq.n	800a0ce <HAL_SPI_TransmitReceive+0xde>
 800a0c6:	1cbb      	adds	r3, r7, #2
 800a0c8:	881b      	ldrh	r3, [r3, #0]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d104      	bne.n	800a0d8 <HAL_SPI_TransmitReceive+0xe8>
  {
    errorcode = HAL_ERROR;
 800a0ce:	232b      	movs	r3, #43	; 0x2b
 800a0d0:	18fb      	adds	r3, r7, r3
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	701a      	strb	r2, [r3, #0]
    goto error;
 800a0d6:	e160      	b.n	800a39a <HAL_SPI_TransmitReceive+0x3aa>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2251      	movs	r2, #81	; 0x51
 800a0dc:	5c9b      	ldrb	r3, [r3, r2]
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	2b04      	cmp	r3, #4
 800a0e2:	d003      	beq.n	800a0ec <HAL_SPI_TransmitReceive+0xfc>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2251      	movs	r2, #81	; 0x51
 800a0e8:	2105      	movs	r1, #5
 800a0ea:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	1cba      	adds	r2, r7, #2
 800a0fc:	8812      	ldrh	r2, [r2, #0]
 800a0fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	1cba      	adds	r2, r7, #2
 800a104:	8812      	ldrh	r2, [r2, #0]
 800a106:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	1cba      	adds	r2, r7, #2
 800a112:	8812      	ldrh	r2, [r2, #0]
 800a114:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	1cba      	adds	r2, r7, #2
 800a11a:	8812      	ldrh	r2, [r2, #0]
 800a11c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2200      	movs	r2, #0
 800a122:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2200      	movs	r2, #0
 800a128:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2240      	movs	r2, #64	; 0x40
 800a132:	4013      	ands	r3, r2
 800a134:	2b40      	cmp	r3, #64	; 0x40
 800a136:	d007      	beq.n	800a148 <HAL_SPI_TransmitReceive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2140      	movs	r1, #64	; 0x40
 800a144:	430a      	orrs	r2, r1
 800a146:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	68da      	ldr	r2, [r3, #12]
 800a14c:	2380      	movs	r3, #128	; 0x80
 800a14e:	011b      	lsls	r3, r3, #4
 800a150:	429a      	cmp	r2, r3
 800a152:	d000      	beq.n	800a156 <HAL_SPI_TransmitReceive+0x166>
 800a154:	e07a      	b.n	800a24c <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d004      	beq.n	800a168 <HAL_SPI_TransmitReceive+0x178>
 800a15e:	231a      	movs	r3, #26
 800a160:	18fb      	adds	r3, r7, r3
 800a162:	881b      	ldrh	r3, [r3, #0]
 800a164:	2b01      	cmp	r3, #1
 800a166:	d166      	bne.n	800a236 <HAL_SPI_TransmitReceive+0x246>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a16c:	881a      	ldrh	r2, [r3, #0]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a178:	1c9a      	adds	r2, r3, #2
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a182:	b29b      	uxth	r3, r3
 800a184:	3b01      	subs	r3, #1
 800a186:	b29a      	uxth	r2, r3
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a18c:	e053      	b.n	800a236 <HAL_SPI_TransmitReceive+0x246>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	2202      	movs	r2, #2
 800a196:	4013      	ands	r3, r2
 800a198:	2b02      	cmp	r3, #2
 800a19a:	d11b      	bne.n	800a1d4 <HAL_SPI_TransmitReceive+0x1e4>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d016      	beq.n	800a1d4 <HAL_SPI_TransmitReceive+0x1e4>
 800a1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d113      	bne.n	800a1d4 <HAL_SPI_TransmitReceive+0x1e4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b0:	881a      	ldrh	r2, [r3, #0]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1bc:	1c9a      	adds	r2, r3, #2
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	b29a      	uxth	r2, r3
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	4013      	ands	r3, r2
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d119      	bne.n	800a216 <HAL_SPI_TransmitReceive+0x226>
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d014      	beq.n	800a216 <HAL_SPI_TransmitReceive+0x226>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	68da      	ldr	r2, [r3, #12]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f6:	b292      	uxth	r2, r2
 800a1f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fe:	1c9a      	adds	r2, r3, #2
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a208:	b29b      	uxth	r3, r3
 800a20a:	3b01      	subs	r3, #1
 800a20c:	b29a      	uxth	r2, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a212:	2301      	movs	r3, #1
 800a214:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a216:	f7fd f8e1 	bl	80073dc <HAL_GetTick>
 800a21a:	0002      	movs	r2, r0
 800a21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21e:	1ad3      	subs	r3, r2, r3
 800a220:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a222:	429a      	cmp	r2, r3
 800a224:	d807      	bhi.n	800a236 <HAL_SPI_TransmitReceive+0x246>
 800a226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a228:	3301      	adds	r3, #1
 800a22a:	d004      	beq.n	800a236 <HAL_SPI_TransmitReceive+0x246>
      {
        errorcode = HAL_TIMEOUT;
 800a22c:	232b      	movs	r3, #43	; 0x2b
 800a22e:	18fb      	adds	r3, r7, r3
 800a230:	2203      	movs	r2, #3
 800a232:	701a      	strb	r2, [r3, #0]
        goto error;
 800a234:	e0b1      	b.n	800a39a <HAL_SPI_TransmitReceive+0x3aa>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d1a6      	bne.n	800a18e <HAL_SPI_TransmitReceive+0x19e>
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a244:	b29b      	uxth	r3, r3
 800a246:	2b00      	cmp	r3, #0
 800a248:	d1a1      	bne.n	800a18e <HAL_SPI_TransmitReceive+0x19e>
 800a24a:	e085      	b.n	800a358 <HAL_SPI_TransmitReceive+0x368>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d005      	beq.n	800a260 <HAL_SPI_TransmitReceive+0x270>
 800a254:	231a      	movs	r3, #26
 800a256:	18fb      	adds	r3, r7, r3
 800a258:	881b      	ldrh	r3, [r3, #0]
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d000      	beq.n	800a260 <HAL_SPI_TransmitReceive+0x270>
 800a25e:	e071      	b.n	800a344 <HAL_SPI_TransmitReceive+0x354>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	330c      	adds	r3, #12
 800a26a:	7812      	ldrb	r2, [r2, #0]
 800a26c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a272:	1c5a      	adds	r2, r3, #1
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	3b01      	subs	r3, #1
 800a280:	b29a      	uxth	r2, r3
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a286:	e05d      	b.n	800a344 <HAL_SPI_TransmitReceive+0x354>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	2202      	movs	r2, #2
 800a290:	4013      	ands	r3, r2
 800a292:	2b02      	cmp	r3, #2
 800a294:	d11c      	bne.n	800a2d0 <HAL_SPI_TransmitReceive+0x2e0>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d017      	beq.n	800a2d0 <HAL_SPI_TransmitReceive+0x2e0>
 800a2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d114      	bne.n	800a2d0 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	330c      	adds	r3, #12
 800a2b0:	7812      	ldrb	r2, [r2, #0]
 800a2b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b8:	1c5a      	adds	r2, r3, #1
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	b29a      	uxth	r2, r3
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	4013      	ands	r3, r2
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d119      	bne.n	800a312 <HAL_SPI_TransmitReceive+0x322>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d014      	beq.n	800a312 <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	68da      	ldr	r2, [r3, #12]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f2:	b2d2      	uxtb	r2, r2
 800a2f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2fa:	1c5a      	adds	r2, r3, #1
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a304:	b29b      	uxth	r3, r3
 800a306:	3b01      	subs	r3, #1
 800a308:	b29a      	uxth	r2, r3
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a30e:	2301      	movs	r3, #1
 800a310:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a312:	f7fd f863 	bl	80073dc <HAL_GetTick>
 800a316:	0002      	movs	r2, r0
 800a318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31a:	1ad3      	subs	r3, r2, r3
 800a31c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a31e:	429a      	cmp	r2, r3
 800a320:	d802      	bhi.n	800a328 <HAL_SPI_TransmitReceive+0x338>
 800a322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a324:	3301      	adds	r3, #1
 800a326:	d102      	bne.n	800a32e <HAL_SPI_TransmitReceive+0x33e>
 800a328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d10a      	bne.n	800a344 <HAL_SPI_TransmitReceive+0x354>
      {
        errorcode = HAL_TIMEOUT;
 800a32e:	232b      	movs	r3, #43	; 0x2b
 800a330:	18fb      	adds	r3, r7, r3
 800a332:	2203      	movs	r2, #3
 800a334:	701a      	strb	r2, [r3, #0]
        goto error;
 800a336:	e030      	b.n	800a39a <HAL_SPI_TransmitReceive+0x3aa>
 800a338:	00000497 	.word	0x00000497
 800a33c:	0800cc8c 	.word	0x0800cc8c
 800a340:	0000049c 	.word	0x0000049c
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a348:	b29b      	uxth	r3, r3
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d19c      	bne.n	800a288 <HAL_SPI_TransmitReceive+0x298>
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a352:	b29b      	uxth	r3, r3
 800a354:	2b00      	cmp	r3, #0
 800a356:	d197      	bne.n	800a288 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a35a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	0018      	movs	r0, r3
 800a360:	f000 f8b8 	bl	800a4d4 <SPI_EndRxTxTransaction>
 800a364:	1e03      	subs	r3, r0, #0
 800a366:	d007      	beq.n	800a378 <HAL_SPI_TransmitReceive+0x388>
  {
    errorcode = HAL_ERROR;
 800a368:	232b      	movs	r3, #43	; 0x2b
 800a36a:	18fb      	adds	r3, r7, r3
 800a36c:	2201      	movs	r2, #1
 800a36e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2220      	movs	r2, #32
 800a374:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a376:	e010      	b.n	800a39a <HAL_SPI_TransmitReceive+0x3aa>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d10b      	bne.n	800a398 <HAL_SPI_TransmitReceive+0x3a8>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a380:	2300      	movs	r3, #0
 800a382:	617b      	str	r3, [r7, #20]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	617b      	str	r3, [r7, #20]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	617b      	str	r3, [r7, #20]
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	e000      	b.n	800a39a <HAL_SPI_TransmitReceive+0x3aa>
  }

error :
 800a398:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2251      	movs	r2, #81	; 0x51
 800a39e:	2101      	movs	r1, #1
 800a3a0:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2250      	movs	r2, #80	; 0x50
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800a3aa:	232b      	movs	r3, #43	; 0x2b
 800a3ac:	18fb      	adds	r3, r7, r3
 800a3ae:	781b      	ldrb	r3, [r3, #0]
}
 800a3b0:	0018      	movs	r0, r3
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	b00c      	add	sp, #48	; 0x30
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b088      	sub	sp, #32
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	603b      	str	r3, [r7, #0]
 800a3c4:	1dfb      	adds	r3, r7, #7
 800a3c6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a3c8:	f7fd f808 	bl	80073dc <HAL_GetTick>
 800a3cc:	0002      	movs	r2, r0
 800a3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d0:	1a9b      	subs	r3, r3, r2
 800a3d2:	683a      	ldr	r2, [r7, #0]
 800a3d4:	18d3      	adds	r3, r2, r3
 800a3d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a3d8:	f7fd f800 	bl	80073dc <HAL_GetTick>
 800a3dc:	0003      	movs	r3, r0
 800a3de:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a3e0:	4b3a      	ldr	r3, [pc, #232]	; (800a4cc <SPI_WaitFlagStateUntilTimeout+0x114>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	015b      	lsls	r3, r3, #5
 800a3e6:	0d1b      	lsrs	r3, r3, #20
 800a3e8:	69fa      	ldr	r2, [r7, #28]
 800a3ea:	4353      	muls	r3, r2
 800a3ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a3ee:	e058      	b.n	800a4a2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	d055      	beq.n	800a4a2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a3f6:	f7fc fff1 	bl	80073dc <HAL_GetTick>
 800a3fa:	0002      	movs	r2, r0
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	1ad3      	subs	r3, r2, r3
 800a400:	69fa      	ldr	r2, [r7, #28]
 800a402:	429a      	cmp	r2, r3
 800a404:	d902      	bls.n	800a40c <SPI_WaitFlagStateUntilTimeout+0x54>
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d142      	bne.n	800a492 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	685a      	ldr	r2, [r3, #4]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	21e0      	movs	r1, #224	; 0xe0
 800a418:	438a      	bics	r2, r1
 800a41a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	685a      	ldr	r2, [r3, #4]
 800a420:	2382      	movs	r3, #130	; 0x82
 800a422:	005b      	lsls	r3, r3, #1
 800a424:	429a      	cmp	r2, r3
 800a426:	d113      	bne.n	800a450 <SPI_WaitFlagStateUntilTimeout+0x98>
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	689a      	ldr	r2, [r3, #8]
 800a42c:	2380      	movs	r3, #128	; 0x80
 800a42e:	021b      	lsls	r3, r3, #8
 800a430:	429a      	cmp	r2, r3
 800a432:	d005      	beq.n	800a440 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	689a      	ldr	r2, [r3, #8]
 800a438:	2380      	movs	r3, #128	; 0x80
 800a43a:	00db      	lsls	r3, r3, #3
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d107      	bne.n	800a450 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2140      	movs	r1, #64	; 0x40
 800a44c:	438a      	bics	r2, r1
 800a44e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a454:	2380      	movs	r3, #128	; 0x80
 800a456:	019b      	lsls	r3, r3, #6
 800a458:	429a      	cmp	r2, r3
 800a45a:	d110      	bne.n	800a47e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	491a      	ldr	r1, [pc, #104]	; (800a4d0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800a468:	400a      	ands	r2, r1
 800a46a:	601a      	str	r2, [r3, #0]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	2180      	movs	r1, #128	; 0x80
 800a478:	0189      	lsls	r1, r1, #6
 800a47a:	430a      	orrs	r2, r1
 800a47c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2251      	movs	r2, #81	; 0x51
 800a482:	2101      	movs	r1, #1
 800a484:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2250      	movs	r2, #80	; 0x50
 800a48a:	2100      	movs	r1, #0
 800a48c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a48e:	2303      	movs	r3, #3
 800a490:	e017      	b.n	800a4c2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d101      	bne.n	800a49c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800a498:	2300      	movs	r3, #0
 800a49a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	68ba      	ldr	r2, [r7, #8]
 800a4aa:	4013      	ands	r3, r2
 800a4ac:	68ba      	ldr	r2, [r7, #8]
 800a4ae:	1ad3      	subs	r3, r2, r3
 800a4b0:	425a      	negs	r2, r3
 800a4b2:	4153      	adcs	r3, r2
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	001a      	movs	r2, r3
 800a4b8:	1dfb      	adds	r3, r7, #7
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d197      	bne.n	800a3f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	0018      	movs	r0, r3
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	b008      	add	sp, #32
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	46c0      	nop			; (mov r8, r8)
 800a4cc:	2000004c 	.word	0x2000004c
 800a4d0:	ffffdfff 	.word	0xffffdfff

0800a4d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b088      	sub	sp, #32
 800a4d8:	af02      	add	r7, sp, #8
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a4e0:	4b1d      	ldr	r3, [pc, #116]	; (800a558 <SPI_EndRxTxTransaction+0x84>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	491d      	ldr	r1, [pc, #116]	; (800a55c <SPI_EndRxTxTransaction+0x88>)
 800a4e6:	0018      	movs	r0, r3
 800a4e8:	f7f5 fe0e 	bl	8000108 <__udivsi3>
 800a4ec:	0003      	movs	r3, r0
 800a4ee:	001a      	movs	r2, r3
 800a4f0:	0013      	movs	r3, r2
 800a4f2:	015b      	lsls	r3, r3, #5
 800a4f4:	1a9b      	subs	r3, r3, r2
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	189b      	adds	r3, r3, r2
 800a4fa:	00db      	lsls	r3, r3, #3
 800a4fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	685a      	ldr	r2, [r3, #4]
 800a502:	2382      	movs	r3, #130	; 0x82
 800a504:	005b      	lsls	r3, r3, #1
 800a506:	429a      	cmp	r2, r3
 800a508:	d112      	bne.n	800a530 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a50a:	68ba      	ldr	r2, [r7, #8]
 800a50c:	68f8      	ldr	r0, [r7, #12]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	9300      	str	r3, [sp, #0]
 800a512:	0013      	movs	r3, r2
 800a514:	2200      	movs	r2, #0
 800a516:	2180      	movs	r1, #128	; 0x80
 800a518:	f7ff ff4e 	bl	800a3b8 <SPI_WaitFlagStateUntilTimeout>
 800a51c:	1e03      	subs	r3, r0, #0
 800a51e:	d016      	beq.n	800a54e <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a524:	2220      	movs	r2, #32
 800a526:	431a      	orrs	r2, r3
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a52c:	2303      	movs	r3, #3
 800a52e:	e00f      	b.n	800a550 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d00a      	beq.n	800a54c <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	3b01      	subs	r3, #1
 800a53a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	2280      	movs	r2, #128	; 0x80
 800a544:	4013      	ands	r3, r2
 800a546:	2b80      	cmp	r3, #128	; 0x80
 800a548:	d0f2      	beq.n	800a530 <SPI_EndRxTxTransaction+0x5c>
 800a54a:	e000      	b.n	800a54e <SPI_EndRxTxTransaction+0x7a>
        break;
 800a54c:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800a54e:	2300      	movs	r3, #0
}
 800a550:	0018      	movs	r0, r3
 800a552:	46bd      	mov	sp, r7
 800a554:	b006      	add	sp, #24
 800a556:	bd80      	pop	{r7, pc}
 800a558:	2000004c 	.word	0x2000004c
 800a55c:	016e3600 	.word	0x016e3600

0800a560 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d101      	bne.n	800a572 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	e0b6      	b.n	800a6e0 <HAL_TIM_Base_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	2380      	movs	r3, #128	; 0x80
 800a578:	05db      	lsls	r3, r3, #23
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d01f      	beq.n	800a5be <HAL_TIM_Base_Init+0x5e>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a59      	ldr	r2, [pc, #356]	; (800a6e8 <HAL_TIM_Base_Init+0x188>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d01a      	beq.n	800a5be <HAL_TIM_Base_Init+0x5e>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a57      	ldr	r2, [pc, #348]	; (800a6ec <HAL_TIM_Base_Init+0x18c>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d015      	beq.n	800a5be <HAL_TIM_Base_Init+0x5e>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a56      	ldr	r2, [pc, #344]	; (800a6f0 <HAL_TIM_Base_Init+0x190>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d010      	beq.n	800a5be <HAL_TIM_Base_Init+0x5e>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a54      	ldr	r2, [pc, #336]	; (800a6f4 <HAL_TIM_Base_Init+0x194>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d00b      	beq.n	800a5be <HAL_TIM_Base_Init+0x5e>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a53      	ldr	r2, [pc, #332]	; (800a6f8 <HAL_TIM_Base_Init+0x198>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d006      	beq.n	800a5be <HAL_TIM_Base_Init+0x5e>
 800a5b0:	238b      	movs	r3, #139	; 0x8b
 800a5b2:	005a      	lsls	r2, r3, #1
 800a5b4:	4b51      	ldr	r3, [pc, #324]	; (800a6fc <HAL_TIM_Base_Init+0x19c>)
 800a5b6:	0011      	movs	r1, r2
 800a5b8:	0018      	movs	r0, r3
 800a5ba:	f7fb fc20 	bl	8005dfe <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d017      	beq.n	800a5f6 <HAL_TIM_Base_Init+0x96>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	2b10      	cmp	r3, #16
 800a5cc:	d013      	beq.n	800a5f6 <HAL_TIM_Base_Init+0x96>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	2b20      	cmp	r3, #32
 800a5d4:	d00f      	beq.n	800a5f6 <HAL_TIM_Base_Init+0x96>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	2b40      	cmp	r3, #64	; 0x40
 800a5dc:	d00b      	beq.n	800a5f6 <HAL_TIM_Base_Init+0x96>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	689b      	ldr	r3, [r3, #8]
 800a5e2:	2b60      	cmp	r3, #96	; 0x60
 800a5e4:	d007      	beq.n	800a5f6 <HAL_TIM_Base_Init+0x96>
 800a5e6:	2318      	movs	r3, #24
 800a5e8:	33ff      	adds	r3, #255	; 0xff
 800a5ea:	001a      	movs	r2, r3
 800a5ec:	4b43      	ldr	r3, [pc, #268]	; (800a6fc <HAL_TIM_Base_Init+0x19c>)
 800a5ee:	0011      	movs	r1, r2
 800a5f0:	0018      	movs	r0, r3
 800a5f2:	f7fb fc04 	bl	8005dfe <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	691b      	ldr	r3, [r3, #16]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d012      	beq.n	800a624 <HAL_TIM_Base_Init+0xc4>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	691a      	ldr	r2, [r3, #16]
 800a602:	2380      	movs	r3, #128	; 0x80
 800a604:	005b      	lsls	r3, r3, #1
 800a606:	429a      	cmp	r2, r3
 800a608:	d00c      	beq.n	800a624 <HAL_TIM_Base_Init+0xc4>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	691a      	ldr	r2, [r3, #16]
 800a60e:	2380      	movs	r3, #128	; 0x80
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	429a      	cmp	r2, r3
 800a614:	d006      	beq.n	800a624 <HAL_TIM_Base_Init+0xc4>
 800a616:	238c      	movs	r3, #140	; 0x8c
 800a618:	005a      	lsls	r2, r3, #1
 800a61a:	4b38      	ldr	r3, [pc, #224]	; (800a6fc <HAL_TIM_Base_Init+0x19c>)
 800a61c:	0011      	movs	r1, r2
 800a61e:	0018      	movs	r0, r3
 800a620:	f7fb fbed 	bl	8005dfe <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	68da      	ldr	r2, [r3, #12]
 800a628:	2380      	movs	r3, #128	; 0x80
 800a62a:	025b      	lsls	r3, r3, #9
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d307      	bcc.n	800a640 <HAL_TIM_Base_Init+0xe0>
 800a630:	231a      	movs	r3, #26
 800a632:	33ff      	adds	r3, #255	; 0xff
 800a634:	001a      	movs	r2, r3
 800a636:	4b31      	ldr	r3, [pc, #196]	; (800a6fc <HAL_TIM_Base_Init+0x19c>)
 800a638:	0011      	movs	r1, r2
 800a63a:	0018      	movs	r0, r3
 800a63c:	f7fb fbdf 	bl	8005dfe <assert_failed>
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	685a      	ldr	r2, [r3, #4]
 800a644:	2380      	movs	r3, #128	; 0x80
 800a646:	025b      	lsls	r3, r3, #9
 800a648:	429a      	cmp	r2, r3
 800a64a:	d306      	bcc.n	800a65a <HAL_TIM_Base_Init+0xfa>
 800a64c:	238d      	movs	r3, #141	; 0x8d
 800a64e:	005a      	lsls	r2, r3, #1
 800a650:	4b2a      	ldr	r3, [pc, #168]	; (800a6fc <HAL_TIM_Base_Init+0x19c>)
 800a652:	0011      	movs	r1, r2
 800a654:	0018      	movs	r0, r3
 800a656:	f7fb fbd2 	bl	8005dfe <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	695b      	ldr	r3, [r3, #20]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d00b      	beq.n	800a67a <HAL_TIM_Base_Init+0x11a>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	695b      	ldr	r3, [r3, #20]
 800a666:	2b80      	cmp	r3, #128	; 0x80
 800a668:	d007      	beq.n	800a67a <HAL_TIM_Base_Init+0x11a>
 800a66a:	231c      	movs	r3, #28
 800a66c:	33ff      	adds	r3, #255	; 0xff
 800a66e:	001a      	movs	r2, r3
 800a670:	4b22      	ldr	r3, [pc, #136]	; (800a6fc <HAL_TIM_Base_Init+0x19c>)
 800a672:	0011      	movs	r1, r2
 800a674:	0018      	movs	r0, r3
 800a676:	f7fb fbc2 	bl	8005dfe <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2239      	movs	r2, #57	; 0x39
 800a67e:	5c9b      	ldrb	r3, [r3, r2]
 800a680:	b2db      	uxtb	r3, r3
 800a682:	2b00      	cmp	r3, #0
 800a684:	d107      	bne.n	800a696 <HAL_TIM_Base_Init+0x136>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2238      	movs	r2, #56	; 0x38
 800a68a:	2100      	movs	r1, #0
 800a68c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	0018      	movs	r0, r3
 800a692:	f7fc fd61 	bl	8007158 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2239      	movs	r2, #57	; 0x39
 800a69a:	2102      	movs	r1, #2
 800a69c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	3304      	adds	r3, #4
 800a6a6:	0019      	movs	r1, r3
 800a6a8:	0010      	movs	r0, r2
 800a6aa:	f000 fe8f 	bl	800b3cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	223e      	movs	r2, #62	; 0x3e
 800a6b2:	2101      	movs	r1, #1
 800a6b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	223a      	movs	r2, #58	; 0x3a
 800a6ba:	2101      	movs	r1, #1
 800a6bc:	5499      	strb	r1, [r3, r2]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	223b      	movs	r2, #59	; 0x3b
 800a6c2:	2101      	movs	r1, #1
 800a6c4:	5499      	strb	r1, [r3, r2]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	223c      	movs	r2, #60	; 0x3c
 800a6ca:	2101      	movs	r1, #1
 800a6cc:	5499      	strb	r1, [r3, r2]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	223d      	movs	r2, #61	; 0x3d
 800a6d2:	2101      	movs	r1, #1
 800a6d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2239      	movs	r2, #57	; 0x39
 800a6da:	2101      	movs	r1, #1
 800a6dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a6de:	2300      	movs	r3, #0
}
 800a6e0:	0018      	movs	r0, r3
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	b002      	add	sp, #8
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	40000400 	.word	0x40000400
 800a6ec:	40001000 	.word	0x40001000
 800a6f0:	40001400 	.word	0x40001400
 800a6f4:	40010800 	.word	0x40010800
 800a6f8:	40011400 	.word	0x40011400
 800a6fc:	0800ccc4 	.word	0x0800ccc4

0800a700 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	2380      	movs	r3, #128	; 0x80
 800a70e:	05db      	lsls	r3, r3, #23
 800a710:	429a      	cmp	r2, r3
 800a712:	d01f      	beq.n	800a754 <HAL_TIM_Base_Start_IT+0x54>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a32      	ldr	r2, [pc, #200]	; (800a7e4 <HAL_TIM_Base_Start_IT+0xe4>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d01a      	beq.n	800a754 <HAL_TIM_Base_Start_IT+0x54>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a31      	ldr	r2, [pc, #196]	; (800a7e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d015      	beq.n	800a754 <HAL_TIM_Base_Start_IT+0x54>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a2f      	ldr	r2, [pc, #188]	; (800a7ec <HAL_TIM_Base_Start_IT+0xec>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d010      	beq.n	800a754 <HAL_TIM_Base_Start_IT+0x54>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a2e      	ldr	r2, [pc, #184]	; (800a7f0 <HAL_TIM_Base_Start_IT+0xf0>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d00b      	beq.n	800a754 <HAL_TIM_Base_Start_IT+0x54>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a2c      	ldr	r2, [pc, #176]	; (800a7f4 <HAL_TIM_Base_Start_IT+0xf4>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d006      	beq.n	800a754 <HAL_TIM_Base_Start_IT+0x54>
 800a746:	23e9      	movs	r3, #233	; 0xe9
 800a748:	005a      	lsls	r2, r3, #1
 800a74a:	4b2b      	ldr	r3, [pc, #172]	; (800a7f8 <HAL_TIM_Base_Start_IT+0xf8>)
 800a74c:	0011      	movs	r1, r2
 800a74e:	0018      	movs	r0, r3
 800a750:	f7fb fb55 	bl	8005dfe <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2239      	movs	r2, #57	; 0x39
 800a758:	5c9b      	ldrb	r3, [r3, r2]
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d001      	beq.n	800a764 <HAL_TIM_Base_Start_IT+0x64>
  {
    return HAL_ERROR;
 800a760:	2301      	movs	r3, #1
 800a762:	e03b      	b.n	800a7dc <HAL_TIM_Base_Start_IT+0xdc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2239      	movs	r2, #57	; 0x39
 800a768:	2102      	movs	r1, #2
 800a76a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	68da      	ldr	r2, [r3, #12]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	2101      	movs	r1, #1
 800a778:	430a      	orrs	r2, r1
 800a77a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	2380      	movs	r3, #128	; 0x80
 800a782:	05db      	lsls	r3, r3, #23
 800a784:	429a      	cmp	r2, r3
 800a786:	d00e      	beq.n	800a7a6 <HAL_TIM_Base_Start_IT+0xa6>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a15      	ldr	r2, [pc, #84]	; (800a7e4 <HAL_TIM_Base_Start_IT+0xe4>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d009      	beq.n	800a7a6 <HAL_TIM_Base_Start_IT+0xa6>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a16      	ldr	r2, [pc, #88]	; (800a7f0 <HAL_TIM_Base_Start_IT+0xf0>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d004      	beq.n	800a7a6 <HAL_TIM_Base_Start_IT+0xa6>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a14      	ldr	r2, [pc, #80]	; (800a7f4 <HAL_TIM_Base_Start_IT+0xf4>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d111      	bne.n	800a7ca <HAL_TIM_Base_Start_IT+0xca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	2207      	movs	r2, #7
 800a7ae:	4013      	ands	r3, r2
 800a7b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2b06      	cmp	r3, #6
 800a7b6:	d010      	beq.n	800a7da <HAL_TIM_Base_Start_IT+0xda>
    {
      __HAL_TIM_ENABLE(htim);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2101      	movs	r1, #1
 800a7c4:	430a      	orrs	r2, r1
 800a7c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7c8:	e007      	b.n	800a7da <HAL_TIM_Base_Start_IT+0xda>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2101      	movs	r1, #1
 800a7d6:	430a      	orrs	r2, r1
 800a7d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	0018      	movs	r0, r3
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	b004      	add	sp, #16
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	40000400 	.word	0x40000400
 800a7e8:	40001000 	.word	0x40001000
 800a7ec:	40001400 	.word	0x40001400
 800a7f0:	40010800 	.word	0x40010800
 800a7f4:	40011400 	.word	0x40011400
 800a7f8:	0800ccc4 	.word	0x0800ccc4

0800a7fc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d101      	bne.n	800a80e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	e0ae      	b.n	800a96c <HAL_TIM_OC_Init+0x170>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	2380      	movs	r3, #128	; 0x80
 800a814:	05db      	lsls	r3, r3, #23
 800a816:	429a      	cmp	r2, r3
 800a818:	d01e      	beq.n	800a858 <HAL_TIM_OC_Init+0x5c>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a55      	ldr	r2, [pc, #340]	; (800a974 <HAL_TIM_OC_Init+0x178>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d019      	beq.n	800a858 <HAL_TIM_OC_Init+0x5c>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a53      	ldr	r2, [pc, #332]	; (800a978 <HAL_TIM_OC_Init+0x17c>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d014      	beq.n	800a858 <HAL_TIM_OC_Init+0x5c>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4a52      	ldr	r2, [pc, #328]	; (800a97c <HAL_TIM_OC_Init+0x180>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d00f      	beq.n	800a858 <HAL_TIM_OC_Init+0x5c>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a50      	ldr	r2, [pc, #320]	; (800a980 <HAL_TIM_OC_Init+0x184>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d00a      	beq.n	800a858 <HAL_TIM_OC_Init+0x5c>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a4f      	ldr	r2, [pc, #316]	; (800a984 <HAL_TIM_OC_Init+0x188>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d005      	beq.n	800a858 <HAL_TIM_OC_Init+0x5c>
 800a84c:	4a4e      	ldr	r2, [pc, #312]	; (800a988 <HAL_TIM_OC_Init+0x18c>)
 800a84e:	4b4f      	ldr	r3, [pc, #316]	; (800a98c <HAL_TIM_OC_Init+0x190>)
 800a850:	0011      	movs	r1, r2
 800a852:	0018      	movs	r0, r3
 800a854:	f7fb fad3 	bl	8005dfe <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d015      	beq.n	800a88c <HAL_TIM_OC_Init+0x90>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	2b10      	cmp	r3, #16
 800a866:	d011      	beq.n	800a88c <HAL_TIM_OC_Init+0x90>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	2b20      	cmp	r3, #32
 800a86e:	d00d      	beq.n	800a88c <HAL_TIM_OC_Init+0x90>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	689b      	ldr	r3, [r3, #8]
 800a874:	2b40      	cmp	r3, #64	; 0x40
 800a876:	d009      	beq.n	800a88c <HAL_TIM_OC_Init+0x90>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	2b60      	cmp	r3, #96	; 0x60
 800a87e:	d005      	beq.n	800a88c <HAL_TIM_OC_Init+0x90>
 800a880:	4a43      	ldr	r2, [pc, #268]	; (800a990 <HAL_TIM_OC_Init+0x194>)
 800a882:	4b42      	ldr	r3, [pc, #264]	; (800a98c <HAL_TIM_OC_Init+0x190>)
 800a884:	0011      	movs	r1, r2
 800a886:	0018      	movs	r0, r3
 800a888:	f7fb fab9 	bl	8005dfe <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	691b      	ldr	r3, [r3, #16]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d011      	beq.n	800a8b8 <HAL_TIM_OC_Init+0xbc>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	691a      	ldr	r2, [r3, #16]
 800a898:	2380      	movs	r3, #128	; 0x80
 800a89a:	005b      	lsls	r3, r3, #1
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d00b      	beq.n	800a8b8 <HAL_TIM_OC_Init+0xbc>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	691a      	ldr	r2, [r3, #16]
 800a8a4:	2380      	movs	r3, #128	; 0x80
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d005      	beq.n	800a8b8 <HAL_TIM_OC_Init+0xbc>
 800a8ac:	4a39      	ldr	r2, [pc, #228]	; (800a994 <HAL_TIM_OC_Init+0x198>)
 800a8ae:	4b37      	ldr	r3, [pc, #220]	; (800a98c <HAL_TIM_OC_Init+0x190>)
 800a8b0:	0011      	movs	r1, r2
 800a8b2:	0018      	movs	r0, r3
 800a8b4:	f7fb faa3 	bl	8005dfe <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	68da      	ldr	r2, [r3, #12]
 800a8bc:	2380      	movs	r3, #128	; 0x80
 800a8be:	025b      	lsls	r3, r3, #9
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d306      	bcc.n	800a8d2 <HAL_TIM_OC_Init+0xd6>
 800a8c4:	23a6      	movs	r3, #166	; 0xa6
 800a8c6:	009a      	lsls	r2, r3, #2
 800a8c8:	4b30      	ldr	r3, [pc, #192]	; (800a98c <HAL_TIM_OC_Init+0x190>)
 800a8ca:	0011      	movs	r1, r2
 800a8cc:	0018      	movs	r0, r3
 800a8ce:	f7fb fa96 	bl	8005dfe <assert_failed>
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	685a      	ldr	r2, [r3, #4]
 800a8d6:	2380      	movs	r3, #128	; 0x80
 800a8d8:	025b      	lsls	r3, r3, #9
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d305      	bcc.n	800a8ea <HAL_TIM_OC_Init+0xee>
 800a8de:	4a2e      	ldr	r2, [pc, #184]	; (800a998 <HAL_TIM_OC_Init+0x19c>)
 800a8e0:	4b2a      	ldr	r3, [pc, #168]	; (800a98c <HAL_TIM_OC_Init+0x190>)
 800a8e2:	0011      	movs	r1, r2
 800a8e4:	0018      	movs	r0, r3
 800a8e6:	f7fb fa8a 	bl	8005dfe <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	695b      	ldr	r3, [r3, #20]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d009      	beq.n	800a906 <HAL_TIM_OC_Init+0x10a>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	695b      	ldr	r3, [r3, #20]
 800a8f6:	2b80      	cmp	r3, #128	; 0x80
 800a8f8:	d005      	beq.n	800a906 <HAL_TIM_OC_Init+0x10a>
 800a8fa:	4a28      	ldr	r2, [pc, #160]	; (800a99c <HAL_TIM_OC_Init+0x1a0>)
 800a8fc:	4b23      	ldr	r3, [pc, #140]	; (800a98c <HAL_TIM_OC_Init+0x190>)
 800a8fe:	0011      	movs	r1, r2
 800a900:	0018      	movs	r0, r3
 800a902:	f7fb fa7c 	bl	8005dfe <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2239      	movs	r2, #57	; 0x39
 800a90a:	5c9b      	ldrb	r3, [r3, r2]
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d107      	bne.n	800a922 <HAL_TIM_OC_Init+0x126>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2238      	movs	r2, #56	; 0x38
 800a916:	2100      	movs	r1, #0
 800a918:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	0018      	movs	r0, r3
 800a91e:	f000 f83f 	bl	800a9a0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2239      	movs	r2, #57	; 0x39
 800a926:	2102      	movs	r1, #2
 800a928:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681a      	ldr	r2, [r3, #0]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	3304      	adds	r3, #4
 800a932:	0019      	movs	r1, r3
 800a934:	0010      	movs	r0, r2
 800a936:	f000 fd49 	bl	800b3cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	223e      	movs	r2, #62	; 0x3e
 800a93e:	2101      	movs	r1, #1
 800a940:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	223a      	movs	r2, #58	; 0x3a
 800a946:	2101      	movs	r1, #1
 800a948:	5499      	strb	r1, [r3, r2]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	223b      	movs	r2, #59	; 0x3b
 800a94e:	2101      	movs	r1, #1
 800a950:	5499      	strb	r1, [r3, r2]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	223c      	movs	r2, #60	; 0x3c
 800a956:	2101      	movs	r1, #1
 800a958:	5499      	strb	r1, [r3, r2]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	223d      	movs	r2, #61	; 0x3d
 800a95e:	2101      	movs	r1, #1
 800a960:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2239      	movs	r2, #57	; 0x39
 800a966:	2101      	movs	r1, #1
 800a968:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a96a:	2300      	movs	r3, #0
}
 800a96c:	0018      	movs	r0, r3
 800a96e:	46bd      	mov	sp, r7
 800a970:	b002      	add	sp, #8
 800a972:	bd80      	pop	{r7, pc}
 800a974:	40000400 	.word	0x40000400
 800a978:	40001000 	.word	0x40001000
 800a97c:	40001400 	.word	0x40001400
 800a980:	40010800 	.word	0x40010800
 800a984:	40011400 	.word	0x40011400
 800a988:	00000295 	.word	0x00000295
 800a98c:	0800ccc4 	.word	0x0800ccc4
 800a990:	00000296 	.word	0x00000296
 800a994:	00000297 	.word	0x00000297
 800a998:	00000299 	.word	0x00000299
 800a99c:	0000029a 	.word	0x0000029a

0800a9a0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a9a8:	46c0      	nop			; (mov r8, r8)
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	b002      	add	sp, #8
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	691b      	ldr	r3, [r3, #16]
 800a9be:	2202      	movs	r2, #2
 800a9c0:	4013      	ands	r3, r2
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	d124      	bne.n	800aa10 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	2202      	movs	r2, #2
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	d11d      	bne.n	800aa10 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2203      	movs	r2, #3
 800a9da:	4252      	negs	r2, r2
 800a9dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	699b      	ldr	r3, [r3, #24]
 800a9ea:	2203      	movs	r2, #3
 800a9ec:	4013      	ands	r3, r2
 800a9ee:	d004      	beq.n	800a9fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	0018      	movs	r0, r3
 800a9f4:	f000 fcd2 	bl	800b39c <HAL_TIM_IC_CaptureCallback>
 800a9f8:	e007      	b.n	800aa0a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	0018      	movs	r0, r3
 800a9fe:	f000 fcc5 	bl	800b38c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	0018      	movs	r0, r3
 800aa06:	f000 fcd1 	bl	800b3ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	691b      	ldr	r3, [r3, #16]
 800aa16:	2204      	movs	r2, #4
 800aa18:	4013      	ands	r3, r2
 800aa1a:	2b04      	cmp	r3, #4
 800aa1c:	d125      	bne.n	800aa6a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	2204      	movs	r2, #4
 800aa26:	4013      	ands	r3, r2
 800aa28:	2b04      	cmp	r3, #4
 800aa2a:	d11e      	bne.n	800aa6a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2205      	movs	r2, #5
 800aa32:	4252      	negs	r2, r2
 800aa34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2202      	movs	r2, #2
 800aa3a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	699a      	ldr	r2, [r3, #24]
 800aa42:	23c0      	movs	r3, #192	; 0xc0
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	4013      	ands	r3, r2
 800aa48:	d004      	beq.n	800aa54 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	0018      	movs	r0, r3
 800aa4e:	f000 fca5 	bl	800b39c <HAL_TIM_IC_CaptureCallback>
 800aa52:	e007      	b.n	800aa64 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	0018      	movs	r0, r3
 800aa58:	f000 fc98 	bl	800b38c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	0018      	movs	r0, r3
 800aa60:	f000 fca4 	bl	800b3ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	691b      	ldr	r3, [r3, #16]
 800aa70:	2208      	movs	r2, #8
 800aa72:	4013      	ands	r3, r2
 800aa74:	2b08      	cmp	r3, #8
 800aa76:	d124      	bne.n	800aac2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	2208      	movs	r2, #8
 800aa80:	4013      	ands	r3, r2
 800aa82:	2b08      	cmp	r3, #8
 800aa84:	d11d      	bne.n	800aac2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	2209      	movs	r2, #9
 800aa8c:	4252      	negs	r2, r2
 800aa8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2204      	movs	r2, #4
 800aa94:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	69db      	ldr	r3, [r3, #28]
 800aa9c:	2203      	movs	r2, #3
 800aa9e:	4013      	ands	r3, r2
 800aaa0:	d004      	beq.n	800aaac <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	0018      	movs	r0, r3
 800aaa6:	f000 fc79 	bl	800b39c <HAL_TIM_IC_CaptureCallback>
 800aaaa:	e007      	b.n	800aabc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	0018      	movs	r0, r3
 800aab0:	f000 fc6c 	bl	800b38c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	0018      	movs	r0, r3
 800aab8:	f000 fc78 	bl	800b3ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	2210      	movs	r2, #16
 800aaca:	4013      	ands	r3, r2
 800aacc:	2b10      	cmp	r3, #16
 800aace:	d125      	bne.n	800ab1c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	2210      	movs	r2, #16
 800aad8:	4013      	ands	r3, r2
 800aada:	2b10      	cmp	r3, #16
 800aadc:	d11e      	bne.n	800ab1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2211      	movs	r2, #17
 800aae4:	4252      	negs	r2, r2
 800aae6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2208      	movs	r2, #8
 800aaec:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	69da      	ldr	r2, [r3, #28]
 800aaf4:	23c0      	movs	r3, #192	; 0xc0
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	4013      	ands	r3, r2
 800aafa:	d004      	beq.n	800ab06 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	0018      	movs	r0, r3
 800ab00:	f000 fc4c 	bl	800b39c <HAL_TIM_IC_CaptureCallback>
 800ab04:	e007      	b.n	800ab16 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	0018      	movs	r0, r3
 800ab0a:	f000 fc3f 	bl	800b38c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	0018      	movs	r0, r3
 800ab12:	f000 fc4b 	bl	800b3ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	2201      	movs	r2, #1
 800ab24:	4013      	ands	r3, r2
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d10f      	bne.n	800ab4a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	2201      	movs	r2, #1
 800ab32:	4013      	ands	r3, r2
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d108      	bne.n	800ab4a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2202      	movs	r2, #2
 800ab3e:	4252      	negs	r2, r2
 800ab40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	0018      	movs	r0, r3
 800ab46:	f7f7 f83f 	bl	8001bc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	691b      	ldr	r3, [r3, #16]
 800ab50:	2240      	movs	r2, #64	; 0x40
 800ab52:	4013      	ands	r3, r2
 800ab54:	2b40      	cmp	r3, #64	; 0x40
 800ab56:	d10f      	bne.n	800ab78 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	2240      	movs	r2, #64	; 0x40
 800ab60:	4013      	ands	r3, r2
 800ab62:	2b40      	cmp	r3, #64	; 0x40
 800ab64:	d108      	bne.n	800ab78 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	2241      	movs	r2, #65	; 0x41
 800ab6c:	4252      	negs	r2, r2
 800ab6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	0018      	movs	r0, r3
 800ab74:	f000 fc22 	bl	800b3bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab78:	46c0      	nop			; (mov r8, r8)
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	b002      	add	sp, #8
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b086      	sub	sp, #24
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab8c:	2317      	movs	r3, #23
 800ab8e:	18fb      	adds	r3, r7, r3
 800ab90:	2200      	movs	r2, #0
 800ab92:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d011      	beq.n	800abbe <HAL_TIM_OC_ConfigChannel+0x3e>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2b04      	cmp	r3, #4
 800ab9e:	d00e      	beq.n	800abbe <HAL_TIM_OC_ConfigChannel+0x3e>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2b08      	cmp	r3, #8
 800aba4:	d00b      	beq.n	800abbe <HAL_TIM_OC_ConfigChannel+0x3e>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2b0c      	cmp	r3, #12
 800abaa:	d008      	beq.n	800abbe <HAL_TIM_OC_ConfigChannel+0x3e>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2b3c      	cmp	r3, #60	; 0x3c
 800abb0:	d005      	beq.n	800abbe <HAL_TIM_OC_ConfigChannel+0x3e>
 800abb2:	4a6d      	ldr	r2, [pc, #436]	; (800ad68 <HAL_TIM_OC_ConfigChannel+0x1e8>)
 800abb4:	4b6d      	ldr	r3, [pc, #436]	; (800ad6c <HAL_TIM_OC_ConfigChannel+0x1ec>)
 800abb6:	0011      	movs	r1, r2
 800abb8:	0018      	movs	r0, r3
 800abba:	f7fb f920 	bl	8005dfe <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d019      	beq.n	800abfa <HAL_TIM_OC_ConfigChannel+0x7a>
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	2b10      	cmp	r3, #16
 800abcc:	d015      	beq.n	800abfa <HAL_TIM_OC_ConfigChannel+0x7a>
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2b20      	cmp	r3, #32
 800abd4:	d011      	beq.n	800abfa <HAL_TIM_OC_ConfigChannel+0x7a>
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2b30      	cmp	r3, #48	; 0x30
 800abdc:	d00d      	beq.n	800abfa <HAL_TIM_OC_ConfigChannel+0x7a>
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2b50      	cmp	r3, #80	; 0x50
 800abe4:	d009      	beq.n	800abfa <HAL_TIM_OC_ConfigChannel+0x7a>
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2b40      	cmp	r3, #64	; 0x40
 800abec:	d005      	beq.n	800abfa <HAL_TIM_OC_ConfigChannel+0x7a>
 800abee:	4a60      	ldr	r2, [pc, #384]	; (800ad70 <HAL_TIM_OC_ConfigChannel+0x1f0>)
 800abf0:	4b5e      	ldr	r3, [pc, #376]	; (800ad6c <HAL_TIM_OC_ConfigChannel+0x1ec>)
 800abf2:	0011      	movs	r1, r2
 800abf4:	0018      	movs	r0, r3
 800abf6:	f7fb f902 	bl	8005dfe <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d009      	beq.n	800ac16 <HAL_TIM_OC_ConfigChannel+0x96>
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	d005      	beq.n	800ac16 <HAL_TIM_OC_ConfigChannel+0x96>
 800ac0a:	4a5a      	ldr	r2, [pc, #360]	; (800ad74 <HAL_TIM_OC_ConfigChannel+0x1f4>)
 800ac0c:	4b57      	ldr	r3, [pc, #348]	; (800ad6c <HAL_TIM_OC_ConfigChannel+0x1ec>)
 800ac0e:	0011      	movs	r1, r2
 800ac10:	0018      	movs	r0, r3
 800ac12:	f7fb f8f4 	bl	8005dfe <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2238      	movs	r2, #56	; 0x38
 800ac1a:	5c9b      	ldrb	r3, [r3, r2]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d101      	bne.n	800ac24 <HAL_TIM_OC_ConfigChannel+0xa4>
 800ac20:	2302      	movs	r3, #2
 800ac22:	e09d      	b.n	800ad60 <HAL_TIM_OC_ConfigChannel+0x1e0>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2238      	movs	r2, #56	; 0x38
 800ac28:	2101      	movs	r1, #1
 800ac2a:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2b0c      	cmp	r3, #12
 800ac30:	d100      	bne.n	800ac34 <HAL_TIM_OC_ConfigChannel+0xb4>
 800ac32:	e070      	b.n	800ad16 <HAL_TIM_OC_ConfigChannel+0x196>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b0c      	cmp	r3, #12
 800ac38:	d900      	bls.n	800ac3c <HAL_TIM_OC_ConfigChannel+0xbc>
 800ac3a:	e085      	b.n	800ad48 <HAL_TIM_OC_ConfigChannel+0x1c8>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2b08      	cmp	r3, #8
 800ac40:	d050      	beq.n	800ace4 <HAL_TIM_OC_ConfigChannel+0x164>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2b08      	cmp	r3, #8
 800ac46:	d900      	bls.n	800ac4a <HAL_TIM_OC_ConfigChannel+0xca>
 800ac48:	e07e      	b.n	800ad48 <HAL_TIM_OC_ConfigChannel+0x1c8>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d003      	beq.n	800ac58 <HAL_TIM_OC_ConfigChannel+0xd8>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2b04      	cmp	r3, #4
 800ac54:	d023      	beq.n	800ac9e <HAL_TIM_OC_ConfigChannel+0x11e>
 800ac56:	e077      	b.n	800ad48 <HAL_TIM_OC_ConfigChannel+0x1c8>
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	2380      	movs	r3, #128	; 0x80
 800ac5e:	05db      	lsls	r3, r3, #23
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d014      	beq.n	800ac8e <HAL_TIM_OC_ConfigChannel+0x10e>
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a43      	ldr	r2, [pc, #268]	; (800ad78 <HAL_TIM_OC_ConfigChannel+0x1f8>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d00f      	beq.n	800ac8e <HAL_TIM_OC_ConfigChannel+0x10e>
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a42      	ldr	r2, [pc, #264]	; (800ad7c <HAL_TIM_OC_ConfigChannel+0x1fc>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d00a      	beq.n	800ac8e <HAL_TIM_OC_ConfigChannel+0x10e>
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a40      	ldr	r2, [pc, #256]	; (800ad80 <HAL_TIM_OC_ConfigChannel+0x200>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d005      	beq.n	800ac8e <HAL_TIM_OC_ConfigChannel+0x10e>
 800ac82:	4a40      	ldr	r2, [pc, #256]	; (800ad84 <HAL_TIM_OC_ConfigChannel+0x204>)
 800ac84:	4b39      	ldr	r3, [pc, #228]	; (800ad6c <HAL_TIM_OC_ConfigChannel+0x1ec>)
 800ac86:	0011      	movs	r1, r2
 800ac88:	0018      	movs	r0, r3
 800ac8a:	f7fb f8b8 	bl	8005dfe <assert_failed>

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	68ba      	ldr	r2, [r7, #8]
 800ac94:	0011      	movs	r1, r2
 800ac96:	0018      	movs	r0, r3
 800ac98:	f000 fbf6 	bl	800b488 <TIM_OC1_SetConfig>
      break;
 800ac9c:	e059      	b.n	800ad52 <HAL_TIM_OC_ConfigChannel+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	2380      	movs	r3, #128	; 0x80
 800aca4:	05db      	lsls	r3, r3, #23
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d014      	beq.n	800acd4 <HAL_TIM_OC_ConfigChannel+0x154>
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a32      	ldr	r2, [pc, #200]	; (800ad78 <HAL_TIM_OC_ConfigChannel+0x1f8>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d00f      	beq.n	800acd4 <HAL_TIM_OC_ConfigChannel+0x154>
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a30      	ldr	r2, [pc, #192]	; (800ad7c <HAL_TIM_OC_ConfigChannel+0x1fc>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d00a      	beq.n	800acd4 <HAL_TIM_OC_ConfigChannel+0x154>
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a2f      	ldr	r2, [pc, #188]	; (800ad80 <HAL_TIM_OC_ConfigChannel+0x200>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d005      	beq.n	800acd4 <HAL_TIM_OC_ConfigChannel+0x154>
 800acc8:	4a2f      	ldr	r2, [pc, #188]	; (800ad88 <HAL_TIM_OC_ConfigChannel+0x208>)
 800acca:	4b28      	ldr	r3, [pc, #160]	; (800ad6c <HAL_TIM_OC_ConfigChannel+0x1ec>)
 800accc:	0011      	movs	r1, r2
 800acce:	0018      	movs	r0, r3
 800acd0:	f7fb f895 	bl	8005dfe <assert_failed>

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	68ba      	ldr	r2, [r7, #8]
 800acda:	0011      	movs	r1, r2
 800acdc:	0018      	movs	r0, r3
 800acde:	f000 fc0f 	bl	800b500 <TIM_OC2_SetConfig>
      break;
 800ace2:	e036      	b.n	800ad52 <HAL_TIM_OC_ConfigChannel+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681a      	ldr	r2, [r3, #0]
 800ace8:	2380      	movs	r3, #128	; 0x80
 800acea:	05db      	lsls	r3, r3, #23
 800acec:	429a      	cmp	r2, r3
 800acee:	d00a      	beq.n	800ad06 <HAL_TIM_OC_ConfigChannel+0x186>
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a20      	ldr	r2, [pc, #128]	; (800ad78 <HAL_TIM_OC_ConfigChannel+0x1f8>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d005      	beq.n	800ad06 <HAL_TIM_OC_ConfigChannel+0x186>
 800acfa:	4a24      	ldr	r2, [pc, #144]	; (800ad8c <HAL_TIM_OC_ConfigChannel+0x20c>)
 800acfc:	4b1b      	ldr	r3, [pc, #108]	; (800ad6c <HAL_TIM_OC_ConfigChannel+0x1ec>)
 800acfe:	0011      	movs	r1, r2
 800ad00:	0018      	movs	r0, r3
 800ad02:	f7fb f87c 	bl	8005dfe <assert_failed>

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68ba      	ldr	r2, [r7, #8]
 800ad0c:	0011      	movs	r1, r2
 800ad0e:	0018      	movs	r0, r3
 800ad10:	f000 fc38 	bl	800b584 <TIM_OC3_SetConfig>
      break;
 800ad14:	e01d      	b.n	800ad52 <HAL_TIM_OC_ConfigChannel+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	2380      	movs	r3, #128	; 0x80
 800ad1c:	05db      	lsls	r3, r3, #23
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d00a      	beq.n	800ad38 <HAL_TIM_OC_ConfigChannel+0x1b8>
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4a14      	ldr	r2, [pc, #80]	; (800ad78 <HAL_TIM_OC_ConfigChannel+0x1f8>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d005      	beq.n	800ad38 <HAL_TIM_OC_ConfigChannel+0x1b8>
 800ad2c:	4a18      	ldr	r2, [pc, #96]	; (800ad90 <HAL_TIM_OC_ConfigChannel+0x210>)
 800ad2e:	4b0f      	ldr	r3, [pc, #60]	; (800ad6c <HAL_TIM_OC_ConfigChannel+0x1ec>)
 800ad30:	0011      	movs	r1, r2
 800ad32:	0018      	movs	r0, r3
 800ad34:	f7fb f863 	bl	8005dfe <assert_failed>

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	68ba      	ldr	r2, [r7, #8]
 800ad3e:	0011      	movs	r1, r2
 800ad40:	0018      	movs	r0, r3
 800ad42:	f000 fc5f 	bl	800b604 <TIM_OC4_SetConfig>
      break;
 800ad46:	e004      	b.n	800ad52 <HAL_TIM_OC_ConfigChannel+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800ad48:	2317      	movs	r3, #23
 800ad4a:	18fb      	adds	r3, r7, r3
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	701a      	strb	r2, [r3, #0]
      break;
 800ad50:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2238      	movs	r2, #56	; 0x38
 800ad56:	2100      	movs	r1, #0
 800ad58:	5499      	strb	r1, [r3, r2]

  return status;
 800ad5a:	2317      	movs	r3, #23
 800ad5c:	18fb      	adds	r3, r7, r3
 800ad5e:	781b      	ldrb	r3, [r3, #0]
}
 800ad60:	0018      	movs	r0, r3
 800ad62:	46bd      	mov	sp, r7
 800ad64:	b006      	add	sp, #24
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	00000f01 	.word	0x00000f01
 800ad6c:	0800ccc4 	.word	0x0800ccc4
 800ad70:	00000f02 	.word	0x00000f02
 800ad74:	00000f03 	.word	0x00000f03
 800ad78:	40000400 	.word	0x40000400
 800ad7c:	40010800 	.word	0x40010800
 800ad80:	40011400 	.word	0x40011400
 800ad84:	00000f0d 	.word	0x00000f0d
 800ad88:	00000f17 	.word	0x00000f17
 800ad8c:	00000f21 	.word	0x00000f21
 800ad90:	00000f2b 	.word	0x00000f2b

0800ad94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ad9e:	230f      	movs	r3, #15
 800ada0:	18fb      	adds	r3, r7, r3
 800ada2:	2200      	movs	r2, #0
 800ada4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2238      	movs	r2, #56	; 0x38
 800adaa:	5c9b      	ldrb	r3, [r3, r2]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d101      	bne.n	800adb4 <HAL_TIM_ConfigClockSource+0x20>
 800adb0:	2302      	movs	r3, #2
 800adb2:	e2ca      	b.n	800b34a <HAL_TIM_ConfigClockSource+0x5b6>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2238      	movs	r2, #56	; 0x38
 800adb8:	2101      	movs	r1, #1
 800adba:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2239      	movs	r2, #57	; 0x39
 800adc0:	2102      	movs	r1, #2
 800adc2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	2380      	movs	r3, #128	; 0x80
 800adca:	015b      	lsls	r3, r3, #5
 800adcc:	429a      	cmp	r2, r3
 800adce:	d02b      	beq.n	800ae28 <HAL_TIM_ConfigClockSource+0x94>
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	2380      	movs	r3, #128	; 0x80
 800add6:	019b      	lsls	r3, r3, #6
 800add8:	429a      	cmp	r2, r3
 800adda:	d025      	beq.n	800ae28 <HAL_TIM_ConfigClockSource+0x94>
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d021      	beq.n	800ae28 <HAL_TIM_ConfigClockSource+0x94>
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2b10      	cmp	r3, #16
 800adea:	d01d      	beq.n	800ae28 <HAL_TIM_ConfigClockSource+0x94>
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2b20      	cmp	r3, #32
 800adf2:	d019      	beq.n	800ae28 <HAL_TIM_ConfigClockSource+0x94>
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2b30      	cmp	r3, #48	; 0x30
 800adfa:	d015      	beq.n	800ae28 <HAL_TIM_ConfigClockSource+0x94>
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	2b40      	cmp	r3, #64	; 0x40
 800ae02:	d011      	beq.n	800ae28 <HAL_TIM_ConfigClockSource+0x94>
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2b50      	cmp	r3, #80	; 0x50
 800ae0a:	d00d      	beq.n	800ae28 <HAL_TIM_ConfigClockSource+0x94>
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	2b60      	cmp	r3, #96	; 0x60
 800ae12:	d009      	beq.n	800ae28 <HAL_TIM_ConfigClockSource+0x94>
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2b70      	cmp	r3, #112	; 0x70
 800ae1a:	d005      	beq.n	800ae28 <HAL_TIM_ConfigClockSource+0x94>
 800ae1c:	4aad      	ldr	r2, [pc, #692]	; (800b0d4 <HAL_TIM_ConfigClockSource+0x340>)
 800ae1e:	4bae      	ldr	r3, [pc, #696]	; (800b0d8 <HAL_TIM_ConfigClockSource+0x344>)
 800ae20:	0011      	movs	r1, r2
 800ae22:	0018      	movs	r0, r3
 800ae24:	f7fa ffeb 	bl	8005dfe <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	2277      	movs	r2, #119	; 0x77
 800ae34:	4393      	bics	r3, r2
 800ae36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	4aa8      	ldr	r2, [pc, #672]	; (800b0dc <HAL_TIM_ConfigClockSource+0x348>)
 800ae3c:	4013      	ands	r3, r2
 800ae3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	68ba      	ldr	r2, [r7, #8]
 800ae46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	2280      	movs	r2, #128	; 0x80
 800ae4e:	0192      	lsls	r2, r2, #6
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d100      	bne.n	800ae56 <HAL_TIM_ConfigClockSource+0xc2>
 800ae54:	e0cc      	b.n	800aff0 <HAL_TIM_ConfigClockSource+0x25c>
 800ae56:	2280      	movs	r2, #128	; 0x80
 800ae58:	0192      	lsls	r2, r2, #6
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d900      	bls.n	800ae60 <HAL_TIM_ConfigClockSource+0xcc>
 800ae5e:	e263      	b.n	800b328 <HAL_TIM_ConfigClockSource+0x594>
 800ae60:	2280      	movs	r2, #128	; 0x80
 800ae62:	0152      	lsls	r2, r2, #5
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d028      	beq.n	800aeba <HAL_TIM_ConfigClockSource+0x126>
 800ae68:	2280      	movs	r2, #128	; 0x80
 800ae6a:	0152      	lsls	r2, r2, #5
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d900      	bls.n	800ae72 <HAL_TIM_ConfigClockSource+0xde>
 800ae70:	e25a      	b.n	800b328 <HAL_TIM_ConfigClockSource+0x594>
 800ae72:	2b70      	cmp	r3, #112	; 0x70
 800ae74:	d04d      	beq.n	800af12 <HAL_TIM_ConfigClockSource+0x17e>
 800ae76:	d900      	bls.n	800ae7a <HAL_TIM_ConfigClockSource+0xe6>
 800ae78:	e256      	b.n	800b328 <HAL_TIM_ConfigClockSource+0x594>
 800ae7a:	2b60      	cmp	r3, #96	; 0x60
 800ae7c:	d100      	bne.n	800ae80 <HAL_TIM_ConfigClockSource+0xec>
 800ae7e:	e197      	b.n	800b1b0 <HAL_TIM_ConfigClockSource+0x41c>
 800ae80:	d900      	bls.n	800ae84 <HAL_TIM_ConfigClockSource+0xf0>
 800ae82:	e251      	b.n	800b328 <HAL_TIM_ConfigClockSource+0x594>
 800ae84:	2b50      	cmp	r3, #80	; 0x50
 800ae86:	d100      	bne.n	800ae8a <HAL_TIM_ConfigClockSource+0xf6>
 800ae88:	e146      	b.n	800b118 <HAL_TIM_ConfigClockSource+0x384>
 800ae8a:	d900      	bls.n	800ae8e <HAL_TIM_ConfigClockSource+0xfa>
 800ae8c:	e24c      	b.n	800b328 <HAL_TIM_ConfigClockSource+0x594>
 800ae8e:	2b40      	cmp	r3, #64	; 0x40
 800ae90:	d100      	bne.n	800ae94 <HAL_TIM_ConfigClockSource+0x100>
 800ae92:	e1d9      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x4b4>
 800ae94:	d900      	bls.n	800ae98 <HAL_TIM_ConfigClockSource+0x104>
 800ae96:	e247      	b.n	800b328 <HAL_TIM_ConfigClockSource+0x594>
 800ae98:	2b30      	cmp	r3, #48	; 0x30
 800ae9a:	d100      	bne.n	800ae9e <HAL_TIM_ConfigClockSource+0x10a>
 800ae9c:	e220      	b.n	800b2e0 <HAL_TIM_ConfigClockSource+0x54c>
 800ae9e:	d900      	bls.n	800aea2 <HAL_TIM_ConfigClockSource+0x10e>
 800aea0:	e242      	b.n	800b328 <HAL_TIM_ConfigClockSource+0x594>
 800aea2:	2b20      	cmp	r3, #32
 800aea4:	d100      	bne.n	800aea8 <HAL_TIM_ConfigClockSource+0x114>
 800aea6:	e21b      	b.n	800b2e0 <HAL_TIM_ConfigClockSource+0x54c>
 800aea8:	d900      	bls.n	800aeac <HAL_TIM_ConfigClockSource+0x118>
 800aeaa:	e23d      	b.n	800b328 <HAL_TIM_ConfigClockSource+0x594>
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d100      	bne.n	800aeb2 <HAL_TIM_ConfigClockSource+0x11e>
 800aeb0:	e216      	b.n	800b2e0 <HAL_TIM_ConfigClockSource+0x54c>
 800aeb2:	2b10      	cmp	r3, #16
 800aeb4:	d100      	bne.n	800aeb8 <HAL_TIM_ConfigClockSource+0x124>
 800aeb6:	e213      	b.n	800b2e0 <HAL_TIM_ConfigClockSource+0x54c>
 800aeb8:	e236      	b.n	800b328 <HAL_TIM_ConfigClockSource+0x594>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	2380      	movs	r3, #128	; 0x80
 800aec0:	05db      	lsls	r3, r3, #23
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d100      	bne.n	800aec8 <HAL_TIM_ConfigClockSource+0x134>
 800aec6:	e234      	b.n	800b332 <HAL_TIM_ConfigClockSource+0x59e>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a84      	ldr	r2, [pc, #528]	; (800b0e0 <HAL_TIM_ConfigClockSource+0x34c>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d100      	bne.n	800aed4 <HAL_TIM_ConfigClockSource+0x140>
 800aed2:	e22e      	b.n	800b332 <HAL_TIM_ConfigClockSource+0x59e>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a82      	ldr	r2, [pc, #520]	; (800b0e4 <HAL_TIM_ConfigClockSource+0x350>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d100      	bne.n	800aee0 <HAL_TIM_ConfigClockSource+0x14c>
 800aede:	e228      	b.n	800b332 <HAL_TIM_ConfigClockSource+0x59e>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a80      	ldr	r2, [pc, #512]	; (800b0e8 <HAL_TIM_ConfigClockSource+0x354>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d100      	bne.n	800aeec <HAL_TIM_ConfigClockSource+0x158>
 800aeea:	e222      	b.n	800b332 <HAL_TIM_ConfigClockSource+0x59e>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a7e      	ldr	r2, [pc, #504]	; (800b0ec <HAL_TIM_ConfigClockSource+0x358>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d100      	bne.n	800aef8 <HAL_TIM_ConfigClockSource+0x164>
 800aef6:	e21c      	b.n	800b332 <HAL_TIM_ConfigClockSource+0x59e>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a7c      	ldr	r2, [pc, #496]	; (800b0f0 <HAL_TIM_ConfigClockSource+0x35c>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d100      	bne.n	800af04 <HAL_TIM_ConfigClockSource+0x170>
 800af02:	e216      	b.n	800b332 <HAL_TIM_ConfigClockSource+0x59e>
 800af04:	4a7b      	ldr	r2, [pc, #492]	; (800b0f4 <HAL_TIM_ConfigClockSource+0x360>)
 800af06:	4b74      	ldr	r3, [pc, #464]	; (800b0d8 <HAL_TIM_ConfigClockSource+0x344>)
 800af08:	0011      	movs	r1, r2
 800af0a:	0018      	movs	r0, r3
 800af0c:	f7fa ff77 	bl	8005dfe <assert_failed>
      break;
 800af10:	e20f      	b.n	800b332 <HAL_TIM_ConfigClockSource+0x59e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	2380      	movs	r3, #128	; 0x80
 800af18:	05db      	lsls	r3, r3, #23
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d00f      	beq.n	800af3e <HAL_TIM_ConfigClockSource+0x1aa>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a6f      	ldr	r2, [pc, #444]	; (800b0e0 <HAL_TIM_ConfigClockSource+0x34c>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d00a      	beq.n	800af3e <HAL_TIM_ConfigClockSource+0x1aa>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a6f      	ldr	r2, [pc, #444]	; (800b0ec <HAL_TIM_ConfigClockSource+0x358>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d005      	beq.n	800af3e <HAL_TIM_ConfigClockSource+0x1aa>
 800af32:	4a71      	ldr	r2, [pc, #452]	; (800b0f8 <HAL_TIM_ConfigClockSource+0x364>)
 800af34:	4b68      	ldr	r3, [pc, #416]	; (800b0d8 <HAL_TIM_ConfigClockSource+0x344>)
 800af36:	0011      	movs	r1, r2
 800af38:	0018      	movs	r0, r3
 800af3a:	f7fa ff60 	bl	8005dfe <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	689b      	ldr	r3, [r3, #8]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d017      	beq.n	800af76 <HAL_TIM_ConfigClockSource+0x1e2>
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	689a      	ldr	r2, [r3, #8]
 800af4a:	2380      	movs	r3, #128	; 0x80
 800af4c:	015b      	lsls	r3, r3, #5
 800af4e:	429a      	cmp	r2, r3
 800af50:	d011      	beq.n	800af76 <HAL_TIM_ConfigClockSource+0x1e2>
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	689a      	ldr	r2, [r3, #8]
 800af56:	2380      	movs	r3, #128	; 0x80
 800af58:	019b      	lsls	r3, r3, #6
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d00b      	beq.n	800af76 <HAL_TIM_ConfigClockSource+0x1e2>
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	689a      	ldr	r2, [r3, #8]
 800af62:	23c0      	movs	r3, #192	; 0xc0
 800af64:	019b      	lsls	r3, r3, #6
 800af66:	429a      	cmp	r2, r3
 800af68:	d005      	beq.n	800af76 <HAL_TIM_ConfigClockSource+0x1e2>
 800af6a:	4a64      	ldr	r2, [pc, #400]	; (800b0fc <HAL_TIM_ConfigClockSource+0x368>)
 800af6c:	4b5a      	ldr	r3, [pc, #360]	; (800b0d8 <HAL_TIM_ConfigClockSource+0x344>)
 800af6e:	0011      	movs	r1, r2
 800af70:	0018      	movs	r0, r3
 800af72:	f7fa ff44 	bl	8005dfe <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	685a      	ldr	r2, [r3, #4]
 800af7a:	2380      	movs	r3, #128	; 0x80
 800af7c:	021b      	lsls	r3, r3, #8
 800af7e:	429a      	cmp	r2, r3
 800af80:	d015      	beq.n	800afae <HAL_TIM_ConfigClockSource+0x21a>
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d011      	beq.n	800afae <HAL_TIM_ConfigClockSource+0x21a>
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d00d      	beq.n	800afae <HAL_TIM_ConfigClockSource+0x21a>
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	2b02      	cmp	r3, #2
 800af98:	d009      	beq.n	800afae <HAL_TIM_ConfigClockSource+0x21a>
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	2b0a      	cmp	r3, #10
 800afa0:	d005      	beq.n	800afae <HAL_TIM_ConfigClockSource+0x21a>
 800afa2:	4a57      	ldr	r2, [pc, #348]	; (800b100 <HAL_TIM_ConfigClockSource+0x36c>)
 800afa4:	4b4c      	ldr	r3, [pc, #304]	; (800b0d8 <HAL_TIM_ConfigClockSource+0x344>)
 800afa6:	0011      	movs	r1, r2
 800afa8:	0018      	movs	r0, r3
 800afaa:	f7fa ff28 	bl	8005dfe <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	68db      	ldr	r3, [r3, #12]
 800afb2:	2b0f      	cmp	r3, #15
 800afb4:	d905      	bls.n	800afc2 <HAL_TIM_ConfigClockSource+0x22e>
 800afb6:	4a53      	ldr	r2, [pc, #332]	; (800b104 <HAL_TIM_ConfigClockSource+0x370>)
 800afb8:	4b47      	ldr	r3, [pc, #284]	; (800b0d8 <HAL_TIM_ConfigClockSource+0x344>)
 800afba:	0011      	movs	r1, r2
 800afbc:	0018      	movs	r0, r3
 800afbe:	f7fa ff1e 	bl	8005dfe <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6818      	ldr	r0, [r3, #0]
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	6899      	ldr	r1, [r3, #8]
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	685a      	ldr	r2, [r3, #4]
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	68db      	ldr	r3, [r3, #12]
 800afd2:	f000 fbd7 	bl	800b784 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	2277      	movs	r2, #119	; 0x77
 800afe2:	4313      	orrs	r3, r2
 800afe4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	68ba      	ldr	r2, [r7, #8]
 800afec:	609a      	str	r2, [r3, #8]
      break;
 800afee:	e1a1      	b.n	800b334 <HAL_TIM_ConfigClockSource+0x5a0>
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	2380      	movs	r3, #128	; 0x80
 800aff6:	05db      	lsls	r3, r3, #23
 800aff8:	429a      	cmp	r2, r3
 800affa:	d014      	beq.n	800b026 <HAL_TIM_ConfigClockSource+0x292>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4a37      	ldr	r2, [pc, #220]	; (800b0e0 <HAL_TIM_ConfigClockSource+0x34c>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d00f      	beq.n	800b026 <HAL_TIM_ConfigClockSource+0x292>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a38      	ldr	r2, [pc, #224]	; (800b0ec <HAL_TIM_ConfigClockSource+0x358>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d00a      	beq.n	800b026 <HAL_TIM_ConfigClockSource+0x292>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4a36      	ldr	r2, [pc, #216]	; (800b0f0 <HAL_TIM_ConfigClockSource+0x35c>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d005      	beq.n	800b026 <HAL_TIM_ConfigClockSource+0x292>
 800b01a:	4a3b      	ldr	r2, [pc, #236]	; (800b108 <HAL_TIM_ConfigClockSource+0x374>)
 800b01c:	4b2e      	ldr	r3, [pc, #184]	; (800b0d8 <HAL_TIM_ConfigClockSource+0x344>)
 800b01e:	0011      	movs	r1, r2
 800b020:	0018      	movs	r0, r3
 800b022:	f7fa feec 	bl	8005dfe <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d017      	beq.n	800b05e <HAL_TIM_ConfigClockSource+0x2ca>
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	689a      	ldr	r2, [r3, #8]
 800b032:	2380      	movs	r3, #128	; 0x80
 800b034:	015b      	lsls	r3, r3, #5
 800b036:	429a      	cmp	r2, r3
 800b038:	d011      	beq.n	800b05e <HAL_TIM_ConfigClockSource+0x2ca>
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	689a      	ldr	r2, [r3, #8]
 800b03e:	2380      	movs	r3, #128	; 0x80
 800b040:	019b      	lsls	r3, r3, #6
 800b042:	429a      	cmp	r2, r3
 800b044:	d00b      	beq.n	800b05e <HAL_TIM_ConfigClockSource+0x2ca>
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	689a      	ldr	r2, [r3, #8]
 800b04a:	23c0      	movs	r3, #192	; 0xc0
 800b04c:	019b      	lsls	r3, r3, #6
 800b04e:	429a      	cmp	r2, r3
 800b050:	d005      	beq.n	800b05e <HAL_TIM_ConfigClockSource+0x2ca>
 800b052:	4a2e      	ldr	r2, [pc, #184]	; (800b10c <HAL_TIM_ConfigClockSource+0x378>)
 800b054:	4b20      	ldr	r3, [pc, #128]	; (800b0d8 <HAL_TIM_ConfigClockSource+0x344>)
 800b056:	0011      	movs	r1, r2
 800b058:	0018      	movs	r0, r3
 800b05a:	f7fa fed0 	bl	8005dfe <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	685a      	ldr	r2, [r3, #4]
 800b062:	2380      	movs	r3, #128	; 0x80
 800b064:	021b      	lsls	r3, r3, #8
 800b066:	429a      	cmp	r2, r3
 800b068:	d015      	beq.n	800b096 <HAL_TIM_ConfigClockSource+0x302>
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d011      	beq.n	800b096 <HAL_TIM_ConfigClockSource+0x302>
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00d      	beq.n	800b096 <HAL_TIM_ConfigClockSource+0x302>
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	2b02      	cmp	r3, #2
 800b080:	d009      	beq.n	800b096 <HAL_TIM_ConfigClockSource+0x302>
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	2b0a      	cmp	r3, #10
 800b088:	d005      	beq.n	800b096 <HAL_TIM_ConfigClockSource+0x302>
 800b08a:	4a21      	ldr	r2, [pc, #132]	; (800b110 <HAL_TIM_ConfigClockSource+0x37c>)
 800b08c:	4b12      	ldr	r3, [pc, #72]	; (800b0d8 <HAL_TIM_ConfigClockSource+0x344>)
 800b08e:	0011      	movs	r1, r2
 800b090:	0018      	movs	r0, r3
 800b092:	f7fa feb4 	bl	8005dfe <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	2b0f      	cmp	r3, #15
 800b09c:	d905      	bls.n	800b0aa <HAL_TIM_ConfigClockSource+0x316>
 800b09e:	4a1d      	ldr	r2, [pc, #116]	; (800b114 <HAL_TIM_ConfigClockSource+0x380>)
 800b0a0:	4b0d      	ldr	r3, [pc, #52]	; (800b0d8 <HAL_TIM_ConfigClockSource+0x344>)
 800b0a2:	0011      	movs	r1, r2
 800b0a4:	0018      	movs	r0, r3
 800b0a6:	f7fa feaa 	bl	8005dfe <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6818      	ldr	r0, [r3, #0]
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	6899      	ldr	r1, [r3, #8]
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	685a      	ldr	r2, [r3, #4]
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	68db      	ldr	r3, [r3, #12]
 800b0ba:	f000 fb63 	bl	800b784 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	689a      	ldr	r2, [r3, #8]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2180      	movs	r1, #128	; 0x80
 800b0ca:	01c9      	lsls	r1, r1, #7
 800b0cc:	430a      	orrs	r2, r1
 800b0ce:	609a      	str	r2, [r3, #8]
      break;
 800b0d0:	e130      	b.n	800b334 <HAL_TIM_ConfigClockSource+0x5a0>
 800b0d2:	46c0      	nop			; (mov r8, r8)
 800b0d4:	000013b9 	.word	0x000013b9
 800b0d8:	0800ccc4 	.word	0x0800ccc4
 800b0dc:	ffff00ff 	.word	0xffff00ff
 800b0e0:	40000400 	.word	0x40000400
 800b0e4:	40001000 	.word	0x40001000
 800b0e8:	40001400 	.word	0x40001400
 800b0ec:	40010800 	.word	0x40010800
 800b0f0:	40011400 	.word	0x40011400
 800b0f4:	000013c5 	.word	0x000013c5
 800b0f8:	000013cc 	.word	0x000013cc
 800b0fc:	000013cf 	.word	0x000013cf
 800b100:	000013d0 	.word	0x000013d0
 800b104:	000013d1 	.word	0x000013d1
 800b108:	000013e4 	.word	0x000013e4
 800b10c:	000013e7 	.word	0x000013e7
 800b110:	000013e8 	.word	0x000013e8
 800b114:	000013e9 	.word	0x000013e9
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681a      	ldr	r2, [r3, #0]
 800b11c:	2380      	movs	r3, #128	; 0x80
 800b11e:	05db      	lsls	r3, r3, #23
 800b120:	429a      	cmp	r2, r3
 800b122:	d00f      	beq.n	800b144 <HAL_TIM_ConfigClockSource+0x3b0>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a8a      	ldr	r2, [pc, #552]	; (800b354 <HAL_TIM_ConfigClockSource+0x5c0>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d00a      	beq.n	800b144 <HAL_TIM_ConfigClockSource+0x3b0>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a89      	ldr	r2, [pc, #548]	; (800b358 <HAL_TIM_ConfigClockSource+0x5c4>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d005      	beq.n	800b144 <HAL_TIM_ConfigClockSource+0x3b0>
 800b138:	4a88      	ldr	r2, [pc, #544]	; (800b35c <HAL_TIM_ConfigClockSource+0x5c8>)
 800b13a:	4b89      	ldr	r3, [pc, #548]	; (800b360 <HAL_TIM_ConfigClockSource+0x5cc>)
 800b13c:	0011      	movs	r1, r2
 800b13e:	0018      	movs	r0, r3
 800b140:	f7fa fe5d 	bl	8005dfe <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	685a      	ldr	r2, [r3, #4]
 800b148:	2380      	movs	r3, #128	; 0x80
 800b14a:	021b      	lsls	r3, r3, #8
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d015      	beq.n	800b17c <HAL_TIM_ConfigClockSource+0x3e8>
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d011      	beq.n	800b17c <HAL_TIM_ConfigClockSource+0x3e8>
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00d      	beq.n	800b17c <HAL_TIM_ConfigClockSource+0x3e8>
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	2b02      	cmp	r3, #2
 800b166:	d009      	beq.n	800b17c <HAL_TIM_ConfigClockSource+0x3e8>
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	2b0a      	cmp	r3, #10
 800b16e:	d005      	beq.n	800b17c <HAL_TIM_ConfigClockSource+0x3e8>
 800b170:	4a7c      	ldr	r2, [pc, #496]	; (800b364 <HAL_TIM_ConfigClockSource+0x5d0>)
 800b172:	4b7b      	ldr	r3, [pc, #492]	; (800b360 <HAL_TIM_ConfigClockSource+0x5cc>)
 800b174:	0011      	movs	r1, r2
 800b176:	0018      	movs	r0, r3
 800b178:	f7fa fe41 	bl	8005dfe <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	2b0f      	cmp	r3, #15
 800b182:	d905      	bls.n	800b190 <HAL_TIM_ConfigClockSource+0x3fc>
 800b184:	4a78      	ldr	r2, [pc, #480]	; (800b368 <HAL_TIM_ConfigClockSource+0x5d4>)
 800b186:	4b76      	ldr	r3, [pc, #472]	; (800b360 <HAL_TIM_ConfigClockSource+0x5cc>)
 800b188:	0011      	movs	r1, r2
 800b18a:	0018      	movs	r0, r3
 800b18c:	f7fa fe37 	bl	8005dfe <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6818      	ldr	r0, [r3, #0]
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	6859      	ldr	r1, [r3, #4]
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	001a      	movs	r2, r3
 800b19e:	f000 fa77 	bl	800b690 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	2150      	movs	r1, #80	; 0x50
 800b1a8:	0018      	movs	r0, r3
 800b1aa:	f000 fad1 	bl	800b750 <TIM_ITRx_SetConfig>
      break;
 800b1ae:	e0c1      	b.n	800b334 <HAL_TIM_ConfigClockSource+0x5a0>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	2380      	movs	r3, #128	; 0x80
 800b1b6:	05db      	lsls	r3, r3, #23
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d00f      	beq.n	800b1dc <HAL_TIM_ConfigClockSource+0x448>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a64      	ldr	r2, [pc, #400]	; (800b354 <HAL_TIM_ConfigClockSource+0x5c0>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d00a      	beq.n	800b1dc <HAL_TIM_ConfigClockSource+0x448>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a63      	ldr	r2, [pc, #396]	; (800b358 <HAL_TIM_ConfigClockSource+0x5c4>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d005      	beq.n	800b1dc <HAL_TIM_ConfigClockSource+0x448>
 800b1d0:	4a66      	ldr	r2, [pc, #408]	; (800b36c <HAL_TIM_ConfigClockSource+0x5d8>)
 800b1d2:	4b63      	ldr	r3, [pc, #396]	; (800b360 <HAL_TIM_ConfigClockSource+0x5cc>)
 800b1d4:	0011      	movs	r1, r2
 800b1d6:	0018      	movs	r0, r3
 800b1d8:	f7fa fe11 	bl	8005dfe <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	685a      	ldr	r2, [r3, #4]
 800b1e0:	2380      	movs	r3, #128	; 0x80
 800b1e2:	021b      	lsls	r3, r3, #8
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d015      	beq.n	800b214 <HAL_TIM_ConfigClockSource+0x480>
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d011      	beq.n	800b214 <HAL_TIM_ConfigClockSource+0x480>
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00d      	beq.n	800b214 <HAL_TIM_ConfigClockSource+0x480>
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	2b02      	cmp	r3, #2
 800b1fe:	d009      	beq.n	800b214 <HAL_TIM_ConfigClockSource+0x480>
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	2b0a      	cmp	r3, #10
 800b206:	d005      	beq.n	800b214 <HAL_TIM_ConfigClockSource+0x480>
 800b208:	4a59      	ldr	r2, [pc, #356]	; (800b370 <HAL_TIM_ConfigClockSource+0x5dc>)
 800b20a:	4b55      	ldr	r3, [pc, #340]	; (800b360 <HAL_TIM_ConfigClockSource+0x5cc>)
 800b20c:	0011      	movs	r1, r2
 800b20e:	0018      	movs	r0, r3
 800b210:	f7fa fdf5 	bl	8005dfe <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	2b0f      	cmp	r3, #15
 800b21a:	d905      	bls.n	800b228 <HAL_TIM_ConfigClockSource+0x494>
 800b21c:	4a55      	ldr	r2, [pc, #340]	; (800b374 <HAL_TIM_ConfigClockSource+0x5e0>)
 800b21e:	4b50      	ldr	r3, [pc, #320]	; (800b360 <HAL_TIM_ConfigClockSource+0x5cc>)
 800b220:	0011      	movs	r1, r2
 800b222:	0018      	movs	r0, r3
 800b224:	f7fa fdeb 	bl	8005dfe <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6818      	ldr	r0, [r3, #0]
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	6859      	ldr	r1, [r3, #4]
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	001a      	movs	r2, r3
 800b236:	f000 fa59 	bl	800b6ec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	2160      	movs	r1, #96	; 0x60
 800b240:	0018      	movs	r0, r3
 800b242:	f000 fa85 	bl	800b750 <TIM_ITRx_SetConfig>
      break;
 800b246:	e075      	b.n	800b334 <HAL_TIM_ConfigClockSource+0x5a0>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	2380      	movs	r3, #128	; 0x80
 800b24e:	05db      	lsls	r3, r3, #23
 800b250:	429a      	cmp	r2, r3
 800b252:	d00f      	beq.n	800b274 <HAL_TIM_ConfigClockSource+0x4e0>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a3e      	ldr	r2, [pc, #248]	; (800b354 <HAL_TIM_ConfigClockSource+0x5c0>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d00a      	beq.n	800b274 <HAL_TIM_ConfigClockSource+0x4e0>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a3d      	ldr	r2, [pc, #244]	; (800b358 <HAL_TIM_ConfigClockSource+0x5c4>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d005      	beq.n	800b274 <HAL_TIM_ConfigClockSource+0x4e0>
 800b268:	4a43      	ldr	r2, [pc, #268]	; (800b378 <HAL_TIM_ConfigClockSource+0x5e4>)
 800b26a:	4b3d      	ldr	r3, [pc, #244]	; (800b360 <HAL_TIM_ConfigClockSource+0x5cc>)
 800b26c:	0011      	movs	r1, r2
 800b26e:	0018      	movs	r0, r3
 800b270:	f7fa fdc5 	bl	8005dfe <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	685a      	ldr	r2, [r3, #4]
 800b278:	2380      	movs	r3, #128	; 0x80
 800b27a:	021b      	lsls	r3, r3, #8
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d015      	beq.n	800b2ac <HAL_TIM_ConfigClockSource+0x518>
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d011      	beq.n	800b2ac <HAL_TIM_ConfigClockSource+0x518>
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d00d      	beq.n	800b2ac <HAL_TIM_ConfigClockSource+0x518>
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	2b02      	cmp	r3, #2
 800b296:	d009      	beq.n	800b2ac <HAL_TIM_ConfigClockSource+0x518>
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	2b0a      	cmp	r3, #10
 800b29e:	d005      	beq.n	800b2ac <HAL_TIM_ConfigClockSource+0x518>
 800b2a0:	4a36      	ldr	r2, [pc, #216]	; (800b37c <HAL_TIM_ConfigClockSource+0x5e8>)
 800b2a2:	4b2f      	ldr	r3, [pc, #188]	; (800b360 <HAL_TIM_ConfigClockSource+0x5cc>)
 800b2a4:	0011      	movs	r1, r2
 800b2a6:	0018      	movs	r0, r3
 800b2a8:	f7fa fda9 	bl	8005dfe <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	2b0f      	cmp	r3, #15
 800b2b2:	d905      	bls.n	800b2c0 <HAL_TIM_ConfigClockSource+0x52c>
 800b2b4:	4a32      	ldr	r2, [pc, #200]	; (800b380 <HAL_TIM_ConfigClockSource+0x5ec>)
 800b2b6:	4b2a      	ldr	r3, [pc, #168]	; (800b360 <HAL_TIM_ConfigClockSource+0x5cc>)
 800b2b8:	0011      	movs	r1, r2
 800b2ba:	0018      	movs	r0, r3
 800b2bc:	f7fa fd9f 	bl	8005dfe <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6818      	ldr	r0, [r3, #0]
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	6859      	ldr	r1, [r3, #4]
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	001a      	movs	r2, r3
 800b2ce:	f000 f9df 	bl	800b690 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2140      	movs	r1, #64	; 0x40
 800b2d8:	0018      	movs	r0, r3
 800b2da:	f000 fa39 	bl	800b750 <TIM_ITRx_SetConfig>
      break;
 800b2de:	e029      	b.n	800b334 <HAL_TIM_ConfigClockSource+0x5a0>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	2380      	movs	r3, #128	; 0x80
 800b2e6:	05db      	lsls	r3, r3, #23
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d014      	beq.n	800b316 <HAL_TIM_ConfigClockSource+0x582>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a18      	ldr	r2, [pc, #96]	; (800b354 <HAL_TIM_ConfigClockSource+0x5c0>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d00f      	beq.n	800b316 <HAL_TIM_ConfigClockSource+0x582>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a17      	ldr	r2, [pc, #92]	; (800b358 <HAL_TIM_ConfigClockSource+0x5c4>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d00a      	beq.n	800b316 <HAL_TIM_ConfigClockSource+0x582>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4a1f      	ldr	r2, [pc, #124]	; (800b384 <HAL_TIM_ConfigClockSource+0x5f0>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d005      	beq.n	800b316 <HAL_TIM_ConfigClockSource+0x582>
 800b30a:	4a1f      	ldr	r2, [pc, #124]	; (800b388 <HAL_TIM_ConfigClockSource+0x5f4>)
 800b30c:	4b14      	ldr	r3, [pc, #80]	; (800b360 <HAL_TIM_ConfigClockSource+0x5cc>)
 800b30e:	0011      	movs	r1, r2
 800b310:	0018      	movs	r0, r3
 800b312:	f7fa fd74 	bl	8005dfe <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	0019      	movs	r1, r3
 800b320:	0010      	movs	r0, r2
 800b322:	f000 fa15 	bl	800b750 <TIM_ITRx_SetConfig>
      break;
 800b326:	e005      	b.n	800b334 <HAL_TIM_ConfigClockSource+0x5a0>
    }

    default:
      status = HAL_ERROR;
 800b328:	230f      	movs	r3, #15
 800b32a:	18fb      	adds	r3, r7, r3
 800b32c:	2201      	movs	r2, #1
 800b32e:	701a      	strb	r2, [r3, #0]
      break;
 800b330:	e000      	b.n	800b334 <HAL_TIM_ConfigClockSource+0x5a0>
      break;
 800b332:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2239      	movs	r2, #57	; 0x39
 800b338:	2101      	movs	r1, #1
 800b33a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2238      	movs	r2, #56	; 0x38
 800b340:	2100      	movs	r1, #0
 800b342:	5499      	strb	r1, [r3, r2]

  return status;
 800b344:	230f      	movs	r3, #15
 800b346:	18fb      	adds	r3, r7, r3
 800b348:	781b      	ldrb	r3, [r3, #0]
}
 800b34a:	0018      	movs	r0, r3
 800b34c:	46bd      	mov	sp, r7
 800b34e:	b004      	add	sp, #16
 800b350:	bd80      	pop	{r7, pc}
 800b352:	46c0      	nop			; (mov r8, r8)
 800b354:	40000400 	.word	0x40000400
 800b358:	40010800 	.word	0x40010800
 800b35c:	000013f8 	.word	0x000013f8
 800b360:	0800ccc4 	.word	0x0800ccc4
 800b364:	000013fb 	.word	0x000013fb
 800b368:	000013fc 	.word	0x000013fc
 800b36c:	00001408 	.word	0x00001408
 800b370:	0000140b 	.word	0x0000140b
 800b374:	0000140c 	.word	0x0000140c
 800b378:	00001418 	.word	0x00001418
 800b37c:	0000141b 	.word	0x0000141b
 800b380:	0000141c 	.word	0x0000141c
 800b384:	40011400 	.word	0x40011400
 800b388:	0000142b 	.word	0x0000142b

0800b38c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b394:	46c0      	nop			; (mov r8, r8)
 800b396:	46bd      	mov	sp, r7
 800b398:	b002      	add	sp, #8
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b082      	sub	sp, #8
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b3a4:	46c0      	nop			; (mov r8, r8)
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	b002      	add	sp, #8
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b3b4:	46c0      	nop			; (mov r8, r8)
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	b002      	add	sp, #8
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b3c4:	46c0      	nop			; (mov r8, r8)
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	b002      	add	sp, #8
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	2380      	movs	r3, #128	; 0x80
 800b3e0:	05db      	lsls	r3, r3, #23
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d00b      	beq.n	800b3fe <TIM_Base_SetConfig+0x32>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	4a23      	ldr	r2, [pc, #140]	; (800b478 <TIM_Base_SetConfig+0xac>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d007      	beq.n	800b3fe <TIM_Base_SetConfig+0x32>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	4a22      	ldr	r2, [pc, #136]	; (800b47c <TIM_Base_SetConfig+0xb0>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d003      	beq.n	800b3fe <TIM_Base_SetConfig+0x32>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	4a21      	ldr	r2, [pc, #132]	; (800b480 <TIM_Base_SetConfig+0xb4>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d108      	bne.n	800b410 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2270      	movs	r2, #112	; 0x70
 800b402:	4393      	bics	r3, r2
 800b404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	4313      	orrs	r3, r2
 800b40e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	2380      	movs	r3, #128	; 0x80
 800b414:	05db      	lsls	r3, r3, #23
 800b416:	429a      	cmp	r2, r3
 800b418:	d00b      	beq.n	800b432 <TIM_Base_SetConfig+0x66>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	4a16      	ldr	r2, [pc, #88]	; (800b478 <TIM_Base_SetConfig+0xac>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d007      	beq.n	800b432 <TIM_Base_SetConfig+0x66>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	4a15      	ldr	r2, [pc, #84]	; (800b47c <TIM_Base_SetConfig+0xb0>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d003      	beq.n	800b432 <TIM_Base_SetConfig+0x66>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	4a14      	ldr	r2, [pc, #80]	; (800b480 <TIM_Base_SetConfig+0xb4>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d108      	bne.n	800b444 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	4a13      	ldr	r2, [pc, #76]	; (800b484 <TIM_Base_SetConfig+0xb8>)
 800b436:	4013      	ands	r3, r2
 800b438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	68fa      	ldr	r2, [r7, #12]
 800b440:	4313      	orrs	r3, r2
 800b442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2280      	movs	r2, #128	; 0x80
 800b448:	4393      	bics	r3, r2
 800b44a:	001a      	movs	r2, r3
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	691b      	ldr	r3, [r3, #16]
 800b450:	4313      	orrs	r3, r2
 800b452:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	68fa      	ldr	r2, [r7, #12]
 800b458:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	689a      	ldr	r2, [r3, #8]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2201      	movs	r2, #1
 800b46e:	615a      	str	r2, [r3, #20]
}
 800b470:	46c0      	nop			; (mov r8, r8)
 800b472:	46bd      	mov	sp, r7
 800b474:	b004      	add	sp, #16
 800b476:	bd80      	pop	{r7, pc}
 800b478:	40000400 	.word	0x40000400
 800b47c:	40010800 	.word	0x40010800
 800b480:	40011400 	.word	0x40011400
 800b484:	fffffcff 	.word	0xfffffcff

0800b488 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b086      	sub	sp, #24
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a1b      	ldr	r3, [r3, #32]
 800b496:	2201      	movs	r2, #1
 800b498:	4393      	bics	r3, r2
 800b49a:	001a      	movs	r2, r3
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6a1b      	ldr	r3, [r3, #32]
 800b4a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	699b      	ldr	r3, [r3, #24]
 800b4b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2270      	movs	r2, #112	; 0x70
 800b4b6:	4393      	bics	r3, r2
 800b4b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2203      	movs	r2, #3
 800b4be:	4393      	bics	r3, r2
 800b4c0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	68fa      	ldr	r2, [r7, #12]
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	2202      	movs	r2, #2
 800b4d0:	4393      	bics	r3, r2
 800b4d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	697a      	ldr	r2, [r7, #20]
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	693a      	ldr	r2, [r7, #16]
 800b4e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	68fa      	ldr	r2, [r7, #12]
 800b4e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	685a      	ldr	r2, [r3, #4]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	697a      	ldr	r2, [r7, #20]
 800b4f6:	621a      	str	r2, [r3, #32]
}
 800b4f8:	46c0      	nop			; (mov r8, r8)
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	b006      	add	sp, #24
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b086      	sub	sp, #24
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6a1b      	ldr	r3, [r3, #32]
 800b50e:	2210      	movs	r2, #16
 800b510:	4393      	bics	r3, r2
 800b512:	001a      	movs	r2, r3
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6a1b      	ldr	r3, [r3, #32]
 800b51c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	699b      	ldr	r3, [r3, #24]
 800b528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	4a13      	ldr	r2, [pc, #76]	; (800b57c <TIM_OC2_SetConfig+0x7c>)
 800b52e:	4013      	ands	r3, r2
 800b530:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	4a12      	ldr	r2, [pc, #72]	; (800b580 <TIM_OC2_SetConfig+0x80>)
 800b536:	4013      	ands	r3, r2
 800b538:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	021b      	lsls	r3, r3, #8
 800b540:	68fa      	ldr	r2, [r7, #12]
 800b542:	4313      	orrs	r3, r2
 800b544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	2220      	movs	r2, #32
 800b54a:	4393      	bics	r3, r2
 800b54c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	689b      	ldr	r3, [r3, #8]
 800b552:	011b      	lsls	r3, r3, #4
 800b554:	697a      	ldr	r2, [r7, #20]
 800b556:	4313      	orrs	r3, r2
 800b558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	693a      	ldr	r2, [r7, #16]
 800b55e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	68fa      	ldr	r2, [r7, #12]
 800b564:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	685a      	ldr	r2, [r3, #4]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	697a      	ldr	r2, [r7, #20]
 800b572:	621a      	str	r2, [r3, #32]
}
 800b574:	46c0      	nop			; (mov r8, r8)
 800b576:	46bd      	mov	sp, r7
 800b578:	b006      	add	sp, #24
 800b57a:	bd80      	pop	{r7, pc}
 800b57c:	ffff8fff 	.word	0xffff8fff
 800b580:	fffffcff 	.word	0xfffffcff

0800b584 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b086      	sub	sp, #24
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6a1b      	ldr	r3, [r3, #32]
 800b592:	4a1a      	ldr	r2, [pc, #104]	; (800b5fc <TIM_OC3_SetConfig+0x78>)
 800b594:	401a      	ands	r2, r3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6a1b      	ldr	r3, [r3, #32]
 800b59e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	69db      	ldr	r3, [r3, #28]
 800b5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2270      	movs	r2, #112	; 0x70
 800b5b0:	4393      	bics	r3, r2
 800b5b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2203      	movs	r2, #3
 800b5b8:	4393      	bics	r3, r2
 800b5ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	68fa      	ldr	r2, [r7, #12]
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	4a0d      	ldr	r2, [pc, #52]	; (800b600 <TIM_OC3_SetConfig+0x7c>)
 800b5ca:	4013      	ands	r3, r2
 800b5cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	021b      	lsls	r3, r3, #8
 800b5d4:	697a      	ldr	r2, [r7, #20]
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	693a      	ldr	r2, [r7, #16]
 800b5de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	68fa      	ldr	r2, [r7, #12]
 800b5e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	685a      	ldr	r2, [r3, #4]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	697a      	ldr	r2, [r7, #20]
 800b5f2:	621a      	str	r2, [r3, #32]
}
 800b5f4:	46c0      	nop			; (mov r8, r8)
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	b006      	add	sp, #24
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	fffffeff 	.word	0xfffffeff
 800b600:	fffffdff 	.word	0xfffffdff

0800b604 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b086      	sub	sp, #24
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6a1b      	ldr	r3, [r3, #32]
 800b612:	4a1b      	ldr	r2, [pc, #108]	; (800b680 <TIM_OC4_SetConfig+0x7c>)
 800b614:	401a      	ands	r2, r3
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6a1b      	ldr	r3, [r3, #32]
 800b61e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	69db      	ldr	r3, [r3, #28]
 800b62a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	4a15      	ldr	r2, [pc, #84]	; (800b684 <TIM_OC4_SetConfig+0x80>)
 800b630:	4013      	ands	r3, r2
 800b632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	4a14      	ldr	r2, [pc, #80]	; (800b688 <TIM_OC4_SetConfig+0x84>)
 800b638:	4013      	ands	r3, r2
 800b63a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	021b      	lsls	r3, r3, #8
 800b642:	68fa      	ldr	r2, [r7, #12]
 800b644:	4313      	orrs	r3, r2
 800b646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	4a10      	ldr	r2, [pc, #64]	; (800b68c <TIM_OC4_SetConfig+0x88>)
 800b64c:	4013      	ands	r3, r2
 800b64e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	689b      	ldr	r3, [r3, #8]
 800b654:	031b      	lsls	r3, r3, #12
 800b656:	697a      	ldr	r2, [r7, #20]
 800b658:	4313      	orrs	r3, r2
 800b65a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	693a      	ldr	r2, [r7, #16]
 800b660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	685a      	ldr	r2, [r3, #4]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	697a      	ldr	r2, [r7, #20]
 800b674:	621a      	str	r2, [r3, #32]
}
 800b676:	46c0      	nop			; (mov r8, r8)
 800b678:	46bd      	mov	sp, r7
 800b67a:	b006      	add	sp, #24
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	46c0      	nop			; (mov r8, r8)
 800b680:	ffffefff 	.word	0xffffefff
 800b684:	ffff8fff 	.word	0xffff8fff
 800b688:	fffffcff 	.word	0xfffffcff
 800b68c:	ffffdfff 	.word	0xffffdfff

0800b690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b086      	sub	sp, #24
 800b694:	af00      	add	r7, sp, #0
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	60b9      	str	r1, [r7, #8]
 800b69a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	6a1b      	ldr	r3, [r3, #32]
 800b6a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6a1b      	ldr	r3, [r3, #32]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	4393      	bics	r3, r2
 800b6aa:	001a      	movs	r2, r3
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	699b      	ldr	r3, [r3, #24]
 800b6b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	22f0      	movs	r2, #240	; 0xf0
 800b6ba:	4393      	bics	r3, r2
 800b6bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	011b      	lsls	r3, r3, #4
 800b6c2:	693a      	ldr	r2, [r7, #16]
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	220a      	movs	r2, #10
 800b6cc:	4393      	bics	r3, r2
 800b6ce:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b6d0:	697a      	ldr	r2, [r7, #20]
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	693a      	ldr	r2, [r7, #16]
 800b6dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	697a      	ldr	r2, [r7, #20]
 800b6e2:	621a      	str	r2, [r3, #32]
}
 800b6e4:	46c0      	nop			; (mov r8, r8)
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	b006      	add	sp, #24
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b086      	sub	sp, #24
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6a1b      	ldr	r3, [r3, #32]
 800b6fc:	2210      	movs	r2, #16
 800b6fe:	4393      	bics	r3, r2
 800b700:	001a      	movs	r2, r3
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	699b      	ldr	r3, [r3, #24]
 800b70a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	6a1b      	ldr	r3, [r3, #32]
 800b710:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	4a0d      	ldr	r2, [pc, #52]	; (800b74c <TIM_TI2_ConfigInputStage+0x60>)
 800b716:	4013      	ands	r3, r2
 800b718:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	031b      	lsls	r3, r3, #12
 800b71e:	697a      	ldr	r2, [r7, #20]
 800b720:	4313      	orrs	r3, r2
 800b722:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	22a0      	movs	r2, #160	; 0xa0
 800b728:	4393      	bics	r3, r2
 800b72a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	011b      	lsls	r3, r3, #4
 800b730:	693a      	ldr	r2, [r7, #16]
 800b732:	4313      	orrs	r3, r2
 800b734:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	697a      	ldr	r2, [r7, #20]
 800b73a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	693a      	ldr	r2, [r7, #16]
 800b740:	621a      	str	r2, [r3, #32]
}
 800b742:	46c0      	nop			; (mov r8, r8)
 800b744:	46bd      	mov	sp, r7
 800b746:	b006      	add	sp, #24
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	46c0      	nop			; (mov r8, r8)
 800b74c:	ffff0fff 	.word	0xffff0fff

0800b750 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	689b      	ldr	r3, [r3, #8]
 800b75e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2270      	movs	r2, #112	; 0x70
 800b764:	4393      	bics	r3, r2
 800b766:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b768:	683a      	ldr	r2, [r7, #0]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	4313      	orrs	r3, r2
 800b76e:	2207      	movs	r2, #7
 800b770:	4313      	orrs	r3, r2
 800b772:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	68fa      	ldr	r2, [r7, #12]
 800b778:	609a      	str	r2, [r3, #8]
}
 800b77a:	46c0      	nop			; (mov r8, r8)
 800b77c:	46bd      	mov	sp, r7
 800b77e:	b004      	add	sp, #16
 800b780:	bd80      	pop	{r7, pc}
	...

0800b784 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b086      	sub	sp, #24
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
 800b790:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	689b      	ldr	r3, [r3, #8]
 800b796:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	4a09      	ldr	r2, [pc, #36]	; (800b7c0 <TIM_ETR_SetConfig+0x3c>)
 800b79c:	4013      	ands	r3, r2
 800b79e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	021a      	lsls	r2, r3, #8
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	431a      	orrs	r2, r3
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	697a      	ldr	r2, [r7, #20]
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	697a      	ldr	r2, [r7, #20]
 800b7b6:	609a      	str	r2, [r3, #8]
}
 800b7b8:	46c0      	nop			; (mov r8, r8)
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	b006      	add	sp, #24
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	ffff00ff 	.word	0xffff00ff

0800b7c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b084      	sub	sp, #16
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681a      	ldr	r2, [r3, #0]
 800b7d2:	2380      	movs	r3, #128	; 0x80
 800b7d4:	05db      	lsls	r3, r3, #23
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d01d      	beq.n	800b816 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	4a50      	ldr	r2, [pc, #320]	; (800b920 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d018      	beq.n	800b816 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4a4e      	ldr	r2, [pc, #312]	; (800b924 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d013      	beq.n	800b816 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4a4d      	ldr	r2, [pc, #308]	; (800b928 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d00e      	beq.n	800b816 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4a4b      	ldr	r2, [pc, #300]	; (800b92c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d009      	beq.n	800b816 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	4a4a      	ldr	r2, [pc, #296]	; (800b930 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800b808:	4293      	cmp	r3, r2
 800b80a:	d004      	beq.n	800b816 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800b80c:	4b49      	ldr	r3, [pc, #292]	; (800b934 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800b80e:	2159      	movs	r1, #89	; 0x59
 800b810:	0018      	movs	r0, r3
 800b812:	f7fa faf4 	bl	8005dfe <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d020      	beq.n	800b860 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2b10      	cmp	r3, #16
 800b824:	d01c      	beq.n	800b860 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2b20      	cmp	r3, #32
 800b82c:	d018      	beq.n	800b860 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	2b30      	cmp	r3, #48	; 0x30
 800b834:	d014      	beq.n	800b860 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	2b40      	cmp	r3, #64	; 0x40
 800b83c:	d010      	beq.n	800b860 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	2b50      	cmp	r3, #80	; 0x50
 800b844:	d00c      	beq.n	800b860 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2b60      	cmp	r3, #96	; 0x60
 800b84c:	d008      	beq.n	800b860 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	2b70      	cmp	r3, #112	; 0x70
 800b854:	d004      	beq.n	800b860 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800b856:	4b37      	ldr	r3, [pc, #220]	; (800b934 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800b858:	215a      	movs	r1, #90	; 0x5a
 800b85a:	0018      	movs	r0, r3
 800b85c:	f7fa facf 	bl	8005dfe <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	2b80      	cmp	r3, #128	; 0x80
 800b866:	d008      	beq.n	800b87a <HAL_TIMEx_MasterConfigSynchronization+0xb6>
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d004      	beq.n	800b87a <HAL_TIMEx_MasterConfigSynchronization+0xb6>
 800b870:	4b30      	ldr	r3, [pc, #192]	; (800b934 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800b872:	215b      	movs	r1, #91	; 0x5b
 800b874:	0018      	movs	r0, r3
 800b876:	f7fa fac2 	bl	8005dfe <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2238      	movs	r2, #56	; 0x38
 800b87e:	5c9b      	ldrb	r3, [r3, r2]
 800b880:	2b01      	cmp	r3, #1
 800b882:	d101      	bne.n	800b888 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800b884:	2302      	movs	r3, #2
 800b886:	e047      	b.n	800b918 <HAL_TIMEx_MasterConfigSynchronization+0x154>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2238      	movs	r2, #56	; 0x38
 800b88c:	2101      	movs	r1, #1
 800b88e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2239      	movs	r2, #57	; 0x39
 800b894:	2102      	movs	r1, #2
 800b896:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2270      	movs	r2, #112	; 0x70
 800b8ac:	4393      	bics	r3, r2
 800b8ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	68fa      	ldr	r2, [r7, #12]
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	68fa      	ldr	r2, [r7, #12]
 800b8c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	2380      	movs	r3, #128	; 0x80
 800b8c8:	05db      	lsls	r3, r3, #23
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d00e      	beq.n	800b8ec <HAL_TIMEx_MasterConfigSynchronization+0x128>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a13      	ldr	r2, [pc, #76]	; (800b920 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d009      	beq.n	800b8ec <HAL_TIMEx_MasterConfigSynchronization+0x128>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a13      	ldr	r2, [pc, #76]	; (800b92c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d004      	beq.n	800b8ec <HAL_TIMEx_MasterConfigSynchronization+0x128>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a12      	ldr	r2, [pc, #72]	; (800b930 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d10c      	bne.n	800b906 <HAL_TIMEx_MasterConfigSynchronization+0x142>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	2280      	movs	r2, #128	; 0x80
 800b8f0:	4393      	bics	r3, r2
 800b8f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	68ba      	ldr	r2, [r7, #8]
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	68ba      	ldr	r2, [r7, #8]
 800b904:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2239      	movs	r2, #57	; 0x39
 800b90a:	2101      	movs	r1, #1
 800b90c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2238      	movs	r2, #56	; 0x38
 800b912:	2100      	movs	r1, #0
 800b914:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b916:	2300      	movs	r3, #0
}
 800b918:	0018      	movs	r0, r3
 800b91a:	46bd      	mov	sp, r7
 800b91c:	b004      	add	sp, #16
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	40000400 	.word	0x40000400
 800b924:	40001000 	.word	0x40001000
 800b928:	40001400 	.word	0x40001400
 800b92c:	40010800 	.word	0x40010800
 800b930:	40011400 	.word	0x40011400
 800b934:	0800ccfc 	.word	0x0800ccfc

0800b938 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d101      	bne.n	800b94a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	e08a      	b.n	800ba60 <HAL_UART_Init+0x128>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	699b      	ldr	r3, [r3, #24]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d020      	beq.n	800b994 <HAL_UART_Init+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4a44      	ldr	r2, [pc, #272]	; (800ba68 <HAL_UART_Init+0x130>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d03c      	beq.n	800b9d6 <HAL_UART_Init+0x9e>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4a42      	ldr	r2, [pc, #264]	; (800ba6c <HAL_UART_Init+0x134>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d037      	beq.n	800b9d6 <HAL_UART_Init+0x9e>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	4a41      	ldr	r2, [pc, #260]	; (800ba70 <HAL_UART_Init+0x138>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d032      	beq.n	800b9d6 <HAL_UART_Init+0x9e>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4a3f      	ldr	r2, [pc, #252]	; (800ba74 <HAL_UART_Init+0x13c>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d02d      	beq.n	800b9d6 <HAL_UART_Init+0x9e>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4a3e      	ldr	r2, [pc, #248]	; (800ba78 <HAL_UART_Init+0x140>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d028      	beq.n	800b9d6 <HAL_UART_Init+0x9e>
 800b984:	2397      	movs	r3, #151	; 0x97
 800b986:	005a      	lsls	r2, r3, #1
 800b988:	4b3c      	ldr	r3, [pc, #240]	; (800ba7c <HAL_UART_Init+0x144>)
 800b98a:	0011      	movs	r1, r2
 800b98c:	0018      	movs	r0, r3
 800b98e:	f7fa fa36 	bl	8005dfe <assert_failed>
 800b992:	e020      	b.n	800b9d6 <HAL_UART_Init+0x9e>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4a33      	ldr	r2, [pc, #204]	; (800ba68 <HAL_UART_Init+0x130>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d01b      	beq.n	800b9d6 <HAL_UART_Init+0x9e>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	4a32      	ldr	r2, [pc, #200]	; (800ba6c <HAL_UART_Init+0x134>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d016      	beq.n	800b9d6 <HAL_UART_Init+0x9e>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a30      	ldr	r2, [pc, #192]	; (800ba70 <HAL_UART_Init+0x138>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d011      	beq.n	800b9d6 <HAL_UART_Init+0x9e>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4a2f      	ldr	r2, [pc, #188]	; (800ba74 <HAL_UART_Init+0x13c>)
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d00c      	beq.n	800b9d6 <HAL_UART_Init+0x9e>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a2d      	ldr	r2, [pc, #180]	; (800ba78 <HAL_UART_Init+0x140>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d007      	beq.n	800b9d6 <HAL_UART_Init+0x9e>
 800b9c6:	2334      	movs	r3, #52	; 0x34
 800b9c8:	33ff      	adds	r3, #255	; 0xff
 800b9ca:	001a      	movs	r2, r3
 800b9cc:	4b2b      	ldr	r3, [pc, #172]	; (800ba7c <HAL_UART_Init+0x144>)
 800b9ce:	0011      	movs	r1, r2
 800b9d0:	0018      	movs	r0, r3
 800b9d2:	f7fa fa14 	bl	8005dfe <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d107      	bne.n	800b9ee <HAL_UART_Init+0xb6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2274      	movs	r2, #116	; 0x74
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	0018      	movs	r0, r3
 800b9ea:	f7fb fbd5 	bl	8007198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2224      	movs	r2, #36	; 0x24
 800b9f2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	2101      	movs	r1, #1
 800ba00:	438a      	bics	r2, r1
 800ba02:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	0018      	movs	r0, r3
 800ba08:	f000 f8e4 	bl	800bbd4 <UART_SetConfig>
 800ba0c:	0003      	movs	r3, r0
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d101      	bne.n	800ba16 <HAL_UART_Init+0xde>
  {
    return HAL_ERROR;
 800ba12:	2301      	movs	r3, #1
 800ba14:	e024      	b.n	800ba60 <HAL_UART_Init+0x128>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d003      	beq.n	800ba26 <HAL_UART_Init+0xee>
  {
    UART_AdvFeatureConfig(huart);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	0018      	movs	r0, r3
 800ba22:	f000 fc5d 	bl	800c2e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	685a      	ldr	r2, [r3, #4]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4913      	ldr	r1, [pc, #76]	; (800ba80 <HAL_UART_Init+0x148>)
 800ba32:	400a      	ands	r2, r1
 800ba34:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	689a      	ldr	r2, [r3, #8]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	212a      	movs	r1, #42	; 0x2a
 800ba42:	438a      	bics	r2, r1
 800ba44:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	2101      	movs	r1, #1
 800ba52:	430a      	orrs	r2, r1
 800ba54:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	0018      	movs	r0, r3
 800ba5a:	f000 fdc7 	bl	800c5ec <UART_CheckIdleState>
 800ba5e:	0003      	movs	r3, r0
}
 800ba60:	0018      	movs	r0, r3
 800ba62:	46bd      	mov	sp, r7
 800ba64:	b002      	add	sp, #8
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	40013800 	.word	0x40013800
 800ba6c:	40004400 	.word	0x40004400
 800ba70:	40004c00 	.word	0x40004c00
 800ba74:	40005000 	.word	0x40005000
 800ba78:	40004800 	.word	0x40004800
 800ba7c:	0800cd38 	.word	0x0800cd38
 800ba80:	ffffb7ff 	.word	0xffffb7ff

0800ba84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b08a      	sub	sp, #40	; 0x28
 800ba88:	af02      	add	r7, sp, #8
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	603b      	str	r3, [r7, #0]
 800ba90:	1dbb      	adds	r3, r7, #6
 800ba92:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba98:	2b20      	cmp	r3, #32
 800ba9a:	d000      	beq.n	800ba9e <HAL_UART_Transmit+0x1a>
 800ba9c:	e095      	b.n	800bbca <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d003      	beq.n	800baac <HAL_UART_Transmit+0x28>
 800baa4:	1dbb      	adds	r3, r7, #6
 800baa6:	881b      	ldrh	r3, [r3, #0]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d101      	bne.n	800bab0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800baac:	2301      	movs	r3, #1
 800baae:	e08d      	b.n	800bbcc <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	689a      	ldr	r2, [r3, #8]
 800bab4:	2380      	movs	r3, #128	; 0x80
 800bab6:	015b      	lsls	r3, r3, #5
 800bab8:	429a      	cmp	r2, r3
 800baba:	d109      	bne.n	800bad0 <HAL_UART_Transmit+0x4c>
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	691b      	ldr	r3, [r3, #16]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d105      	bne.n	800bad0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	2201      	movs	r2, #1
 800bac8:	4013      	ands	r3, r2
 800baca:	d001      	beq.n	800bad0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800bacc:	2301      	movs	r3, #1
 800bace:	e07d      	b.n	800bbcc <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2274      	movs	r2, #116	; 0x74
 800bad4:	5c9b      	ldrb	r3, [r3, r2]
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d101      	bne.n	800bade <HAL_UART_Transmit+0x5a>
 800bada:	2302      	movs	r3, #2
 800badc:	e076      	b.n	800bbcc <HAL_UART_Transmit+0x148>
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2274      	movs	r2, #116	; 0x74
 800bae2:	2101      	movs	r1, #1
 800bae4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2280      	movs	r2, #128	; 0x80
 800baea:	2100      	movs	r1, #0
 800baec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2221      	movs	r2, #33	; 0x21
 800baf2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800baf4:	f7fb fc72 	bl	80073dc <HAL_GetTick>
 800baf8:	0003      	movs	r3, r0
 800bafa:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	1dba      	adds	r2, r7, #6
 800bb00:	2150      	movs	r1, #80	; 0x50
 800bb02:	8812      	ldrh	r2, [r2, #0]
 800bb04:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	1dba      	adds	r2, r7, #6
 800bb0a:	2152      	movs	r1, #82	; 0x52
 800bb0c:	8812      	ldrh	r2, [r2, #0]
 800bb0e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	689a      	ldr	r2, [r3, #8]
 800bb14:	2380      	movs	r3, #128	; 0x80
 800bb16:	015b      	lsls	r3, r3, #5
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d108      	bne.n	800bb2e <HAL_UART_Transmit+0xaa>
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	691b      	ldr	r3, [r3, #16]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d104      	bne.n	800bb2e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800bb24:	2300      	movs	r3, #0
 800bb26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	61bb      	str	r3, [r7, #24]
 800bb2c:	e003      	b.n	800bb36 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bb32:	2300      	movs	r3, #0
 800bb34:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2274      	movs	r2, #116	; 0x74
 800bb3a:	2100      	movs	r1, #0
 800bb3c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800bb3e:	e02c      	b.n	800bb9a <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bb40:	697a      	ldr	r2, [r7, #20]
 800bb42:	68f8      	ldr	r0, [r7, #12]
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	9300      	str	r3, [sp, #0]
 800bb48:	0013      	movs	r3, r2
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	2180      	movs	r1, #128	; 0x80
 800bb4e:	f000 fd95 	bl	800c67c <UART_WaitOnFlagUntilTimeout>
 800bb52:	1e03      	subs	r3, r0, #0
 800bb54:	d001      	beq.n	800bb5a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800bb56:	2303      	movs	r3, #3
 800bb58:	e038      	b.n	800bbcc <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800bb5a:	69fb      	ldr	r3, [r7, #28]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d10b      	bne.n	800bb78 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bb60:	69bb      	ldr	r3, [r7, #24]
 800bb62:	881b      	ldrh	r3, [r3, #0]
 800bb64:	001a      	movs	r2, r3
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	05d2      	lsls	r2, r2, #23
 800bb6c:	0dd2      	lsrs	r2, r2, #23
 800bb6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bb70:	69bb      	ldr	r3, [r7, #24]
 800bb72:	3302      	adds	r3, #2
 800bb74:	61bb      	str	r3, [r7, #24]
 800bb76:	e007      	b.n	800bb88 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bb78:	69fb      	ldr	r3, [r7, #28]
 800bb7a:	781a      	ldrb	r2, [r3, #0]
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bb82:	69fb      	ldr	r3, [r7, #28]
 800bb84:	3301      	adds	r3, #1
 800bb86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2252      	movs	r2, #82	; 0x52
 800bb8c:	5a9b      	ldrh	r3, [r3, r2]
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	3b01      	subs	r3, #1
 800bb92:	b299      	uxth	r1, r3
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2252      	movs	r2, #82	; 0x52
 800bb98:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2252      	movs	r2, #82	; 0x52
 800bb9e:	5a9b      	ldrh	r3, [r3, r2]
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d1cc      	bne.n	800bb40 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bba6:	697a      	ldr	r2, [r7, #20]
 800bba8:	68f8      	ldr	r0, [r7, #12]
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	9300      	str	r3, [sp, #0]
 800bbae:	0013      	movs	r3, r2
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	2140      	movs	r1, #64	; 0x40
 800bbb4:	f000 fd62 	bl	800c67c <UART_WaitOnFlagUntilTimeout>
 800bbb8:	1e03      	subs	r3, r0, #0
 800bbba:	d001      	beq.n	800bbc0 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 800bbbc:	2303      	movs	r3, #3
 800bbbe:	e005      	b.n	800bbcc <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2220      	movs	r2, #32
 800bbc4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	e000      	b.n	800bbcc <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800bbca:	2302      	movs	r3, #2
  }
}
 800bbcc:	0018      	movs	r0, r3
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	b008      	add	sp, #32
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bbd4:	b5b0      	push	{r4, r5, r7, lr}
 800bbd6:	b08e      	sub	sp, #56	; 0x38
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bbdc:	231a      	movs	r3, #26
 800bbde:	2218      	movs	r2, #24
 800bbe0:	4694      	mov	ip, r2
 800bbe2:	44bc      	add	ip, r7
 800bbe4:	4463      	add	r3, ip
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	701a      	strb	r2, [r3, #0]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800bbea:	69fb      	ldr	r3, [r7, #28]
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	4ac0      	ldr	r2, [pc, #768]	; (800bef0 <UART_SetConfig+0x31c>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d905      	bls.n	800bc00 <UART_SetConfig+0x2c>
 800bbf4:	4abf      	ldr	r2, [pc, #764]	; (800bef4 <UART_SetConfig+0x320>)
 800bbf6:	4bc0      	ldr	r3, [pc, #768]	; (800bef8 <UART_SetConfig+0x324>)
 800bbf8:	0011      	movs	r1, r2
 800bbfa:	0018      	movs	r0, r3
 800bbfc:	f7fa f8ff 	bl	8005dfe <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800bc00:	69fb      	ldr	r3, [r7, #28]
 800bc02:	689a      	ldr	r2, [r3, #8]
 800bc04:	2380      	movs	r3, #128	; 0x80
 800bc06:	055b      	lsls	r3, r3, #21
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d00f      	beq.n	800bc2c <UART_SetConfig+0x58>
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d00b      	beq.n	800bc2c <UART_SetConfig+0x58>
 800bc14:	69fb      	ldr	r3, [r7, #28]
 800bc16:	689a      	ldr	r2, [r3, #8]
 800bc18:	2380      	movs	r3, #128	; 0x80
 800bc1a:	015b      	lsls	r3, r3, #5
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d005      	beq.n	800bc2c <UART_SetConfig+0x58>
 800bc20:	4ab6      	ldr	r2, [pc, #728]	; (800befc <UART_SetConfig+0x328>)
 800bc22:	4bb5      	ldr	r3, [pc, #724]	; (800bef8 <UART_SetConfig+0x324>)
 800bc24:	0011      	movs	r1, r2
 800bc26:	0018      	movs	r0, r3
 800bc28:	f7fa f8e9 	bl	8005dfe <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800bc2c:	69fb      	ldr	r3, [r7, #28]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4ab3      	ldr	r2, [pc, #716]	; (800bf00 <UART_SetConfig+0x32c>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d110      	bne.n	800bc58 <UART_SetConfig+0x84>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800bc36:	69fb      	ldr	r3, [r7, #28]
 800bc38:	68db      	ldr	r3, [r3, #12]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d039      	beq.n	800bcb2 <UART_SetConfig+0xde>
 800bc3e:	69fb      	ldr	r3, [r7, #28]
 800bc40:	68da      	ldr	r2, [r3, #12]
 800bc42:	2380      	movs	r3, #128	; 0x80
 800bc44:	019b      	lsls	r3, r3, #6
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d033      	beq.n	800bcb2 <UART_SetConfig+0xde>
 800bc4a:	4aae      	ldr	r2, [pc, #696]	; (800bf04 <UART_SetConfig+0x330>)
 800bc4c:	4baa      	ldr	r3, [pc, #680]	; (800bef8 <UART_SetConfig+0x324>)
 800bc4e:	0011      	movs	r1, r2
 800bc50:	0018      	movs	r0, r3
 800bc52:	f7fa f8d4 	bl	8005dfe <assert_failed>
 800bc56:	e02c      	b.n	800bcb2 <UART_SetConfig+0xde>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	68da      	ldr	r2, [r3, #12]
 800bc5c:	2380      	movs	r3, #128	; 0x80
 800bc5e:	015b      	lsls	r3, r3, #5
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d016      	beq.n	800bc92 <UART_SetConfig+0xbe>
 800bc64:	69fb      	ldr	r3, [r7, #28]
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d012      	beq.n	800bc92 <UART_SetConfig+0xbe>
 800bc6c:	69fb      	ldr	r3, [r7, #28]
 800bc6e:	68da      	ldr	r2, [r3, #12]
 800bc70:	23c0      	movs	r3, #192	; 0xc0
 800bc72:	019b      	lsls	r3, r3, #6
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d00c      	beq.n	800bc92 <UART_SetConfig+0xbe>
 800bc78:	69fb      	ldr	r3, [r7, #28]
 800bc7a:	68da      	ldr	r2, [r3, #12]
 800bc7c:	2380      	movs	r3, #128	; 0x80
 800bc7e:	019b      	lsls	r3, r3, #6
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d006      	beq.n	800bc92 <UART_SetConfig+0xbe>
 800bc84:	23bc      	movs	r3, #188	; 0xbc
 800bc86:	011a      	lsls	r2, r3, #4
 800bc88:	4b9b      	ldr	r3, [pc, #620]	; (800bef8 <UART_SetConfig+0x324>)
 800bc8a:	0011      	movs	r1, r2
 800bc8c:	0018      	movs	r0, r3
 800bc8e:	f7fa f8b6 	bl	8005dfe <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800bc92:	69fb      	ldr	r3, [r7, #28]
 800bc94:	6a1b      	ldr	r3, [r3, #32]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d00b      	beq.n	800bcb2 <UART_SetConfig+0xde>
 800bc9a:	69fb      	ldr	r3, [r7, #28]
 800bc9c:	6a1a      	ldr	r2, [r3, #32]
 800bc9e:	2380      	movs	r3, #128	; 0x80
 800bca0:	011b      	lsls	r3, r3, #4
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d005      	beq.n	800bcb2 <UART_SetConfig+0xde>
 800bca6:	4a98      	ldr	r2, [pc, #608]	; (800bf08 <UART_SetConfig+0x334>)
 800bca8:	4b93      	ldr	r3, [pc, #588]	; (800bef8 <UART_SetConfig+0x324>)
 800bcaa:	0011      	movs	r1, r2
 800bcac:	0018      	movs	r0, r3
 800bcae:	f7fa f8a6 	bl	8005dfe <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800bcb2:	69fb      	ldr	r3, [r7, #28]
 800bcb4:	691b      	ldr	r3, [r3, #16]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d011      	beq.n	800bcde <UART_SetConfig+0x10a>
 800bcba:	69fb      	ldr	r3, [r7, #28]
 800bcbc:	691a      	ldr	r2, [r3, #16]
 800bcbe:	2380      	movs	r3, #128	; 0x80
 800bcc0:	00db      	lsls	r3, r3, #3
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d00b      	beq.n	800bcde <UART_SetConfig+0x10a>
 800bcc6:	69fb      	ldr	r3, [r7, #28]
 800bcc8:	691a      	ldr	r2, [r3, #16]
 800bcca:	23c0      	movs	r3, #192	; 0xc0
 800bccc:	00db      	lsls	r3, r3, #3
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d005      	beq.n	800bcde <UART_SetConfig+0x10a>
 800bcd2:	4a8e      	ldr	r2, [pc, #568]	; (800bf0c <UART_SetConfig+0x338>)
 800bcd4:	4b88      	ldr	r3, [pc, #544]	; (800bef8 <UART_SetConfig+0x324>)
 800bcd6:	0011      	movs	r1, r2
 800bcd8:	0018      	movs	r0, r3
 800bcda:	f7fa f890 	bl	8005dfe <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800bcde:	69fb      	ldr	r3, [r7, #28]
 800bce0:	695b      	ldr	r3, [r3, #20]
 800bce2:	220c      	movs	r2, #12
 800bce4:	4393      	bics	r3, r2
 800bce6:	d103      	bne.n	800bcf0 <UART_SetConfig+0x11c>
 800bce8:	69fb      	ldr	r3, [r7, #28]
 800bcea:	695b      	ldr	r3, [r3, #20]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d105      	bne.n	800bcfc <UART_SetConfig+0x128>
 800bcf0:	4a87      	ldr	r2, [pc, #540]	; (800bf10 <UART_SetConfig+0x33c>)
 800bcf2:	4b81      	ldr	r3, [pc, #516]	; (800bef8 <UART_SetConfig+0x324>)
 800bcf4:	0011      	movs	r1, r2
 800bcf6:	0018      	movs	r0, r3
 800bcf8:	f7fa f881 	bl	8005dfe <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800bcfc:	69fb      	ldr	r3, [r7, #28]
 800bcfe:	699b      	ldr	r3, [r3, #24]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d017      	beq.n	800bd34 <UART_SetConfig+0x160>
 800bd04:	69fb      	ldr	r3, [r7, #28]
 800bd06:	699a      	ldr	r2, [r3, #24]
 800bd08:	2380      	movs	r3, #128	; 0x80
 800bd0a:	005b      	lsls	r3, r3, #1
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d011      	beq.n	800bd34 <UART_SetConfig+0x160>
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	699a      	ldr	r2, [r3, #24]
 800bd14:	2380      	movs	r3, #128	; 0x80
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d00b      	beq.n	800bd34 <UART_SetConfig+0x160>
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	699a      	ldr	r2, [r3, #24]
 800bd20:	23c0      	movs	r3, #192	; 0xc0
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d005      	beq.n	800bd34 <UART_SetConfig+0x160>
 800bd28:	4a7a      	ldr	r2, [pc, #488]	; (800bf14 <UART_SetConfig+0x340>)
 800bd2a:	4b73      	ldr	r3, [pc, #460]	; (800bef8 <UART_SetConfig+0x324>)
 800bd2c:	0011      	movs	r1, r2
 800bd2e:	0018      	movs	r0, r3
 800bd30:	f7fa f865 	bl	8005dfe <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800bd34:	69fb      	ldr	r3, [r7, #28]
 800bd36:	69db      	ldr	r3, [r3, #28]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d00b      	beq.n	800bd54 <UART_SetConfig+0x180>
 800bd3c:	69fb      	ldr	r3, [r7, #28]
 800bd3e:	69da      	ldr	r2, [r3, #28]
 800bd40:	2380      	movs	r3, #128	; 0x80
 800bd42:	021b      	lsls	r3, r3, #8
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d005      	beq.n	800bd54 <UART_SetConfig+0x180>
 800bd48:	4a73      	ldr	r2, [pc, #460]	; (800bf18 <UART_SetConfig+0x344>)
 800bd4a:	4b6b      	ldr	r3, [pc, #428]	; (800bef8 <UART_SetConfig+0x324>)
 800bd4c:	0011      	movs	r1, r2
 800bd4e:	0018      	movs	r0, r3
 800bd50:	f7fa f855 	bl	8005dfe <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd54:	69fb      	ldr	r3, [r7, #28]
 800bd56:	689a      	ldr	r2, [r3, #8]
 800bd58:	69fb      	ldr	r3, [r7, #28]
 800bd5a:	691b      	ldr	r3, [r3, #16]
 800bd5c:	431a      	orrs	r2, r3
 800bd5e:	69fb      	ldr	r3, [r7, #28]
 800bd60:	695b      	ldr	r3, [r3, #20]
 800bd62:	431a      	orrs	r2, r3
 800bd64:	69fb      	ldr	r3, [r7, #28]
 800bd66:	69db      	ldr	r3, [r3, #28]
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a6a      	ldr	r2, [pc, #424]	; (800bf1c <UART_SetConfig+0x348>)
 800bd74:	4013      	ands	r3, r2
 800bd76:	0019      	movs	r1, r3
 800bd78:	69fb      	ldr	r3, [r7, #28]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd7e:	430a      	orrs	r2, r1
 800bd80:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	4a65      	ldr	r2, [pc, #404]	; (800bf20 <UART_SetConfig+0x34c>)
 800bd8a:	4013      	ands	r3, r2
 800bd8c:	0019      	movs	r1, r3
 800bd8e:	69fb      	ldr	r3, [r7, #28]
 800bd90:	68da      	ldr	r2, [r3, #12]
 800bd92:	69fb      	ldr	r3, [r7, #28]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	430a      	orrs	r2, r1
 800bd98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bd9a:	69fb      	ldr	r3, [r7, #28]
 800bd9c:	699b      	ldr	r3, [r3, #24]
 800bd9e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bda0:	69fb      	ldr	r3, [r7, #28]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	4a56      	ldr	r2, [pc, #344]	; (800bf00 <UART_SetConfig+0x32c>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d004      	beq.n	800bdb4 <UART_SetConfig+0x1e0>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bdaa:	69fb      	ldr	r3, [r7, #28]
 800bdac:	6a1b      	ldr	r3, [r3, #32]
 800bdae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bdb4:	69fb      	ldr	r3, [r7, #28]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	689b      	ldr	r3, [r3, #8]
 800bdba:	4a5a      	ldr	r2, [pc, #360]	; (800bf24 <UART_SetConfig+0x350>)
 800bdbc:	4013      	ands	r3, r2
 800bdbe:	0019      	movs	r1, r3
 800bdc0:	69fb      	ldr	r3, [r7, #28]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bdc6:	430a      	orrs	r2, r1
 800bdc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bdca:	69fb      	ldr	r3, [r7, #28]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4a56      	ldr	r2, [pc, #344]	; (800bf28 <UART_SetConfig+0x354>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d136      	bne.n	800be42 <UART_SetConfig+0x26e>
 800bdd4:	4b55      	ldr	r3, [pc, #340]	; (800bf2c <UART_SetConfig+0x358>)
 800bdd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdd8:	2203      	movs	r2, #3
 800bdda:	4013      	ands	r3, r2
 800bddc:	2b03      	cmp	r3, #3
 800bdde:	d020      	beq.n	800be22 <UART_SetConfig+0x24e>
 800bde0:	d827      	bhi.n	800be32 <UART_SetConfig+0x25e>
 800bde2:	2b02      	cmp	r3, #2
 800bde4:	d00d      	beq.n	800be02 <UART_SetConfig+0x22e>
 800bde6:	d824      	bhi.n	800be32 <UART_SetConfig+0x25e>
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d002      	beq.n	800bdf2 <UART_SetConfig+0x21e>
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d010      	beq.n	800be12 <UART_SetConfig+0x23e>
 800bdf0:	e01f      	b.n	800be32 <UART_SetConfig+0x25e>
 800bdf2:	231b      	movs	r3, #27
 800bdf4:	2218      	movs	r2, #24
 800bdf6:	4694      	mov	ip, r2
 800bdf8:	44bc      	add	ip, r7
 800bdfa:	4463      	add	r3, ip
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	701a      	strb	r2, [r3, #0]
 800be00:	e0ec      	b.n	800bfdc <UART_SetConfig+0x408>
 800be02:	231b      	movs	r3, #27
 800be04:	2218      	movs	r2, #24
 800be06:	4694      	mov	ip, r2
 800be08:	44bc      	add	ip, r7
 800be0a:	4463      	add	r3, ip
 800be0c:	2202      	movs	r2, #2
 800be0e:	701a      	strb	r2, [r3, #0]
 800be10:	e0e4      	b.n	800bfdc <UART_SetConfig+0x408>
 800be12:	231b      	movs	r3, #27
 800be14:	2218      	movs	r2, #24
 800be16:	4694      	mov	ip, r2
 800be18:	44bc      	add	ip, r7
 800be1a:	4463      	add	r3, ip
 800be1c:	2204      	movs	r2, #4
 800be1e:	701a      	strb	r2, [r3, #0]
 800be20:	e0dc      	b.n	800bfdc <UART_SetConfig+0x408>
 800be22:	231b      	movs	r3, #27
 800be24:	2218      	movs	r2, #24
 800be26:	4694      	mov	ip, r2
 800be28:	44bc      	add	ip, r7
 800be2a:	4463      	add	r3, ip
 800be2c:	2208      	movs	r2, #8
 800be2e:	701a      	strb	r2, [r3, #0]
 800be30:	e0d4      	b.n	800bfdc <UART_SetConfig+0x408>
 800be32:	231b      	movs	r3, #27
 800be34:	2218      	movs	r2, #24
 800be36:	4694      	mov	ip, r2
 800be38:	44bc      	add	ip, r7
 800be3a:	4463      	add	r3, ip
 800be3c:	2210      	movs	r2, #16
 800be3e:	701a      	strb	r2, [r3, #0]
 800be40:	e0cc      	b.n	800bfdc <UART_SetConfig+0x408>
 800be42:	69fb      	ldr	r3, [r7, #28]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	4a3a      	ldr	r2, [pc, #232]	; (800bf30 <UART_SetConfig+0x35c>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d136      	bne.n	800beba <UART_SetConfig+0x2e6>
 800be4c:	4b37      	ldr	r3, [pc, #220]	; (800bf2c <UART_SetConfig+0x358>)
 800be4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be50:	220c      	movs	r2, #12
 800be52:	4013      	ands	r3, r2
 800be54:	2b0c      	cmp	r3, #12
 800be56:	d020      	beq.n	800be9a <UART_SetConfig+0x2c6>
 800be58:	d827      	bhi.n	800beaa <UART_SetConfig+0x2d6>
 800be5a:	2b08      	cmp	r3, #8
 800be5c:	d00d      	beq.n	800be7a <UART_SetConfig+0x2a6>
 800be5e:	d824      	bhi.n	800beaa <UART_SetConfig+0x2d6>
 800be60:	2b00      	cmp	r3, #0
 800be62:	d002      	beq.n	800be6a <UART_SetConfig+0x296>
 800be64:	2b04      	cmp	r3, #4
 800be66:	d010      	beq.n	800be8a <UART_SetConfig+0x2b6>
 800be68:	e01f      	b.n	800beaa <UART_SetConfig+0x2d6>
 800be6a:	231b      	movs	r3, #27
 800be6c:	2218      	movs	r2, #24
 800be6e:	4694      	mov	ip, r2
 800be70:	44bc      	add	ip, r7
 800be72:	4463      	add	r3, ip
 800be74:	2200      	movs	r2, #0
 800be76:	701a      	strb	r2, [r3, #0]
 800be78:	e0b0      	b.n	800bfdc <UART_SetConfig+0x408>
 800be7a:	231b      	movs	r3, #27
 800be7c:	2218      	movs	r2, #24
 800be7e:	4694      	mov	ip, r2
 800be80:	44bc      	add	ip, r7
 800be82:	4463      	add	r3, ip
 800be84:	2202      	movs	r2, #2
 800be86:	701a      	strb	r2, [r3, #0]
 800be88:	e0a8      	b.n	800bfdc <UART_SetConfig+0x408>
 800be8a:	231b      	movs	r3, #27
 800be8c:	2218      	movs	r2, #24
 800be8e:	4694      	mov	ip, r2
 800be90:	44bc      	add	ip, r7
 800be92:	4463      	add	r3, ip
 800be94:	2204      	movs	r2, #4
 800be96:	701a      	strb	r2, [r3, #0]
 800be98:	e0a0      	b.n	800bfdc <UART_SetConfig+0x408>
 800be9a:	231b      	movs	r3, #27
 800be9c:	2218      	movs	r2, #24
 800be9e:	4694      	mov	ip, r2
 800bea0:	44bc      	add	ip, r7
 800bea2:	4463      	add	r3, ip
 800bea4:	2208      	movs	r2, #8
 800bea6:	701a      	strb	r2, [r3, #0]
 800bea8:	e098      	b.n	800bfdc <UART_SetConfig+0x408>
 800beaa:	231b      	movs	r3, #27
 800beac:	2218      	movs	r2, #24
 800beae:	4694      	mov	ip, r2
 800beb0:	44bc      	add	ip, r7
 800beb2:	4463      	add	r3, ip
 800beb4:	2210      	movs	r2, #16
 800beb6:	701a      	strb	r2, [r3, #0]
 800beb8:	e090      	b.n	800bfdc <UART_SetConfig+0x408>
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4a1d      	ldr	r2, [pc, #116]	; (800bf34 <UART_SetConfig+0x360>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d107      	bne.n	800bed4 <UART_SetConfig+0x300>
 800bec4:	231b      	movs	r3, #27
 800bec6:	2218      	movs	r2, #24
 800bec8:	4694      	mov	ip, r2
 800beca:	44bc      	add	ip, r7
 800becc:	4463      	add	r3, ip
 800bece:	2200      	movs	r2, #0
 800bed0:	701a      	strb	r2, [r3, #0]
 800bed2:	e083      	b.n	800bfdc <UART_SetConfig+0x408>
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4a17      	ldr	r2, [pc, #92]	; (800bf38 <UART_SetConfig+0x364>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d12e      	bne.n	800bf3c <UART_SetConfig+0x368>
 800bede:	231b      	movs	r3, #27
 800bee0:	2218      	movs	r2, #24
 800bee2:	4694      	mov	ip, r2
 800bee4:	44bc      	add	ip, r7
 800bee6:	4463      	add	r3, ip
 800bee8:	2200      	movs	r2, #0
 800beea:	701a      	strb	r2, [r3, #0]
 800beec:	e076      	b.n	800bfdc <UART_SetConfig+0x408>
 800beee:	46c0      	nop			; (mov r8, r8)
 800bef0:	003d0900 	.word	0x003d0900
 800bef4:	00000bb8 	.word	0x00000bb8
 800bef8:	0800cd38 	.word	0x0800cd38
 800befc:	00000bb9 	.word	0x00000bb9
 800bf00:	40004800 	.word	0x40004800
 800bf04:	00000bbc 	.word	0x00000bbc
 800bf08:	00000bc1 	.word	0x00000bc1
 800bf0c:	00000bc4 	.word	0x00000bc4
 800bf10:	00000bc5 	.word	0x00000bc5
 800bf14:	00000bc6 	.word	0x00000bc6
 800bf18:	00000bc7 	.word	0x00000bc7
 800bf1c:	efff69f3 	.word	0xefff69f3
 800bf20:	ffffcfff 	.word	0xffffcfff
 800bf24:	fffff4ff 	.word	0xfffff4ff
 800bf28:	40013800 	.word	0x40013800
 800bf2c:	40021000 	.word	0x40021000
 800bf30:	40004400 	.word	0x40004400
 800bf34:	40004c00 	.word	0x40004c00
 800bf38:	40005000 	.word	0x40005000
 800bf3c:	69fb      	ldr	r3, [r7, #28]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4ac1      	ldr	r2, [pc, #772]	; (800c248 <UART_SetConfig+0x674>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d143      	bne.n	800bfce <UART_SetConfig+0x3fa>
 800bf46:	4bc1      	ldr	r3, [pc, #772]	; (800c24c <UART_SetConfig+0x678>)
 800bf48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf4a:	23c0      	movs	r3, #192	; 0xc0
 800bf4c:	011b      	lsls	r3, r3, #4
 800bf4e:	4013      	ands	r3, r2
 800bf50:	22c0      	movs	r2, #192	; 0xc0
 800bf52:	0112      	lsls	r2, r2, #4
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d02a      	beq.n	800bfae <UART_SetConfig+0x3da>
 800bf58:	22c0      	movs	r2, #192	; 0xc0
 800bf5a:	0112      	lsls	r2, r2, #4
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d82e      	bhi.n	800bfbe <UART_SetConfig+0x3ea>
 800bf60:	2280      	movs	r2, #128	; 0x80
 800bf62:	0112      	lsls	r2, r2, #4
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d012      	beq.n	800bf8e <UART_SetConfig+0x3ba>
 800bf68:	2280      	movs	r2, #128	; 0x80
 800bf6a:	0112      	lsls	r2, r2, #4
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d826      	bhi.n	800bfbe <UART_SetConfig+0x3ea>
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d004      	beq.n	800bf7e <UART_SetConfig+0x3aa>
 800bf74:	2280      	movs	r2, #128	; 0x80
 800bf76:	00d2      	lsls	r2, r2, #3
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d010      	beq.n	800bf9e <UART_SetConfig+0x3ca>
 800bf7c:	e01f      	b.n	800bfbe <UART_SetConfig+0x3ea>
 800bf7e:	231b      	movs	r3, #27
 800bf80:	2218      	movs	r2, #24
 800bf82:	4694      	mov	ip, r2
 800bf84:	44bc      	add	ip, r7
 800bf86:	4463      	add	r3, ip
 800bf88:	2200      	movs	r2, #0
 800bf8a:	701a      	strb	r2, [r3, #0]
 800bf8c:	e026      	b.n	800bfdc <UART_SetConfig+0x408>
 800bf8e:	231b      	movs	r3, #27
 800bf90:	2218      	movs	r2, #24
 800bf92:	4694      	mov	ip, r2
 800bf94:	44bc      	add	ip, r7
 800bf96:	4463      	add	r3, ip
 800bf98:	2202      	movs	r2, #2
 800bf9a:	701a      	strb	r2, [r3, #0]
 800bf9c:	e01e      	b.n	800bfdc <UART_SetConfig+0x408>
 800bf9e:	231b      	movs	r3, #27
 800bfa0:	2218      	movs	r2, #24
 800bfa2:	4694      	mov	ip, r2
 800bfa4:	44bc      	add	ip, r7
 800bfa6:	4463      	add	r3, ip
 800bfa8:	2204      	movs	r2, #4
 800bfaa:	701a      	strb	r2, [r3, #0]
 800bfac:	e016      	b.n	800bfdc <UART_SetConfig+0x408>
 800bfae:	231b      	movs	r3, #27
 800bfb0:	2218      	movs	r2, #24
 800bfb2:	4694      	mov	ip, r2
 800bfb4:	44bc      	add	ip, r7
 800bfb6:	4463      	add	r3, ip
 800bfb8:	2208      	movs	r2, #8
 800bfba:	701a      	strb	r2, [r3, #0]
 800bfbc:	e00e      	b.n	800bfdc <UART_SetConfig+0x408>
 800bfbe:	231b      	movs	r3, #27
 800bfc0:	2218      	movs	r2, #24
 800bfc2:	4694      	mov	ip, r2
 800bfc4:	44bc      	add	ip, r7
 800bfc6:	4463      	add	r3, ip
 800bfc8:	2210      	movs	r2, #16
 800bfca:	701a      	strb	r2, [r3, #0]
 800bfcc:	e006      	b.n	800bfdc <UART_SetConfig+0x408>
 800bfce:	231b      	movs	r3, #27
 800bfd0:	2218      	movs	r2, #24
 800bfd2:	4694      	mov	ip, r2
 800bfd4:	44bc      	add	ip, r7
 800bfd6:	4463      	add	r3, ip
 800bfd8:	2210      	movs	r2, #16
 800bfda:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bfdc:	69fb      	ldr	r3, [r7, #28]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	4a99      	ldr	r2, [pc, #612]	; (800c248 <UART_SetConfig+0x674>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d000      	beq.n	800bfe8 <UART_SetConfig+0x414>
 800bfe6:	e088      	b.n	800c0fa <UART_SetConfig+0x526>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bfe8:	231b      	movs	r3, #27
 800bfea:	2218      	movs	r2, #24
 800bfec:	4694      	mov	ip, r2
 800bfee:	44bc      	add	ip, r7
 800bff0:	4463      	add	r3, ip
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	2b08      	cmp	r3, #8
 800bff6:	d01d      	beq.n	800c034 <UART_SetConfig+0x460>
 800bff8:	dc20      	bgt.n	800c03c <UART_SetConfig+0x468>
 800bffa:	2b04      	cmp	r3, #4
 800bffc:	d015      	beq.n	800c02a <UART_SetConfig+0x456>
 800bffe:	dc1d      	bgt.n	800c03c <UART_SetConfig+0x468>
 800c000:	2b00      	cmp	r3, #0
 800c002:	d002      	beq.n	800c00a <UART_SetConfig+0x436>
 800c004:	2b02      	cmp	r3, #2
 800c006:	d005      	beq.n	800c014 <UART_SetConfig+0x440>
 800c008:	e018      	b.n	800c03c <UART_SetConfig+0x468>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c00a:	f7fd fb83 	bl	8009714 <HAL_RCC_GetPCLK1Freq>
 800c00e:	0003      	movs	r3, r0
 800c010:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c012:	e01d      	b.n	800c050 <UART_SetConfig+0x47c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c014:	4b8d      	ldr	r3, [pc, #564]	; (800c24c <UART_SetConfig+0x678>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2210      	movs	r2, #16
 800c01a:	4013      	ands	r3, r2
 800c01c:	d002      	beq.n	800c024 <UART_SetConfig+0x450>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800c01e:	4b8c      	ldr	r3, [pc, #560]	; (800c250 <UART_SetConfig+0x67c>)
 800c020:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c022:	e015      	b.n	800c050 <UART_SetConfig+0x47c>
          pclk = (uint32_t) HSI_VALUE;
 800c024:	4b8b      	ldr	r3, [pc, #556]	; (800c254 <UART_SetConfig+0x680>)
 800c026:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c028:	e012      	b.n	800c050 <UART_SetConfig+0x47c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c02a:	f7fd fac3 	bl	80095b4 <HAL_RCC_GetSysClockFreq>
 800c02e:	0003      	movs	r3, r0
 800c030:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c032:	e00d      	b.n	800c050 <UART_SetConfig+0x47c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c034:	2380      	movs	r3, #128	; 0x80
 800c036:	021b      	lsls	r3, r3, #8
 800c038:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c03a:	e009      	b.n	800c050 <UART_SetConfig+0x47c>
      default:
        pclk = 0U;
 800c03c:	2300      	movs	r3, #0
 800c03e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c040:	231a      	movs	r3, #26
 800c042:	2218      	movs	r2, #24
 800c044:	4694      	mov	ip, r2
 800c046:	44bc      	add	ip, r7
 800c048:	4463      	add	r3, ip
 800c04a:	2201      	movs	r2, #1
 800c04c:	701a      	strb	r2, [r3, #0]
        break;
 800c04e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c052:	2b00      	cmp	r3, #0
 800c054:	d100      	bne.n	800c058 <UART_SetConfig+0x484>
 800c056:	e132      	b.n	800c2be <UART_SetConfig+0x6ea>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c058:	69fb      	ldr	r3, [r7, #28]
 800c05a:	685a      	ldr	r2, [r3, #4]
 800c05c:	0013      	movs	r3, r2
 800c05e:	005b      	lsls	r3, r3, #1
 800c060:	189b      	adds	r3, r3, r2
 800c062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c064:	429a      	cmp	r2, r3
 800c066:	d305      	bcc.n	800c074 <UART_SetConfig+0x4a0>
          (pclk > (4096U * huart->Init.BaudRate)))
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c06e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c070:	429a      	cmp	r2, r3
 800c072:	d907      	bls.n	800c084 <UART_SetConfig+0x4b0>
      {
        ret = HAL_ERROR;
 800c074:	231a      	movs	r3, #26
 800c076:	2218      	movs	r2, #24
 800c078:	4694      	mov	ip, r2
 800c07a:	44bc      	add	ip, r7
 800c07c:	4463      	add	r3, ip
 800c07e:	2201      	movs	r2, #1
 800c080:	701a      	strb	r2, [r3, #0]
 800c082:	e11c      	b.n	800c2be <UART_SetConfig+0x6ea>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c086:	613b      	str	r3, [r7, #16]
 800c088:	2300      	movs	r3, #0
 800c08a:	617b      	str	r3, [r7, #20]
 800c08c:	6939      	ldr	r1, [r7, #16]
 800c08e:	697a      	ldr	r2, [r7, #20]
 800c090:	000b      	movs	r3, r1
 800c092:	0e1b      	lsrs	r3, r3, #24
 800c094:	0010      	movs	r0, r2
 800c096:	0205      	lsls	r5, r0, #8
 800c098:	431d      	orrs	r5, r3
 800c09a:	000b      	movs	r3, r1
 800c09c:	021c      	lsls	r4, r3, #8
 800c09e:	69fb      	ldr	r3, [r7, #28]
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	085b      	lsrs	r3, r3, #1
 800c0a4:	60bb      	str	r3, [r7, #8]
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	60fb      	str	r3, [r7, #12]
 800c0aa:	68b8      	ldr	r0, [r7, #8]
 800c0ac:	68f9      	ldr	r1, [r7, #12]
 800c0ae:	1900      	adds	r0, r0, r4
 800c0b0:	4169      	adcs	r1, r5
 800c0b2:	69fb      	ldr	r3, [r7, #28]
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	603b      	str	r3, [r7, #0]
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	607b      	str	r3, [r7, #4]
 800c0bc:	683a      	ldr	r2, [r7, #0]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f7f4 f9bc 	bl	800043c <__aeabi_uldivmod>
 800c0c4:	0002      	movs	r2, r0
 800c0c6:	000b      	movs	r3, r1
 800c0c8:	0013      	movs	r3, r2
 800c0ca:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c0cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0ce:	23c0      	movs	r3, #192	; 0xc0
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d309      	bcc.n	800c0ea <UART_SetConfig+0x516>
 800c0d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0d8:	2380      	movs	r3, #128	; 0x80
 800c0da:	035b      	lsls	r3, r3, #13
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d204      	bcs.n	800c0ea <UART_SetConfig+0x516>
        {
          huart->Instance->BRR = usartdiv;
 800c0e0:	69fb      	ldr	r3, [r7, #28]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0e6:	60da      	str	r2, [r3, #12]
 800c0e8:	e0e9      	b.n	800c2be <UART_SetConfig+0x6ea>
        }
        else
        {
          ret = HAL_ERROR;
 800c0ea:	231a      	movs	r3, #26
 800c0ec:	2218      	movs	r2, #24
 800c0ee:	4694      	mov	ip, r2
 800c0f0:	44bc      	add	ip, r7
 800c0f2:	4463      	add	r3, ip
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	701a      	strb	r2, [r3, #0]
 800c0f8:	e0e1      	b.n	800c2be <UART_SetConfig+0x6ea>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c0fa:	69fb      	ldr	r3, [r7, #28]
 800c0fc:	69da      	ldr	r2, [r3, #28]
 800c0fe:	2380      	movs	r3, #128	; 0x80
 800c100:	021b      	lsls	r3, r3, #8
 800c102:	429a      	cmp	r2, r3
 800c104:	d000      	beq.n	800c108 <UART_SetConfig+0x534>
 800c106:	e074      	b.n	800c1f2 <UART_SetConfig+0x61e>
  {
    switch (clocksource)
 800c108:	231b      	movs	r3, #27
 800c10a:	2218      	movs	r2, #24
 800c10c:	4694      	mov	ip, r2
 800c10e:	44bc      	add	ip, r7
 800c110:	4463      	add	r3, ip
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	2b08      	cmp	r3, #8
 800c116:	d822      	bhi.n	800c15e <UART_SetConfig+0x58a>
 800c118:	009a      	lsls	r2, r3, #2
 800c11a:	4b4f      	ldr	r3, [pc, #316]	; (800c258 <UART_SetConfig+0x684>)
 800c11c:	18d3      	adds	r3, r2, r3
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c122:	f7fd faf7 	bl	8009714 <HAL_RCC_GetPCLK1Freq>
 800c126:	0003      	movs	r3, r0
 800c128:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c12a:	e022      	b.n	800c172 <UART_SetConfig+0x59e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c12c:	f7fd fb08 	bl	8009740 <HAL_RCC_GetPCLK2Freq>
 800c130:	0003      	movs	r3, r0
 800c132:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c134:	e01d      	b.n	800c172 <UART_SetConfig+0x59e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c136:	4b45      	ldr	r3, [pc, #276]	; (800c24c <UART_SetConfig+0x678>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2210      	movs	r2, #16
 800c13c:	4013      	ands	r3, r2
 800c13e:	d002      	beq.n	800c146 <UART_SetConfig+0x572>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800c140:	4b43      	ldr	r3, [pc, #268]	; (800c250 <UART_SetConfig+0x67c>)
 800c142:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c144:	e015      	b.n	800c172 <UART_SetConfig+0x59e>
          pclk = (uint32_t) HSI_VALUE;
 800c146:	4b43      	ldr	r3, [pc, #268]	; (800c254 <UART_SetConfig+0x680>)
 800c148:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c14a:	e012      	b.n	800c172 <UART_SetConfig+0x59e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c14c:	f7fd fa32 	bl	80095b4 <HAL_RCC_GetSysClockFreq>
 800c150:	0003      	movs	r3, r0
 800c152:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c154:	e00d      	b.n	800c172 <UART_SetConfig+0x59e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c156:	2380      	movs	r3, #128	; 0x80
 800c158:	021b      	lsls	r3, r3, #8
 800c15a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c15c:	e009      	b.n	800c172 <UART_SetConfig+0x59e>
      default:
        pclk = 0U;
 800c15e:	2300      	movs	r3, #0
 800c160:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c162:	231a      	movs	r3, #26
 800c164:	2218      	movs	r2, #24
 800c166:	4694      	mov	ip, r2
 800c168:	44bc      	add	ip, r7
 800c16a:	4463      	add	r3, ip
 800c16c:	2201      	movs	r2, #1
 800c16e:	701a      	strb	r2, [r3, #0]
        break;
 800c170:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c174:	2b00      	cmp	r3, #0
 800c176:	d100      	bne.n	800c17a <UART_SetConfig+0x5a6>
 800c178:	e0a1      	b.n	800c2be <UART_SetConfig+0x6ea>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17c:	005a      	lsls	r2, r3, #1
 800c17e:	69fb      	ldr	r3, [r7, #28]
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	085b      	lsrs	r3, r3, #1
 800c184:	18d2      	adds	r2, r2, r3
 800c186:	69fb      	ldr	r3, [r7, #28]
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	0019      	movs	r1, r3
 800c18c:	0010      	movs	r0, r2
 800c18e:	f7f3 ffbb 	bl	8000108 <__udivsi3>
 800c192:	0003      	movs	r3, r0
 800c194:	b29b      	uxth	r3, r3
 800c196:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c19a:	2b0f      	cmp	r3, #15
 800c19c:	d921      	bls.n	800c1e2 <UART_SetConfig+0x60e>
 800c19e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1a0:	2380      	movs	r3, #128	; 0x80
 800c1a2:	025b      	lsls	r3, r3, #9
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d21c      	bcs.n	800c1e2 <UART_SetConfig+0x60e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1aa:	b29a      	uxth	r2, r3
 800c1ac:	200e      	movs	r0, #14
 800c1ae:	2418      	movs	r4, #24
 800c1b0:	193b      	adds	r3, r7, r4
 800c1b2:	181b      	adds	r3, r3, r0
 800c1b4:	210f      	movs	r1, #15
 800c1b6:	438a      	bics	r2, r1
 800c1b8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1bc:	085b      	lsrs	r3, r3, #1
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	2207      	movs	r2, #7
 800c1c2:	4013      	ands	r3, r2
 800c1c4:	b299      	uxth	r1, r3
 800c1c6:	193b      	adds	r3, r7, r4
 800c1c8:	181b      	adds	r3, r3, r0
 800c1ca:	193a      	adds	r2, r7, r4
 800c1cc:	1812      	adds	r2, r2, r0
 800c1ce:	8812      	ldrh	r2, [r2, #0]
 800c1d0:	430a      	orrs	r2, r1
 800c1d2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800c1d4:	69fb      	ldr	r3, [r7, #28]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	193a      	adds	r2, r7, r4
 800c1da:	1812      	adds	r2, r2, r0
 800c1dc:	8812      	ldrh	r2, [r2, #0]
 800c1de:	60da      	str	r2, [r3, #12]
 800c1e0:	e06d      	b.n	800c2be <UART_SetConfig+0x6ea>
      }
      else
      {
        ret = HAL_ERROR;
 800c1e2:	231a      	movs	r3, #26
 800c1e4:	2218      	movs	r2, #24
 800c1e6:	4694      	mov	ip, r2
 800c1e8:	44bc      	add	ip, r7
 800c1ea:	4463      	add	r3, ip
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	701a      	strb	r2, [r3, #0]
 800c1f0:	e065      	b.n	800c2be <UART_SetConfig+0x6ea>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c1f2:	231b      	movs	r3, #27
 800c1f4:	2218      	movs	r2, #24
 800c1f6:	4694      	mov	ip, r2
 800c1f8:	44bc      	add	ip, r7
 800c1fa:	4463      	add	r3, ip
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	2b08      	cmp	r3, #8
 800c200:	d82e      	bhi.n	800c260 <UART_SetConfig+0x68c>
 800c202:	009a      	lsls	r2, r3, #2
 800c204:	4b15      	ldr	r3, [pc, #84]	; (800c25c <UART_SetConfig+0x688>)
 800c206:	18d3      	adds	r3, r2, r3
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c20c:	f7fd fa82 	bl	8009714 <HAL_RCC_GetPCLK1Freq>
 800c210:	0003      	movs	r3, r0
 800c212:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c214:	e02e      	b.n	800c274 <UART_SetConfig+0x6a0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c216:	f7fd fa93 	bl	8009740 <HAL_RCC_GetPCLK2Freq>
 800c21a:	0003      	movs	r3, r0
 800c21c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c21e:	e029      	b.n	800c274 <UART_SetConfig+0x6a0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c220:	4b0a      	ldr	r3, [pc, #40]	; (800c24c <UART_SetConfig+0x678>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	2210      	movs	r2, #16
 800c226:	4013      	ands	r3, r2
 800c228:	d002      	beq.n	800c230 <UART_SetConfig+0x65c>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800c22a:	4b09      	ldr	r3, [pc, #36]	; (800c250 <UART_SetConfig+0x67c>)
 800c22c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c22e:	e021      	b.n	800c274 <UART_SetConfig+0x6a0>
          pclk = (uint32_t) HSI_VALUE;
 800c230:	4b08      	ldr	r3, [pc, #32]	; (800c254 <UART_SetConfig+0x680>)
 800c232:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c234:	e01e      	b.n	800c274 <UART_SetConfig+0x6a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c236:	f7fd f9bd 	bl	80095b4 <HAL_RCC_GetSysClockFreq>
 800c23a:	0003      	movs	r3, r0
 800c23c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c23e:	e019      	b.n	800c274 <UART_SetConfig+0x6a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c240:	2380      	movs	r3, #128	; 0x80
 800c242:	021b      	lsls	r3, r3, #8
 800c244:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c246:	e015      	b.n	800c274 <UART_SetConfig+0x6a0>
 800c248:	40004800 	.word	0x40004800
 800c24c:	40021000 	.word	0x40021000
 800c250:	003d0900 	.word	0x003d0900
 800c254:	00f42400 	.word	0x00f42400
 800c258:	0800e090 	.word	0x0800e090
 800c25c:	0800e0b4 	.word	0x0800e0b4
      default:
        pclk = 0U;
 800c260:	2300      	movs	r3, #0
 800c262:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c264:	231a      	movs	r3, #26
 800c266:	2218      	movs	r2, #24
 800c268:	4694      	mov	ip, r2
 800c26a:	44bc      	add	ip, r7
 800c26c:	4463      	add	r3, ip
 800c26e:	2201      	movs	r2, #1
 800c270:	701a      	strb	r2, [r3, #0]
        break;
 800c272:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800c274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c276:	2b00      	cmp	r3, #0
 800c278:	d021      	beq.n	800c2be <UART_SetConfig+0x6ea>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c27a:	69fb      	ldr	r3, [r7, #28]
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	085a      	lsrs	r2, r3, #1
 800c280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c282:	18d2      	adds	r2, r2, r3
 800c284:	69fb      	ldr	r3, [r7, #28]
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	0019      	movs	r1, r3
 800c28a:	0010      	movs	r0, r2
 800c28c:	f7f3 ff3c 	bl	8000108 <__udivsi3>
 800c290:	0003      	movs	r3, r0
 800c292:	b29b      	uxth	r3, r3
 800c294:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c298:	2b0f      	cmp	r3, #15
 800c29a:	d909      	bls.n	800c2b0 <UART_SetConfig+0x6dc>
 800c29c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c29e:	2380      	movs	r3, #128	; 0x80
 800c2a0:	025b      	lsls	r3, r3, #9
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d204      	bcs.n	800c2b0 <UART_SetConfig+0x6dc>
      {
        huart->Instance->BRR = usartdiv;
 800c2a6:	69fb      	ldr	r3, [r7, #28]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2ac:	60da      	str	r2, [r3, #12]
 800c2ae:	e006      	b.n	800c2be <UART_SetConfig+0x6ea>
      }
      else
      {
        ret = HAL_ERROR;
 800c2b0:	231a      	movs	r3, #26
 800c2b2:	2218      	movs	r2, #24
 800c2b4:	4694      	mov	ip, r2
 800c2b6:	44bc      	add	ip, r7
 800c2b8:	4463      	add	r3, ip
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c2be:	69fb      	ldr	r3, [r7, #28]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c2ca:	231a      	movs	r3, #26
 800c2cc:	2218      	movs	r2, #24
 800c2ce:	4694      	mov	ip, r2
 800c2d0:	44bc      	add	ip, r7
 800c2d2:	4463      	add	r3, ip
 800c2d4:	781b      	ldrb	r3, [r3, #0]
}
 800c2d6:	0018      	movs	r0, r3
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	b00e      	add	sp, #56	; 0x38
 800c2dc:	bdb0      	pop	{r4, r5, r7, pc}
 800c2de:	46c0      	nop			; (mov r8, r8)

0800c2e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b082      	sub	sp, #8
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ec:	2bff      	cmp	r3, #255	; 0xff
 800c2ee:	d905      	bls.n	800c2fc <UART_AdvFeatureConfig+0x1c>
 800c2f0:	4aa8      	ldr	r2, [pc, #672]	; (800c594 <UART_AdvFeatureConfig+0x2b4>)
 800c2f2:	4ba9      	ldr	r3, [pc, #676]	; (800c598 <UART_AdvFeatureConfig+0x2b8>)
 800c2f4:	0011      	movs	r1, r2
 800c2f6:	0018      	movs	r0, r3
 800c2f8:	f7f9 fd81 	bl	8005dfe <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c300:	2201      	movs	r2, #1
 800c302:	4013      	ands	r3, r2
 800c304:	d01b      	beq.n	800c33e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d00b      	beq.n	800c326 <UART_AdvFeatureConfig+0x46>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c312:	2380      	movs	r3, #128	; 0x80
 800c314:	029b      	lsls	r3, r3, #10
 800c316:	429a      	cmp	r2, r3
 800c318:	d005      	beq.n	800c326 <UART_AdvFeatureConfig+0x46>
 800c31a:	4aa0      	ldr	r2, [pc, #640]	; (800c59c <UART_AdvFeatureConfig+0x2bc>)
 800c31c:	4b9e      	ldr	r3, [pc, #632]	; (800c598 <UART_AdvFeatureConfig+0x2b8>)
 800c31e:	0011      	movs	r1, r2
 800c320:	0018      	movs	r0, r3
 800c322:	f7f9 fd6c 	bl	8005dfe <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	4a9c      	ldr	r2, [pc, #624]	; (800c5a0 <UART_AdvFeatureConfig+0x2c0>)
 800c32e:	4013      	ands	r3, r2
 800c330:	0019      	movs	r1, r3
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	430a      	orrs	r2, r1
 800c33c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c342:	2202      	movs	r2, #2
 800c344:	4013      	ands	r3, r2
 800c346:	d01b      	beq.n	800c380 <UART_AdvFeatureConfig+0xa0>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d00b      	beq.n	800c368 <UART_AdvFeatureConfig+0x88>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c354:	2380      	movs	r3, #128	; 0x80
 800c356:	025b      	lsls	r3, r3, #9
 800c358:	429a      	cmp	r2, r3
 800c35a:	d005      	beq.n	800c368 <UART_AdvFeatureConfig+0x88>
 800c35c:	4a91      	ldr	r2, [pc, #580]	; (800c5a4 <UART_AdvFeatureConfig+0x2c4>)
 800c35e:	4b8e      	ldr	r3, [pc, #568]	; (800c598 <UART_AdvFeatureConfig+0x2b8>)
 800c360:	0011      	movs	r1, r2
 800c362:	0018      	movs	r0, r3
 800c364:	f7f9 fd4b 	bl	8005dfe <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	4a8e      	ldr	r2, [pc, #568]	; (800c5a8 <UART_AdvFeatureConfig+0x2c8>)
 800c370:	4013      	ands	r3, r2
 800c372:	0019      	movs	r1, r3
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	430a      	orrs	r2, r1
 800c37e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c384:	2204      	movs	r2, #4
 800c386:	4013      	ands	r3, r2
 800c388:	d01b      	beq.n	800c3c2 <UART_AdvFeatureConfig+0xe2>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d00b      	beq.n	800c3aa <UART_AdvFeatureConfig+0xca>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c396:	2380      	movs	r3, #128	; 0x80
 800c398:	02db      	lsls	r3, r3, #11
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d005      	beq.n	800c3aa <UART_AdvFeatureConfig+0xca>
 800c39e:	4a83      	ldr	r2, [pc, #524]	; (800c5ac <UART_AdvFeatureConfig+0x2cc>)
 800c3a0:	4b7d      	ldr	r3, [pc, #500]	; (800c598 <UART_AdvFeatureConfig+0x2b8>)
 800c3a2:	0011      	movs	r1, r2
 800c3a4:	0018      	movs	r0, r3
 800c3a6:	f7f9 fd2a 	bl	8005dfe <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	4a7f      	ldr	r2, [pc, #508]	; (800c5b0 <UART_AdvFeatureConfig+0x2d0>)
 800c3b2:	4013      	ands	r3, r2
 800c3b4:	0019      	movs	r1, r3
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	430a      	orrs	r2, r1
 800c3c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c6:	2208      	movs	r2, #8
 800c3c8:	4013      	ands	r3, r2
 800c3ca:	d01b      	beq.n	800c404 <UART_AdvFeatureConfig+0x124>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d00b      	beq.n	800c3ec <UART_AdvFeatureConfig+0x10c>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3d8:	2380      	movs	r3, #128	; 0x80
 800c3da:	021b      	lsls	r3, r3, #8
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d005      	beq.n	800c3ec <UART_AdvFeatureConfig+0x10c>
 800c3e0:	4a74      	ldr	r2, [pc, #464]	; (800c5b4 <UART_AdvFeatureConfig+0x2d4>)
 800c3e2:	4b6d      	ldr	r3, [pc, #436]	; (800c598 <UART_AdvFeatureConfig+0x2b8>)
 800c3e4:	0011      	movs	r1, r2
 800c3e6:	0018      	movs	r0, r3
 800c3e8:	f7f9 fd09 	bl	8005dfe <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	4a71      	ldr	r2, [pc, #452]	; (800c5b8 <UART_AdvFeatureConfig+0x2d8>)
 800c3f4:	4013      	ands	r3, r2
 800c3f6:	0019      	movs	r1, r3
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	430a      	orrs	r2, r1
 800c402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c408:	2210      	movs	r2, #16
 800c40a:	4013      	ands	r3, r2
 800c40c:	d01b      	beq.n	800c446 <UART_AdvFeatureConfig+0x166>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c412:	2b00      	cmp	r3, #0
 800c414:	d00b      	beq.n	800c42e <UART_AdvFeatureConfig+0x14e>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c41a:	2380      	movs	r3, #128	; 0x80
 800c41c:	015b      	lsls	r3, r3, #5
 800c41e:	429a      	cmp	r2, r3
 800c420:	d005      	beq.n	800c42e <UART_AdvFeatureConfig+0x14e>
 800c422:	4a66      	ldr	r2, [pc, #408]	; (800c5bc <UART_AdvFeatureConfig+0x2dc>)
 800c424:	4b5c      	ldr	r3, [pc, #368]	; (800c598 <UART_AdvFeatureConfig+0x2b8>)
 800c426:	0011      	movs	r1, r2
 800c428:	0018      	movs	r0, r3
 800c42a:	f7f9 fce8 	bl	8005dfe <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	689b      	ldr	r3, [r3, #8]
 800c434:	4a62      	ldr	r2, [pc, #392]	; (800c5c0 <UART_AdvFeatureConfig+0x2e0>)
 800c436:	4013      	ands	r3, r2
 800c438:	0019      	movs	r1, r3
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	430a      	orrs	r2, r1
 800c444:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c44a:	2220      	movs	r2, #32
 800c44c:	4013      	ands	r3, r2
 800c44e:	d01b      	beq.n	800c488 <UART_AdvFeatureConfig+0x1a8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c454:	2b00      	cmp	r3, #0
 800c456:	d00b      	beq.n	800c470 <UART_AdvFeatureConfig+0x190>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c45c:	2380      	movs	r3, #128	; 0x80
 800c45e:	019b      	lsls	r3, r3, #6
 800c460:	429a      	cmp	r2, r3
 800c462:	d005      	beq.n	800c470 <UART_AdvFeatureConfig+0x190>
 800c464:	4a57      	ldr	r2, [pc, #348]	; (800c5c4 <UART_AdvFeatureConfig+0x2e4>)
 800c466:	4b4c      	ldr	r3, [pc, #304]	; (800c598 <UART_AdvFeatureConfig+0x2b8>)
 800c468:	0011      	movs	r1, r2
 800c46a:	0018      	movs	r0, r3
 800c46c:	f7f9 fcc7 	bl	8005dfe <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	689b      	ldr	r3, [r3, #8]
 800c476:	4a54      	ldr	r2, [pc, #336]	; (800c5c8 <UART_AdvFeatureConfig+0x2e8>)
 800c478:	4013      	ands	r3, r2
 800c47a:	0019      	movs	r1, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	430a      	orrs	r2, r1
 800c486:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c48c:	2240      	movs	r2, #64	; 0x40
 800c48e:	4013      	ands	r3, r2
 800c490:	d05a      	beq.n	800c548 <UART_AdvFeatureConfig+0x268>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4a4d      	ldr	r2, [pc, #308]	; (800c5cc <UART_AdvFeatureConfig+0x2ec>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d00b      	beq.n	800c4b4 <UART_AdvFeatureConfig+0x1d4>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4a4b      	ldr	r2, [pc, #300]	; (800c5d0 <UART_AdvFeatureConfig+0x2f0>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d006      	beq.n	800c4b4 <UART_AdvFeatureConfig+0x1d4>
 800c4a6:	23cc      	movs	r3, #204	; 0xcc
 800c4a8:	011a      	lsls	r2, r3, #4
 800c4aa:	4b3b      	ldr	r3, [pc, #236]	; (800c598 <UART_AdvFeatureConfig+0x2b8>)
 800c4ac:	0011      	movs	r1, r2
 800c4ae:	0018      	movs	r0, r3
 800c4b0:	f7f9 fca5 	bl	8005dfe <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d00b      	beq.n	800c4d4 <UART_AdvFeatureConfig+0x1f4>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c4c0:	2380      	movs	r3, #128	; 0x80
 800c4c2:	035b      	lsls	r3, r3, #13
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d005      	beq.n	800c4d4 <UART_AdvFeatureConfig+0x1f4>
 800c4c8:	4a42      	ldr	r2, [pc, #264]	; (800c5d4 <UART_AdvFeatureConfig+0x2f4>)
 800c4ca:	4b33      	ldr	r3, [pc, #204]	; (800c598 <UART_AdvFeatureConfig+0x2b8>)
 800c4cc:	0011      	movs	r1, r2
 800c4ce:	0018      	movs	r0, r3
 800c4d0:	f7f9 fc95 	bl	8005dfe <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	685b      	ldr	r3, [r3, #4]
 800c4da:	4a3f      	ldr	r2, [pc, #252]	; (800c5d8 <UART_AdvFeatureConfig+0x2f8>)
 800c4dc:	4013      	ands	r3, r2
 800c4de:	0019      	movs	r1, r3
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	430a      	orrs	r2, r1
 800c4ea:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c4f0:	2380      	movs	r3, #128	; 0x80
 800c4f2:	035b      	lsls	r3, r3, #13
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d127      	bne.n	800c548 <UART_AdvFeatureConfig+0x268>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d017      	beq.n	800c530 <UART_AdvFeatureConfig+0x250>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c504:	2380      	movs	r3, #128	; 0x80
 800c506:	039b      	lsls	r3, r3, #14
 800c508:	429a      	cmp	r2, r3
 800c50a:	d011      	beq.n	800c530 <UART_AdvFeatureConfig+0x250>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c510:	2380      	movs	r3, #128	; 0x80
 800c512:	03db      	lsls	r3, r3, #15
 800c514:	429a      	cmp	r2, r3
 800c516:	d00b      	beq.n	800c530 <UART_AdvFeatureConfig+0x250>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c51c:	23c0      	movs	r3, #192	; 0xc0
 800c51e:	03db      	lsls	r3, r3, #15
 800c520:	429a      	cmp	r2, r3
 800c522:	d005      	beq.n	800c530 <UART_AdvFeatureConfig+0x250>
 800c524:	4a2d      	ldr	r2, [pc, #180]	; (800c5dc <UART_AdvFeatureConfig+0x2fc>)
 800c526:	4b1c      	ldr	r3, [pc, #112]	; (800c598 <UART_AdvFeatureConfig+0x2b8>)
 800c528:	0011      	movs	r1, r2
 800c52a:	0018      	movs	r0, r3
 800c52c:	f7f9 fc67 	bl	8005dfe <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	4a2a      	ldr	r2, [pc, #168]	; (800c5e0 <UART_AdvFeatureConfig+0x300>)
 800c538:	4013      	ands	r3, r2
 800c53a:	0019      	movs	r1, r3
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	430a      	orrs	r2, r1
 800c546:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c54c:	2280      	movs	r2, #128	; 0x80
 800c54e:	4013      	ands	r3, r2
 800c550:	d01b      	beq.n	800c58a <UART_AdvFeatureConfig+0x2aa>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c556:	2b00      	cmp	r3, #0
 800c558:	d00b      	beq.n	800c572 <UART_AdvFeatureConfig+0x292>
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c55e:	2380      	movs	r3, #128	; 0x80
 800c560:	031b      	lsls	r3, r3, #12
 800c562:	429a      	cmp	r2, r3
 800c564:	d005      	beq.n	800c572 <UART_AdvFeatureConfig+0x292>
 800c566:	4a1f      	ldr	r2, [pc, #124]	; (800c5e4 <UART_AdvFeatureConfig+0x304>)
 800c568:	4b0b      	ldr	r3, [pc, #44]	; (800c598 <UART_AdvFeatureConfig+0x2b8>)
 800c56a:	0011      	movs	r1, r2
 800c56c:	0018      	movs	r0, r3
 800c56e:	f7f9 fc46 	bl	8005dfe <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	4a1b      	ldr	r2, [pc, #108]	; (800c5e8 <UART_AdvFeatureConfig+0x308>)
 800c57a:	4013      	ands	r3, r2
 800c57c:	0019      	movs	r1, r3
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	430a      	orrs	r2, r1
 800c588:	605a      	str	r2, [r3, #4]
  }
}
 800c58a:	46c0      	nop			; (mov r8, r8)
 800c58c:	46bd      	mov	sp, r7
 800c58e:	b002      	add	sp, #8
 800c590:	bd80      	pop	{r7, pc}
 800c592:	46c0      	nop			; (mov r8, r8)
 800c594:	00000c91 	.word	0x00000c91
 800c598:	0800cd38 	.word	0x0800cd38
 800c59c:	00000c96 	.word	0x00000c96
 800c5a0:	fffdffff 	.word	0xfffdffff
 800c5a4:	00000c9d 	.word	0x00000c9d
 800c5a8:	fffeffff 	.word	0xfffeffff
 800c5ac:	00000ca4 	.word	0x00000ca4
 800c5b0:	fffbffff 	.word	0xfffbffff
 800c5b4:	00000cab 	.word	0x00000cab
 800c5b8:	ffff7fff 	.word	0xffff7fff
 800c5bc:	00000cb2 	.word	0x00000cb2
 800c5c0:	ffffefff 	.word	0xffffefff
 800c5c4:	00000cb9 	.word	0x00000cb9
 800c5c8:	ffffdfff 	.word	0xffffdfff
 800c5cc:	40013800 	.word	0x40013800
 800c5d0:	40004400 	.word	0x40004400
 800c5d4:	00000cc1 	.word	0x00000cc1
 800c5d8:	ffefffff 	.word	0xffefffff
 800c5dc:	00000cc6 	.word	0x00000cc6
 800c5e0:	ff9fffff 	.word	0xff9fffff
 800c5e4:	00000cce 	.word	0x00000cce
 800c5e8:	fff7ffff 	.word	0xfff7ffff

0800c5ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b086      	sub	sp, #24
 800c5f0:	af02      	add	r7, sp, #8
 800c5f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2280      	movs	r2, #128	; 0x80
 800c5f8:	2100      	movs	r1, #0
 800c5fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c5fc:	f7fa feee 	bl	80073dc <HAL_GetTick>
 800c600:	0003      	movs	r3, r0
 800c602:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2208      	movs	r2, #8
 800c60c:	4013      	ands	r3, r2
 800c60e:	2b08      	cmp	r3, #8
 800c610:	d10c      	bne.n	800c62c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2280      	movs	r2, #128	; 0x80
 800c616:	0391      	lsls	r1, r2, #14
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	4a17      	ldr	r2, [pc, #92]	; (800c678 <UART_CheckIdleState+0x8c>)
 800c61c:	9200      	str	r2, [sp, #0]
 800c61e:	2200      	movs	r2, #0
 800c620:	f000 f82c 	bl	800c67c <UART_WaitOnFlagUntilTimeout>
 800c624:	1e03      	subs	r3, r0, #0
 800c626:	d001      	beq.n	800c62c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c628:	2303      	movs	r3, #3
 800c62a:	e021      	b.n	800c670 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	2204      	movs	r2, #4
 800c634:	4013      	ands	r3, r2
 800c636:	2b04      	cmp	r3, #4
 800c638:	d10c      	bne.n	800c654 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2280      	movs	r2, #128	; 0x80
 800c63e:	03d1      	lsls	r1, r2, #15
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	4a0d      	ldr	r2, [pc, #52]	; (800c678 <UART_CheckIdleState+0x8c>)
 800c644:	9200      	str	r2, [sp, #0]
 800c646:	2200      	movs	r2, #0
 800c648:	f000 f818 	bl	800c67c <UART_WaitOnFlagUntilTimeout>
 800c64c:	1e03      	subs	r3, r0, #0
 800c64e:	d001      	beq.n	800c654 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c650:	2303      	movs	r3, #3
 800c652:	e00d      	b.n	800c670 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2220      	movs	r2, #32
 800c658:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2220      	movs	r2, #32
 800c65e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2200      	movs	r2, #0
 800c664:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2274      	movs	r2, #116	; 0x74
 800c66a:	2100      	movs	r1, #0
 800c66c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c66e:	2300      	movs	r3, #0
}
 800c670:	0018      	movs	r0, r3
 800c672:	46bd      	mov	sp, r7
 800c674:	b004      	add	sp, #16
 800c676:	bd80      	pop	{r7, pc}
 800c678:	01ffffff 	.word	0x01ffffff

0800c67c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b094      	sub	sp, #80	; 0x50
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	60b9      	str	r1, [r7, #8]
 800c686:	603b      	str	r3, [r7, #0]
 800c688:	1dfb      	adds	r3, r7, #7
 800c68a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c68c:	e0a3      	b.n	800c7d6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c68e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c690:	3301      	adds	r3, #1
 800c692:	d100      	bne.n	800c696 <UART_WaitOnFlagUntilTimeout+0x1a>
 800c694:	e09f      	b.n	800c7d6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c696:	f7fa fea1 	bl	80073dc <HAL_GetTick>
 800c69a:	0002      	movs	r2, r0
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	1ad3      	subs	r3, r2, r3
 800c6a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d302      	bcc.n	800c6ac <UART_WaitOnFlagUntilTimeout+0x30>
 800c6a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d13d      	bne.n	800c728 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6ac:	f3ef 8310 	mrs	r3, PRIMASK
 800c6b0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800c6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c6b4:	647b      	str	r3, [r7, #68]	; 0x44
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6bc:	f383 8810 	msr	PRIMASK, r3
}
 800c6c0:	46c0      	nop			; (mov r8, r8)
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	681a      	ldr	r2, [r3, #0]
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	494c      	ldr	r1, [pc, #304]	; (800c800 <UART_WaitOnFlagUntilTimeout+0x184>)
 800c6ce:	400a      	ands	r2, r1
 800c6d0:	601a      	str	r2, [r3, #0]
 800c6d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6d4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d8:	f383 8810 	msr	PRIMASK, r3
}
 800c6dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6de:	f3ef 8310 	mrs	r3, PRIMASK
 800c6e2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800c6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6e6:	643b      	str	r3, [r7, #64]	; 0x40
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ee:	f383 8810 	msr	PRIMASK, r3
}
 800c6f2:	46c0      	nop			; (mov r8, r8)
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	689a      	ldr	r2, [r3, #8]
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	2101      	movs	r1, #1
 800c700:	438a      	bics	r2, r1
 800c702:	609a      	str	r2, [r3, #8]
 800c704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c706:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c70a:	f383 8810 	msr	PRIMASK, r3
}
 800c70e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2220      	movs	r2, #32
 800c714:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2220      	movs	r2, #32
 800c71a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	2274      	movs	r2, #116	; 0x74
 800c720:	2100      	movs	r1, #0
 800c722:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c724:	2303      	movs	r3, #3
 800c726:	e067      	b.n	800c7f8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	2204      	movs	r2, #4
 800c730:	4013      	ands	r3, r2
 800c732:	d050      	beq.n	800c7d6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	69da      	ldr	r2, [r3, #28]
 800c73a:	2380      	movs	r3, #128	; 0x80
 800c73c:	011b      	lsls	r3, r3, #4
 800c73e:	401a      	ands	r2, r3
 800c740:	2380      	movs	r3, #128	; 0x80
 800c742:	011b      	lsls	r3, r3, #4
 800c744:	429a      	cmp	r2, r3
 800c746:	d146      	bne.n	800c7d6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	2280      	movs	r2, #128	; 0x80
 800c74e:	0112      	lsls	r2, r2, #4
 800c750:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c752:	f3ef 8310 	mrs	r3, PRIMASK
 800c756:	613b      	str	r3, [r7, #16]
  return(result);
 800c758:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c75a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c75c:	2301      	movs	r3, #1
 800c75e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	f383 8810 	msr	PRIMASK, r3
}
 800c766:	46c0      	nop			; (mov r8, r8)
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	681a      	ldr	r2, [r3, #0]
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4923      	ldr	r1, [pc, #140]	; (800c800 <UART_WaitOnFlagUntilTimeout+0x184>)
 800c774:	400a      	ands	r2, r1
 800c776:	601a      	str	r2, [r3, #0]
 800c778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c77a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c77c:	69bb      	ldr	r3, [r7, #24]
 800c77e:	f383 8810 	msr	PRIMASK, r3
}
 800c782:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c784:	f3ef 8310 	mrs	r3, PRIMASK
 800c788:	61fb      	str	r3, [r7, #28]
  return(result);
 800c78a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c78c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c78e:	2301      	movs	r3, #1
 800c790:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c792:	6a3b      	ldr	r3, [r7, #32]
 800c794:	f383 8810 	msr	PRIMASK, r3
}
 800c798:	46c0      	nop			; (mov r8, r8)
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	689a      	ldr	r2, [r3, #8]
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	2101      	movs	r1, #1
 800c7a6:	438a      	bics	r2, r1
 800c7a8:	609a      	str	r2, [r3, #8]
 800c7aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7ac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b0:	f383 8810 	msr	PRIMASK, r3
}
 800c7b4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2220      	movs	r2, #32
 800c7ba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	2220      	movs	r2, #32
 800c7c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	2280      	movs	r2, #128	; 0x80
 800c7c6:	2120      	movs	r1, #32
 800c7c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2274      	movs	r2, #116	; 0x74
 800c7ce:	2100      	movs	r1, #0
 800c7d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800c7d2:	2303      	movs	r3, #3
 800c7d4:	e010      	b.n	800c7f8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	69db      	ldr	r3, [r3, #28]
 800c7dc:	68ba      	ldr	r2, [r7, #8]
 800c7de:	4013      	ands	r3, r2
 800c7e0:	68ba      	ldr	r2, [r7, #8]
 800c7e2:	1ad3      	subs	r3, r2, r3
 800c7e4:	425a      	negs	r2, r3
 800c7e6:	4153      	adcs	r3, r2
 800c7e8:	b2db      	uxtb	r3, r3
 800c7ea:	001a      	movs	r2, r3
 800c7ec:	1dfb      	adds	r3, r7, #7
 800c7ee:	781b      	ldrb	r3, [r3, #0]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d100      	bne.n	800c7f6 <UART_WaitOnFlagUntilTimeout+0x17a>
 800c7f4:	e74b      	b.n	800c68e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c7f6:	2300      	movs	r3, #0
}
 800c7f8:	0018      	movs	r0, r3
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	b014      	add	sp, #80	; 0x50
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	fffffe5f 	.word	0xfffffe5f

0800c804 <__libc_init_array>:
 800c804:	b570      	push	{r4, r5, r6, lr}
 800c806:	2600      	movs	r6, #0
 800c808:	4d0c      	ldr	r5, [pc, #48]	; (800c83c <__libc_init_array+0x38>)
 800c80a:	4c0d      	ldr	r4, [pc, #52]	; (800c840 <__libc_init_array+0x3c>)
 800c80c:	1b64      	subs	r4, r4, r5
 800c80e:	10a4      	asrs	r4, r4, #2
 800c810:	42a6      	cmp	r6, r4
 800c812:	d109      	bne.n	800c828 <__libc_init_array+0x24>
 800c814:	2600      	movs	r6, #0
 800c816:	f000 f82b 	bl	800c870 <_init>
 800c81a:	4d0a      	ldr	r5, [pc, #40]	; (800c844 <__libc_init_array+0x40>)
 800c81c:	4c0a      	ldr	r4, [pc, #40]	; (800c848 <__libc_init_array+0x44>)
 800c81e:	1b64      	subs	r4, r4, r5
 800c820:	10a4      	asrs	r4, r4, #2
 800c822:	42a6      	cmp	r6, r4
 800c824:	d105      	bne.n	800c832 <__libc_init_array+0x2e>
 800c826:	bd70      	pop	{r4, r5, r6, pc}
 800c828:	00b3      	lsls	r3, r6, #2
 800c82a:	58eb      	ldr	r3, [r5, r3]
 800c82c:	4798      	blx	r3
 800c82e:	3601      	adds	r6, #1
 800c830:	e7ee      	b.n	800c810 <__libc_init_array+0xc>
 800c832:	00b3      	lsls	r3, r6, #2
 800c834:	58eb      	ldr	r3, [r5, r3]
 800c836:	4798      	blx	r3
 800c838:	3601      	adds	r6, #1
 800c83a:	e7f2      	b.n	800c822 <__libc_init_array+0x1e>
 800c83c:	0800e0e0 	.word	0x0800e0e0
 800c840:	0800e0e0 	.word	0x0800e0e0
 800c844:	0800e0e0 	.word	0x0800e0e0
 800c848:	0800e0e4 	.word	0x0800e0e4

0800c84c <memcpy>:
 800c84c:	2300      	movs	r3, #0
 800c84e:	b510      	push	{r4, lr}
 800c850:	429a      	cmp	r2, r3
 800c852:	d100      	bne.n	800c856 <memcpy+0xa>
 800c854:	bd10      	pop	{r4, pc}
 800c856:	5ccc      	ldrb	r4, [r1, r3]
 800c858:	54c4      	strb	r4, [r0, r3]
 800c85a:	3301      	adds	r3, #1
 800c85c:	e7f8      	b.n	800c850 <memcpy+0x4>

0800c85e <memset>:
 800c85e:	0003      	movs	r3, r0
 800c860:	1882      	adds	r2, r0, r2
 800c862:	4293      	cmp	r3, r2
 800c864:	d100      	bne.n	800c868 <memset+0xa>
 800c866:	4770      	bx	lr
 800c868:	7019      	strb	r1, [r3, #0]
 800c86a:	3301      	adds	r3, #1
 800c86c:	e7f9      	b.n	800c862 <memset+0x4>
	...

0800c870 <_init>:
 800c870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c872:	46c0      	nop			; (mov r8, r8)
 800c874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c876:	bc08      	pop	{r3}
 800c878:	469e      	mov	lr, r3
 800c87a:	4770      	bx	lr

0800c87c <_fini>:
 800c87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c87e:	46c0      	nop			; (mov r8, r8)
 800c880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c882:	bc08      	pop	{r3}
 800c884:	469e      	mov	lr, r3
 800c886:	4770      	bx	lr

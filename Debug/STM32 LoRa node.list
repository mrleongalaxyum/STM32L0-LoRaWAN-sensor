
STM32 LoRa node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b544  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017ac  0800b604  0800b604  0001b604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdb0  0800cdb0  00020054  2**0
                  CONTENTS
  4 .ARM          00000008  0800cdb0  0800cdb0  0001cdb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdb8  0800cdb8  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdb8  0800cdb8  0001cdb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cdbc  0800cdbc  0001cdbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  0800cdc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  20000054  0800ce14  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  0800ce14  00020474  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a8c8  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f51  00000000  00000000  0003a944  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015b8  00000000  00000000  0003d898  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014c0  00000000  00000000  0003ee50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000168f1  00000000  00000000  00040310  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011a13  00000000  00000000  00056c01  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00089795  00000000  00000000  00068614  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1da9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005050  00000000  00000000  000f1e24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000054 	.word	0x20000054
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b5ec 	.word	0x0800b5ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000058 	.word	0x20000058
 8000104:	0800b5ec 	.word	0x0800b5ec

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_ldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d115      	bne.n	8000424 <__aeabi_ldivmod+0x30>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d113      	bne.n	8000424 <__aeabi_ldivmod+0x30>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	db06      	blt.n	800040e <__aeabi_ldivmod+0x1a>
 8000400:	dc01      	bgt.n	8000406 <__aeabi_ldivmod+0x12>
 8000402:	2800      	cmp	r0, #0
 8000404:	d006      	beq.n	8000414 <__aeabi_ldivmod+0x20>
 8000406:	2000      	movs	r0, #0
 8000408:	43c0      	mvns	r0, r0
 800040a:	0841      	lsrs	r1, r0, #1
 800040c:	e002      	b.n	8000414 <__aeabi_ldivmod+0x20>
 800040e:	2180      	movs	r1, #128	; 0x80
 8000410:	0609      	lsls	r1, r1, #24
 8000412:	2000      	movs	r0, #0
 8000414:	b407      	push	{r0, r1, r2}
 8000416:	4802      	ldr	r0, [pc, #8]	; (8000420 <__aeabi_ldivmod+0x2c>)
 8000418:	a101      	add	r1, pc, #4	; (adr r1, 8000420 <__aeabi_ldivmod+0x2c>)
 800041a:	1840      	adds	r0, r0, r1
 800041c:	9002      	str	r0, [sp, #8]
 800041e:	bd03      	pop	{r0, r1, pc}
 8000420:	ffffffd1 	.word	0xffffffd1
 8000424:	b403      	push	{r0, r1}
 8000426:	4668      	mov	r0, sp
 8000428:	b501      	push	{r0, lr}
 800042a:	9802      	ldr	r0, [sp, #8]
 800042c:	f000 f912 	bl	8000654 <__gnu_ldivmod_helper>
 8000430:	9b01      	ldr	r3, [sp, #4]
 8000432:	469e      	mov	lr, r3
 8000434:	b002      	add	sp, #8
 8000436:	bc0c      	pop	{r2, r3}
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_uldivmod>:
 800043c:	2b00      	cmp	r3, #0
 800043e:	d111      	bne.n	8000464 <__aeabi_uldivmod+0x28>
 8000440:	2a00      	cmp	r2, #0
 8000442:	d10f      	bne.n	8000464 <__aeabi_uldivmod+0x28>
 8000444:	2900      	cmp	r1, #0
 8000446:	d100      	bne.n	800044a <__aeabi_uldivmod+0xe>
 8000448:	2800      	cmp	r0, #0
 800044a:	d002      	beq.n	8000452 <__aeabi_uldivmod+0x16>
 800044c:	2100      	movs	r1, #0
 800044e:	43c9      	mvns	r1, r1
 8000450:	1c08      	adds	r0, r1, #0
 8000452:	b407      	push	{r0, r1, r2}
 8000454:	4802      	ldr	r0, [pc, #8]	; (8000460 <__aeabi_uldivmod+0x24>)
 8000456:	a102      	add	r1, pc, #8	; (adr r1, 8000460 <__aeabi_uldivmod+0x24>)
 8000458:	1840      	adds	r0, r0, r1
 800045a:	9002      	str	r0, [sp, #8]
 800045c:	bd03      	pop	{r0, r1, pc}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	ffffff91 	.word	0xffffff91
 8000464:	b403      	push	{r0, r1}
 8000466:	4668      	mov	r0, sp
 8000468:	b501      	push	{r0, lr}
 800046a:	9802      	ldr	r0, [sp, #8]
 800046c:	f000 f830 	bl	80004d0 <__udivmoddi4>
 8000470:	9b01      	ldr	r3, [sp, #4]
 8000472:	469e      	mov	lr, r3
 8000474:	b002      	add	sp, #8
 8000476:	bc0c      	pop	{r2, r3}
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_lmul>:
 800047c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800047e:	46ce      	mov	lr, r9
 8000480:	4647      	mov	r7, r8
 8000482:	0415      	lsls	r5, r2, #16
 8000484:	0c2d      	lsrs	r5, r5, #16
 8000486:	002e      	movs	r6, r5
 8000488:	b580      	push	{r7, lr}
 800048a:	0407      	lsls	r7, r0, #16
 800048c:	0c14      	lsrs	r4, r2, #16
 800048e:	0c3f      	lsrs	r7, r7, #16
 8000490:	4699      	mov	r9, r3
 8000492:	0c03      	lsrs	r3, r0, #16
 8000494:	437e      	muls	r6, r7
 8000496:	435d      	muls	r5, r3
 8000498:	4367      	muls	r7, r4
 800049a:	4363      	muls	r3, r4
 800049c:	197f      	adds	r7, r7, r5
 800049e:	0c34      	lsrs	r4, r6, #16
 80004a0:	19e4      	adds	r4, r4, r7
 80004a2:	469c      	mov	ip, r3
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	d903      	bls.n	80004b0 <__aeabi_lmul+0x34>
 80004a8:	2380      	movs	r3, #128	; 0x80
 80004aa:	025b      	lsls	r3, r3, #9
 80004ac:	4698      	mov	r8, r3
 80004ae:	44c4      	add	ip, r8
 80004b0:	464b      	mov	r3, r9
 80004b2:	4343      	muls	r3, r0
 80004b4:	4351      	muls	r1, r2
 80004b6:	0c25      	lsrs	r5, r4, #16
 80004b8:	0436      	lsls	r6, r6, #16
 80004ba:	4465      	add	r5, ip
 80004bc:	0c36      	lsrs	r6, r6, #16
 80004be:	0424      	lsls	r4, r4, #16
 80004c0:	19a4      	adds	r4, r4, r6
 80004c2:	195b      	adds	r3, r3, r5
 80004c4:	1859      	adds	r1, r3, r1
 80004c6:	0020      	movs	r0, r4
 80004c8:	bc0c      	pop	{r2, r3}
 80004ca:	4690      	mov	r8, r2
 80004cc:	4699      	mov	r9, r3
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004d0 <__udivmoddi4>:
 80004d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d2:	464f      	mov	r7, r9
 80004d4:	4646      	mov	r6, r8
 80004d6:	46d6      	mov	lr, sl
 80004d8:	b5c0      	push	{r6, r7, lr}
 80004da:	0004      	movs	r4, r0
 80004dc:	b082      	sub	sp, #8
 80004de:	000d      	movs	r5, r1
 80004e0:	4691      	mov	r9, r2
 80004e2:	4698      	mov	r8, r3
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d82f      	bhi.n	8000548 <__udivmoddi4+0x78>
 80004e8:	d02c      	beq.n	8000544 <__udivmoddi4+0x74>
 80004ea:	4641      	mov	r1, r8
 80004ec:	4648      	mov	r0, r9
 80004ee:	f000 f8cd 	bl	800068c <__clzdi2>
 80004f2:	0029      	movs	r1, r5
 80004f4:	0006      	movs	r6, r0
 80004f6:	0020      	movs	r0, r4
 80004f8:	f000 f8c8 	bl	800068c <__clzdi2>
 80004fc:	1a33      	subs	r3, r6, r0
 80004fe:	469c      	mov	ip, r3
 8000500:	3b20      	subs	r3, #32
 8000502:	469a      	mov	sl, r3
 8000504:	d500      	bpl.n	8000508 <__udivmoddi4+0x38>
 8000506:	e076      	b.n	80005f6 <__udivmoddi4+0x126>
 8000508:	464b      	mov	r3, r9
 800050a:	4652      	mov	r2, sl
 800050c:	4093      	lsls	r3, r2
 800050e:	001f      	movs	r7, r3
 8000510:	464b      	mov	r3, r9
 8000512:	4662      	mov	r2, ip
 8000514:	4093      	lsls	r3, r2
 8000516:	001e      	movs	r6, r3
 8000518:	42af      	cmp	r7, r5
 800051a:	d828      	bhi.n	800056e <__udivmoddi4+0x9e>
 800051c:	d025      	beq.n	800056a <__udivmoddi4+0x9a>
 800051e:	4653      	mov	r3, sl
 8000520:	1ba4      	subs	r4, r4, r6
 8000522:	41bd      	sbcs	r5, r7
 8000524:	2b00      	cmp	r3, #0
 8000526:	da00      	bge.n	800052a <__udivmoddi4+0x5a>
 8000528:	e07b      	b.n	8000622 <__udivmoddi4+0x152>
 800052a:	2200      	movs	r2, #0
 800052c:	2300      	movs	r3, #0
 800052e:	9200      	str	r2, [sp, #0]
 8000530:	9301      	str	r3, [sp, #4]
 8000532:	2301      	movs	r3, #1
 8000534:	4652      	mov	r2, sl
 8000536:	4093      	lsls	r3, r2
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	2301      	movs	r3, #1
 800053c:	4662      	mov	r2, ip
 800053e:	4093      	lsls	r3, r2
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	e018      	b.n	8000576 <__udivmoddi4+0xa6>
 8000544:	4282      	cmp	r2, r0
 8000546:	d9d0      	bls.n	80004ea <__udivmoddi4+0x1a>
 8000548:	2200      	movs	r2, #0
 800054a:	2300      	movs	r3, #0
 800054c:	9200      	str	r2, [sp, #0]
 800054e:	9301      	str	r3, [sp, #4]
 8000550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <__udivmoddi4+0x8a>
 8000556:	601c      	str	r4, [r3, #0]
 8000558:	605d      	str	r5, [r3, #4]
 800055a:	9800      	ldr	r0, [sp, #0]
 800055c:	9901      	ldr	r1, [sp, #4]
 800055e:	b002      	add	sp, #8
 8000560:	bc1c      	pop	{r2, r3, r4}
 8000562:	4690      	mov	r8, r2
 8000564:	4699      	mov	r9, r3
 8000566:	46a2      	mov	sl, r4
 8000568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056a:	42a3      	cmp	r3, r4
 800056c:	d9d7      	bls.n	800051e <__udivmoddi4+0x4e>
 800056e:	2200      	movs	r2, #0
 8000570:	2300      	movs	r3, #0
 8000572:	9200      	str	r2, [sp, #0]
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	4663      	mov	r3, ip
 8000578:	2b00      	cmp	r3, #0
 800057a:	d0e9      	beq.n	8000550 <__udivmoddi4+0x80>
 800057c:	07fb      	lsls	r3, r7, #31
 800057e:	4698      	mov	r8, r3
 8000580:	4641      	mov	r1, r8
 8000582:	0872      	lsrs	r2, r6, #1
 8000584:	430a      	orrs	r2, r1
 8000586:	087b      	lsrs	r3, r7, #1
 8000588:	4666      	mov	r6, ip
 800058a:	e00e      	b.n	80005aa <__udivmoddi4+0xda>
 800058c:	42ab      	cmp	r3, r5
 800058e:	d101      	bne.n	8000594 <__udivmoddi4+0xc4>
 8000590:	42a2      	cmp	r2, r4
 8000592:	d80c      	bhi.n	80005ae <__udivmoddi4+0xde>
 8000594:	1aa4      	subs	r4, r4, r2
 8000596:	419d      	sbcs	r5, r3
 8000598:	2001      	movs	r0, #1
 800059a:	1924      	adds	r4, r4, r4
 800059c:	416d      	adcs	r5, r5
 800059e:	2100      	movs	r1, #0
 80005a0:	3e01      	subs	r6, #1
 80005a2:	1824      	adds	r4, r4, r0
 80005a4:	414d      	adcs	r5, r1
 80005a6:	2e00      	cmp	r6, #0
 80005a8:	d006      	beq.n	80005b8 <__udivmoddi4+0xe8>
 80005aa:	42ab      	cmp	r3, r5
 80005ac:	d9ee      	bls.n	800058c <__udivmoddi4+0xbc>
 80005ae:	3e01      	subs	r6, #1
 80005b0:	1924      	adds	r4, r4, r4
 80005b2:	416d      	adcs	r5, r5
 80005b4:	2e00      	cmp	r6, #0
 80005b6:	d1f8      	bne.n	80005aa <__udivmoddi4+0xda>
 80005b8:	9800      	ldr	r0, [sp, #0]
 80005ba:	9901      	ldr	r1, [sp, #4]
 80005bc:	4653      	mov	r3, sl
 80005be:	1900      	adds	r0, r0, r4
 80005c0:	4169      	adcs	r1, r5
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	db23      	blt.n	800060e <__udivmoddi4+0x13e>
 80005c6:	002b      	movs	r3, r5
 80005c8:	4652      	mov	r2, sl
 80005ca:	40d3      	lsrs	r3, r2
 80005cc:	002a      	movs	r2, r5
 80005ce:	4664      	mov	r4, ip
 80005d0:	40e2      	lsrs	r2, r4
 80005d2:	001c      	movs	r4, r3
 80005d4:	4653      	mov	r3, sl
 80005d6:	0015      	movs	r5, r2
 80005d8:	2b00      	cmp	r3, #0
 80005da:	db2d      	blt.n	8000638 <__udivmoddi4+0x168>
 80005dc:	0026      	movs	r6, r4
 80005de:	4657      	mov	r7, sl
 80005e0:	40be      	lsls	r6, r7
 80005e2:	0033      	movs	r3, r6
 80005e4:	0026      	movs	r6, r4
 80005e6:	4667      	mov	r7, ip
 80005e8:	40be      	lsls	r6, r7
 80005ea:	0032      	movs	r2, r6
 80005ec:	1a80      	subs	r0, r0, r2
 80005ee:	4199      	sbcs	r1, r3
 80005f0:	9000      	str	r0, [sp, #0]
 80005f2:	9101      	str	r1, [sp, #4]
 80005f4:	e7ac      	b.n	8000550 <__udivmoddi4+0x80>
 80005f6:	4662      	mov	r2, ip
 80005f8:	2320      	movs	r3, #32
 80005fa:	1a9b      	subs	r3, r3, r2
 80005fc:	464a      	mov	r2, r9
 80005fe:	40da      	lsrs	r2, r3
 8000600:	4661      	mov	r1, ip
 8000602:	0013      	movs	r3, r2
 8000604:	4642      	mov	r2, r8
 8000606:	408a      	lsls	r2, r1
 8000608:	0017      	movs	r7, r2
 800060a:	431f      	orrs	r7, r3
 800060c:	e780      	b.n	8000510 <__udivmoddi4+0x40>
 800060e:	4662      	mov	r2, ip
 8000610:	2320      	movs	r3, #32
 8000612:	1a9b      	subs	r3, r3, r2
 8000614:	002a      	movs	r2, r5
 8000616:	4666      	mov	r6, ip
 8000618:	409a      	lsls	r2, r3
 800061a:	0023      	movs	r3, r4
 800061c:	40f3      	lsrs	r3, r6
 800061e:	4313      	orrs	r3, r2
 8000620:	e7d4      	b.n	80005cc <__udivmoddi4+0xfc>
 8000622:	4662      	mov	r2, ip
 8000624:	2320      	movs	r3, #32
 8000626:	2100      	movs	r1, #0
 8000628:	1a9b      	subs	r3, r3, r2
 800062a:	2200      	movs	r2, #0
 800062c:	9100      	str	r1, [sp, #0]
 800062e:	9201      	str	r2, [sp, #4]
 8000630:	2201      	movs	r2, #1
 8000632:	40da      	lsrs	r2, r3
 8000634:	9201      	str	r2, [sp, #4]
 8000636:	e780      	b.n	800053a <__udivmoddi4+0x6a>
 8000638:	2320      	movs	r3, #32
 800063a:	4662      	mov	r2, ip
 800063c:	0026      	movs	r6, r4
 800063e:	1a9b      	subs	r3, r3, r2
 8000640:	40de      	lsrs	r6, r3
 8000642:	002f      	movs	r7, r5
 8000644:	46b0      	mov	r8, r6
 8000646:	4666      	mov	r6, ip
 8000648:	40b7      	lsls	r7, r6
 800064a:	4646      	mov	r6, r8
 800064c:	003b      	movs	r3, r7
 800064e:	4333      	orrs	r3, r6
 8000650:	e7c8      	b.n	80005e4 <__udivmoddi4+0x114>
 8000652:	46c0      	nop			; (mov r8, r8)

08000654 <__gnu_ldivmod_helper>:
 8000654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000656:	b083      	sub	sp, #12
 8000658:	0016      	movs	r6, r2
 800065a:	001f      	movs	r7, r3
 800065c:	9000      	str	r0, [sp, #0]
 800065e:	9101      	str	r1, [sp, #4]
 8000660:	f000 f820 	bl	80006a4 <__divdi3>
 8000664:	0004      	movs	r4, r0
 8000666:	000d      	movs	r5, r1
 8000668:	0002      	movs	r2, r0
 800066a:	000b      	movs	r3, r1
 800066c:	0030      	movs	r0, r6
 800066e:	0039      	movs	r1, r7
 8000670:	f7ff ff04 	bl	800047c <__aeabi_lmul>
 8000674:	9a00      	ldr	r2, [sp, #0]
 8000676:	9b01      	ldr	r3, [sp, #4]
 8000678:	1a12      	subs	r2, r2, r0
 800067a:	418b      	sbcs	r3, r1
 800067c:	9908      	ldr	r1, [sp, #32]
 800067e:	0020      	movs	r0, r4
 8000680:	600a      	str	r2, [r1, #0]
 8000682:	604b      	str	r3, [r1, #4]
 8000684:	0029      	movs	r1, r5
 8000686:	b003      	add	sp, #12
 8000688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)

0800068c <__clzdi2>:
 800068c:	b510      	push	{r4, lr}
 800068e:	2900      	cmp	r1, #0
 8000690:	d103      	bne.n	800069a <__clzdi2+0xe>
 8000692:	f000 f8df 	bl	8000854 <__clzsi2>
 8000696:	3020      	adds	r0, #32
 8000698:	e002      	b.n	80006a0 <__clzdi2+0x14>
 800069a:	1c08      	adds	r0, r1, #0
 800069c:	f000 f8da 	bl	8000854 <__clzsi2>
 80006a0:	bd10      	pop	{r4, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)

080006a4 <__divdi3>:
 80006a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006a6:	464e      	mov	r6, r9
 80006a8:	4657      	mov	r7, sl
 80006aa:	46de      	mov	lr, fp
 80006ac:	4645      	mov	r5, r8
 80006ae:	b5e0      	push	{r5, r6, r7, lr}
 80006b0:	000f      	movs	r7, r1
 80006b2:	2100      	movs	r1, #0
 80006b4:	b083      	sub	sp, #12
 80006b6:	0006      	movs	r6, r0
 80006b8:	4689      	mov	r9, r1
 80006ba:	2f00      	cmp	r7, #0
 80006bc:	da06      	bge.n	80006cc <__divdi3+0x28>
 80006be:	0039      	movs	r1, r7
 80006c0:	2700      	movs	r7, #0
 80006c2:	4246      	negs	r6, r0
 80006c4:	418f      	sbcs	r7, r1
 80006c6:	2101      	movs	r1, #1
 80006c8:	4249      	negs	r1, r1
 80006ca:	4689      	mov	r9, r1
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	da07      	bge.n	80006e0 <__divdi3+0x3c>
 80006d0:	4649      	mov	r1, r9
 80006d2:	43c9      	mvns	r1, r1
 80006d4:	0010      	movs	r0, r2
 80006d6:	4689      	mov	r9, r1
 80006d8:	0019      	movs	r1, r3
 80006da:	2300      	movs	r3, #0
 80006dc:	4242      	negs	r2, r0
 80006de:	418b      	sbcs	r3, r1
 80006e0:	0034      	movs	r4, r6
 80006e2:	003d      	movs	r5, r7
 80006e4:	4692      	mov	sl, r2
 80006e6:	4698      	mov	r8, r3
 80006e8:	42bb      	cmp	r3, r7
 80006ea:	d869      	bhi.n	80007c0 <__divdi3+0x11c>
 80006ec:	d066      	beq.n	80007bc <__divdi3+0x118>
 80006ee:	4641      	mov	r1, r8
 80006f0:	4650      	mov	r0, sl
 80006f2:	f7ff ffcb 	bl	800068c <__clzdi2>
 80006f6:	4683      	mov	fp, r0
 80006f8:	0039      	movs	r1, r7
 80006fa:	0030      	movs	r0, r6
 80006fc:	f7ff ffc6 	bl	800068c <__clzdi2>
 8000700:	465b      	mov	r3, fp
 8000702:	1a1b      	subs	r3, r3, r0
 8000704:	469c      	mov	ip, r3
 8000706:	3b20      	subs	r3, #32
 8000708:	469b      	mov	fp, r3
 800070a:	d500      	bpl.n	800070e <__divdi3+0x6a>
 800070c:	e075      	b.n	80007fa <__divdi3+0x156>
 800070e:	4651      	mov	r1, sl
 8000710:	4658      	mov	r0, fp
 8000712:	4081      	lsls	r1, r0
 8000714:	000b      	movs	r3, r1
 8000716:	4651      	mov	r1, sl
 8000718:	4660      	mov	r0, ip
 800071a:	4081      	lsls	r1, r0
 800071c:	000a      	movs	r2, r1
 800071e:	42bb      	cmp	r3, r7
 8000720:	d861      	bhi.n	80007e6 <__divdi3+0x142>
 8000722:	d05e      	beq.n	80007e2 <__divdi3+0x13e>
 8000724:	0034      	movs	r4, r6
 8000726:	003d      	movs	r5, r7
 8000728:	4659      	mov	r1, fp
 800072a:	1aa4      	subs	r4, r4, r2
 800072c:	419d      	sbcs	r5, r3
 800072e:	2900      	cmp	r1, #0
 8000730:	da00      	bge.n	8000734 <__divdi3+0x90>
 8000732:	e07a      	b.n	800082a <__divdi3+0x186>
 8000734:	2100      	movs	r1, #0
 8000736:	2000      	movs	r0, #0
 8000738:	2601      	movs	r6, #1
 800073a:	9000      	str	r0, [sp, #0]
 800073c:	9101      	str	r1, [sp, #4]
 800073e:	4659      	mov	r1, fp
 8000740:	408e      	lsls	r6, r1
 8000742:	9601      	str	r6, [sp, #4]
 8000744:	4661      	mov	r1, ip
 8000746:	2601      	movs	r6, #1
 8000748:	408e      	lsls	r6, r1
 800074a:	4661      	mov	r1, ip
 800074c:	9600      	str	r6, [sp, #0]
 800074e:	2900      	cmp	r1, #0
 8000750:	d050      	beq.n	80007f4 <__divdi3+0x150>
 8000752:	07d9      	lsls	r1, r3, #31
 8000754:	0856      	lsrs	r6, r2, #1
 8000756:	085f      	lsrs	r7, r3, #1
 8000758:	430e      	orrs	r6, r1
 800075a:	4663      	mov	r3, ip
 800075c:	e00e      	b.n	800077c <__divdi3+0xd8>
 800075e:	42af      	cmp	r7, r5
 8000760:	d101      	bne.n	8000766 <__divdi3+0xc2>
 8000762:	42a6      	cmp	r6, r4
 8000764:	d80c      	bhi.n	8000780 <__divdi3+0xdc>
 8000766:	1ba4      	subs	r4, r4, r6
 8000768:	41bd      	sbcs	r5, r7
 800076a:	2101      	movs	r1, #1
 800076c:	1924      	adds	r4, r4, r4
 800076e:	416d      	adcs	r5, r5
 8000770:	2200      	movs	r2, #0
 8000772:	3b01      	subs	r3, #1
 8000774:	1864      	adds	r4, r4, r1
 8000776:	4155      	adcs	r5, r2
 8000778:	2b00      	cmp	r3, #0
 800077a:	d006      	beq.n	800078a <__divdi3+0xe6>
 800077c:	42af      	cmp	r7, r5
 800077e:	d9ee      	bls.n	800075e <__divdi3+0xba>
 8000780:	3b01      	subs	r3, #1
 8000782:	1924      	adds	r4, r4, r4
 8000784:	416d      	adcs	r5, r5
 8000786:	2b00      	cmp	r3, #0
 8000788:	d1f8      	bne.n	800077c <__divdi3+0xd8>
 800078a:	9800      	ldr	r0, [sp, #0]
 800078c:	9901      	ldr	r1, [sp, #4]
 800078e:	465b      	mov	r3, fp
 8000790:	1900      	adds	r0, r0, r4
 8000792:	4169      	adcs	r1, r5
 8000794:	2b00      	cmp	r3, #0
 8000796:	db3d      	blt.n	8000814 <__divdi3+0x170>
 8000798:	002e      	movs	r6, r5
 800079a:	40de      	lsrs	r6, r3
 800079c:	4663      	mov	r3, ip
 800079e:	002c      	movs	r4, r5
 80007a0:	40dc      	lsrs	r4, r3
 80007a2:	465b      	mov	r3, fp
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	db4b      	blt.n	8000840 <__divdi3+0x19c>
 80007a8:	0034      	movs	r4, r6
 80007aa:	465d      	mov	r5, fp
 80007ac:	40ac      	lsls	r4, r5
 80007ae:	0023      	movs	r3, r4
 80007b0:	4664      	mov	r4, ip
 80007b2:	40a6      	lsls	r6, r4
 80007b4:	0032      	movs	r2, r6
 80007b6:	1a80      	subs	r0, r0, r2
 80007b8:	4199      	sbcs	r1, r3
 80007ba:	e003      	b.n	80007c4 <__divdi3+0x120>
 80007bc:	42b2      	cmp	r2, r6
 80007be:	d996      	bls.n	80006ee <__divdi3+0x4a>
 80007c0:	2000      	movs	r0, #0
 80007c2:	2100      	movs	r1, #0
 80007c4:	464b      	mov	r3, r9
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d004      	beq.n	80007d4 <__divdi3+0x130>
 80007ca:	0003      	movs	r3, r0
 80007cc:	000c      	movs	r4, r1
 80007ce:	2100      	movs	r1, #0
 80007d0:	4258      	negs	r0, r3
 80007d2:	41a1      	sbcs	r1, r4
 80007d4:	b003      	add	sp, #12
 80007d6:	bc3c      	pop	{r2, r3, r4, r5}
 80007d8:	4690      	mov	r8, r2
 80007da:	4699      	mov	r9, r3
 80007dc:	46a2      	mov	sl, r4
 80007de:	46ab      	mov	fp, r5
 80007e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007e2:	42b1      	cmp	r1, r6
 80007e4:	d99e      	bls.n	8000724 <__divdi3+0x80>
 80007e6:	2100      	movs	r1, #0
 80007e8:	2000      	movs	r0, #0
 80007ea:	9000      	str	r0, [sp, #0]
 80007ec:	9101      	str	r1, [sp, #4]
 80007ee:	4661      	mov	r1, ip
 80007f0:	2900      	cmp	r1, #0
 80007f2:	d1ae      	bne.n	8000752 <__divdi3+0xae>
 80007f4:	9800      	ldr	r0, [sp, #0]
 80007f6:	9901      	ldr	r1, [sp, #4]
 80007f8:	e7e4      	b.n	80007c4 <__divdi3+0x120>
 80007fa:	2320      	movs	r3, #32
 80007fc:	4662      	mov	r2, ip
 80007fe:	4651      	mov	r1, sl
 8000800:	1a9b      	subs	r3, r3, r2
 8000802:	40d9      	lsrs	r1, r3
 8000804:	4640      	mov	r0, r8
 8000806:	9100      	str	r1, [sp, #0]
 8000808:	4661      	mov	r1, ip
 800080a:	4088      	lsls	r0, r1
 800080c:	0003      	movs	r3, r0
 800080e:	9900      	ldr	r1, [sp, #0]
 8000810:	430b      	orrs	r3, r1
 8000812:	e780      	b.n	8000716 <__divdi3+0x72>
 8000814:	4662      	mov	r2, ip
 8000816:	2320      	movs	r3, #32
 8000818:	1a9b      	subs	r3, r3, r2
 800081a:	002a      	movs	r2, r5
 800081c:	409a      	lsls	r2, r3
 800081e:	0026      	movs	r6, r4
 8000820:	0013      	movs	r3, r2
 8000822:	4662      	mov	r2, ip
 8000824:	40d6      	lsrs	r6, r2
 8000826:	431e      	orrs	r6, r3
 8000828:	e7b8      	b.n	800079c <__divdi3+0xf8>
 800082a:	4661      	mov	r1, ip
 800082c:	2620      	movs	r6, #32
 800082e:	2701      	movs	r7, #1
 8000830:	1a76      	subs	r6, r6, r1
 8000832:	2000      	movs	r0, #0
 8000834:	2100      	movs	r1, #0
 8000836:	40f7      	lsrs	r7, r6
 8000838:	9000      	str	r0, [sp, #0]
 800083a:	9101      	str	r1, [sp, #4]
 800083c:	9701      	str	r7, [sp, #4]
 800083e:	e781      	b.n	8000744 <__divdi3+0xa0>
 8000840:	4667      	mov	r7, ip
 8000842:	2320      	movs	r3, #32
 8000844:	4662      	mov	r2, ip
 8000846:	0035      	movs	r5, r6
 8000848:	40bc      	lsls	r4, r7
 800084a:	1a9b      	subs	r3, r3, r2
 800084c:	40dd      	lsrs	r5, r3
 800084e:	0023      	movs	r3, r4
 8000850:	432b      	orrs	r3, r5
 8000852:	e7ad      	b.n	80007b0 <__divdi3+0x10c>

08000854 <__clzsi2>:
 8000854:	211c      	movs	r1, #28
 8000856:	2301      	movs	r3, #1
 8000858:	041b      	lsls	r3, r3, #16
 800085a:	4298      	cmp	r0, r3
 800085c:	d301      	bcc.n	8000862 <__clzsi2+0xe>
 800085e:	0c00      	lsrs	r0, r0, #16
 8000860:	3910      	subs	r1, #16
 8000862:	0a1b      	lsrs	r3, r3, #8
 8000864:	4298      	cmp	r0, r3
 8000866:	d301      	bcc.n	800086c <__clzsi2+0x18>
 8000868:	0a00      	lsrs	r0, r0, #8
 800086a:	3908      	subs	r1, #8
 800086c:	091b      	lsrs	r3, r3, #4
 800086e:	4298      	cmp	r0, r3
 8000870:	d301      	bcc.n	8000876 <__clzsi2+0x22>
 8000872:	0900      	lsrs	r0, r0, #4
 8000874:	3904      	subs	r1, #4
 8000876:	a202      	add	r2, pc, #8	; (adr r2, 8000880 <__clzsi2+0x2c>)
 8000878:	5c10      	ldrb	r0, [r2, r0]
 800087a:	1840      	adds	r0, r0, r1
 800087c:	4770      	bx	lr
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	02020304 	.word	0x02020304
 8000884:	01010101 	.word	0x01010101
	...

08000890 <aesroundkeys>:
u4_t AESAUX[16/sizeof(u4_t)];
u4_t AESKEY[11*16/sizeof(u4_t)];

// generate 1+10 roundkeys for encryption with 128-bit key
// read 128-bit key from AESKEY in MSBF, generate roundkey words in place
static void aesroundkeys () {
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
    int i;
    u4_t b;

    for( i=0; i<4; i++) {
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	e024      	b.n	80008e6 <aesroundkeys+0x56>
        AESKEY[i] = swapmsbf(AESKEY[i]);
 800089c:	4b37      	ldr	r3, [pc, #220]	; (800097c <aesroundkeys+0xec>)
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	0092      	lsls	r2, r2, #2
 80008a2:	58d3      	ldr	r3, [r2, r3]
 80008a4:	061a      	lsls	r2, r3, #24
 80008a6:	4b35      	ldr	r3, [pc, #212]	; (800097c <aesroundkeys+0xec>)
 80008a8:	6879      	ldr	r1, [r7, #4]
 80008aa:	0089      	lsls	r1, r1, #2
 80008ac:	58cb      	ldr	r3, [r1, r3]
 80008ae:	0219      	lsls	r1, r3, #8
 80008b0:	23ff      	movs	r3, #255	; 0xff
 80008b2:	041b      	lsls	r3, r3, #16
 80008b4:	400b      	ands	r3, r1
 80008b6:	431a      	orrs	r2, r3
 80008b8:	4b30      	ldr	r3, [pc, #192]	; (800097c <aesroundkeys+0xec>)
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	0089      	lsls	r1, r1, #2
 80008be:	58cb      	ldr	r3, [r1, r3]
 80008c0:	0a19      	lsrs	r1, r3, #8
 80008c2:	23ff      	movs	r3, #255	; 0xff
 80008c4:	021b      	lsls	r3, r3, #8
 80008c6:	400b      	ands	r3, r1
 80008c8:	431a      	orrs	r2, r3
 80008ca:	4b2c      	ldr	r3, [pc, #176]	; (800097c <aesroundkeys+0xec>)
 80008cc:	6879      	ldr	r1, [r7, #4]
 80008ce:	0089      	lsls	r1, r1, #2
 80008d0:	58cb      	ldr	r3, [r1, r3]
 80008d2:	0e1b      	lsrs	r3, r3, #24
 80008d4:	431a      	orrs	r2, r3
 80008d6:	0011      	movs	r1, r2
 80008d8:	4b28      	ldr	r3, [pc, #160]	; (800097c <aesroundkeys+0xec>)
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	0092      	lsls	r2, r2, #2
 80008de:	50d1      	str	r1, [r2, r3]
    for( i=0; i<4; i++) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3301      	adds	r3, #1
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b03      	cmp	r3, #3
 80008ea:	ddd7      	ble.n	800089c <aesroundkeys+0xc>
    }
    
    b = AESKEY[3];
 80008ec:	4b23      	ldr	r3, [pc, #140]	; (800097c <aesroundkeys+0xec>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	603b      	str	r3, [r7, #0]
    for( ; i<44; i++ ) {
 80008f2:	e03b      	b.n	800096c <aesroundkeys+0xdc>
        if( i%4==0 ) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2203      	movs	r2, #3
 80008f8:	4013      	ands	r3, r2
 80008fa:	d127      	bne.n	800094c <aesroundkeys+0xbc>
            // b = SubWord(RotWord(b)) xor Rcon[i/4]
            b = (AES_S[u1(b >> 16)] << 24) ^
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	0c1b      	lsrs	r3, r3, #16
 8000900:	b2db      	uxtb	r3, r3
 8000902:	001a      	movs	r2, r3
 8000904:	4b1e      	ldr	r3, [pc, #120]	; (8000980 <aesroundkeys+0xf0>)
 8000906:	5c9b      	ldrb	r3, [r3, r2]
 8000908:	061a      	lsls	r2, r3, #24
                (AES_S[u1(b >>  8)] << 16) ^
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	0a1b      	lsrs	r3, r3, #8
 800090e:	b2db      	uxtb	r3, r3
 8000910:	0019      	movs	r1, r3
 8000912:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <aesroundkeys+0xf0>)
 8000914:	5c5b      	ldrb	r3, [r3, r1]
 8000916:	041b      	lsls	r3, r3, #16
            b = (AES_S[u1(b >> 16)] << 24) ^
 8000918:	405a      	eors	r2, r3
                (AES_S[u1(b)      ] <<  8) ^
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	0019      	movs	r1, r3
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <aesroundkeys+0xf0>)
 8000922:	5c5b      	ldrb	r3, [r3, r1]
 8000924:	021b      	lsls	r3, r3, #8
                (AES_S[u1(b >>  8)] << 16) ^
 8000926:	4053      	eors	r3, r2
                (AES_S[   b >> 24 ]      ) ^
 8000928:	683a      	ldr	r2, [r7, #0]
 800092a:	0e12      	lsrs	r2, r2, #24
 800092c:	4914      	ldr	r1, [pc, #80]	; (8000980 <aesroundkeys+0xf0>)
 800092e:	5c8a      	ldrb	r2, [r1, r2]
                (AES_S[u1(b)      ] <<  8) ^
 8000930:	4053      	eors	r3, r2
 8000932:	0019      	movs	r1, r3
                 AES_RCON[(i-4)/4];
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3b04      	subs	r3, #4
 8000938:	2b00      	cmp	r3, #0
 800093a:	da00      	bge.n	800093e <aesroundkeys+0xae>
 800093c:	3303      	adds	r3, #3
 800093e:	109b      	asrs	r3, r3, #2
 8000940:	001a      	movs	r2, r3
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <aesroundkeys+0xf4>)
 8000944:	0092      	lsls	r2, r2, #2
 8000946:	58d3      	ldr	r3, [r2, r3]
            b = (AES_S[u1(b >> 16)] << 24) ^
 8000948:	404b      	eors	r3, r1
 800094a:	603b      	str	r3, [r7, #0]
        }
        AESKEY[i] = b ^= AESKEY[i-4];
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	1f1a      	subs	r2, r3, #4
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <aesroundkeys+0xec>)
 8000952:	0092      	lsls	r2, r2, #2
 8000954:	58d3      	ldr	r3, [r2, r3]
 8000956:	683a      	ldr	r2, [r7, #0]
 8000958:	4053      	eors	r3, r2
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <aesroundkeys+0xec>)
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	0092      	lsls	r2, r2, #2
 8000962:	6839      	ldr	r1, [r7, #0]
 8000964:	50d1      	str	r1, [r2, r3]
    for( ; i<44; i++ ) {
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	3301      	adds	r3, #1
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b2b      	cmp	r3, #43	; 0x2b
 8000970:	ddc0      	ble.n	80008f4 <aesroundkeys+0x64>
    }
}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	b002      	add	sp, #8
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	2000009c 	.word	0x2000009c
 8000980:	0800baf4 	.word	0x0800baf4
 8000984:	0800bacc 	.word	0x0800bacc

08000988 <os_aes>:

u4_t os_aes (u1_t mode, xref2u1_t buf, u2_t len) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b08c      	sub	sp, #48	; 0x30
 800098c:	af00      	add	r7, sp, #0
 800098e:	6039      	str	r1, [r7, #0]
 8000990:	0011      	movs	r1, r2
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	1c02      	adds	r2, r0, #0
 8000996:	701a      	strb	r2, [r3, #0]
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	1c0a      	adds	r2, r1, #0
 800099c:	801a      	strh	r2, [r3, #0]
        
        aesroundkeys();
 800099e:	f7ff ff77 	bl	8000890 <aesroundkeys>

        if( mode & AES_MICNOAUX ) {
 80009a2:	1dfb      	adds	r3, r7, #7
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2208      	movs	r2, #8
 80009a8:	4013      	ands	r3, r2
 80009aa:	d010      	beq.n	80009ce <os_aes+0x46>
            AESAUX[0] = AESAUX[1] = AESAUX[2] = AESAUX[3] = 0;
 80009ac:	4b60      	ldr	r3, [pc, #384]	; (8000b30 <os_aes+0x1a8>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	4b5f      	ldr	r3, [pc, #380]	; (8000b30 <os_aes+0x1a8>)
 80009b4:	68da      	ldr	r2, [r3, #12]
 80009b6:	4b5e      	ldr	r3, [pc, #376]	; (8000b30 <os_aes+0x1a8>)
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	4b5d      	ldr	r3, [pc, #372]	; (8000b30 <os_aes+0x1a8>)
 80009bc:	689a      	ldr	r2, [r3, #8]
 80009be:	4b5c      	ldr	r3, [pc, #368]	; (8000b30 <os_aes+0x1a8>)
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	4b5b      	ldr	r3, [pc, #364]	; (8000b30 <os_aes+0x1a8>)
 80009c4:	685a      	ldr	r2, [r3, #4]
 80009c6:	4b5a      	ldr	r3, [pc, #360]	; (8000b30 <os_aes+0x1a8>)
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	f000 fcb6 	bl	800133a <os_aes+0x9b2>
        } else {
            AESAUX[0] = swapmsbf(AESAUX[0]);
 80009ce:	4b58      	ldr	r3, [pc, #352]	; (8000b30 <os_aes+0x1a8>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	061a      	lsls	r2, r3, #24
 80009d4:	4b56      	ldr	r3, [pc, #344]	; (8000b30 <os_aes+0x1a8>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	0219      	lsls	r1, r3, #8
 80009da:	23ff      	movs	r3, #255	; 0xff
 80009dc:	041b      	lsls	r3, r3, #16
 80009de:	400b      	ands	r3, r1
 80009e0:	431a      	orrs	r2, r3
 80009e2:	4b53      	ldr	r3, [pc, #332]	; (8000b30 <os_aes+0x1a8>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	0a19      	lsrs	r1, r3, #8
 80009e8:	23ff      	movs	r3, #255	; 0xff
 80009ea:	021b      	lsls	r3, r3, #8
 80009ec:	400b      	ands	r3, r1
 80009ee:	431a      	orrs	r2, r3
 80009f0:	4b4f      	ldr	r3, [pc, #316]	; (8000b30 <os_aes+0x1a8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	0e1b      	lsrs	r3, r3, #24
 80009f6:	431a      	orrs	r2, r3
 80009f8:	4b4d      	ldr	r3, [pc, #308]	; (8000b30 <os_aes+0x1a8>)
 80009fa:	601a      	str	r2, [r3, #0]
            AESAUX[1] = swapmsbf(AESAUX[1]);
 80009fc:	4b4c      	ldr	r3, [pc, #304]	; (8000b30 <os_aes+0x1a8>)
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	061a      	lsls	r2, r3, #24
 8000a02:	4b4b      	ldr	r3, [pc, #300]	; (8000b30 <os_aes+0x1a8>)
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	0219      	lsls	r1, r3, #8
 8000a08:	23ff      	movs	r3, #255	; 0xff
 8000a0a:	041b      	lsls	r3, r3, #16
 8000a0c:	400b      	ands	r3, r1
 8000a0e:	431a      	orrs	r2, r3
 8000a10:	4b47      	ldr	r3, [pc, #284]	; (8000b30 <os_aes+0x1a8>)
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	0a19      	lsrs	r1, r3, #8
 8000a16:	23ff      	movs	r3, #255	; 0xff
 8000a18:	021b      	lsls	r3, r3, #8
 8000a1a:	400b      	ands	r3, r1
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	4b44      	ldr	r3, [pc, #272]	; (8000b30 <os_aes+0x1a8>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	0e1b      	lsrs	r3, r3, #24
 8000a24:	431a      	orrs	r2, r3
 8000a26:	4b42      	ldr	r3, [pc, #264]	; (8000b30 <os_aes+0x1a8>)
 8000a28:	605a      	str	r2, [r3, #4]
            AESAUX[2] = swapmsbf(AESAUX[2]);
 8000a2a:	4b41      	ldr	r3, [pc, #260]	; (8000b30 <os_aes+0x1a8>)
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	061a      	lsls	r2, r3, #24
 8000a30:	4b3f      	ldr	r3, [pc, #252]	; (8000b30 <os_aes+0x1a8>)
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	0219      	lsls	r1, r3, #8
 8000a36:	23ff      	movs	r3, #255	; 0xff
 8000a38:	041b      	lsls	r3, r3, #16
 8000a3a:	400b      	ands	r3, r1
 8000a3c:	431a      	orrs	r2, r3
 8000a3e:	4b3c      	ldr	r3, [pc, #240]	; (8000b30 <os_aes+0x1a8>)
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	0a19      	lsrs	r1, r3, #8
 8000a44:	23ff      	movs	r3, #255	; 0xff
 8000a46:	021b      	lsls	r3, r3, #8
 8000a48:	400b      	ands	r3, r1
 8000a4a:	431a      	orrs	r2, r3
 8000a4c:	4b38      	ldr	r3, [pc, #224]	; (8000b30 <os_aes+0x1a8>)
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	0e1b      	lsrs	r3, r3, #24
 8000a52:	431a      	orrs	r2, r3
 8000a54:	4b36      	ldr	r3, [pc, #216]	; (8000b30 <os_aes+0x1a8>)
 8000a56:	609a      	str	r2, [r3, #8]
            AESAUX[3] = swapmsbf(AESAUX[3]);
 8000a58:	4b35      	ldr	r3, [pc, #212]	; (8000b30 <os_aes+0x1a8>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	061a      	lsls	r2, r3, #24
 8000a5e:	4b34      	ldr	r3, [pc, #208]	; (8000b30 <os_aes+0x1a8>)
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	0219      	lsls	r1, r3, #8
 8000a64:	23ff      	movs	r3, #255	; 0xff
 8000a66:	041b      	lsls	r3, r3, #16
 8000a68:	400b      	ands	r3, r1
 8000a6a:	431a      	orrs	r2, r3
 8000a6c:	4b30      	ldr	r3, [pc, #192]	; (8000b30 <os_aes+0x1a8>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	0a19      	lsrs	r1, r3, #8
 8000a72:	23ff      	movs	r3, #255	; 0xff
 8000a74:	021b      	lsls	r3, r3, #8
 8000a76:	400b      	ands	r3, r1
 8000a78:	431a      	orrs	r2, r3
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <os_aes+0x1a8>)
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	0e1b      	lsrs	r3, r3, #24
 8000a80:	431a      	orrs	r2, r3
 8000a82:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <os_aes+0x1a8>)
 8000a84:	60da      	str	r2, [r3, #12]
        }

        while( (signed char)len > 0 ) {
 8000a86:	f000 fc58 	bl	800133a <os_aes+0x9b2>
            u4_t a0, a1, a2, a3;
            u4_t t0, t1, t2, t3;
            u4_t *ki, *ke;

            // load input block
            if( (mode & AES_CTR) || ((mode & AES_MIC) && (mode & AES_MICNOAUX)==0) ) { // load CTR block or first MIC block
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2204      	movs	r2, #4
 8000a90:	4013      	ands	r3, r2
 8000a92:	d109      	bne.n	8000aa8 <os_aes+0x120>
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2202      	movs	r2, #2
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	d011      	beq.n	8000ac2 <os_aes+0x13a>
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2208      	movs	r2, #8
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	d10c      	bne.n	8000ac2 <os_aes+0x13a>
                a0 = AESAUX[0];
 8000aa8:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <os_aes+0x1a8>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
                a1 = AESAUX[1];
 8000aae:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <os_aes+0x1a8>)
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
                a2 = AESAUX[2];
 8000ab4:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <os_aes+0x1a8>)
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
                a3 = AESAUX[3];
 8000aba:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <os_aes+0x1a8>)
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	623b      	str	r3, [r7, #32]
 8000ac0:	e067      	b.n	8000b92 <os_aes+0x20a>
            }
            else if( (mode & AES_MIC) && len <= 16 ) { // last MIC block
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	4013      	ands	r3, r2
 8000aca:	d01a      	beq.n	8000b02 <os_aes+0x17a>
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	2b10      	cmp	r3, #16
 8000ad2:	d816      	bhi.n	8000b02 <os_aes+0x17a>
                a0 = a1 = a2 = a3 = 0; // load null block
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
 8000ad8:	6a3b      	ldr	r3, [r7, #32]
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
 8000adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
                mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	2b10      	cmp	r3, #16
 8000aea:	d101      	bne.n	8000af0 <os_aes+0x168>
 8000aec:	2310      	movs	r3, #16
 8000aee:	e000      	b.n	8000af2 <os_aes+0x16a>
 8000af0:	2320      	movs	r3, #32
 8000af2:	1dfa      	adds	r2, r7, #7
 8000af4:	7812      	ldrb	r2, [r2, #0]
 8000af6:	b252      	sxtb	r2, r2
 8000af8:	4313      	orrs	r3, r2
 8000afa:	b25a      	sxtb	r2, r3
 8000afc:	1dfb      	adds	r3, r7, #7
 8000afe:	701a      	strb	r2, [r3, #0]
 8000b00:	e047      	b.n	8000b92 <os_aes+0x20a>
            } else
        LOADDATA: { // load data block (partially)
 8000b02:	46c0      	nop			; (mov r8, r8)
                for(t0=0; t0<16; t0++) {
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
 8000b08:	e027      	b.n	8000b5a <os_aes+0x1d2>
                    t1 = (t1<<8) | ((t0<len) ? buf[t0] : (t0==len) ? 0x80 : 0x00);
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	021a      	lsls	r2, r3, #8
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	69f9      	ldr	r1, [r7, #28]
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d204      	bcs.n	8000b22 <os_aes+0x19a>
 8000b18:	6839      	ldr	r1, [r7, #0]
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	18cb      	adds	r3, r1, r3
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	e009      	b.n	8000b36 <os_aes+0x1ae>
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	69f9      	ldr	r1, [r7, #28]
 8000b28:	4299      	cmp	r1, r3
 8000b2a:	d103      	bne.n	8000b34 <os_aes+0x1ac>
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	e002      	b.n	8000b36 <os_aes+0x1ae>
 8000b30:	2000014c 	.word	0x2000014c
 8000b34:	2300      	movs	r3, #0
 8000b36:	4313      	orrs	r3, r2
 8000b38:	61bb      	str	r3, [r7, #24]
                    if((t0&3)==3) {
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	4013      	ands	r3, r2
 8000b40:	2b03      	cmp	r3, #3
 8000b42:	d107      	bne.n	8000b54 <os_aes+0x1cc>
                        a0 = a1;
 8000b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
                        a1 = a2;
 8000b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
                        a2 = a3;
 8000b4c:	6a3b      	ldr	r3, [r7, #32]
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
                        a3 = t1;
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	623b      	str	r3, [r7, #32]
                for(t0=0; t0<16; t0++) {
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	3301      	adds	r3, #1
 8000b58:	61fb      	str	r3, [r7, #28]
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d9d4      	bls.n	8000b0a <os_aes+0x182>
                    }
                } 
                if( mode & AES_MIC ) {
 8000b60:	1dfb      	adds	r3, r7, #7
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2202      	movs	r2, #2
 8000b66:	4013      	ands	r3, r2
 8000b68:	d013      	beq.n	8000b92 <os_aes+0x20a>
                    a0 ^= AESAUX[0];
 8000b6a:	4bfe      	ldr	r3, [pc, #1016]	; (8000f64 <os_aes+0x5dc>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b70:	4053      	eors	r3, r2
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
                    a1 ^= AESAUX[1];
 8000b74:	4bfb      	ldr	r3, [pc, #1004]	; (8000f64 <os_aes+0x5dc>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b7a:	4053      	eors	r3, r2
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
                    a2 ^= AESAUX[2];
 8000b7e:	4bf9      	ldr	r3, [pc, #996]	; (8000f64 <os_aes+0x5dc>)
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b84:	4053      	eors	r3, r2
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
                    a3 ^= AESAUX[3];
 8000b88:	4bf6      	ldr	r3, [pc, #984]	; (8000f64 <os_aes+0x5dc>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	6a3a      	ldr	r2, [r7, #32]
 8000b8e:	4053      	eors	r3, r2
 8000b90:	623b      	str	r3, [r7, #32]
                }
            }

            // perform AES encryption on block in a0-a3
            ki = AESKEY;
 8000b92:	4bf5      	ldr	r3, [pc, #980]	; (8000f68 <os_aes+0x5e0>)
 8000b94:	617b      	str	r3, [r7, #20]
            ke = ki + 8*4;
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3380      	adds	r3, #128	; 0x80
 8000b9a:	613b      	str	r3, [r7, #16]
            a0 ^= ki[0];
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ba2:	4053      	eors	r3, r2
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
            a1 ^= ki[1];
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3304      	adds	r3, #4
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bae:	4053      	eors	r3, r2
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
            a2 ^= ki[2];
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	3308      	adds	r3, #8
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bba:	4053      	eors	r3, r2
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
            a3 ^= ki[3];
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	330c      	adds	r3, #12
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	6a3a      	ldr	r2, [r7, #32]
 8000bc6:	4053      	eors	r3, r2
 8000bc8:	623b      	str	r3, [r7, #32]
            do {
                AES_key4 (t1,t2,t3,t0,4);
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	61bb      	str	r3, [r7, #24]
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	691b      	ldr	r3, [r3, #16]
 8000be0:	61fb      	str	r3, [r7, #28]
                AES_expr4(t1,t2,t3,t0,a0);
 8000be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	001a      	movs	r2, r3
 8000be8:	4be0      	ldr	r3, [pc, #896]	; (8000f6c <os_aes+0x5e4>)
 8000bea:	0092      	lsls	r2, r2, #2
 8000bec:	58d3      	ldr	r3, [r2, r3]
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	4053      	eors	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]
 8000bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf6:	0a1b      	lsrs	r3, r3, #8
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	001a      	movs	r2, r3
 8000bfc:	4bdc      	ldr	r3, [pc, #880]	; (8000f70 <os_aes+0x5e8>)
 8000bfe:	0092      	lsls	r2, r2, #2
 8000c00:	58d3      	ldr	r3, [r2, r3]
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	4053      	eors	r3, r2
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c0a:	0c1b      	lsrs	r3, r3, #16
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	001a      	movs	r2, r3
 8000c10:	4bd8      	ldr	r3, [pc, #864]	; (8000f74 <os_aes+0x5ec>)
 8000c12:	0092      	lsls	r2, r2, #2
 8000c14:	58d3      	ldr	r3, [r2, r3]
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	4053      	eors	r3, r2
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c1e:	0e1a      	lsrs	r2, r3, #24
 8000c20:	4bd5      	ldr	r3, [pc, #852]	; (8000f78 <os_aes+0x5f0>)
 8000c22:	0092      	lsls	r2, r2, #2
 8000c24:	58d3      	ldr	r3, [r2, r3]
 8000c26:	69fa      	ldr	r2, [r7, #28]
 8000c28:	4053      	eors	r3, r2
 8000c2a:	61fb      	str	r3, [r7, #28]
                AES_expr4(t2,t3,t0,t1,a1);
 8000c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	001a      	movs	r2, r3
 8000c32:	4bce      	ldr	r3, [pc, #824]	; (8000f6c <os_aes+0x5e4>)
 8000c34:	0092      	lsls	r2, r2, #2
 8000c36:	58d3      	ldr	r3, [r2, r3]
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	4053      	eors	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	001a      	movs	r2, r3
 8000c46:	4bca      	ldr	r3, [pc, #808]	; (8000f70 <os_aes+0x5e8>)
 8000c48:	0092      	lsls	r2, r2, #2
 8000c4a:	58d3      	ldr	r3, [r2, r3]
 8000c4c:	68ba      	ldr	r2, [r7, #8]
 8000c4e:	4053      	eors	r3, r2
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c54:	0c1b      	lsrs	r3, r3, #16
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	001a      	movs	r2, r3
 8000c5a:	4bc6      	ldr	r3, [pc, #792]	; (8000f74 <os_aes+0x5ec>)
 8000c5c:	0092      	lsls	r2, r2, #2
 8000c5e:	58d3      	ldr	r3, [r2, r3]
 8000c60:	69fa      	ldr	r2, [r7, #28]
 8000c62:	4053      	eors	r3, r2
 8000c64:	61fb      	str	r3, [r7, #28]
 8000c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c68:	0e1a      	lsrs	r2, r3, #24
 8000c6a:	4bc3      	ldr	r3, [pc, #780]	; (8000f78 <os_aes+0x5f0>)
 8000c6c:	0092      	lsls	r2, r2, #2
 8000c6e:	58d3      	ldr	r3, [r2, r3]
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	4053      	eors	r3, r2
 8000c74:	61bb      	str	r3, [r7, #24]
                AES_expr4(t3,t0,t1,t2,a2);
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	001a      	movs	r2, r3
 8000c7c:	4bbb      	ldr	r3, [pc, #748]	; (8000f6c <os_aes+0x5e4>)
 8000c7e:	0092      	lsls	r2, r2, #2
 8000c80:	58d3      	ldr	r3, [r2, r3]
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	4053      	eors	r3, r2
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8a:	0a1b      	lsrs	r3, r3, #8
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	001a      	movs	r2, r3
 8000c90:	4bb7      	ldr	r3, [pc, #732]	; (8000f70 <os_aes+0x5e8>)
 8000c92:	0092      	lsls	r2, r2, #2
 8000c94:	58d3      	ldr	r3, [r2, r3]
 8000c96:	69fa      	ldr	r2, [r7, #28]
 8000c98:	4053      	eors	r3, r2
 8000c9a:	61fb      	str	r3, [r7, #28]
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	0c1b      	lsrs	r3, r3, #16
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	001a      	movs	r2, r3
 8000ca4:	4bb3      	ldr	r3, [pc, #716]	; (8000f74 <os_aes+0x5ec>)
 8000ca6:	0092      	lsls	r2, r2, #2
 8000ca8:	58d3      	ldr	r3, [r2, r3]
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4053      	eors	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	0e1a      	lsrs	r2, r3, #24
 8000cb4:	4bb0      	ldr	r3, [pc, #704]	; (8000f78 <os_aes+0x5f0>)
 8000cb6:	0092      	lsls	r2, r2, #2
 8000cb8:	58d3      	ldr	r3, [r2, r3]
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	4053      	eors	r3, r2
 8000cbe:	60fb      	str	r3, [r7, #12]
                AES_expr4(t0,t1,t2,t3,a3);
 8000cc0:	6a3b      	ldr	r3, [r7, #32]
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	4ba9      	ldr	r3, [pc, #676]	; (8000f6c <os_aes+0x5e4>)
 8000cc8:	0092      	lsls	r2, r2, #2
 8000cca:	58d3      	ldr	r3, [r2, r3]
 8000ccc:	69fa      	ldr	r2, [r7, #28]
 8000cce:	4053      	eors	r3, r2
 8000cd0:	61fb      	str	r3, [r7, #28]
 8000cd2:	6a3b      	ldr	r3, [r7, #32]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	001a      	movs	r2, r3
 8000cda:	4ba5      	ldr	r3, [pc, #660]	; (8000f70 <os_aes+0x5e8>)
 8000cdc:	0092      	lsls	r2, r2, #2
 8000cde:	58d3      	ldr	r3, [r2, r3]
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	4053      	eors	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
 8000ce6:	6a3b      	ldr	r3, [r7, #32]
 8000ce8:	0c1b      	lsrs	r3, r3, #16
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	001a      	movs	r2, r3
 8000cee:	4ba1      	ldr	r3, [pc, #644]	; (8000f74 <os_aes+0x5ec>)
 8000cf0:	0092      	lsls	r2, r2, #2
 8000cf2:	58d3      	ldr	r3, [r2, r3]
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	4053      	eors	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	6a3b      	ldr	r3, [r7, #32]
 8000cfc:	0e1a      	lsrs	r2, r3, #24
 8000cfe:	4b9e      	ldr	r3, [pc, #632]	; (8000f78 <os_aes+0x5f0>)
 8000d00:	0092      	lsls	r2, r2, #2
 8000d02:	58d3      	ldr	r3, [r2, r3]
 8000d04:	68ba      	ldr	r2, [r7, #8]
 8000d06:	4053      	eors	r3, r2
 8000d08:	60bb      	str	r3, [r7, #8]

                AES_key4 (a1,a2,a3,a0,8);
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1a:	623b      	str	r3, [r7, #32]
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	6a1b      	ldr	r3, [r3, #32]
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
                AES_expr4(a1,a2,a3,a0,t0);
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	001a      	movs	r2, r3
 8000d28:	4b90      	ldr	r3, [pc, #576]	; (8000f6c <os_aes+0x5e4>)
 8000d2a:	0092      	lsls	r2, r2, #2
 8000d2c:	58d3      	ldr	r3, [r2, r3]
 8000d2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d30:	4053      	eors	r3, r2
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	0a1b      	lsrs	r3, r3, #8
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	001a      	movs	r2, r3
 8000d3c:	4b8c      	ldr	r3, [pc, #560]	; (8000f70 <os_aes+0x5e8>)
 8000d3e:	0092      	lsls	r2, r2, #2
 8000d40:	58d3      	ldr	r3, [r2, r3]
 8000d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d44:	4053      	eors	r3, r2
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	0c1b      	lsrs	r3, r3, #16
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	001a      	movs	r2, r3
 8000d50:	4b88      	ldr	r3, [pc, #544]	; (8000f74 <os_aes+0x5ec>)
 8000d52:	0092      	lsls	r2, r2, #2
 8000d54:	58d3      	ldr	r3, [r2, r3]
 8000d56:	6a3a      	ldr	r2, [r7, #32]
 8000d58:	4053      	eors	r3, r2
 8000d5a:	623b      	str	r3, [r7, #32]
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	0e1a      	lsrs	r2, r3, #24
 8000d60:	4b85      	ldr	r3, [pc, #532]	; (8000f78 <os_aes+0x5f0>)
 8000d62:	0092      	lsls	r2, r2, #2
 8000d64:	58d3      	ldr	r3, [r2, r3]
 8000d66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d68:	4053      	eors	r3, r2
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
                AES_expr4(a2,a3,a0,a1,t1);
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	001a      	movs	r2, r3
 8000d72:	4b7e      	ldr	r3, [pc, #504]	; (8000f6c <os_aes+0x5e4>)
 8000d74:	0092      	lsls	r2, r2, #2
 8000d76:	58d3      	ldr	r3, [r2, r3]
 8000d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d7a:	4053      	eors	r3, r2
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	001a      	movs	r2, r3
 8000d86:	4b7a      	ldr	r3, [pc, #488]	; (8000f70 <os_aes+0x5e8>)
 8000d88:	0092      	lsls	r2, r2, #2
 8000d8a:	58d3      	ldr	r3, [r2, r3]
 8000d8c:	6a3a      	ldr	r2, [r7, #32]
 8000d8e:	4053      	eors	r3, r2
 8000d90:	623b      	str	r3, [r7, #32]
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	0c1b      	lsrs	r3, r3, #16
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	001a      	movs	r2, r3
 8000d9a:	4b76      	ldr	r3, [pc, #472]	; (8000f74 <os_aes+0x5ec>)
 8000d9c:	0092      	lsls	r2, r2, #2
 8000d9e:	58d3      	ldr	r3, [r2, r3]
 8000da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000da2:	4053      	eors	r3, r2
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	0e1a      	lsrs	r2, r3, #24
 8000daa:	4b73      	ldr	r3, [pc, #460]	; (8000f78 <os_aes+0x5f0>)
 8000dac:	0092      	lsls	r2, r2, #2
 8000dae:	58d3      	ldr	r3, [r2, r3]
 8000db0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000db2:	4053      	eors	r3, r2
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
                AES_expr4(a3,a0,a1,a2,t2);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	001a      	movs	r2, r3
 8000dbc:	4b6b      	ldr	r3, [pc, #428]	; (8000f6c <os_aes+0x5e4>)
 8000dbe:	0092      	lsls	r2, r2, #2
 8000dc0:	58d3      	ldr	r3, [r2, r3]
 8000dc2:	6a3a      	ldr	r2, [r7, #32]
 8000dc4:	4053      	eors	r3, r2
 8000dc6:	623b      	str	r3, [r7, #32]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	0a1b      	lsrs	r3, r3, #8
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	001a      	movs	r2, r3
 8000dd0:	4b67      	ldr	r3, [pc, #412]	; (8000f70 <os_aes+0x5e8>)
 8000dd2:	0092      	lsls	r2, r2, #2
 8000dd4:	58d3      	ldr	r3, [r2, r3]
 8000dd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dd8:	4053      	eors	r3, r2
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	0c1b      	lsrs	r3, r3, #16
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	001a      	movs	r2, r3
 8000de4:	4b63      	ldr	r3, [pc, #396]	; (8000f74 <os_aes+0x5ec>)
 8000de6:	0092      	lsls	r2, r2, #2
 8000de8:	58d3      	ldr	r3, [r2, r3]
 8000dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dec:	4053      	eors	r3, r2
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	0e1a      	lsrs	r2, r3, #24
 8000df4:	4b60      	ldr	r3, [pc, #384]	; (8000f78 <os_aes+0x5f0>)
 8000df6:	0092      	lsls	r2, r2, #2
 8000df8:	58d3      	ldr	r3, [r2, r3]
 8000dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dfc:	4053      	eors	r3, r2
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
                AES_expr4(a0,a1,a2,a3,t3);
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	001a      	movs	r2, r3
 8000e06:	4b59      	ldr	r3, [pc, #356]	; (8000f6c <os_aes+0x5e4>)
 8000e08:	0092      	lsls	r2, r2, #2
 8000e0a:	58d3      	ldr	r3, [r2, r3]
 8000e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e0e:	4053      	eors	r3, r2
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	001a      	movs	r2, r3
 8000e1a:	4b55      	ldr	r3, [pc, #340]	; (8000f70 <os_aes+0x5e8>)
 8000e1c:	0092      	lsls	r2, r2, #2
 8000e1e:	58d3      	ldr	r3, [r2, r3]
 8000e20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e22:	4053      	eors	r3, r2
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	0c1b      	lsrs	r3, r3, #16
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	001a      	movs	r2, r3
 8000e2e:	4b51      	ldr	r3, [pc, #324]	; (8000f74 <os_aes+0x5ec>)
 8000e30:	0092      	lsls	r2, r2, #2
 8000e32:	58d3      	ldr	r3, [r2, r3]
 8000e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e36:	4053      	eors	r3, r2
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	0e1a      	lsrs	r2, r3, #24
 8000e3e:	4b4e      	ldr	r3, [pc, #312]	; (8000f78 <os_aes+0x5f0>)
 8000e40:	0092      	lsls	r2, r2, #2
 8000e42:	58d3      	ldr	r3, [r2, r3]
 8000e44:	6a3a      	ldr	r2, [r7, #32]
 8000e46:	4053      	eors	r3, r2
 8000e48:	623b      	str	r3, [r7, #32]
            } while( (ki+=8) < ke );
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	3320      	adds	r3, #32
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697a      	ldr	r2, [r7, #20]
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d200      	bcs.n	8000e5a <os_aes+0x4d2>
 8000e58:	e6b7      	b.n	8000bca <os_aes+0x242>

            AES_key4 (t1,t2,t3,t0,4);
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	61bb      	str	r3, [r7, #24]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	691b      	ldr	r3, [r3, #16]
 8000e70:	61fb      	str	r3, [r7, #28]
            AES_expr4(t1,t2,t3,t0,a0);
 8000e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	001a      	movs	r2, r3
 8000e78:	4b3c      	ldr	r3, [pc, #240]	; (8000f6c <os_aes+0x5e4>)
 8000e7a:	0092      	lsls	r2, r2, #2
 8000e7c:	58d3      	ldr	r3, [r2, r3]
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4053      	eors	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
 8000e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e86:	0a1b      	lsrs	r3, r3, #8
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	001a      	movs	r2, r3
 8000e8c:	4b38      	ldr	r3, [pc, #224]	; (8000f70 <os_aes+0x5e8>)
 8000e8e:	0092      	lsls	r2, r2, #2
 8000e90:	58d3      	ldr	r3, [r2, r3]
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	4053      	eors	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e9a:	0c1b      	lsrs	r3, r3, #16
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	001a      	movs	r2, r3
 8000ea0:	4b34      	ldr	r3, [pc, #208]	; (8000f74 <os_aes+0x5ec>)
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	58d3      	ldr	r3, [r2, r3]
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	4053      	eors	r3, r2
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eae:	0e1a      	lsrs	r2, r3, #24
 8000eb0:	4b31      	ldr	r3, [pc, #196]	; (8000f78 <os_aes+0x5f0>)
 8000eb2:	0092      	lsls	r2, r2, #2
 8000eb4:	58d3      	ldr	r3, [r2, r3]
 8000eb6:	69fa      	ldr	r2, [r7, #28]
 8000eb8:	4053      	eors	r3, r2
 8000eba:	61fb      	str	r3, [r7, #28]
            AES_expr4(t2,t3,t0,t1,a1);
 8000ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <os_aes+0x5e4>)
 8000ec4:	0092      	lsls	r2, r2, #2
 8000ec6:	58d3      	ldr	r3, [r2, r3]
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	4053      	eors	r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	4b26      	ldr	r3, [pc, #152]	; (8000f70 <os_aes+0x5e8>)
 8000ed8:	0092      	lsls	r2, r2, #2
 8000eda:	58d3      	ldr	r3, [r2, r3]
 8000edc:	68ba      	ldr	r2, [r7, #8]
 8000ede:	4053      	eors	r3, r2
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee4:	0c1b      	lsrs	r3, r3, #16
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	001a      	movs	r2, r3
 8000eea:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <os_aes+0x5ec>)
 8000eec:	0092      	lsls	r2, r2, #2
 8000eee:	58d3      	ldr	r3, [r2, r3]
 8000ef0:	69fa      	ldr	r2, [r7, #28]
 8000ef2:	4053      	eors	r3, r2
 8000ef4:	61fb      	str	r3, [r7, #28]
 8000ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef8:	0e1a      	lsrs	r2, r3, #24
 8000efa:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <os_aes+0x5f0>)
 8000efc:	0092      	lsls	r2, r2, #2
 8000efe:	58d3      	ldr	r3, [r2, r3]
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4053      	eors	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
            AES_expr4(t3,t0,t1,t2,a2);
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	001a      	movs	r2, r3
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <os_aes+0x5e4>)
 8000f0e:	0092      	lsls	r2, r2, #2
 8000f10:	58d3      	ldr	r3, [r2, r3]
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	4053      	eors	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	0a1b      	lsrs	r3, r3, #8
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	001a      	movs	r2, r3
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <os_aes+0x5e8>)
 8000f22:	0092      	lsls	r2, r2, #2
 8000f24:	58d3      	ldr	r3, [r2, r3]
 8000f26:	69fa      	ldr	r2, [r7, #28]
 8000f28:	4053      	eors	r3, r2
 8000f2a:	61fb      	str	r3, [r7, #28]
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	0c1b      	lsrs	r3, r3, #16
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	001a      	movs	r2, r3
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <os_aes+0x5ec>)
 8000f36:	0092      	lsls	r2, r2, #2
 8000f38:	58d3      	ldr	r3, [r2, r3]
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4053      	eors	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f42:	0e1a      	lsrs	r2, r3, #24
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <os_aes+0x5f0>)
 8000f46:	0092      	lsls	r2, r2, #2
 8000f48:	58d3      	ldr	r3, [r2, r3]
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	4053      	eors	r3, r2
 8000f4e:	60fb      	str	r3, [r7, #12]
            AES_expr4(t0,t1,t2,t3,a3);
 8000f50:	6a3b      	ldr	r3, [r7, #32]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	001a      	movs	r2, r3
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <os_aes+0x5e4>)
 8000f58:	0092      	lsls	r2, r2, #2
 8000f5a:	58d3      	ldr	r3, [r2, r3]
 8000f5c:	69fa      	ldr	r2, [r7, #28]
 8000f5e:	4053      	eors	r3, r2
 8000f60:	e00c      	b.n	8000f7c <os_aes+0x5f4>
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	2000014c 	.word	0x2000014c
 8000f68:	2000009c 	.word	0x2000009c
 8000f6c:	0800c7f4 	.word	0x0800c7f4
 8000f70:	0800c3f4 	.word	0x0800c3f4
 8000f74:	0800bff4 	.word	0x0800bff4
 8000f78:	0800bbf4 	.word	0x0800bbf4
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	6a3b      	ldr	r3, [r7, #32]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	001a      	movs	r2, r3
 8000f86:	4bae      	ldr	r3, [pc, #696]	; (8001240 <os_aes+0x8b8>)
 8000f88:	0092      	lsls	r2, r2, #2
 8000f8a:	58d3      	ldr	r3, [r2, r3]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4053      	eors	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
 8000f92:	6a3b      	ldr	r3, [r7, #32]
 8000f94:	0c1b      	lsrs	r3, r3, #16
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	001a      	movs	r2, r3
 8000f9a:	4baa      	ldr	r3, [pc, #680]	; (8001244 <os_aes+0x8bc>)
 8000f9c:	0092      	lsls	r2, r2, #2
 8000f9e:	58d3      	ldr	r3, [r2, r3]
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	4053      	eors	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	6a3b      	ldr	r3, [r7, #32]
 8000fa8:	0e1a      	lsrs	r2, r3, #24
 8000faa:	4ba7      	ldr	r3, [pc, #668]	; (8001248 <os_aes+0x8c0>)
 8000fac:	0092      	lsls	r2, r2, #2
 8000fae:	58d3      	ldr	r3, [r2, r3]
 8000fb0:	68ba      	ldr	r2, [r7, #8]
 8000fb2:	4053      	eors	r3, r2
 8000fb4:	60bb      	str	r3, [r7, #8]

            AES_expr(a0,t0,t1,t2,t3,8);
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	6a1b      	ldr	r3, [r3, #32]
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	0e1b      	lsrs	r3, r3, #24
 8000fc0:	4aa2      	ldr	r2, [pc, #648]	; (800124c <os_aes+0x8c4>)
 8000fc2:	5cd3      	ldrb	r3, [r2, r3]
 8000fc4:	061b      	lsls	r3, r3, #24
 8000fc6:	001a      	movs	r2, r3
 8000fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fca:	4053      	eors	r3, r2
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	0c1b      	lsrs	r3, r3, #16
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	001a      	movs	r2, r3
 8000fd6:	4b9d      	ldr	r3, [pc, #628]	; (800124c <os_aes+0x8c4>)
 8000fd8:	5c9b      	ldrb	r3, [r3, r2]
 8000fda:	041b      	lsls	r3, r3, #16
 8000fdc:	001a      	movs	r2, r3
 8000fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe0:	4053      	eors	r3, r2
 8000fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	0a1b      	lsrs	r3, r3, #8
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	001a      	movs	r2, r3
 8000fec:	4b97      	ldr	r3, [pc, #604]	; (800124c <os_aes+0x8c4>)
 8000fee:	5c9b      	ldrb	r3, [r3, r2]
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	001a      	movs	r2, r3
 8000ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff6:	4053      	eors	r3, r2
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	001a      	movs	r2, r3
 8001000:	4b92      	ldr	r3, [pc, #584]	; (800124c <os_aes+0x8c4>)
 8001002:	5c9b      	ldrb	r3, [r3, r2]
 8001004:	001a      	movs	r2, r3
 8001006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001008:	4053      	eors	r3, r2
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
            AES_expr(a1,t1,t2,t3,t0,9);
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	0e1b      	lsrs	r3, r3, #24
 8001016:	4a8d      	ldr	r2, [pc, #564]	; (800124c <os_aes+0x8c4>)
 8001018:	5cd3      	ldrb	r3, [r2, r3]
 800101a:	061b      	lsls	r3, r3, #24
 800101c:	001a      	movs	r2, r3
 800101e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001020:	4053      	eors	r3, r2
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	0c1b      	lsrs	r3, r3, #16
 8001028:	b2db      	uxtb	r3, r3
 800102a:	001a      	movs	r2, r3
 800102c:	4b87      	ldr	r3, [pc, #540]	; (800124c <os_aes+0x8c4>)
 800102e:	5c9b      	ldrb	r3, [r3, r2]
 8001030:	041b      	lsls	r3, r3, #16
 8001032:	001a      	movs	r2, r3
 8001034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001036:	4053      	eors	r3, r2
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	b2db      	uxtb	r3, r3
 8001040:	001a      	movs	r2, r3
 8001042:	4b82      	ldr	r3, [pc, #520]	; (800124c <os_aes+0x8c4>)
 8001044:	5c9b      	ldrb	r3, [r3, r2]
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	001a      	movs	r2, r3
 800104a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800104c:	4053      	eors	r3, r2
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	001a      	movs	r2, r3
 8001056:	4b7d      	ldr	r3, [pc, #500]	; (800124c <os_aes+0x8c4>)
 8001058:	5c9b      	ldrb	r3, [r3, r2]
 800105a:	001a      	movs	r2, r3
 800105c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800105e:	4053      	eors	r3, r2
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
            AES_expr(a2,t2,t3,t0,t1,10);
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	0e1b      	lsrs	r3, r3, #24
 800106c:	4a77      	ldr	r2, [pc, #476]	; (800124c <os_aes+0x8c4>)
 800106e:	5cd3      	ldrb	r3, [r2, r3]
 8001070:	061b      	lsls	r3, r3, #24
 8001072:	001a      	movs	r2, r3
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	4053      	eors	r3, r2
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	0c1b      	lsrs	r3, r3, #16
 800107e:	b2db      	uxtb	r3, r3
 8001080:	001a      	movs	r2, r3
 8001082:	4b72      	ldr	r3, [pc, #456]	; (800124c <os_aes+0x8c4>)
 8001084:	5c9b      	ldrb	r3, [r3, r2]
 8001086:	041b      	lsls	r3, r3, #16
 8001088:	001a      	movs	r2, r3
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	4053      	eors	r3, r2
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	0a1b      	lsrs	r3, r3, #8
 8001094:	b2db      	uxtb	r3, r3
 8001096:	001a      	movs	r2, r3
 8001098:	4b6c      	ldr	r3, [pc, #432]	; (800124c <os_aes+0x8c4>)
 800109a:	5c9b      	ldrb	r3, [r3, r2]
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	001a      	movs	r2, r3
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	4053      	eors	r3, r2
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	001a      	movs	r2, r3
 80010ac:	4b67      	ldr	r3, [pc, #412]	; (800124c <os_aes+0x8c4>)
 80010ae:	5c9b      	ldrb	r3, [r3, r2]
 80010b0:	001a      	movs	r2, r3
 80010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b4:	4053      	eors	r3, r2
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
            AES_expr(a3,t3,t0,t1,t2,11);
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010bc:	623b      	str	r3, [r7, #32]
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	0e1b      	lsrs	r3, r3, #24
 80010c2:	4a62      	ldr	r2, [pc, #392]	; (800124c <os_aes+0x8c4>)
 80010c4:	5cd3      	ldrb	r3, [r2, r3]
 80010c6:	061b      	lsls	r3, r3, #24
 80010c8:	001a      	movs	r2, r3
 80010ca:	6a3b      	ldr	r3, [r7, #32]
 80010cc:	4053      	eors	r3, r2
 80010ce:	623b      	str	r3, [r7, #32]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	0c1b      	lsrs	r3, r3, #16
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	001a      	movs	r2, r3
 80010d8:	4b5c      	ldr	r3, [pc, #368]	; (800124c <os_aes+0x8c4>)
 80010da:	5c9b      	ldrb	r3, [r3, r2]
 80010dc:	041b      	lsls	r3, r3, #16
 80010de:	001a      	movs	r2, r3
 80010e0:	6a3b      	ldr	r3, [r7, #32]
 80010e2:	4053      	eors	r3, r2
 80010e4:	623b      	str	r3, [r7, #32]
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	0a1b      	lsrs	r3, r3, #8
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	001a      	movs	r2, r3
 80010ee:	4b57      	ldr	r3, [pc, #348]	; (800124c <os_aes+0x8c4>)
 80010f0:	5c9b      	ldrb	r3, [r3, r2]
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	001a      	movs	r2, r3
 80010f6:	6a3b      	ldr	r3, [r7, #32]
 80010f8:	4053      	eors	r3, r2
 80010fa:	623b      	str	r3, [r7, #32]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	001a      	movs	r2, r3
 8001102:	4b52      	ldr	r3, [pc, #328]	; (800124c <os_aes+0x8c4>)
 8001104:	5c9b      	ldrb	r3, [r3, r2]
 8001106:	001a      	movs	r2, r3
 8001108:	6a3b      	ldr	r3, [r7, #32]
 800110a:	4053      	eors	r3, r2
 800110c:	623b      	str	r3, [r7, #32]
            // result of AES encryption in a0-a3

            if( mode & AES_MIC ) {
 800110e:	1dfb      	adds	r3, r7, #7
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2202      	movs	r2, #2
 8001114:	4013      	ands	r3, r2
 8001116:	d05a      	beq.n	80011ce <os_aes+0x846>
                if( (t1 = (mode & AES_MICSUB) >> 4) != 0 ) { // last block
 8001118:	1dfb      	adds	r3, r7, #7
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	111b      	asrs	r3, r3, #4
 800111e:	001a      	movs	r2, r3
 8001120:	2303      	movs	r3, #3
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d043      	beq.n	80011b4 <os_aes+0x82c>
                    do {
                        // compute CMAC subkey K1 and K2
                        t0 = a0 >> 31; // save MSB
 800112c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112e:	0fdb      	lsrs	r3, r3, #31
 8001130:	61fb      	str	r3, [r7, #28]
                        a0 = (a0 << 1) | (a1 >> 31);
 8001132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001134:	005a      	lsls	r2, r3, #1
 8001136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001138:	0fdb      	lsrs	r3, r3, #31
 800113a:	4313      	orrs	r3, r2
 800113c:	62fb      	str	r3, [r7, #44]	; 0x2c
                        a1 = (a1 << 1) | (a2 >> 31);
 800113e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001140:	005a      	lsls	r2, r3, #1
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	0fdb      	lsrs	r3, r3, #31
 8001146:	4313      	orrs	r3, r2
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
                        a2 = (a2 << 1) | (a3 >> 31);
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	005a      	lsls	r2, r3, #1
 800114e:	6a3b      	ldr	r3, [r7, #32]
 8001150:	0fdb      	lsrs	r3, r3, #31
 8001152:	4313      	orrs	r3, r2
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
                        a3 = (a3 << 1);
 8001156:	6a3b      	ldr	r3, [r7, #32]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	623b      	str	r3, [r7, #32]
                        if( t0 ) a3 ^= 0x87;
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <os_aes+0x7e2>
 8001162:	6a3b      	ldr	r3, [r7, #32]
 8001164:	2287      	movs	r2, #135	; 0x87
 8001166:	4053      	eors	r3, r2
 8001168:	623b      	str	r3, [r7, #32]
                    } while( --t1 );
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	3b01      	subs	r3, #1
 800116e:	61bb      	str	r3, [r7, #24]
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1da      	bne.n	800112c <os_aes+0x7a4>

                    AESAUX[0] ^= a0;
 8001176:	4b36      	ldr	r3, [pc, #216]	; (8001250 <os_aes+0x8c8>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800117c:	405a      	eors	r2, r3
 800117e:	4b34      	ldr	r3, [pc, #208]	; (8001250 <os_aes+0x8c8>)
 8001180:	601a      	str	r2, [r3, #0]
                    AESAUX[1] ^= a1;
 8001182:	4b33      	ldr	r3, [pc, #204]	; (8001250 <os_aes+0x8c8>)
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001188:	405a      	eors	r2, r3
 800118a:	4b31      	ldr	r3, [pc, #196]	; (8001250 <os_aes+0x8c8>)
 800118c:	605a      	str	r2, [r3, #4]
                    AESAUX[2] ^= a2;
 800118e:	4b30      	ldr	r3, [pc, #192]	; (8001250 <os_aes+0x8c8>)
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	405a      	eors	r2, r3
 8001196:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <os_aes+0x8c8>)
 8001198:	609a      	str	r2, [r3, #8]
                    AESAUX[3] ^= a3;
 800119a:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <os_aes+0x8c8>)
 800119c:	68da      	ldr	r2, [r3, #12]
 800119e:	6a3b      	ldr	r3, [r7, #32]
 80011a0:	405a      	eors	r2, r3
 80011a2:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <os_aes+0x8c8>)
 80011a4:	60da      	str	r2, [r3, #12]
                    mode &= ~AES_MICSUB;
 80011a6:	1dfb      	adds	r3, r7, #7
 80011a8:	1dfa      	adds	r2, r7, #7
 80011aa:	7812      	ldrb	r2, [r2, #0]
 80011ac:	2130      	movs	r1, #48	; 0x30
 80011ae:	438a      	bics	r2, r1
 80011b0:	701a      	strb	r2, [r3, #0]
                    goto LOADDATA;
 80011b2:	e4a7      	b.n	8000b04 <os_aes+0x17c>
                } else {
                    // save cipher block as new iv
                    AESAUX[0] = a0;
 80011b4:	4b26      	ldr	r3, [pc, #152]	; (8001250 <os_aes+0x8c8>)
 80011b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011b8:	601a      	str	r2, [r3, #0]
                    AESAUX[1] = a1;
 80011ba:	4b25      	ldr	r3, [pc, #148]	; (8001250 <os_aes+0x8c8>)
 80011bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011be:	605a      	str	r2, [r3, #4]
                    AESAUX[2] = a2;
 80011c0:	4b23      	ldr	r3, [pc, #140]	; (8001250 <os_aes+0x8c8>)
 80011c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011c4:	609a      	str	r2, [r3, #8]
                    AESAUX[3] = a3;
 80011c6:	4b22      	ldr	r3, [pc, #136]	; (8001250 <os_aes+0x8c8>)
 80011c8:	6a3a      	ldr	r2, [r7, #32]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	e09d      	b.n	800130a <os_aes+0x982>
                }
            } else { // CIPHER
                if( mode & AES_CTR ) { // xor block (partially)
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2204      	movs	r2, #4
 80011d4:	4013      	ands	r3, r2
 80011d6:	d03d      	beq.n	8001254 <os_aes+0x8cc>
                    t0 = (len > 16) ? 16: len;
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	2a10      	cmp	r2, #16
 80011e0:	d900      	bls.n	80011e4 <os_aes+0x85c>
 80011e2:	2310      	movs	r3, #16
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	61fb      	str	r3, [r7, #28]
                    for(t1=0; t1<t0; t1++) {
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]
 80011ec:	e01d      	b.n	800122a <os_aes+0x8a2>
                        buf[t1] ^= (a0>>24);
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	18d3      	adds	r3, r2, r3
 80011f4:	7819      	ldrb	r1, [r3, #0]
 80011f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f8:	0e1b      	lsrs	r3, r3, #24
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	6838      	ldr	r0, [r7, #0]
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	18c3      	adds	r3, r0, r3
 8001202:	404a      	eors	r2, r1
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	701a      	strb	r2, [r3, #0]
                        a0 <<= 8;
 8001208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
                        if((t1&3)==3) {
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	2203      	movs	r2, #3
 8001212:	4013      	ands	r3, r2
 8001214:	2b03      	cmp	r3, #3
 8001216:	d105      	bne.n	8001224 <os_aes+0x89c>
                            a0 = a1;
 8001218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
                            a1 = a2;
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
                            a2 = a3;
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
                    for(t1=0; t1<t0; t1++) {
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	3301      	adds	r3, #1
 8001228:	61bb      	str	r3, [r7, #24]
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	429a      	cmp	r2, r3
 8001230:	d3dd      	bcc.n	80011ee <os_aes+0x866>
                        }
                    }
                    // update counter
                    AESAUX[3]++;
 8001232:	4b07      	ldr	r3, [pc, #28]	; (8001250 <os_aes+0x8c8>)
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <os_aes+0x8c8>)
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	e065      	b.n	800130a <os_aes+0x982>
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	0800c3f4 	.word	0x0800c3f4
 8001244:	0800bff4 	.word	0x0800bff4
 8001248:	0800bbf4 	.word	0x0800bbf4
 800124c:	0800baf4 	.word	0x0800baf4
 8001250:	2000014c 	.word	0x2000014c
                } else { // ECB
                    // store block
                    msbf4_write(buf+0,  a0);
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	0e1b      	lsrs	r3, r3, #24
 8001258:	b2da      	uxtb	r2, r3
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	701a      	strb	r2, [r3, #0]
 800125e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001260:	0c1a      	lsrs	r2, r3, #16
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	3301      	adds	r3, #1
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	701a      	strb	r2, [r3, #0]
 800126a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800126c:	0a1a      	lsrs	r2, r3, #8
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	3302      	adds	r3, #2
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	3303      	adds	r3, #3
 800127a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+4,  a1);
 8001280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001282:	0e1a      	lsrs	r2, r3, #24
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	3304      	adds	r3, #4
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	701a      	strb	r2, [r3, #0]
 800128c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128e:	0c1a      	lsrs	r2, r3, #16
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	3305      	adds	r3, #5
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	701a      	strb	r2, [r3, #0]
 8001298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129a:	0a1a      	lsrs	r2, r3, #8
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	3306      	adds	r3, #6
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	701a      	strb	r2, [r3, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	3307      	adds	r3, #7
 80012a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+8,  a2);
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	0e1a      	lsrs	r2, r3, #24
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	3308      	adds	r3, #8
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	701a      	strb	r2, [r3, #0]
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	0c1a      	lsrs	r2, r3, #16
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	3309      	adds	r3, #9
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	701a      	strb	r2, [r3, #0]
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	0a1a      	lsrs	r2, r3, #8
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	330a      	adds	r3, #10
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	701a      	strb	r2, [r3, #0]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	330b      	adds	r3, #11
 80012d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+12, a3);
 80012dc:	6a3b      	ldr	r3, [r7, #32]
 80012de:	0e1a      	lsrs	r2, r3, #24
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	330c      	adds	r3, #12
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	0c1a      	lsrs	r2, r3, #16
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	330d      	adds	r3, #13
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	701a      	strb	r2, [r3, #0]
 80012f4:	6a3b      	ldr	r3, [r7, #32]
 80012f6:	0a1a      	lsrs	r2, r3, #8
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	330e      	adds	r3, #14
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	701a      	strb	r2, [r3, #0]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	330f      	adds	r3, #15
 8001304:	6a3a      	ldr	r2, [r7, #32]
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	701a      	strb	r2, [r3, #0]
                }
            }

            // update block state
            if( (mode & AES_MIC)==0 || (mode & AES_MICNOAUX) ) {
 800130a:	1dfb      	adds	r3, r7, #7
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2202      	movs	r2, #2
 8001310:	4013      	ands	r3, r2
 8001312:	d004      	beq.n	800131e <os_aes+0x996>
 8001314:	1dfb      	adds	r3, r7, #7
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2208      	movs	r2, #8
 800131a:	4013      	ands	r3, r2
 800131c:	d007      	beq.n	800132e <os_aes+0x9a6>
                buf += 16;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	3310      	adds	r3, #16
 8001322:	603b      	str	r3, [r7, #0]
                len -= 16;
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	1d3a      	adds	r2, r7, #4
 8001328:	8812      	ldrh	r2, [r2, #0]
 800132a:	3a10      	subs	r2, #16
 800132c:	801a      	strh	r2, [r3, #0]
            }
            mode |= AES_MICNOAUX;
 800132e:	1dfb      	adds	r3, r7, #7
 8001330:	1dfa      	adds	r2, r7, #7
 8001332:	7812      	ldrb	r2, [r2, #0]
 8001334:	2108      	movs	r1, #8
 8001336:	430a      	orrs	r2, r1
 8001338:	701a      	strb	r2, [r3, #0]
        while( (signed char)len > 0 ) {
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	b25b      	sxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	dd01      	ble.n	8001348 <os_aes+0x9c0>
 8001344:	f7ff fba1 	bl	8000a8a <os_aes+0x102>
        }
        return AESAUX[0];
 8001348:	4b02      	ldr	r3, [pc, #8]	; (8001354 <os_aes+0x9cc>)
 800134a:	681b      	ldr	r3, [r3, #0]
}
 800134c:	0018      	movs	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	b00c      	add	sp, #48	; 0x30
 8001352:	bd80      	pop	{r7, pc}
 8001354:	2000014c 	.word	0x2000014c

08001358 <debug_init>:

/*  ************************************** */
/*    DO NOT CHANGE BELOW THIS LINE        */
/*  ************************************** */

void debug_init () {
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
    // configure LED pin as output
    debug_led(0);
 800135c:	2000      	movs	r0, #0
 800135e:	f000 f809 	bl	8001374 <debug_led>

    // configure USART1 (115200/8N1, tx-only)

    // print banner
    debug_str("\r\n============== DEBUG STARTED ==============\r\n");
 8001362:	4b03      	ldr	r3, [pc, #12]	; (8001370 <debug_init+0x18>)
 8001364:	0018      	movs	r0, r3
 8001366:	f000 f876 	bl	8001456 <debug_str>
}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	0800b604 	.word	0x0800b604

08001374 <debug_led>:

void debug_led (int val) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,val);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	23a0      	movs	r3, #160	; 0xa0
 8001382:	05db      	lsls	r3, r3, #23
 8001384:	2120      	movs	r1, #32
 8001386:	0018      	movs	r0, r3
 8001388:	f005 fdfc 	bl	8006f84 <HAL_GPIO_WritePin>
}
 800138c:	46c0      	nop			; (mov r8, r8)
 800138e:	46bd      	mov	sp, r7
 8001390:	b002      	add	sp, #8
 8001392:	bd80      	pop	{r7, pc}

08001394 <debug_char>:

void debug_char (char c) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	0002      	movs	r2, r0
 800139c:	1dfb      	adds	r3, r7, #7
 800139e:	701a      	strb	r2, [r3, #0]
  char buffer[] = "";
 80013a0:	210c      	movs	r1, #12
 80013a2:	187b      	adds	r3, r7, r1
 80013a4:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <debug_char+0x34>)
 80013a6:	7812      	ldrb	r2, [r2, #0]
 80013a8:	701a      	strb	r2, [r3, #0]
  buffer[0]= c;
 80013aa:	187b      	adds	r3, r7, r1
 80013ac:	1dfa      	adds	r2, r7, #7
 80013ae:	7812      	ldrb	r2, [r2, #0]
 80013b0:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&myUART,buffer,sizeof(buffer),HAL_MAX_DELAY);
 80013b2:	2301      	movs	r3, #1
 80013b4:	425b      	negs	r3, r3
 80013b6:	1879      	adds	r1, r7, r1
 80013b8:	4804      	ldr	r0, [pc, #16]	; (80013cc <debug_char+0x38>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	f009 fa66 	bl	800a88c <HAL_UART_Transmit>
}
 80013c0:	46c0      	nop			; (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b004      	add	sp, #16
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	0800b634 	.word	0x0800b634
 80013cc:	20000200 	.word	0x20000200

080013d0 <debug_hex>:

void debug_hex (u1_t b) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	0002      	movs	r2, r0
 80013d8:	1dfb      	adds	r3, r7, #7
 80013da:	701a      	strb	r2, [r3, #0]
    debug_char("0123456789ABCDEF"[b>>4]);
 80013dc:	1dfb      	adds	r3, r7, #7
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	091b      	lsrs	r3, r3, #4
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	001a      	movs	r2, r3
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <debug_hex+0x3c>)
 80013e8:	5c9b      	ldrb	r3, [r3, r2]
 80013ea:	0018      	movs	r0, r3
 80013ec:	f7ff ffd2 	bl	8001394 <debug_char>
    debug_char("0123456789ABCDEF"[b&0xF]);
 80013f0:	1dfb      	adds	r3, r7, #7
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	220f      	movs	r2, #15
 80013f6:	4013      	ands	r3, r2
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <debug_hex+0x3c>)
 80013fa:	5cd3      	ldrb	r3, [r2, r3]
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff ffc9 	bl	8001394 <debug_char>
}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	46bd      	mov	sp, r7
 8001406:	b002      	add	sp, #8
 8001408:	bd80      	pop	{r7, pc}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	0800b638 	.word	0x0800b638

08001410 <debug_uint>:
    }
    debug_char('\r');
    debug_char('\n');
}

void debug_uint (u4_t v) {
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
    for(s1_t n=24; n>=0; n-=8) {
 8001418:	230f      	movs	r3, #15
 800141a:	18fb      	adds	r3, r7, r3
 800141c:	2218      	movs	r2, #24
 800141e:	701a      	strb	r2, [r3, #0]
 8001420:	e010      	b.n	8001444 <debug_uint+0x34>
        debug_hex(v>>n);
 8001422:	240f      	movs	r4, #15
 8001424:	193b      	adds	r3, r7, r4
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b25b      	sxtb	r3, r3
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	40da      	lsrs	r2, r3
 800142e:	0013      	movs	r3, r2
 8001430:	b2db      	uxtb	r3, r3
 8001432:	0018      	movs	r0, r3
 8001434:	f7ff ffcc 	bl	80013d0 <debug_hex>
    for(s1_t n=24; n>=0; n-=8) {
 8001438:	193b      	adds	r3, r7, r4
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	3b08      	subs	r3, #8
 800143e:	b2da      	uxtb	r2, r3
 8001440:	193b      	adds	r3, r7, r4
 8001442:	701a      	strb	r2, [r3, #0]
 8001444:	230f      	movs	r3, #15
 8001446:	18fb      	adds	r3, r7, r3
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b7f      	cmp	r3, #127	; 0x7f
 800144c:	d9e9      	bls.n	8001422 <debug_uint+0x12>
    }
}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	46bd      	mov	sp, r7
 8001452:	b005      	add	sp, #20
 8001454:	bd90      	pop	{r4, r7, pc}

08001456 <debug_str>:
    int n = debug_fmt(buf, sizeof(buf), v, 10, 0, 0);
    while(n--)
        debug_char(*p++);
}

void debug_str (const char* str) {
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
    while(*str) {
 800145e:	e006      	b.n	800146e <debug_str+0x18>
        debug_char(*str++);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	0018      	movs	r0, r3
 800146a:	f7ff ff93 	bl	8001394 <debug_char>
    while(*str) {
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f4      	bne.n	8001460 <debug_str+0xa>
    }
}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	46bd      	mov	sp, r7
 800147a:	b002      	add	sp, #8
 800147c:	bd80      	pop	{r7, pc}

0800147e <debug_val>:

void debug_val (const char* label, u4_t val) {
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	6039      	str	r1, [r7, #0]
    debug_str(label);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	0018      	movs	r0, r3
 800148c:	f7ff ffe3 	bl	8001456 <debug_str>
    debug_uint(val);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	0018      	movs	r0, r3
 8001494:	f7ff ffbc 	bl	8001410 <debug_uint>
    debug_char('\r');
 8001498:	200d      	movs	r0, #13
 800149a:	f7ff ff7b 	bl	8001394 <debug_char>
    debug_char('\n');
 800149e:	200a      	movs	r0, #10
 80014a0:	f7ff ff78 	bl	8001394 <debug_char>
}
 80014a4:	46c0      	nop			; (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b002      	add	sp, #8
 80014aa:	bd80      	pop	{r7, pc}

080014ac <debug_event>:
    while( b-buf < max && p > num );
    // return number of characters written
    return b - buf;
}

void debug_event (int ev) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
        [EV_LINK_DEAD]      = "LINK_DEAD",
        [EV_LINK_ALIVE]     = "LINK_ALIVE",
        [EV_SCAN_FOUND]     = "SCAN_FOUND",
        [EV_TXSTART]        = "EV_TXSTART",
    };
    debug_str((ev < sizeof(evnames)/sizeof(evnames[0])) ? evnames[ev] : "EV_UNKNOWN" );
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b11      	cmp	r3, #17
 80014b8:	d804      	bhi.n	80014c4 <debug_event+0x18>
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <debug_event+0x34>)
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	0092      	lsls	r2, r2, #2
 80014c0:	58d3      	ldr	r3, [r2, r3]
 80014c2:	e000      	b.n	80014c6 <debug_event+0x1a>
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <debug_event+0x38>)
 80014c6:	0018      	movs	r0, r3
 80014c8:	f7ff ffc5 	bl	8001456 <debug_str>
    debug_char('\r');
 80014cc:	200d      	movs	r0, #13
 80014ce:	f7ff ff61 	bl	8001394 <debug_char>
    debug_char('\n');
 80014d2:	200a      	movs	r0, #10
 80014d4:	f7ff ff5e 	bl	8001394 <debug_char>
}
 80014d8:	46c0      	nop			; (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	b002      	add	sp, #8
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000000 	.word	0x20000000
 80014e4:	0800b64c 	.word	0x0800b64c

080014e8 <hal_io_init>:
} HAL;

// -----------------------------------------------------------------------------
// I/O

static void hal_io_init () {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	//already done by cubemx
}
 80014ec:	46c0      	nop			; (mov r8, r8)
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <hal_pin_rxtx>:

// val ==1  => tx 1, rx 0 ; val == 0 => tx 0, rx 1
void hal_pin_rxtx (u1_t val) {
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	0002      	movs	r2, r0
 80014fa:	1dfb      	adds	r3, r7, #7
 80014fc:	701a      	strb	r2, [r3, #0]
  #ifdef TX_GPIO_Port
    HAL_GPIO_WritePin(RX_GPIO_Port,RX_Pin,~val);
    HAL_GPIO_WritePin(TX_GPIO_Port,TX_Pin,val);
  #endif
#endif
}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	46bd      	mov	sp, r7
 8001502:	b002      	add	sp, #8
 8001504:	bd80      	pop	{r7, pc}

08001506 <hal_pin_nss>:

// set radio NSS pin to given value
void hal_pin_nss (u1_t val) {
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	0002      	movs	r2, r0
 800150e:	1dfb      	adds	r3, r7, #7
 8001510:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(NSS_GPIO_Port,NSS_Pin,val);
 8001512:	1dfb      	adds	r3, r7, #7
 8001514:	781a      	ldrb	r2, [r3, #0]
 8001516:	2380      	movs	r3, #128	; 0x80
 8001518:	0219      	lsls	r1, r3, #8
 800151a:	23a0      	movs	r3, #160	; 0xa0
 800151c:	05db      	lsls	r3, r3, #23
 800151e:	0018      	movs	r0, r3
 8001520:	f005 fd30 	bl	8006f84 <HAL_GPIO_WritePin>
}
 8001524:	46c0      	nop			; (mov r8, r8)
 8001526:	46bd      	mov	sp, r7
 8001528:	b002      	add	sp, #8
 800152a:	bd80      	pop	{r7, pc}

0800152c <hal_pin_rst>:

// set radio RST pin to given value (or keep floating!)
void hal_pin_rst (u1_t val) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b08c      	sub	sp, #48	; 0x30
 8001530:	af00      	add	r7, sp, #0
 8001532:	0002      	movs	r2, r0
 8001534:	1dfb      	adds	r3, r7, #7
 8001536:	701a      	strb	r2, [r3, #0]
    if(val == 0 || val == 1) { // drive pin
 8001538:	1dfb      	adds	r3, r7, #7
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <hal_pin_rst+0x1c>
 8001540:	1dfb      	adds	r3, r7, #7
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d117      	bne.n	8001578 <hal_pin_rst+0x4c>
    	GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 8001548:	211c      	movs	r1, #28
 800154a:	187b      	adds	r3, r7, r1
 800154c:	2201      	movs	r2, #1
 800154e:	601a      	str	r2, [r3, #0]
    	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001550:	187b      	adds	r3, r7, r1
 8001552:	2201      	movs	r2, #1
 8001554:	605a      	str	r2, [r3, #4]
    	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	187b      	adds	r3, r7, r1
 8001558:	2200      	movs	r2, #0
 800155a:	60da      	str	r2, [r3, #12]
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 800155c:	187b      	adds	r3, r7, r1
 800155e:	4a10      	ldr	r2, [pc, #64]	; (80015a0 <hal_pin_rst+0x74>)
 8001560:	0019      	movs	r1, r3
 8001562:	0010      	movs	r0, r2
 8001564:	f005 fa7e 	bl	8006a64 <HAL_GPIO_Init>

    	HAL_GPIO_WritePin(RST_GPIO_Port,RST_Pin,val);
 8001568:	1dfb      	adds	r3, r7, #7
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	480c      	ldr	r0, [pc, #48]	; (80015a0 <hal_pin_rst+0x74>)
 800156e:	001a      	movs	r2, r3
 8001570:	2101      	movs	r1, #1
 8001572:	f005 fd07 	bl	8006f84 <HAL_GPIO_WritePin>
    if(val == 0 || val == 1) { // drive pin
 8001576:	e00f      	b.n	8001598 <hal_pin_rst+0x6c>

    } else { // keep pin floating
        GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 8001578:	2108      	movs	r1, #8
 800157a:	187b      	adds	r3, r7, r1
 800157c:	2201      	movs	r2, #1
 800157e:	601a      	str	r2, [r3, #0]
    	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001580:	187b      	adds	r3, r7, r1
 8001582:	2200      	movs	r2, #0
 8001584:	605a      	str	r2, [r3, #4]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	187b      	adds	r3, r7, r1
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 800158c:	187b      	adds	r3, r7, r1
 800158e:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <hal_pin_rst+0x74>)
 8001590:	0019      	movs	r1, r3
 8001592:	0010      	movs	r0, r2
 8001594:	f005 fa66 	bl	8006a64 <HAL_GPIO_Init>
    }
}
 8001598:	46c0      	nop			; (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	b00c      	add	sp, #48	; 0x30
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	50000800 	.word	0x50000800

080015a4 <HAL_GPIO_EXTI_Callback>:

extern void radio_irq_handler(u1_t dio);

// generic EXTI IRQ handler for all channels
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin_int){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	0002      	movs	r2, r0
 80015ac:	1dbb      	adds	r3, r7, #6
 80015ae:	801a      	strh	r2, [r3, #0]
	// DIO 0
	if(GPIO_Pin_int == DIO0_Pin) {
 80015b0:	1dbb      	adds	r3, r7, #6
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	2b10      	cmp	r3, #16
 80015b6:	d102      	bne.n	80015be <HAL_GPIO_EXTI_Callback+0x1a>
		// invoke radio handler (on IRQ!)
		radio_irq_handler(0);
 80015b8:	2000      	movs	r0, #0
 80015ba:	f004 fe4d 	bl	8006258 <radio_irq_handler>
	}
	// DIO 1
	if(GPIO_Pin_int == DIO1_Pin) {
 80015be:	1dbb      	adds	r3, r7, #6
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d102      	bne.n	80015cc <HAL_GPIO_EXTI_Callback+0x28>
	    // invoke radio handler (on IRQ!)
		radio_irq_handler(1);
 80015c6:	2001      	movs	r0, #1
 80015c8:	f004 fe46 	bl	8006258 <radio_irq_handler>
	}
	// DIO 2
	if(GPIO_Pin_int == DIO2_Pin) {
 80015cc:	1dbb      	adds	r3, r7, #6
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d102      	bne.n	80015da <HAL_GPIO_EXTI_Callback+0x36>
	    // invoke radio handler (on IRQ!)
	    radio_irq_handler(2);
 80015d4:	2002      	movs	r0, #2
 80015d6:	f004 fe3f 	bl	8006258 <radio_irq_handler>
	}
}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	46bd      	mov	sp, r7
 80015de:	b002      	add	sp, #8
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <hal_spi_init>:

// -----------------------------------------------------------------------------
// SPI
void hal_spi_init () {
 80015e2:	b580      	push	{r7, lr}
 80015e4:	af00      	add	r7, sp, #0
	// already done by cube mx
}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <hal_spi>:

// perform SPI transaction with radio
u1_t hal_spi (u1_t out) {
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af02      	add	r7, sp, #8
 80015f2:	0002      	movs	r2, r0
 80015f4:	1dfb      	adds	r3, r7, #7
 80015f6:	701a      	strb	r2, [r3, #0]
	char outbuffer[] ="";
 80015f8:	210c      	movs	r1, #12
 80015fa:	187b      	adds	r3, r7, r1
 80015fc:	4a0e      	ldr	r2, [pc, #56]	; (8001638 <hal_spi+0x4c>)
 80015fe:	7812      	ldrb	r2, [r2, #0]
 8001600:	701a      	strb	r2, [r3, #0]
	char inbuffer[] ="";
 8001602:	2008      	movs	r0, #8
 8001604:	183b      	adds	r3, r7, r0
 8001606:	4a0c      	ldr	r2, [pc, #48]	; (8001638 <hal_spi+0x4c>)
 8001608:	7812      	ldrb	r2, [r2, #0]
 800160a:	701a      	strb	r2, [r3, #0]
	outbuffer[0] = out;
 800160c:	187b      	adds	r3, r7, r1
 800160e:	1dfa      	adds	r2, r7, #7
 8001610:	7812      	ldrb	r2, [r2, #0]
 8001612:	701a      	strb	r2, [r3, #0]
	HAL_SPI_TransmitReceive(&mySPI,outbuffer,inbuffer,sizeof(outbuffer),HAL_MAX_DELAY);
 8001614:	0004      	movs	r4, r0
 8001616:	183a      	adds	r2, r7, r0
 8001618:	1879      	adds	r1, r7, r1
 800161a:	4808      	ldr	r0, [pc, #32]	; (800163c <hal_spi+0x50>)
 800161c:	2301      	movs	r3, #1
 800161e:	425b      	negs	r3, r3
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2301      	movs	r3, #1
 8001624:	f007 fc18 	bl	8008e58 <HAL_SPI_TransmitReceive>
	return inbuffer[0];
 8001628:	0020      	movs	r0, r4
 800162a:	183b      	adds	r3, r7, r0
 800162c:	781b      	ldrb	r3, [r3, #0]
}
 800162e:	0018      	movs	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	b005      	add	sp, #20
 8001634:	bd90      	pop	{r4, r7, pc}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	0800b728 	.word	0x0800b728
 800163c:	200001a8 	.word	0x200001a8

08001640 <hal_time_init>:


// -----------------------------------------------------------------------------
// TIME
static void hal_time_init () {
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	// already done by cubemx
}
 8001644:	46c0      	nop			; (mov r8, r8)
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <hal_ticks>:

u4_t hal_ticks () {
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 8001652:	f000 f8b7 	bl	80017c4 <hal_disableIRQs>
    u4_t t = HAL.ticks;
 8001656:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <hal_ticks+0x5c>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	607b      	str	r3, [r7, #4]
    u2_t cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <hal_ticks+0x60>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001662:	1cbb      	adds	r3, r7, #2
 8001664:	801a      	strh	r2, [r3, #0]
    if(__HAL_TIM_GET_FLAG(&myTIMER, TIM_FLAG_CC1) != RESET){
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <hal_ticks+0x60>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	2202      	movs	r2, #2
 800166e:	4013      	ands	r3, r2
 8001670:	2b02      	cmp	r3, #2
 8001672:	d10e      	bne.n	8001692 <hal_ticks+0x46>
    	if(__HAL_TIM_GET_IT_SOURCE(&myTIMER, TIM_IT_CC1) !=RESET){
 8001674:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <hal_ticks+0x60>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2202      	movs	r2, #2
 800167c:	4013      	ands	r3, r2
 800167e:	2b02      	cmp	r3, #2
 8001680:	d107      	bne.n	8001692 <hal_ticks+0x46>
    		cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <hal_ticks+0x60>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001688:	1cbb      	adds	r3, r7, #2
 800168a:	801a      	strh	r2, [r3, #0]
    		t++;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3301      	adds	r3, #1
 8001690:	607b      	str	r3, [r7, #4]
        }
     }
    hal_enableIRQs();
 8001692:	f000 f8a5 	bl	80017e0 <hal_enableIRQs>
    return (t<<16)|cnt;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	041a      	lsls	r2, r3, #16
 800169a:	1cbb      	adds	r3, r7, #2
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	4313      	orrs	r3, r2
}
 80016a0:	0018      	movs	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b002      	add	sp, #8
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000070 	.word	0x20000070
 80016ac:	20000284 	.word	0x20000284

080016b0 <deltaticks>:

// return modified delta ticks from now to specified ticktime (0 for past, FFFF for far future)
static u2_t deltaticks (u4_t time) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
    u4_t t = hal_ticks();
 80016b8:	f7ff ffc8 	bl	800164c <hal_ticks>
 80016bc:	0003      	movs	r3, r0
 80016be:	60fb      	str	r3, [r7, #12]
    s4_t d = time - t;
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	60bb      	str	r3, [r7, #8]
    if( d<=0 ) return 0;    // in the past
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	dc01      	bgt.n	80016d2 <deltaticks+0x22>
 80016ce:	2300      	movs	r3, #0
 80016d0:	e006      	b.n	80016e0 <deltaticks+0x30>
    if( (d>>16)!=0 ) return 0xFFFF; // far ahead
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	141b      	asrs	r3, r3, #16
 80016d6:	d001      	beq.n	80016dc <deltaticks+0x2c>
 80016d8:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <deltaticks+0x38>)
 80016da:	e001      	b.n	80016e0 <deltaticks+0x30>
    return (u2_t)d;
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	b29b      	uxth	r3, r3
}
 80016e0:	0018      	movs	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b004      	add	sp, #16
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	0000ffff 	.word	0x0000ffff

080016ec <hal_waitUntil>:

void hal_waitUntil (u4_t time) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
    while( deltaticks(time) != 0 ); // busy wait until timestamp is reached
 80016f4:	46c0      	nop			; (mov r8, r8)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	0018      	movs	r0, r3
 80016fa:	f7ff ffd9 	bl	80016b0 <deltaticks>
 80016fe:	1e03      	subs	r3, r0, #0
 8001700:	d1f9      	bne.n	80016f6 <hal_waitUntil+0xa>
}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	46bd      	mov	sp, r7
 8001706:	b002      	add	sp, #8
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <hal_checkTimer>:

// check and rewind for target time
u1_t hal_checkTimer (u4_t time) {
 800170c:	b5b0      	push	{r4, r5, r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
    u2_t dt;
    myTIMER.Instance->SR &= ~TIM_SR_CC1IF; // clear any pending interrupts
 8001714:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <hal_checkTimer+0x84>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	691a      	ldr	r2, [r3, #16]
 800171a:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <hal_checkTimer+0x84>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2102      	movs	r1, #2
 8001720:	438a      	bics	r2, r1
 8001722:	611a      	str	r2, [r3, #16]
    if((dt = deltaticks(time)) < 5) { // event is now (a few ticks ahead)
 8001724:	250e      	movs	r5, #14
 8001726:	197c      	adds	r4, r7, r5
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	0018      	movs	r0, r3
 800172c:	f7ff ffc0 	bl	80016b0 <deltaticks>
 8001730:	0003      	movs	r3, r0
 8001732:	8023      	strh	r3, [r4, #0]
 8001734:	197b      	adds	r3, r7, r5
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	2b04      	cmp	r3, #4
 800173a:	d809      	bhi.n	8001750 <hal_checkTimer+0x44>
    	myTIMER.Instance->DIER &= ~TIM_DIER_CC1IE; // disable IE
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <hal_checkTimer+0x84>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68da      	ldr	r2, [r3, #12]
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <hal_checkTimer+0x84>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2102      	movs	r1, #2
 8001748:	438a      	bics	r2, r1
 800174a:	60da      	str	r2, [r3, #12]
        return 1;
 800174c:	2301      	movs	r3, #1
 800174e:	e01a      	b.n	8001786 <hal_checkTimer+0x7a>
    } else { // rewind timer (fully or to exact time))
    	myTIMER.Instance->CCR1 = myTIMER.Instance->CNT + dt;   // set comparator
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <hal_checkTimer+0x84>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001756:	230e      	movs	r3, #14
 8001758:	18fb      	adds	r3, r7, r3
 800175a:	881a      	ldrh	r2, [r3, #0]
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <hal_checkTimer+0x84>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	188a      	adds	r2, r1, r2
 8001762:	635a      	str	r2, [r3, #52]	; 0x34
    	myTIMER.Instance->DIER |= TIM_DIER_CC1IE;  // enable IE
 8001764:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <hal_checkTimer+0x84>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <hal_checkTimer+0x84>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2102      	movs	r1, #2
 8001770:	430a      	orrs	r2, r1
 8001772:	60da      	str	r2, [r3, #12]
    	myTIMER.Instance->CCER |= TIM_CCER_CC1E;   // enable capture/compare uint 2
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <hal_checkTimer+0x84>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6a1a      	ldr	r2, [r3, #32]
 800177a:	4b05      	ldr	r3, [pc, #20]	; (8001790 <hal_checkTimer+0x84>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2101      	movs	r1, #1
 8001780:	430a      	orrs	r2, r1
 8001782:	621a      	str	r2, [r3, #32]
        return 0;
 8001784:	2300      	movs	r3, #0
    }
}
 8001786:	0018      	movs	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	b004      	add	sp, #16
 800178c:	bdb0      	pop	{r4, r5, r7, pc}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	20000284 	.word	0x20000284

08001794 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == myTIMER.Instance){
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d104      	bne.n	80017b2 <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL.ticks++;
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80017b0:	605a      	str	r2, [r3, #4]
    }
}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b002      	add	sp, #8
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	20000284 	.word	0x20000284
 80017c0:	20000070 	.word	0x20000070

080017c4 <hal_disableIRQs>:

// -----------------------------------------------------------------------------
// IRQ
void hal_disableIRQs () {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c8:	b672      	cpsid	i
	__disable_irq();
	//__set_BASEPRI(1 << 4);
    HAL.irqlevel++;
 80017ca:	4b04      	ldr	r3, [pc, #16]	; (80017dc <hal_disableIRQs+0x18>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	4b02      	ldr	r3, [pc, #8]	; (80017dc <hal_disableIRQs+0x18>)
 80017d2:	601a      	str	r2, [r3, #0]
}
 80017d4:	46c0      	nop			; (mov r8, r8)
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	20000070 	.word	0x20000070

080017e0 <hal_enableIRQs>:

void hal_enableIRQs () {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
    if(--HAL.irqlevel == 0) {
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <hal_enableIRQs+0x20>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	1e5a      	subs	r2, r3, #1
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <hal_enableIRQs+0x20>)
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <hal_enableIRQs+0x20>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d100      	bne.n	80017f8 <hal_enableIRQs+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
 80017f6:	b662      	cpsie	i
		__enable_irq();
    	//__set_BASEPRI(0);
    }
}
 80017f8:	46c0      	nop			; (mov r8, r8)
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	20000070 	.word	0x20000070

08001804 <hal_sleep>:

void hal_sleep () {
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	// low power sleep mode
#ifndef CFG_no_low_power_sleep_mode
	// PWR->CR |= PWR_CR_LPSDSR;
#endif
    // suspend execution until IRQ, regardless of the CPSR I-bit
    __WFI();
 8001808:	bf30      	wfi
}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <hal_init>:

// -----------------------------------------------------------------------------

void hal_init () {
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
    memset(&HAL, 0x00, sizeof(HAL));
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <hal_init+0x2c>)
 8001816:	2208      	movs	r2, #8
 8001818:	2100      	movs	r1, #0
 800181a:	0018      	movs	r0, r3
 800181c:	f009 fedd 	bl	800b5da <memset>
    hal_disableIRQs();
 8001820:	f7ff ffd0 	bl	80017c4 <hal_disableIRQs>
    // configure radio I/O and interrupt handler
    hal_io_init();
 8001824:	f7ff fe60 	bl	80014e8 <hal_io_init>
    // configure radio SPI
    hal_spi_init();
 8001828:	f7ff fedb 	bl	80015e2 <hal_spi_init>
    // configure timer and interrupt handler
    hal_time_init();
 800182c:	f7ff ff08 	bl	8001640 <hal_time_init>
    hal_enableIRQs();
 8001830:	f7ff ffd6 	bl	80017e0 <hal_enableIRQs>
}
 8001834:	46c0      	nop			; (mov r8, r8)
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	20000070 	.word	0x20000070

08001840 <hal_failed>:

void hal_failed () {
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
    // HALT...
    hal_disableIRQs();
 8001844:	f7ff ffbe 	bl	80017c4 <hal_disableIRQs>
    hal_sleep();
 8001848:	f7ff ffdc 	bl	8001804 <hal_sleep>
    while(1);
 800184c:	e7fe      	b.n	800184c <hal_failed+0xc>

0800184e <getSf>:
typedef u4_t devaddr_t;

// RX quality (device)
enum { RSSI_OFF=64, SNR_SCALEUP=4 };

inline sf_t  getSf   (rps_t params)            { return   (sf_t)(params &  0x7); }
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	0002      	movs	r2, r0
 8001856:	1dbb      	adds	r3, r7, #6
 8001858:	801a      	strh	r2, [r3, #0]
 800185a:	1dbb      	adds	r3, r7, #6
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2207      	movs	r2, #7
 8001862:	4013      	ands	r3, r2
 8001864:	b2db      	uxtb	r3, r3
 8001866:	0018      	movs	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	b002      	add	sp, #8
 800186c:	bd80      	pop	{r7, pc}

0800186e <getBw>:
inline rps_t setSf   (rps_t params, sf_t sf)   { return (rps_t)((params & ~0x7) | sf); }
inline bw_t  getBw   (rps_t params)            { return  (bw_t)((params >> 3) & 0x3); }
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	0002      	movs	r2, r0
 8001876:	1dbb      	adds	r3, r7, #6
 8001878:	801a      	strh	r2, [r3, #0]
 800187a:	1dbb      	adds	r3, r7, #6
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	08db      	lsrs	r3, r3, #3
 8001880:	b29b      	uxth	r3, r3
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2203      	movs	r2, #3
 8001886:	4013      	ands	r3, r2
 8001888:	b2db      	uxtb	r3, r3
 800188a:	0018      	movs	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	b002      	add	sp, #8
 8001890:	bd80      	pop	{r7, pc}

08001892 <getCr>:
inline rps_t setBw   (rps_t params, bw_t cr)   { return (rps_t)((params & ~0x18) | (cr<<3)); }
inline cr_t  getCr   (rps_t params)            { return  (cr_t)((params >> 5) & 0x3); }
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	0002      	movs	r2, r0
 800189a:	1dbb      	adds	r3, r7, #6
 800189c:	801a      	strh	r2, [r3, #0]
 800189e:	1dbb      	adds	r3, r7, #6
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2203      	movs	r2, #3
 80018aa:	4013      	ands	r3, r2
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	0018      	movs	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b002      	add	sp, #8
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <setCr>:
inline rps_t setCr   (rps_t params, cr_t cr)   { return (rps_t)((params & ~0x60) | (cr<<5)); }
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	0002      	movs	r2, r0
 80018be:	1dbb      	adds	r3, r7, #6
 80018c0:	801a      	strh	r2, [r3, #0]
 80018c2:	1d7b      	adds	r3, r7, #5
 80018c4:	1c0a      	adds	r2, r1, #0
 80018c6:	701a      	strb	r2, [r3, #0]
 80018c8:	1dbb      	adds	r3, r7, #6
 80018ca:	2200      	movs	r2, #0
 80018cc:	5e9b      	ldrsh	r3, [r3, r2]
 80018ce:	2260      	movs	r2, #96	; 0x60
 80018d0:	4393      	bics	r3, r2
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	1d7b      	adds	r3, r7, #5
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	015b      	lsls	r3, r3, #5
 80018da:	b21b      	sxth	r3, r3
 80018dc:	4313      	orrs	r3, r2
 80018de:	b21b      	sxth	r3, r3
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	0018      	movs	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	b002      	add	sp, #8
 80018e8:	bd80      	pop	{r7, pc}

080018ea <getNocrc>:
inline int   getNocrc(rps_t params)            { return        ((params >> 7) & 0x1); }
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	0002      	movs	r2, r0
 80018f2:	1dbb      	adds	r3, r7, #6
 80018f4:	801a      	strh	r2, [r3, #0]
 80018f6:	1dbb      	adds	r3, r7, #6
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	09db      	lsrs	r3, r3, #7
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	001a      	movs	r2, r3
 8001900:	2301      	movs	r3, #1
 8001902:	4013      	ands	r3, r2
 8001904:	0018      	movs	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	b002      	add	sp, #8
 800190a:	bd80      	pop	{r7, pc}

0800190c <setNocrc>:
inline rps_t setNocrc(rps_t params, int nocrc) { return (rps_t)((params & ~0x80) | (nocrc<<7)); }
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	0002      	movs	r2, r0
 8001914:	6039      	str	r1, [r7, #0]
 8001916:	1dbb      	adds	r3, r7, #6
 8001918:	801a      	strh	r2, [r3, #0]
 800191a:	1dbb      	adds	r3, r7, #6
 800191c:	2200      	movs	r2, #0
 800191e:	5e9b      	ldrsh	r3, [r3, r2]
 8001920:	2280      	movs	r2, #128	; 0x80
 8001922:	4393      	bics	r3, r2
 8001924:	b21a      	sxth	r2, r3
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	01db      	lsls	r3, r3, #7
 800192a:	b21b      	sxth	r3, r3
 800192c:	4313      	orrs	r3, r2
 800192e:	b21b      	sxth	r3, r3
 8001930:	b29b      	uxth	r3, r3
 8001932:	0018      	movs	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	b002      	add	sp, #8
 8001938:	bd80      	pop	{r7, pc}

0800193a <getIh>:
inline int   getIh   (rps_t params)            { return        ((params >> 8) & 0xFF); }
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	0002      	movs	r2, r0
 8001942:	1dbb      	adds	r3, r7, #6
 8001944:	801a      	strh	r2, [r3, #0]
 8001946:	1dbb      	adds	r3, r7, #6
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	0a1b      	lsrs	r3, r3, #8
 800194c:	b29b      	uxth	r3, r3
 800194e:	001a      	movs	r2, r3
 8001950:	23ff      	movs	r3, #255	; 0xff
 8001952:	4013      	ands	r3, r2
 8001954:	0018      	movs	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	b002      	add	sp, #8
 800195a:	bd80      	pop	{r7, pc}

0800195c <setIh>:
inline rps_t setIh   (rps_t params, int ih)    { return (rps_t)((params & ~0xFF00) | (ih<<8)); }
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	0002      	movs	r2, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	1dbb      	adds	r3, r7, #6
 8001968:	801a      	strh	r2, [r3, #0]
 800196a:	1dbb      	adds	r3, r7, #6
 800196c:	2200      	movs	r2, #0
 800196e:	5e9b      	ldrsh	r3, [r3, r2]
 8001970:	22ff      	movs	r2, #255	; 0xff
 8001972:	4013      	ands	r3, r2
 8001974:	b21a      	sxth	r2, r3
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	b21b      	sxth	r3, r3
 800197c:	4313      	orrs	r3, r2
 800197e:	b21b      	sxth	r3, r3
 8001980:	b29b      	uxth	r3, r3
 8001982:	0018      	movs	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	b002      	add	sp, #8
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <updr2rps>:
#define MAKERPS(sf,bw,cr,ih,nocrc) ((rps_t)((sf) | ((bw)<<3) | ((cr)<<5) | ((nocrc)?(1<<7):0) | ((ih&0xFF)<<8)))
// Two frames with params r1/r2 would interfere on air: same SFx + BWx 
inline int sameSfBw(rps_t r1, rps_t r2) { return ((r1^r2)&0x1F) == 0; }

extern const u1_t _DR2RPS_CRC[];
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	0002      	movs	r2, r0
 8001994:	1dfb      	adds	r3, r7, #7
 8001996:	701a      	strb	r2, [r3, #0]
 8001998:	1dfb      	adds	r3, r7, #7
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	3301      	adds	r3, #1
 800199e:	4a03      	ldr	r2, [pc, #12]	; (80019ac <updr2rps+0x20>)
 80019a0:	5cd3      	ldrb	r3, [r2, r3]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	0018      	movs	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	b002      	add	sp, #8
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	0800cbf4 	.word	0x0800cbf4

080019b0 <dndr2rps>:
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	0002      	movs	r2, r0
 80019b8:	1dfb      	adds	r3, r7, #7
 80019ba:	701a      	strb	r2, [r3, #0]
 80019bc:	1dfb      	adds	r3, r7, #7
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	0018      	movs	r0, r3
 80019c2:	f7ff ffe3 	bl	800198c <updr2rps>
 80019c6:	0003      	movs	r3, r0
 80019c8:	2101      	movs	r1, #1
 80019ca:	0018      	movs	r0, r3
 80019cc:	f7ff ff9e 	bl	800190c <setNocrc>
 80019d0:	0003      	movs	r3, r0
 80019d2:	0018      	movs	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b002      	add	sp, #8
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <decDR>:
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	0002      	movs	r2, r0
 80019e4:	1dfb      	adds	r3, r7, #7
 80019e6:	701a      	strb	r2, [r3, #0]
 80019e8:	1dfb      	adds	r3, r7, #7
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	4a07      	ldr	r2, [pc, #28]	; (8001a0c <decDR+0x30>)
 80019ee:	5cd3      	ldrb	r3, [r2, r3]
 80019f0:	2bff      	cmp	r3, #255	; 0xff
 80019f2:	d004      	beq.n	80019fe <decDR+0x22>
 80019f4:	1dfb      	adds	r3, r7, #7
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	e001      	b.n	8001a02 <decDR+0x26>
 80019fe:	1dfb      	adds	r3, r7, #7
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	0018      	movs	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b002      	add	sp, #8
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	0800cbf4 	.word	0x0800cbf4

08001a10 <validDR>:
inline dr_t  assertDR (dr_t dr) { return _DR2RPS_CRC[dr+1]==ILLEGAL_RPS ? DR_DFLTMIN : dr; }   // force into a valid DR
inline bit_t validDR  (dr_t dr) { return _DR2RPS_CRC[dr+1]!=ILLEGAL_RPS; } // in range
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	0002      	movs	r2, r0
 8001a18:	1dfb      	adds	r3, r7, #7
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	1dfb      	adds	r3, r7, #7
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	3301      	adds	r3, #1
 8001a22:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <validDR+0x28>)
 8001a24:	5cd3      	ldrb	r3, [r2, r3]
 8001a26:	3bff      	subs	r3, #255	; 0xff
 8001a28:	1e5a      	subs	r2, r3, #1
 8001a2a:	4193      	sbcs	r3, r2
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	0018      	movs	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	b002      	add	sp, #8
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	0800cbf4 	.word	0x0800cbf4

08001a3c <lowerDR>:
inline dr_t  lowerDR  (dr_t dr, u1_t n) { while(n--){dr=decDR(dr);} return dr; } // decrease data rate by n steps
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	0002      	movs	r2, r0
 8001a44:	1dfb      	adds	r3, r7, #7
 8001a46:	701a      	strb	r2, [r3, #0]
 8001a48:	1dbb      	adds	r3, r7, #6
 8001a4a:	1c0a      	adds	r2, r1, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
 8001a4e:	e007      	b.n	8001a60 <lowerDR+0x24>
 8001a50:	1dfc      	adds	r4, r7, #7
 8001a52:	1dfb      	adds	r3, r7, #7
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	0018      	movs	r0, r3
 8001a58:	f7ff ffc0 	bl	80019dc <decDR>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	7023      	strb	r3, [r4, #0]
 8001a60:	1dbb      	adds	r3, r7, #6
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	1dba      	adds	r2, r7, #6
 8001a66:	1e59      	subs	r1, r3, #1
 8001a68:	7011      	strb	r1, [r2, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <lowerDR+0x14>
 8001a6e:	1dfb      	adds	r3, r7, #7
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	0018      	movs	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b003      	add	sp, #12
 8001a78:	bd90      	pop	{r4, r7, pc}

08001a7a <os_rlsbf2>:
// BEG OS - default implementations for certain OS suport functions

#if !defined(HAS_os_calls)

#if !defined(os_rlsbf2)
u2_t os_rlsbf2 (xref2cu1_t buf) {
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
    return (u2_t)(buf[0] | (buf[1]<<8));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	b21a      	sxth	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	021b      	lsls	r3, r3, #8
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	4313      	orrs	r3, r2
 8001a94:	b21b      	sxth	r3, r3
 8001a96:	b29b      	uxth	r3, r3
}
 8001a98:	0018      	movs	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	b002      	add	sp, #8
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <os_rlsbf4>:
#endif

#if !defined(os_rlsbf4)
u4_t os_rlsbf4 (xref2cu1_t buf) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
    return (u4_t)(buf[0] | (buf[1]<<8) | ((u4_t)buf[2]<<16) | ((u4_t)buf[3]<<24));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	001a      	movs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	001a      	movs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3302      	adds	r3, #2
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	041b      	lsls	r3, r3, #16
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3303      	adds	r3, #3
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	061b      	lsls	r3, r3, #24
 8001acc:	4313      	orrs	r3, r2
}
 8001ace:	0018      	movs	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	b002      	add	sp, #8
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <os_rmsbf4>:
#endif


#if !defined(os_rmsbf4)
u4_t os_rmsbf4 (xref2cu1_t buf) {
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
    return (u4_t)(buf[3] | (buf[2]<<8) | ((u4_t)buf[1]<<16) | ((u4_t)buf[0]<<24));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3303      	adds	r3, #3
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	001a      	movs	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3302      	adds	r3, #2
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	021b      	lsls	r3, r3, #8
 8001aee:	4313      	orrs	r3, r2
 8001af0:	001a      	movs	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3301      	adds	r3, #1
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	041b      	lsls	r3, r3, #16
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	061b      	lsls	r3, r3, #24
 8001b02:	4313      	orrs	r3, r2
}
 8001b04:	0018      	movs	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b002      	add	sp, #8
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <os_wlsbf2>:
#endif


#if !defined(os_wlsbf2)
void os_wlsbf2 (xref2u1_t buf, u2_t v) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	000a      	movs	r2, r1
 8001b16:	1cbb      	adds	r3, r7, #2
 8001b18:	801a      	strh	r2, [r3, #0]
    buf[0] = v;
 8001b1a:	1cbb      	adds	r3, r7, #2
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 8001b24:	1cbb      	adds	r3, r7, #2
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	701a      	strb	r2, [r3, #0]
}
 8001b34:	46c0      	nop			; (mov r8, r8)
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b002      	add	sp, #8
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <os_wlsbf4>:
#endif

#if !defined(os_wlsbf4)
void os_wlsbf4 (xref2u1_t buf, u4_t v) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
    buf[0] = v;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	0a1a      	lsrs	r2, r3, #8
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3301      	adds	r3, #1
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>16;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	0c1a      	lsrs	r2, r3, #16
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3302      	adds	r3, #2
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	701a      	strb	r2, [r3, #0]
    buf[3] = v>>24;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	0e1a      	lsrs	r2, r3, #24
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3303      	adds	r3, #3
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	701a      	strb	r2, [r3, #0]
}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b002      	add	sp, #8
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <os_wmsbf4>:
#endif

#if !defined(os_wmsbf4)
void os_wmsbf4 (xref2u1_t buf, u4_t v) {
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	6039      	str	r1, [r7, #0]
    buf[3] = v;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3303      	adds	r3, #3
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>8;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	0a1a      	lsrs	r2, r3, #8
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3302      	adds	r3, #2
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>16;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	0c1a      	lsrs	r2, r3, #16
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	701a      	strb	r2, [r3, #0]
    buf[0] = v>>24;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	0e1b      	lsrs	r3, r3, #24
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	701a      	strb	r2, [r3, #0]
}
 8001bb0:	46c0      	nop			; (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b002      	add	sp, #8
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <os_getBattLevel>:
#endif

#if !defined(os_getBattLevel)
u1_t os_getBattLevel (void) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
    return MCMD_DEVS_BATT_NOINFO;
 8001bbc:	23ff      	movs	r3, #255	; 0xff
}
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <os_crc16>:
#endif

#if !defined(os_crc16)
// New CRC-16 CCITT(XMODEM) checksum for beacons:
u2_t os_crc16 (xref2u1_t data, uint len) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
    u2_t remainder = 0;
 8001bce:	2316      	movs	r3, #22
 8001bd0:	18fb      	adds	r3, r7, r3
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	801a      	strh	r2, [r3, #0]
    u2_t polynomial = 0x1021;
 8001bd6:	230c      	movs	r3, #12
 8001bd8:	18fb      	adds	r3, r7, r3
 8001bda:	4a25      	ldr	r2, [pc, #148]	; (8001c70 <os_crc16+0xac>)
 8001bdc:	801a      	strh	r2, [r3, #0]
    for( uint i = 0; i < len; i++ ) {
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	e03a      	b.n	8001c5a <os_crc16+0x96>
        remainder ^= data[i] << 8;
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	18d3      	adds	r3, r2, r3
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	b21a      	sxth	r2, r3
 8001bf0:	2116      	movs	r1, #22
 8001bf2:	187b      	adds	r3, r7, r1
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	5e1b      	ldrsh	r3, [r3, r0]
 8001bf8:	4053      	eors	r3, r2
 8001bfa:	b21a      	sxth	r2, r3
 8001bfc:	187b      	adds	r3, r7, r1
 8001bfe:	801a      	strh	r2, [r3, #0]
        for( u1_t bit = 8; bit > 0; bit--) {
 8001c00:	230f      	movs	r3, #15
 8001c02:	18fb      	adds	r3, r7, r3
 8001c04:	2208      	movs	r2, #8
 8001c06:	701a      	strb	r2, [r3, #0]
 8001c08:	e01f      	b.n	8001c4a <os_crc16+0x86>
            if( (remainder & 0x8000) )
 8001c0a:	2316      	movs	r3, #22
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	2200      	movs	r2, #0
 8001c10:	5e9b      	ldrsh	r3, [r3, r2]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	da0d      	bge.n	8001c32 <os_crc16+0x6e>
                remainder = (remainder << 1) ^ polynomial;
 8001c16:	2116      	movs	r1, #22
 8001c18:	187b      	adds	r3, r7, r1
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	b21a      	sxth	r2, r3
 8001c20:	230c      	movs	r3, #12
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	2000      	movs	r0, #0
 8001c26:	5e1b      	ldrsh	r3, [r3, r0]
 8001c28:	4053      	eors	r3, r2
 8001c2a:	b21a      	sxth	r2, r3
 8001c2c:	187b      	adds	r3, r7, r1
 8001c2e:	801a      	strh	r2, [r3, #0]
 8001c30:	e005      	b.n	8001c3e <os_crc16+0x7a>
            else 
                remainder <<= 1;
 8001c32:	2316      	movs	r3, #22
 8001c34:	18fa      	adds	r2, r7, r3
 8001c36:	18fb      	adds	r3, r7, r3
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	18db      	adds	r3, r3, r3
 8001c3c:	8013      	strh	r3, [r2, #0]
        for( u1_t bit = 8; bit > 0; bit--) {
 8001c3e:	210f      	movs	r1, #15
 8001c40:	187b      	adds	r3, r7, r1
 8001c42:	781a      	ldrb	r2, [r3, #0]
 8001c44:	187b      	adds	r3, r7, r1
 8001c46:	3a01      	subs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
 8001c4a:	230f      	movs	r3, #15
 8001c4c:	18fb      	adds	r3, r7, r3
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1da      	bne.n	8001c0a <os_crc16+0x46>
    for( uint i = 0; i < len; i++ ) {
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	3301      	adds	r3, #1
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d3c0      	bcc.n	8001be4 <os_crc16+0x20>
        }
    }
    return remainder;
 8001c62:	2316      	movs	r3, #22
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	881b      	ldrh	r3, [r3, #0]
}
 8001c68:	0018      	movs	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b006      	add	sp, #24
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	00001021 	.word	0x00001021

08001c74 <micB0>:
// ================================================================================

// ================================================================================
// BEG AES

static void micB0 (u4_t devaddr, u4_t seqno, int dndir, int len) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
 8001c80:	603b      	str	r3, [r7, #0]
    os_clearMem(AESaux,16);
 8001c82:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <micB0+0x54>)
 8001c84:	2210      	movs	r2, #16
 8001c86:	2100      	movs	r1, #0
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f009 fca6 	bl	800b5da <memset>
    AESaux[0]  = 0x49;
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <micB0+0x54>)
 8001c90:	2249      	movs	r2, #73	; 0x49
 8001c92:	701a      	strb	r2, [r3, #0]
    AESaux[5]  = dndir?1:0;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	1e5a      	subs	r2, r3, #1
 8001c98:	4193      	sbcs	r3, r2
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <micB0+0x58>)
 8001c9e:	701a      	strb	r2, [r3, #0]
    AESaux[15] = len;
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <micB0+0x5c>)
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 8001ca8:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <micB0+0x60>)
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	0011      	movs	r1, r2
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f7ff ff44 	bl	8001b3c <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 8001cb4:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <micB0+0x64>)
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	0011      	movs	r1, r2
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f7ff ff3e 	bl	8001b3c <os_wlsbf4>
}
 8001cc0:	46c0      	nop			; (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b004      	add	sp, #16
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	2000014c 	.word	0x2000014c
 8001ccc:	20000151 	.word	0x20000151
 8001cd0:	2000015b 	.word	0x2000015b
 8001cd4:	20000152 	.word	0x20000152
 8001cd8:	20000156 	.word	0x20000156

08001cdc <aes_verifyMic>:


static int aes_verifyMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
 8001cdc:	b590      	push	{r4, r7, lr}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	68b8      	ldr	r0, [r7, #8]
 8001cf2:	f7ff ffbf 	bl	8001c74 <micB0>
    os_copyMem(AESkey,key,16);
 8001cf6:	68f9      	ldr	r1, [r7, #12]
 8001cf8:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <aes_verifyMic+0x54>)
 8001cfa:	2210      	movs	r2, #16
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f009 fc63 	bl	800b5c8 <memcpy>
    return os_aes(AES_MIC, pdu, len) == os_rmsbf4(pdu+len);
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	0019      	movs	r1, r3
 8001d0a:	2002      	movs	r0, #2
 8001d0c:	f7fe fe3c 	bl	8000988 <os_aes>
 8001d10:	0004      	movs	r4, r0
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	6a3a      	ldr	r2, [r7, #32]
 8001d16:	18d3      	adds	r3, r2, r3
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f7ff fedc 	bl	8001ad6 <os_rmsbf4>
 8001d1e:	0003      	movs	r3, r0
 8001d20:	1ae3      	subs	r3, r4, r3
 8001d22:	425a      	negs	r2, r3
 8001d24:	4153      	adcs	r3, r2
 8001d26:	b2db      	uxtb	r3, r3
}
 8001d28:	0018      	movs	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b005      	add	sp, #20
 8001d2e:	bd90      	pop	{r4, r7, pc}
 8001d30:	2000009c 	.word	0x2000009c

08001d34 <aes_appendMic>:


static void aes_appendMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
 8001d34:	b590      	push	{r4, r7, lr}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	68b8      	ldr	r0, [r7, #8]
 8001d4a:	f7ff ff93 	bl	8001c74 <micB0>
    os_copyMem(AESkey,key,16);
 8001d4e:	68f9      	ldr	r1, [r7, #12]
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <aes_appendMic+0x4c>)
 8001d52:	2210      	movs	r2, #16
 8001d54:	0018      	movs	r0, r3
 8001d56:	f009 fc37 	bl	800b5c8 <memcpy>
    // MSB because of internal structure of AES
    os_wmsbf4(pdu+len, os_aes(AES_MIC, pdu, len));
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	6a3a      	ldr	r2, [r7, #32]
 8001d5e:	18d4      	adds	r4, r2, r3
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	0019      	movs	r1, r3
 8001d68:	2002      	movs	r0, #2
 8001d6a:	f7fe fe0d 	bl	8000988 <os_aes>
 8001d6e:	0003      	movs	r3, r0
 8001d70:	0019      	movs	r1, r3
 8001d72:	0020      	movs	r0, r4
 8001d74:	f7ff ff01 	bl	8001b7a <os_wmsbf4>
}
 8001d78:	46c0      	nop			; (mov r8, r8)
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b005      	add	sp, #20
 8001d7e:	bd90      	pop	{r4, r7, pc}
 8001d80:	2000009c 	.word	0x2000009c

08001d84 <aes_appendMic0>:


static void aes_appendMic0 (xref2u1_t pdu, int len) {
 8001d84:	b590      	push	{r4, r7, lr}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <aes_appendMic0+0x38>)
 8001d90:	0018      	movs	r0, r3
 8001d92:	f003 f8f1 	bl	8004f78 <os_getDevKey>
    os_wmsbf4(pdu+len, os_aes(AES_MIC|AES_MICNOAUX, pdu, len));  // MSB because of internal structure of AES
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	18d4      	adds	r4, r2, r3
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	0019      	movs	r1, r3
 8001da4:	200a      	movs	r0, #10
 8001da6:	f7fe fdef 	bl	8000988 <os_aes>
 8001daa:	0003      	movs	r3, r0
 8001dac:	0019      	movs	r1, r3
 8001dae:	0020      	movs	r0, r4
 8001db0:	f7ff fee3 	bl	8001b7a <os_wmsbf4>
}
 8001db4:	46c0      	nop			; (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b003      	add	sp, #12
 8001dba:	bd90      	pop	{r4, r7, pc}
 8001dbc:	2000009c 	.word	0x2000009c

08001dc0 <aes_verifyMic0>:


static int aes_verifyMic0 (xref2u1_t pdu, int len) {
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 8001dca:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <aes_verifyMic0+0x40>)
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f003 f8d3 	bl	8004f78 <os_getDevKey>
    return os_aes(AES_MIC|AES_MICNOAUX, pdu, len) == os_rmsbf4(pdu+len);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	0019      	movs	r1, r3
 8001dda:	200a      	movs	r0, #10
 8001ddc:	f7fe fdd4 	bl	8000988 <os_aes>
 8001de0:	0004      	movs	r4, r0
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	18d3      	adds	r3, r2, r3
 8001de8:	0018      	movs	r0, r3
 8001dea:	f7ff fe74 	bl	8001ad6 <os_rmsbf4>
 8001dee:	0003      	movs	r3, r0
 8001df0:	1ae3      	subs	r3, r4, r3
 8001df2:	425a      	negs	r2, r3
 8001df4:	4153      	adcs	r3, r2
 8001df6:	b2db      	uxtb	r3, r3
}
 8001df8:	0018      	movs	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b003      	add	sp, #12
 8001dfe:	bd90      	pop	{r4, r7, pc}
 8001e00:	2000009c 	.word	0x2000009c

08001e04 <aes_encrypt>:


static void aes_encrypt (xref2u1_t pdu, int len) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 8001e0e:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <aes_encrypt+0x28>)
 8001e10:	0018      	movs	r0, r3
 8001e12:	f003 f8b1 	bl	8004f78 <os_getDevKey>
    os_aes(AES_ENC, pdu, len);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	0019      	movs	r1, r3
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f7fe fdb2 	bl	8000988 <os_aes>
}
 8001e24:	46c0      	nop			; (mov r8, r8)
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b002      	add	sp, #8
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	2000009c 	.word	0x2000009c

08001e30 <aes_cipher>:


static void aes_cipher (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t payload, int len) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	603b      	str	r3, [r7, #0]
    if( len <= 0 )
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	dd2b      	ble.n	8001e9c <aes_cipher+0x6c>
        return;
    os_clearMem(AESaux, 16);
 8001e44:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <aes_cipher+0x74>)
 8001e46:	2210      	movs	r2, #16
 8001e48:	2100      	movs	r1, #0
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f009 fbc5 	bl	800b5da <memset>
    AESaux[0] = AESaux[15] = 1; // mode=cipher / dir=down / block counter=1
 8001e50:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <aes_cipher+0x78>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	701a      	strb	r2, [r3, #0]
 8001e56:	4a13      	ldr	r2, [pc, #76]	; (8001ea4 <aes_cipher+0x74>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	7013      	strb	r3, [r2, #0]
    AESaux[5] = dndir?1:0;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	1e5a      	subs	r2, r3, #1
 8001e60:	4193      	sbcs	r3, r2
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <aes_cipher+0x7c>)
 8001e66:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 8001e68:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <aes_cipher+0x80>)
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	0011      	movs	r1, r2
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f7ff fe64 	bl	8001b3c <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 8001e74:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <aes_cipher+0x84>)
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	0011      	movs	r1, r2
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	f7ff fe5e 	bl	8001b3c <os_wlsbf4>
    os_copyMem(AESkey,key,16);
 8001e80:	68f9      	ldr	r1, [r7, #12]
 8001e82:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <aes_cipher+0x88>)
 8001e84:	2210      	movs	r2, #16
 8001e86:	0018      	movs	r0, r3
 8001e88:	f009 fb9e 	bl	800b5c8 <memcpy>
    os_aes(AES_CTR, payload, len);
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	0019      	movs	r1, r3
 8001e94:	2004      	movs	r0, #4
 8001e96:	f7fe fd77 	bl	8000988 <os_aes>
 8001e9a:	e000      	b.n	8001e9e <aes_cipher+0x6e>
        return;
 8001e9c:	46c0      	nop			; (mov r8, r8)
}
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b004      	add	sp, #16
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	2000014c 	.word	0x2000014c
 8001ea8:	2000015b 	.word	0x2000015b
 8001eac:	20000151 	.word	0x20000151
 8001eb0:	20000152 	.word	0x20000152
 8001eb4:	20000156 	.word	0x20000156
 8001eb8:	2000009c 	.word	0x2000009c

08001ebc <aes_sessKeys>:


static void aes_sessKeys (u2_t devnonce, xref2cu1_t artnonce, xref2u1_t nwkkey, xref2u1_t artkey) {
 8001ebc:	b590      	push	{r4, r7, lr}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	240e      	movs	r4, #14
 8001eca:	193b      	adds	r3, r7, r4
 8001ecc:	1c02      	adds	r2, r0, #0
 8001ece:	801a      	strh	r2, [r3, #0]
    os_clearMem(nwkkey, 16);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2210      	movs	r2, #16
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f009 fb7f 	bl	800b5da <memset>
    nwkkey[0] = 0x01;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]
    os_copyMem(nwkkey+1, artnonce, LEN_ARTNONCE+LEN_NETID);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	2206      	movs	r2, #6
 8001eea:	0018      	movs	r0, r3
 8001eec:	f009 fb6c 	bl	800b5c8 <memcpy>
    os_wlsbf2(nwkkey+1+LEN_ARTNONCE+LEN_NETID, devnonce);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	1dda      	adds	r2, r3, #7
 8001ef4:	193b      	adds	r3, r7, r4
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	0019      	movs	r1, r3
 8001efa:	0010      	movs	r0, r2
 8001efc:	f7ff fe06 	bl	8001b0c <os_wlsbf2>
    os_copyMem(artkey, nwkkey, 16);
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	2210      	movs	r2, #16
 8001f06:	0018      	movs	r0, r3
 8001f08:	f009 fb5e 	bl	800b5c8 <memcpy>
    artkey[0] = 0x02;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	2202      	movs	r2, #2
 8001f10:	701a      	strb	r2, [r3, #0]

    os_getDevKey(AESkey);
 8001f12:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <aes_sessKeys+0x88>)
 8001f14:	0018      	movs	r0, r3
 8001f16:	f003 f82f 	bl	8004f78 <os_getDevKey>
    os_aes(AES_ENC, nwkkey, 16);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2210      	movs	r2, #16
 8001f1e:	0019      	movs	r1, r3
 8001f20:	2000      	movs	r0, #0
 8001f22:	f7fe fd31 	bl	8000988 <os_aes>
    os_getDevKey(AESkey);
 8001f26:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <aes_sessKeys+0x88>)
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f003 f825 	bl	8004f78 <os_getDevKey>
    os_aes(AES_ENC, artkey, 16);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	2210      	movs	r2, #16
 8001f32:	0019      	movs	r1, r3
 8001f34:	2000      	movs	r0, #0
 8001f36:	f7fe fd27 	bl	8000988 <os_aes>
}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	b005      	add	sp, #20
 8001f40:	bd90      	pop	{r4, r7, pc}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	2000009c 	.word	0x2000009c

08001f48 <getSensitivity>:
    { 141-135,  141-132, 141-129 },  // SF10
    { 141-138,  141-135, 141-132 },  // SF11
    { 141-141,  141-138, 141-135 }   // SF12
};

int getSensitivity (rps_t rps) {
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	0002      	movs	r2, r0
 8001f50:	1dbb      	adds	r3, r7, #6
 8001f52:	801a      	strh	r2, [r3, #0]
    return -141 + SENSITIVITY[getSf(rps)][getBw(rps)];
 8001f54:	1dbb      	adds	r3, r7, #6
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f7ff fc78 	bl	800184e <getSf>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	001c      	movs	r4, r3
 8001f62:	1dbb      	adds	r3, r7, #6
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	0018      	movs	r0, r3
 8001f68:	f7ff fc81 	bl	800186e <getBw>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	0019      	movs	r1, r3
 8001f70:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <getSensitivity+0x40>)
 8001f72:	0023      	movs	r3, r4
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	191b      	adds	r3, r3, r4
 8001f78:	18d3      	adds	r3, r2, r3
 8001f7a:	5c5b      	ldrb	r3, [r3, r1]
 8001f7c:	3b8d      	subs	r3, #141	; 0x8d
}
 8001f7e:	0018      	movs	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b003      	add	sp, #12
 8001f84:	bd90      	pop	{r4, r7, pc}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	0800cc10 	.word	0x0800cc10

08001f8c <calcAirTime>:

ostime_t calcAirTime (rps_t rps, u1_t plen) {
 8001f8c:	b5b0      	push	{r4, r5, r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	0002      	movs	r2, r0
 8001f94:	1dbb      	adds	r3, r7, #6
 8001f96:	801a      	strh	r2, [r3, #0]
 8001f98:	1d7b      	adds	r3, r7, #5
 8001f9a:	1c0a      	adds	r2, r1, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
    u1_t bw = getBw(rps);  // 0,1,2 = 125,250,500kHz
 8001f9e:	230b      	movs	r3, #11
 8001fa0:	18fc      	adds	r4, r7, r3
 8001fa2:	1dbb      	adds	r3, r7, #6
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f7ff fc61 	bl	800186e <getBw>
 8001fac:	0003      	movs	r3, r0
 8001fae:	7023      	strb	r3, [r4, #0]
    u1_t sf = getSf(rps);  // 0=FSK, 1..6 = SF7..12
 8001fb0:	250a      	movs	r5, #10
 8001fb2:	197c      	adds	r4, r7, r5
 8001fb4:	1dbb      	adds	r3, r7, #6
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f7ff fc48 	bl	800184e <getSf>
 8001fbe:	0003      	movs	r3, r0
 8001fc0:	7023      	strb	r3, [r4, #0]
    if( sf == FSK ) {
 8001fc2:	197b      	adds	r3, r7, r5
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10f      	bne.n	8001fea <calcAirTime+0x5e>
        return (plen+/*preamble*/5+/*syncword*/3+/*len*/1+/*crc*/2) * /*bits/byte*/8
 8001fca:	1d7b      	adds	r3, r7, #5
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	330b      	adds	r3, #11
 8001fd0:	001a      	movs	r2, r3
            * (s4_t)OSTICKS_PER_SEC / /*kbit/s*/50000;
 8001fd2:	0013      	movs	r3, r2
 8001fd4:	015b      	lsls	r3, r3, #5
 8001fd6:	1a9b      	subs	r3, r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	189b      	adds	r3, r3, r2
 8001fdc:	02db      	lsls	r3, r3, #11
 8001fde:	494c      	ldr	r1, [pc, #304]	; (8002110 <calcAirTime+0x184>)
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f7fe f91b 	bl	800021c <__divsi3>
 8001fe6:	0003      	movs	r3, r0
 8001fe8:	e08e      	b.n	8002108 <calcAirTime+0x17c>
    }
    u1_t sfx = 4*(sf+(7-SF7));
 8001fea:	210a      	movs	r1, #10
 8001fec:	187b      	adds	r3, r7, r1
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	3306      	adds	r3, #6
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	2317      	movs	r3, #23
 8001ff6:	18fb      	adds	r3, r7, r3
 8001ff8:	0092      	lsls	r2, r2, #2
 8001ffa:	701a      	strb	r2, [r3, #0]
    u1_t q = sfx - (sf >= SF11 ? 8 : 0);
 8001ffc:	187b      	adds	r3, r7, r1
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b04      	cmp	r3, #4
 8002002:	d901      	bls.n	8002008 <calcAirTime+0x7c>
 8002004:	2308      	movs	r3, #8
 8002006:	e000      	b.n	800200a <calcAirTime+0x7e>
 8002008:	2300      	movs	r3, #0
 800200a:	2209      	movs	r2, #9
 800200c:	18ba      	adds	r2, r7, r2
 800200e:	2017      	movs	r0, #23
 8002010:	1839      	adds	r1, r7, r0
 8002012:	7809      	ldrb	r1, [r1, #0]
 8002014:	1acb      	subs	r3, r1, r3
 8002016:	7013      	strb	r3, [r2, #0]
    int tmp = 8*plen - sfx + 28 + (getNocrc(rps)?0:16) - (getIh(rps)?20:0);
 8002018:	1d7b      	adds	r3, r7, #5
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	00da      	lsls	r2, r3, #3
 800201e:	183b      	adds	r3, r7, r0
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	331c      	adds	r3, #28
 8002026:	001c      	movs	r4, r3
 8002028:	1dbb      	adds	r3, r7, #6
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	0018      	movs	r0, r3
 800202e:	f7ff fc5c 	bl	80018ea <getNocrc>
 8002032:	1e03      	subs	r3, r0, #0
 8002034:	d001      	beq.n	800203a <calcAirTime+0xae>
 8002036:	2300      	movs	r3, #0
 8002038:	e000      	b.n	800203c <calcAirTime+0xb0>
 800203a:	2310      	movs	r3, #16
 800203c:	191c      	adds	r4, r3, r4
 800203e:	1dbb      	adds	r3, r7, #6
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	0018      	movs	r0, r3
 8002044:	f7ff fc79 	bl	800193a <getIh>
 8002048:	1e03      	subs	r3, r0, #0
 800204a:	d001      	beq.n	8002050 <calcAirTime+0xc4>
 800204c:	2314      	movs	r3, #20
 800204e:	e000      	b.n	8002052 <calcAirTime+0xc6>
 8002050:	2300      	movs	r3, #0
 8002052:	1ae3      	subs	r3, r4, r3
 8002054:	613b      	str	r3, [r7, #16]
    if( tmp > 0 ) {
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	2b00      	cmp	r3, #0
 800205a:	dd1b      	ble.n	8002094 <calcAirTime+0x108>
        tmp = (tmp + q - 1) / q;
 800205c:	2109      	movs	r1, #9
 800205e:	187b      	adds	r3, r7, r1
 8002060:	781a      	ldrb	r2, [r3, #0]
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	18d3      	adds	r3, r2, r3
 8002066:	1e5a      	subs	r2, r3, #1
 8002068:	187b      	adds	r3, r7, r1
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	0019      	movs	r1, r3
 800206e:	0010      	movs	r0, r2
 8002070:	f7fe f8d4 	bl	800021c <__divsi3>
 8002074:	0003      	movs	r3, r0
 8002076:	613b      	str	r3, [r7, #16]
        tmp *= getCr(rps)+5;
 8002078:	1dbb      	adds	r3, r7, #6
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	0018      	movs	r0, r3
 800207e:	f7ff fc08 	bl	8001892 <getCr>
 8002082:	0003      	movs	r3, r0
 8002084:	1d5a      	adds	r2, r3, #5
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4353      	muls	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        tmp += 8;
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	3308      	adds	r3, #8
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	e001      	b.n	8002098 <calcAirTime+0x10c>
    } else {
        tmp = 8;
 8002094:	2308      	movs	r3, #8
 8002096:	613b      	str	r3, [r7, #16]
    }
    tmp = (tmp<<2) + /*preamble*/49 /* 4 * (8 + 4.25) */;
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	3331      	adds	r3, #49	; 0x31
 800209e:	613b      	str	r3, [r7, #16]
    //
    // osticks =  tmp * OSTICKS_PER_SEC * 1<<sf / bw
    //
    // 3 => counter reduced divisor 125000/8 => 15625
    // 2 => counter 2 shift on tmp
    sfx = sf+(7-SF7) - (3+2) - bw;
 80020a0:	230a      	movs	r3, #10
 80020a2:	18fa      	adds	r2, r7, r3
 80020a4:	230b      	movs	r3, #11
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	7812      	ldrb	r2, [r2, #0]
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	2117      	movs	r1, #23
 80020b2:	187b      	adds	r3, r7, r1
 80020b4:	3201      	adds	r2, #1
 80020b6:	701a      	strb	r2, [r3, #0]
    int div = 15625;
 80020b8:	4b16      	ldr	r3, [pc, #88]	; (8002114 <calcAirTime+0x188>)
 80020ba:	60fb      	str	r3, [r7, #12]
    if( sfx > 4 ) {
 80020bc:	187b      	adds	r3, r7, r1
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d90a      	bls.n	80020da <calcAirTime+0x14e>
        // prevent 32bit signed int overflow in last step
        div >>= sfx-4;
 80020c4:	2117      	movs	r1, #23
 80020c6:	187b      	adds	r3, r7, r1
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	3b04      	subs	r3, #4
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	411a      	asrs	r2, r3
 80020d0:	0013      	movs	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]
        sfx = 4;
 80020d4:	187b      	adds	r3, r7, r1
 80020d6:	2204      	movs	r2, #4
 80020d8:	701a      	strb	r2, [r3, #0]
    }
    // Need 32bit arithmetic for this last step
    return (((ostime_t)tmp << sfx) * OSTICKS_PER_SEC + div/2) / div;
 80020da:	2317      	movs	r3, #23
 80020dc:	18fb      	adds	r3, r7, r3
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	409a      	lsls	r2, r3
 80020e4:	0013      	movs	r3, r2
 80020e6:	015b      	lsls	r3, r3, #5
 80020e8:	1a9b      	subs	r3, r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	189b      	adds	r3, r3, r2
 80020ee:	021b      	lsls	r3, r3, #8
 80020f0:	001a      	movs	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	da00      	bge.n	80020fa <calcAirTime+0x16e>
 80020f8:	3301      	adds	r3, #1
 80020fa:	105b      	asrs	r3, r3, #1
 80020fc:	18d3      	adds	r3, r2, r3
 80020fe:	68f9      	ldr	r1, [r7, #12]
 8002100:	0018      	movs	r0, r3
 8002102:	f7fe f88b 	bl	800021c <__divsi3>
 8002106:	0003      	movs	r3, r0
}
 8002108:	0018      	movs	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	b006      	add	sp, #24
 800210e:	bdb0      	pop	{r4, r5, r7, pc}
 8002110:	0000c350 	.word	0x0000c350
 8002114:	00003d09 	.word	0x00003d09

08002118 <calcRxWindow>:
    us2osticksRound(128<<0)   // ------    DR_SF7CR
#endif
};


static ostime_t calcRxWindow (u1_t secs, dr_t dr) {
 8002118:	b590      	push	{r4, r7, lr}
 800211a:	b087      	sub	sp, #28
 800211c:	af00      	add	r7, sp, #0
 800211e:	0002      	movs	r2, r0
 8002120:	1dfb      	adds	r3, r7, #7
 8002122:	701a      	strb	r2, [r3, #0]
 8002124:	1dbb      	adds	r3, r7, #6
 8002126:	1c0a      	adds	r2, r1, #0
 8002128:	701a      	strb	r2, [r3, #0]
    ostime_t rxoff, err;
    if( secs==0 ) {
 800212a:	1dfb      	adds	r3, r7, #7
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d108      	bne.n	8002144 <calcRxWindow+0x2c>
        // aka 128 secs (next becaon)
        rxoff = LMIC.drift;
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <calcRxWindow+0xac>)
 8002134:	22b4      	movs	r2, #180	; 0xb4
 8002136:	5e9b      	ldrsh	r3, [r3, r2]
 8002138:	617b      	str	r3, [r7, #20]
        err = LMIC.lastDriftDiff;
 800213a:	4b22      	ldr	r3, [pc, #136]	; (80021c4 <calcRxWindow+0xac>)
 800213c:	22b6      	movs	r2, #182	; 0xb6
 800213e:	5e9b      	ldrsh	r3, [r3, r2]
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	e011      	b.n	8002168 <calcRxWindow+0x50>
    } else {
        // scheduled RX window within secs into current beacon period
        rxoff = (LMIC.drift * (ostime_t)secs) >> BCN_INTV_exp;
 8002144:	4b1f      	ldr	r3, [pc, #124]	; (80021c4 <calcRxWindow+0xac>)
 8002146:	22b4      	movs	r2, #180	; 0xb4
 8002148:	5e9b      	ldrsh	r3, [r3, r2]
 800214a:	001a      	movs	r2, r3
 800214c:	1dfb      	adds	r3, r7, #7
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	4353      	muls	r3, r2
 8002152:	11db      	asrs	r3, r3, #7
 8002154:	617b      	str	r3, [r7, #20]
        err = (LMIC.lastDriftDiff * (ostime_t)secs) >> BCN_INTV_exp;
 8002156:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <calcRxWindow+0xac>)
 8002158:	22b6      	movs	r2, #182	; 0xb6
 800215a:	5e9b      	ldrsh	r3, [r3, r2]
 800215c:	001a      	movs	r2, r3
 800215e:	1dfb      	adds	r3, r7, #7
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	4353      	muls	r3, r2
 8002164:	11db      	asrs	r3, r3, #7
 8002166:	613b      	str	r3, [r7, #16]
    }
    u1_t rxsyms = MINRX_SYMS;
 8002168:	240f      	movs	r4, #15
 800216a:	193b      	adds	r3, r7, r4
 800216c:	2205      	movs	r2, #5
 800216e:	701a      	strb	r2, [r3, #0]
    err += (ostime_t)LMIC.maxDriftDiff * LMIC.missedBcns;
 8002170:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <calcRxWindow+0xac>)
 8002172:	22b8      	movs	r2, #184	; 0xb8
 8002174:	5e9b      	ldrsh	r3, [r3, r2]
 8002176:	0019      	movs	r1, r3
 8002178:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <calcRxWindow+0xac>)
 800217a:	2332      	movs	r3, #50	; 0x32
 800217c:	33ff      	adds	r3, #255	; 0xff
 800217e:	5cd3      	ldrb	r3, [r2, r3]
 8002180:	434b      	muls	r3, r1
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	18d3      	adds	r3, r2, r3
 8002186:	613b      	str	r3, [r7, #16]
    LMIC.rxsyms = MINRX_SYMS + (err / dr2hsym(dr));
 8002188:	1dbb      	adds	r3, r7, #6
 800218a:	781a      	ldrb	r2, [r3, #0]
 800218c:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <calcRxWindow+0xb0>)
 800218e:	0092      	lsls	r2, r2, #2
 8002190:	58d3      	ldr	r3, [r2, r3]
 8002192:	0019      	movs	r1, r3
 8002194:	6938      	ldr	r0, [r7, #16]
 8002196:	f7fe f841 	bl	800021c <__divsi3>
 800219a:	0003      	movs	r3, r0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	3305      	adds	r3, #5
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <calcRxWindow+0xac>)
 80021a4:	741a      	strb	r2, [r3, #16]

    return (rxsyms-PAMBL_SYMS) * dr2hsym(dr) + rxoff;
 80021a6:	193b      	adds	r3, r7, r4
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	3b08      	subs	r3, #8
 80021ac:	1dba      	adds	r2, r7, #6
 80021ae:	7811      	ldrb	r1, [r2, #0]
 80021b0:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <calcRxWindow+0xb0>)
 80021b2:	0089      	lsls	r1, r1, #2
 80021b4:	588a      	ldr	r2, [r1, r2]
 80021b6:	435a      	muls	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	18d3      	adds	r3, r2, r3
}
 80021bc:	0018      	movs	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	b007      	add	sp, #28
 80021c2:	bd90      	pop	{r4, r7, pc}
 80021c4:	200002c4 	.word	0x200002c4
 80021c8:	0800cc34 	.word	0x0800cc34

080021cc <calcBcnRxWindowFromMillis>:


// Setup beacon RX parameters assuming we have an error of ms (aka +/-(ms/2))
static void calcBcnRxWindowFromMillis (u1_t ms, bit_t ini) {
 80021cc:	b5b0      	push	{r4, r5, r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	0002      	movs	r2, r0
 80021d4:	1dfb      	adds	r3, r7, #7
 80021d6:	701a      	strb	r2, [r3, #0]
 80021d8:	1dbb      	adds	r3, r7, #6
 80021da:	1c0a      	adds	r2, r1, #0
 80021dc:	701a      	strb	r2, [r3, #0]
    if( ini ) {
 80021de:	1dbb      	adds	r3, r7, #6
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d017      	beq.n	8002216 <calcBcnRxWindowFromMillis+0x4a>
        LMIC.drift = 0;
 80021e6:	4b2d      	ldr	r3, [pc, #180]	; (800229c <calcBcnRxWindowFromMillis+0xd0>)
 80021e8:	22b4      	movs	r2, #180	; 0xb4
 80021ea:	2100      	movs	r1, #0
 80021ec:	5299      	strh	r1, [r3, r2]
        LMIC.maxDriftDiff = 0;
 80021ee:	4b2b      	ldr	r3, [pc, #172]	; (800229c <calcBcnRxWindowFromMillis+0xd0>)
 80021f0:	22b8      	movs	r2, #184	; 0xb8
 80021f2:	2100      	movs	r1, #0
 80021f4:	5299      	strh	r1, [r3, r2]
        LMIC.missedBcns = 0;
 80021f6:	4a29      	ldr	r2, [pc, #164]	; (800229c <calcBcnRxWindowFromMillis+0xd0>)
 80021f8:	2332      	movs	r3, #50	; 0x32
 80021fa:	33ff      	adds	r3, #255	; 0xff
 80021fc:	2100      	movs	r1, #0
 80021fe:	54d1      	strb	r1, [r2, r3]
        LMIC.bcninfo.flags |= BCN_NODRIFT|BCN_NODDIFF;
 8002200:	4a26      	ldr	r2, [pc, #152]	; (800229c <calcBcnRxWindowFromMillis+0xd0>)
 8002202:	23cb      	movs	r3, #203	; 0xcb
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	5cd3      	ldrb	r3, [r2, r3]
 8002208:	220c      	movs	r2, #12
 800220a:	4313      	orrs	r3, r2
 800220c:	b2d9      	uxtb	r1, r3
 800220e:	4a23      	ldr	r2, [pc, #140]	; (800229c <calcBcnRxWindowFromMillis+0xd0>)
 8002210:	23cb      	movs	r3, #203	; 0xcb
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	54d1      	strb	r1, [r2, r3]
    }
    ostime_t hsym = dr2hsym(DR_BCN);
 8002216:	2342      	movs	r3, #66	; 0x42
 8002218:	60fb      	str	r3, [r7, #12]
    LMIC.bcnRxsyms = MINRX_SYMS + ms2osticksCeil(ms) / hsym;
 800221a:	1dfb      	adds	r3, r7, #7
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	001c      	movs	r4, r3
 8002222:	2300      	movs	r3, #0
 8002224:	001d      	movs	r5, r3
 8002226:	22fa      	movs	r2, #250	; 0xfa
 8002228:	01d2      	lsls	r2, r2, #7
 800222a:	2300      	movs	r3, #0
 800222c:	0020      	movs	r0, r4
 800222e:	0029      	movs	r1, r5
 8002230:	f7fe f924 	bl	800047c <__aeabi_lmul>
 8002234:	0003      	movs	r3, r0
 8002236:	000c      	movs	r4, r1
 8002238:	0019      	movs	r1, r3
 800223a:	0022      	movs	r2, r4
 800223c:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <calcBcnRxWindowFromMillis+0xd4>)
 800223e:	2400      	movs	r4, #0
 8002240:	18c9      	adds	r1, r1, r3
 8002242:	4162      	adcs	r2, r4
 8002244:	0008      	movs	r0, r1
 8002246:	0011      	movs	r1, r2
 8002248:	22fa      	movs	r2, #250	; 0xfa
 800224a:	0092      	lsls	r2, r2, #2
 800224c:	2300      	movs	r3, #0
 800224e:	f7fe f8d1 	bl	80003f4 <__aeabi_ldivmod>
 8002252:	0003      	movs	r3, r0
 8002254:	000c      	movs	r4, r1
 8002256:	68f9      	ldr	r1, [r7, #12]
 8002258:	0018      	movs	r0, r3
 800225a:	f7fd ffdf 	bl	800021c <__divsi3>
 800225e:	0003      	movs	r3, r0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	3305      	adds	r3, #5
 8002264:	b2d9      	uxtb	r1, r3
 8002266:	4a0d      	ldr	r2, [pc, #52]	; (800229c <calcBcnRxWindowFromMillis+0xd0>)
 8002268:	238a      	movs	r3, #138	; 0x8a
 800226a:	33ff      	adds	r3, #255	; 0xff
 800226c:	54d1      	strb	r1, [r2, r3]
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - (LMIC.bcnRxsyms-PAMBL_SYMS) * hsym;
 800226e:	4a0b      	ldr	r2, [pc, #44]	; (800229c <calcBcnRxWindowFromMillis+0xd0>)
 8002270:	23c8      	movs	r3, #200	; 0xc8
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	58d3      	ldr	r3, [r2, r3]
 8002276:	22fa      	movs	r2, #250	; 0xfa
 8002278:	0392      	lsls	r2, r2, #14
 800227a:	189a      	adds	r2, r3, r2
 800227c:	4907      	ldr	r1, [pc, #28]	; (800229c <calcBcnRxWindowFromMillis+0xd0>)
 800227e:	238a      	movs	r3, #138	; 0x8a
 8002280:	33ff      	adds	r3, #255	; 0xff
 8002282:	5ccb      	ldrb	r3, [r1, r3]
 8002284:	3b08      	subs	r3, #8
 8002286:	68f9      	ldr	r1, [r7, #12]
 8002288:	434b      	muls	r3, r1
 800228a:	1ad1      	subs	r1, r2, r3
 800228c:	4a03      	ldr	r2, [pc, #12]	; (800229c <calcBcnRxWindowFromMillis+0xd0>)
 800228e:	23c6      	movs	r3, #198	; 0xc6
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	50d1      	str	r1, [r2, r3]
}
 8002294:	46c0      	nop			; (mov r8, r8)
 8002296:	46bd      	mov	sp, r7
 8002298:	b004      	add	sp, #16
 800229a:	bdb0      	pop	{r4, r5, r7, pc}
 800229c:	200002c4 	.word	0x200002c4
 80022a0:	000003e7 	.word	0x000003e7

080022a4 <rxschedInit>:


// Setup scheduled RX window (ping/multicast slot)
static void rxschedInit (xref2rxsched_t rxsched) {
 80022a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
    os_clearMem(AESkey,16);
 80022ac:	4b3a      	ldr	r3, [pc, #232]	; (8002398 <rxschedInit+0xf4>)
 80022ae:	2210      	movs	r2, #16
 80022b0:	2100      	movs	r1, #0
 80022b2:	0018      	movs	r0, r3
 80022b4:	f009 f991 	bl	800b5da <memset>
    os_clearMem(LMIC.frame+8,8);
 80022b8:	4b38      	ldr	r3, [pc, #224]	; (800239c <rxschedInit+0xf8>)
 80022ba:	2208      	movs	r2, #8
 80022bc:	2100      	movs	r1, #0
 80022be:	0018      	movs	r0, r3
 80022c0:	f009 f98b 	bl	800b5da <memset>
    os_wlsbf4(LMIC.frame, LMIC.bcninfo.time);
 80022c4:	4a36      	ldr	r2, [pc, #216]	; (80023a0 <rxschedInit+0xfc>)
 80022c6:	23cc      	movs	r3, #204	; 0xcc
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	58d2      	ldr	r2, [r2, r3]
 80022cc:	4b35      	ldr	r3, [pc, #212]	; (80023a4 <rxschedInit+0x100>)
 80022ce:	0011      	movs	r1, r2
 80022d0:	0018      	movs	r0, r3
 80022d2:	f7ff fc33 	bl	8001b3c <os_wlsbf4>
    os_wlsbf4(LMIC.frame+4, LMIC.devaddr);
 80022d6:	4834      	ldr	r0, [pc, #208]	; (80023a8 <rxschedInit+0x104>)
 80022d8:	4a31      	ldr	r2, [pc, #196]	; (80023a0 <rxschedInit+0xfc>)
 80022da:	238a      	movs	r3, #138	; 0x8a
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	58d3      	ldr	r3, [r2, r3]
 80022e0:	0019      	movs	r1, r3
 80022e2:	f7ff fc2b 	bl	8001b3c <os_wlsbf4>
    os_aes(AES_ENC,LMIC.frame,16);
 80022e6:	4b2f      	ldr	r3, [pc, #188]	; (80023a4 <rxschedInit+0x100>)
 80022e8:	2210      	movs	r2, #16
 80022ea:	0019      	movs	r1, r3
 80022ec:	2000      	movs	r0, #0
 80022ee:	f7fe fb4b 	bl	8000988 <os_aes>
    u1_t intvExp = rxsched->intvExp;
 80022f2:	240f      	movs	r4, #15
 80022f4:	193b      	adds	r3, r7, r4
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	7852      	ldrb	r2, [r2, #1]
 80022fa:	701a      	strb	r2, [r3, #0]
    ostime_t off = os_rlsbf2(LMIC.frame) & (0x0FFF >> (7 - intvExp)); // random offset (slot units)
 80022fc:	4b29      	ldr	r3, [pc, #164]	; (80023a4 <rxschedInit+0x100>)
 80022fe:	0018      	movs	r0, r3
 8002300:	f7ff fbbb 	bl	8001a7a <os_rlsbf2>
 8002304:	0003      	movs	r3, r0
 8002306:	0019      	movs	r1, r3
 8002308:	193b      	adds	r3, r7, r4
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2207      	movs	r2, #7
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	4a26      	ldr	r2, [pc, #152]	; (80023ac <rxschedInit+0x108>)
 8002312:	411a      	asrs	r2, r3
 8002314:	0013      	movs	r3, r2
 8002316:	400b      	ands	r3, r1
 8002318:	60bb      	str	r3, [r7, #8]
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 800231a:	4a21      	ldr	r2, [pc, #132]	; (80023a0 <rxschedInit+0xfc>)
 800231c:	23c8      	movs	r3, #200	; 0xc8
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	58d3      	ldr	r3, [r2, r3]
 8002322:	4a23      	ldr	r2, [pc, #140]	; (80023b0 <rxschedInit+0x10c>)
 8002324:	189c      	adds	r4, r3, r2
                       BCN_RESERVE_osticks +
                       ms2osticks(BCN_SLOT_SPAN_ms * off)); // random offset osticks
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	001d      	movs	r5, r3
 800232a:	17db      	asrs	r3, r3, #31
 800232c:	001e      	movs	r6, r3
 800232e:	4a21      	ldr	r2, [pc, #132]	; (80023b4 <rxschedInit+0x110>)
 8002330:	2300      	movs	r3, #0
 8002332:	0028      	movs	r0, r5
 8002334:	0031      	movs	r1, r6
 8002336:	f7fe f8a1 	bl	800047c <__aeabi_lmul>
 800233a:	0002      	movs	r2, r0
 800233c:	000b      	movs	r3, r1
 800233e:	0010      	movs	r0, r2
 8002340:	0019      	movs	r1, r3
 8002342:	22fa      	movs	r2, #250	; 0xfa
 8002344:	0092      	lsls	r2, r2, #2
 8002346:	2300      	movs	r3, #0
 8002348:	f7fe f854 	bl	80003f4 <__aeabi_ldivmod>
 800234c:	0002      	movs	r2, r0
 800234e:	000b      	movs	r3, r1
 8002350:	0013      	movs	r3, r2
                       BCN_RESERVE_osticks +
 8002352:	18e2      	adds	r2, r4, r3
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	605a      	str	r2, [r3, #4]
    rxsched->slot   = 0;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	709a      	strb	r2, [r3, #2]
    rxsched->rxtime = rxsched->rxbase - calcRxWindow(/*secs BCN_RESERVE*/2+(1<<intvExp),rxsched->dr);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685c      	ldr	r4, [r3, #4]
 8002362:	230f      	movs	r3, #15
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2201      	movs	r2, #1
 800236a:	409a      	lsls	r2, r3
 800236c:	0013      	movs	r3, r2
 800236e:	b2db      	uxtb	r3, r3
 8002370:	3302      	adds	r3, #2
 8002372:	b2da      	uxtb	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	0019      	movs	r1, r3
 800237a:	0010      	movs	r0, r2
 800237c:	f7ff fecc 	bl	8002118 <calcRxWindow>
 8002380:	0003      	movs	r3, r0
 8002382:	1ae2      	subs	r2, r4, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <rxschedInit+0xfc>)
 800238a:	7c1a      	ldrb	r2, [r3, #16]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	70da      	strb	r2, [r3, #3]
}
 8002390:	46c0      	nop			; (mov r8, r8)
 8002392:	46bd      	mov	sp, r7
 8002394:	b005      	add	sp, #20
 8002396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002398:	2000009c 	.word	0x2000009c
 800239c:	20000414 	.word	0x20000414
 80023a0:	200002c4 	.word	0x200002c4
 80023a4:	2000040c 	.word	0x2000040c
 80023a8:	20000410 	.word	0x20000410
 80023ac:	00000fff 	.word	0x00000fff
 80023b0:	00010900 	.word	0x00010900
 80023b4:	000ea600 	.word	0x000ea600

080023b8 <rxschedNext>:


static bit_t rxschedNext (xref2rxsched_t rxsched, ostime_t cando) {
 80023b8:	b590      	push	{r4, r7, lr}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  again:
    if( rxsched->rxtime - cando >= 0 )
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	d401      	bmi.n	80023d0 <rxschedNext+0x18>
        return 1;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e04a      	b.n	8002466 <rxschedNext+0xae>
    u1_t slot;
    if( (slot=rxsched->slot) >= 128 )
 80023d0:	210f      	movs	r1, #15
 80023d2:	187b      	adds	r3, r7, r1
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	7892      	ldrb	r2, [r2, #2]
 80023d8:	701a      	strb	r2, [r3, #0]
 80023da:	187b      	adds	r3, r7, r1
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	b25b      	sxtb	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	da01      	bge.n	80023e8 <rxschedNext+0x30>
        return 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	e03e      	b.n	8002466 <rxschedNext+0xae>
    u1_t intv = 1<<rxsched->intvExp;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	785b      	ldrb	r3, [r3, #1]
 80023ec:	001a      	movs	r2, r3
 80023ee:	2301      	movs	r3, #1
 80023f0:	4093      	lsls	r3, r2
 80023f2:	001a      	movs	r2, r3
 80023f4:	240e      	movs	r4, #14
 80023f6:	193b      	adds	r3, r7, r4
 80023f8:	701a      	strb	r2, [r3, #0]
    if( (rxsched->slot = (slot += (intv))) >= 128 )
 80023fa:	200f      	movs	r0, #15
 80023fc:	183b      	adds	r3, r7, r0
 80023fe:	1839      	adds	r1, r7, r0
 8002400:	193a      	adds	r2, r7, r4
 8002402:	7809      	ldrb	r1, [r1, #0]
 8002404:	7812      	ldrb	r2, [r2, #0]
 8002406:	188a      	adds	r2, r1, r2
 8002408:	701a      	strb	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	183a      	adds	r2, r7, r0
 800240e:	7812      	ldrb	r2, [r2, #0]
 8002410:	709a      	strb	r2, [r3, #2]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	789b      	ldrb	r3, [r3, #2]
 8002416:	b25b      	sxtb	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	da01      	bge.n	8002420 <rxschedNext+0x68>
        return 0;
 800241c:	2300      	movs	r3, #0
 800241e:	e022      	b.n	8002466 <rxschedNext+0xae>
    rxsched->rxtime = rxsched->rxbase
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6859      	ldr	r1, [r3, #4]
        + ((BCN_WINDOW_osticks * (ostime_t)slot) >> BCN_INTV_exp)
 8002424:	200f      	movs	r0, #15
 8002426:	183b      	adds	r3, r7, r0
 8002428:	781a      	ldrb	r2, [r3, #0]
 800242a:	0013      	movs	r3, r2
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	049b      	lsls	r3, r3, #18
 8002432:	11db      	asrs	r3, r3, #7
 8002434:	18cc      	adds	r4, r1, r3
        - calcRxWindow(/*secs BCN_RESERVE*/2+slot+intv,rxsched->dr);
 8002436:	183a      	adds	r2, r7, r0
 8002438:	230e      	movs	r3, #14
 800243a:	18fb      	adds	r3, r7, r3
 800243c:	7812      	ldrb	r2, [r2, #0]
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	18d3      	adds	r3, r2, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	3302      	adds	r3, #2
 8002446:	b2da      	uxtb	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	0019      	movs	r1, r3
 800244e:	0010      	movs	r0, r2
 8002450:	f7ff fe62 	bl	8002118 <calcRxWindow>
 8002454:	0003      	movs	r3, r0
 8002456:	1ae2      	subs	r2, r4, r3
    rxsched->rxtime = rxsched->rxbase
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <rxschedNext+0xb8>)
 800245e:	7c1a      	ldrb	r2, [r3, #16]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	70da      	strb	r2, [r3, #3]
    goto again;
 8002464:	e7ad      	b.n	80023c2 <rxschedNext+0xa>
}
 8002466:	0018      	movs	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	b005      	add	sp, #20
 800246c:	bd90      	pop	{r4, r7, pc}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	200002c4 	.word	0x200002c4

08002474 <rndDelay>:


static ostime_t rndDelay (u1_t secSpan) {
 8002474:	b590      	push	{r4, r7, lr}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	0002      	movs	r2, r0
 800247c:	1dfb      	adds	r3, r7, #7
 800247e:	701a      	strb	r2, [r3, #0]
    u2_t r = os_getRndU2();
 8002480:	f003 feba 	bl	80061f8 <radio_rand1>
 8002484:	0003      	movs	r3, r0
 8002486:	021b      	lsls	r3, r3, #8
 8002488:	b21c      	sxth	r4, r3
 800248a:	f003 feb5 	bl	80061f8 <radio_rand1>
 800248e:	0003      	movs	r3, r0
 8002490:	b21b      	sxth	r3, r3
 8002492:	4323      	orrs	r3, r4
 8002494:	b21a      	sxth	r2, r3
 8002496:	210a      	movs	r1, #10
 8002498:	187b      	adds	r3, r7, r1
 800249a:	801a      	strh	r2, [r3, #0]
    ostime_t delay = r;
 800249c:	187b      	adds	r3, r7, r1
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	60fb      	str	r3, [r7, #12]
    if( delay > OSTICKS_PER_SEC )
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	23fa      	movs	r3, #250	; 0xfa
 80024a6:	01db      	lsls	r3, r3, #7
 80024a8:	429a      	cmp	r2, r3
 80024aa:	dd0a      	ble.n	80024c2 <rndDelay+0x4e>
        delay = r % (u2_t)OSTICKS_PER_SEC;
 80024ac:	230a      	movs	r3, #10
 80024ae:	18fb      	adds	r3, r7, r3
 80024b0:	881a      	ldrh	r2, [r3, #0]
 80024b2:	23fa      	movs	r3, #250	; 0xfa
 80024b4:	01d9      	lsls	r1, r3, #7
 80024b6:	0010      	movs	r0, r2
 80024b8:	f7fd feac 	bl	8000214 <__aeabi_uidivmod>
 80024bc:	000b      	movs	r3, r1
 80024be:	b29b      	uxth	r3, r3
 80024c0:	60fb      	str	r3, [r7, #12]
    if( secSpan > 0 )
 80024c2:	1dfb      	adds	r3, r7, #7
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d016      	beq.n	80024f8 <rndDelay+0x84>
        delay += ((u1_t)r % secSpan) * OSTICKS_PER_SEC;
 80024ca:	230a      	movs	r3, #10
 80024cc:	18fb      	adds	r3, r7, r3
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	1dfb      	adds	r3, r7, #7
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	0019      	movs	r1, r3
 80024d8:	0010      	movs	r0, r2
 80024da:	f7fd fe9b 	bl	8000214 <__aeabi_uidivmod>
 80024de:	000b      	movs	r3, r1
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	001a      	movs	r2, r3
 80024e4:	0013      	movs	r3, r2
 80024e6:	015b      	lsls	r3, r3, #5
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	189b      	adds	r3, r3, r2
 80024ee:	021b      	lsls	r3, r3, #8
 80024f0:	001a      	movs	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	189b      	adds	r3, r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]
    return delay;
 80024f8:	68fb      	ldr	r3, [r7, #12]
}
 80024fa:	0018      	movs	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b005      	add	sp, #20
 8002500:	bd90      	pop	{r4, r7, pc}
	...

08002504 <txDelay>:


static void txDelay (ostime_t reftime, u1_t secSpan) {
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	000a      	movs	r2, r1
 800250e:	1cfb      	adds	r3, r7, #3
 8002510:	701a      	strb	r2, [r3, #0]
    reftime += rndDelay(secSpan);
 8002512:	1cfb      	adds	r3, r7, #3
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	0018      	movs	r0, r3
 8002518:	f7ff ffac 	bl	8002474 <rndDelay>
 800251c:	0002      	movs	r2, r0
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	189b      	adds	r3, r3, r2
 8002522:	607b      	str	r3, [r7, #4]
    if( LMIC.globalDutyRate == 0  ||  (reftime - LMIC.globalDutyAvail) > 0 ) {
 8002524:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <txDelay+0x5c>)
 8002526:	22a3      	movs	r2, #163	; 0xa3
 8002528:	5c9b      	ldrb	r3, [r3, r2]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d006      	beq.n	800253c <txDelay+0x38>
 800252e:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <txDelay+0x5c>)
 8002530:	22a4      	movs	r2, #164	; 0xa4
 8002532:	589b      	ldr	r3, [r3, r2]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	dd0d      	ble.n	8002558 <txDelay+0x54>
        LMIC.globalDutyAvail = reftime;
 800253c:	4b08      	ldr	r3, [pc, #32]	; (8002560 <txDelay+0x5c>)
 800253e:	21a4      	movs	r1, #164	; 0xa4
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	505a      	str	r2, [r3, r1]
        LMIC.opmode |= OP_RNDTX;
 8002544:	4b06      	ldr	r3, [pc, #24]	; (8002560 <txDelay+0x5c>)
 8002546:	22ac      	movs	r2, #172	; 0xac
 8002548:	5a9b      	ldrh	r3, [r3, r2]
 800254a:	2280      	movs	r2, #128	; 0x80
 800254c:	0052      	lsls	r2, r2, #1
 800254e:	4313      	orrs	r3, r2
 8002550:	b299      	uxth	r1, r3
 8002552:	4b03      	ldr	r3, [pc, #12]	; (8002560 <txDelay+0x5c>)
 8002554:	22ac      	movs	r2, #172	; 0xac
 8002556:	5299      	strh	r1, [r3, r2]
    }
}
 8002558:	46c0      	nop			; (mov r8, r8)
 800255a:	46bd      	mov	sp, r7
 800255c:	b002      	add	sp, #8
 800255e:	bd80      	pop	{r7, pc}
 8002560:	200002c4 	.word	0x200002c4

08002564 <setDrJoin>:


static void setDrJoin (u1_t reason, u1_t dr) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	0002      	movs	r2, r0
 800256c:	1dfb      	adds	r3, r7, #7
 800256e:	701a      	strb	r2, [r3, #0]
 8002570:	1dbb      	adds	r3, r7, #6
 8002572:	1c0a      	adds	r2, r1, #0
 8002574:	701a      	strb	r2, [r3, #0]
                        e_.deveui    = MAIN::CDEV->getEui(),
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = LMIC.adrTxPow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    LMIC.datarate = dr;
 8002576:	4b04      	ldr	r3, [pc, #16]	; (8002588 <setDrJoin+0x24>)
 8002578:	1dba      	adds	r2, r7, #6
 800257a:	21b0      	movs	r1, #176	; 0xb0
 800257c:	7812      	ldrb	r2, [r2, #0]
 800257e:	545a      	strb	r2, [r3, r1]
    DO_DEVDB(LMIC.datarate,datarate);
}
 8002580:	46c0      	nop			; (mov r8, r8)
 8002582:	46bd      	mov	sp, r7
 8002584:	b002      	add	sp, #8
 8002586:	bd80      	pop	{r7, pc}
 8002588:	200002c4 	.word	0x200002c4

0800258c <setDrTxpow>:


static void setDrTxpow (u1_t reason, u1_t dr, s1_t pow) {
 800258c:	b590      	push	{r4, r7, lr}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	0004      	movs	r4, r0
 8002594:	0008      	movs	r0, r1
 8002596:	0011      	movs	r1, r2
 8002598:	1dfb      	adds	r3, r7, #7
 800259a:	1c22      	adds	r2, r4, #0
 800259c:	701a      	strb	r2, [r3, #0]
 800259e:	1dbb      	adds	r3, r7, #6
 80025a0:	1c02      	adds	r2, r0, #0
 80025a2:	701a      	strb	r2, [r3, #0]
 80025a4:	1d7b      	adds	r3, r7, #5
 80025a6:	1c0a      	adds	r2, r1, #0
 80025a8:	701a      	strb	r2, [r3, #0]
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = pow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    
    if( pow != KEEP_TXPOW )
 80025aa:	1d7b      	adds	r3, r7, #5
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	b25b      	sxtb	r3, r3
 80025b0:	3380      	adds	r3, #128	; 0x80
 80025b2:	d004      	beq.n	80025be <setDrTxpow+0x32>
        LMIC.adrTxPow = pow;
 80025b4:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <setDrTxpow+0x68>)
 80025b6:	1d7a      	adds	r2, r7, #5
 80025b8:	21af      	movs	r1, #175	; 0xaf
 80025ba:	7812      	ldrb	r2, [r2, #0]
 80025bc:	545a      	strb	r2, [r3, r1]
    if( LMIC.datarate != dr ) {
 80025be:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <setDrTxpow+0x68>)
 80025c0:	22b0      	movs	r2, #176	; 0xb0
 80025c2:	5c9b      	ldrb	r3, [r3, r2]
 80025c4:	1dba      	adds	r2, r7, #6
 80025c6:	7812      	ldrb	r2, [r2, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d00e      	beq.n	80025ea <setDrTxpow+0x5e>
        LMIC.datarate = dr;
 80025cc:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <setDrTxpow+0x68>)
 80025ce:	1dba      	adds	r2, r7, #6
 80025d0:	21b0      	movs	r1, #176	; 0xb0
 80025d2:	7812      	ldrb	r2, [r2, #0]
 80025d4:	545a      	strb	r2, [r3, r1]
        DO_DEVDB(LMIC.datarate,datarate);
        LMIC.opmode |= OP_NEXTCHNL;
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <setDrTxpow+0x68>)
 80025d8:	22ac      	movs	r2, #172	; 0xac
 80025da:	5a9b      	ldrh	r3, [r3, r2]
 80025dc:	2280      	movs	r2, #128	; 0x80
 80025de:	0112      	lsls	r2, r2, #4
 80025e0:	4313      	orrs	r3, r2
 80025e2:	b299      	uxth	r1, r3
 80025e4:	4b03      	ldr	r3, [pc, #12]	; (80025f4 <setDrTxpow+0x68>)
 80025e6:	22ac      	movs	r2, #172	; 0xac
 80025e8:	5299      	strh	r1, [r3, r2]
    }
}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b003      	add	sp, #12
 80025f0:	bd90      	pop	{r4, r7, pc}
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	200002c4 	.word	0x200002c4

080025f8 <initDefaultChannels>:
    // Default operational frequencies
    EU868_F1|BAND_CENTI, EU868_F2|BAND_CENTI, EU868_F3|BAND_CENTI,
    EU868_F4|BAND_MILLI, EU868_F5|BAND_MILLI, EU868_F6|BAND_DECI
};

static void initDefaultChannels (bit_t join) {
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	0002      	movs	r2, r0
 8002600:	1dfb      	adds	r3, r7, #7
 8002602:	701a      	strb	r2, [r3, #0]
    os_clearMem(&LMIC.channelFreq, sizeof(LMIC.channelFreq));
 8002604:	4b46      	ldr	r3, [pc, #280]	; (8002720 <initDefaultChannels+0x128>)
 8002606:	2240      	movs	r2, #64	; 0x40
 8002608:	2100      	movs	r1, #0
 800260a:	0018      	movs	r0, r3
 800260c:	f008 ffe5 	bl	800b5da <memset>
    os_clearMem(&LMIC.channelDrMap, sizeof(LMIC.channelDrMap));
 8002610:	4b44      	ldr	r3, [pc, #272]	; (8002724 <initDefaultChannels+0x12c>)
 8002612:	2220      	movs	r2, #32
 8002614:	2100      	movs	r1, #0
 8002616:	0018      	movs	r0, r3
 8002618:	f008 ffdf 	bl	800b5da <memset>
    os_clearMem(&LMIC.bands, sizeof(LMIC.bands));
 800261c:	4b42      	ldr	r3, [pc, #264]	; (8002728 <initDefaultChannels+0x130>)
 800261e:	2220      	movs	r2, #32
 8002620:	2100      	movs	r1, #0
 8002622:	0018      	movs	r0, r3
 8002624:	f008 ffd9 	bl	800b5da <memset>

    LMIC.channelMap = (1 << NUM_DEFAULT_CHANNELS) - 1;
 8002628:	4b40      	ldr	r3, [pc, #256]	; (800272c <initDefaultChannels+0x134>)
 800262a:	22a0      	movs	r2, #160	; 0xa0
 800262c:	213f      	movs	r1, #63	; 0x3f
 800262e:	5299      	strh	r1, [r3, r2]
    u1_t su = join ? 0 : NUM_DEFAULT_CHANNELS;
 8002630:	1dfb      	adds	r3, r7, #7
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <initDefaultChannels+0x44>
 8002638:	2200      	movs	r2, #0
 800263a:	e000      	b.n	800263e <initDefaultChannels+0x46>
 800263c:	2206      	movs	r2, #6
 800263e:	230f      	movs	r3, #15
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	701a      	strb	r2, [r3, #0]
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
 8002644:	230e      	movs	r3, #14
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
 800264c:	e01d      	b.n	800268a <initDefaultChannels+0x92>
        LMIC.channelFreq[fu]  = iniChannelFreq[su];
 800264e:	240f      	movs	r4, #15
 8002650:	193b      	adds	r3, r7, r4
 8002652:	7819      	ldrb	r1, [r3, #0]
 8002654:	200e      	movs	r0, #14
 8002656:	183b      	adds	r3, r7, r0
 8002658:	781a      	ldrb	r2, [r3, #0]
 800265a:	4b35      	ldr	r3, [pc, #212]	; (8002730 <initDefaultChannels+0x138>)
 800265c:	0089      	lsls	r1, r1, #2
 800265e:	58c9      	ldr	r1, [r1, r3]
 8002660:	4b32      	ldr	r3, [pc, #200]	; (800272c <initDefaultChannels+0x134>)
 8002662:	3210      	adds	r2, #16
 8002664:	0092      	lsls	r2, r2, #2
 8002666:	50d1      	str	r1, [r2, r3]
        LMIC.channelDrMap[fu] = DR_RANGE_MAP(DR_SF12,DR_SF7);
 8002668:	183b      	adds	r3, r7, r0
 800266a:	781a      	ldrb	r2, [r3, #0]
 800266c:	4b2f      	ldr	r3, [pc, #188]	; (800272c <initDefaultChannels+0x134>)
 800266e:	3240      	adds	r2, #64	; 0x40
 8002670:	0052      	lsls	r2, r2, #1
 8002672:	213f      	movs	r1, #63	; 0x3f
 8002674:	52d1      	strh	r1, [r2, r3]
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
 8002676:	183b      	adds	r3, r7, r0
 8002678:	781a      	ldrb	r2, [r3, #0]
 800267a:	183b      	adds	r3, r7, r0
 800267c:	3201      	adds	r2, #1
 800267e:	701a      	strb	r2, [r3, #0]
 8002680:	193b      	adds	r3, r7, r4
 8002682:	781a      	ldrb	r2, [r3, #0]
 8002684:	193b      	adds	r3, r7, r4
 8002686:	3201      	adds	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]
 800268a:	230e      	movs	r3, #14
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b05      	cmp	r3, #5
 8002692:	d9dc      	bls.n	800264e <initDefaultChannels+0x56>
//    if( !join ) {
//        LMIC.channelDrMap[5] = DR_RANGE_MAP(DR_SF12,DR_SF7);
//        LMIC.channelDrMap[1] = DR_RANGE_MAP(DR_SF12,DR_FSK);
//    }

    LMIC.bands[BAND_MILLI].txcap    = 1000;  // 0.1%
 8002694:	4b25      	ldr	r3, [pc, #148]	; (800272c <initDefaultChannels+0x134>)
 8002696:	22fa      	movs	r2, #250	; 0xfa
 8002698:	0092      	lsls	r2, r2, #2
 800269a:	841a      	strh	r2, [r3, #32]
    LMIC.bands[BAND_MILLI].txpow    = 14;
 800269c:	4b23      	ldr	r3, [pc, #140]	; (800272c <initDefaultChannels+0x134>)
 800269e:	2222      	movs	r2, #34	; 0x22
 80026a0:	210e      	movs	r1, #14
 80026a2:	5499      	strb	r1, [r3, r2]
    LMIC.bands[BAND_MILLI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 80026a4:	f003 fda8 	bl	80061f8 <radio_rand1>
 80026a8:	0003      	movs	r3, r0
 80026aa:	001a      	movs	r2, r3
 80026ac:	230f      	movs	r3, #15
 80026ae:	4013      	ands	r3, r2
 80026b0:	b2d9      	uxtb	r1, r3
 80026b2:	4b1e      	ldr	r3, [pc, #120]	; (800272c <initDefaultChannels+0x134>)
 80026b4:	2223      	movs	r2, #35	; 0x23
 80026b6:	5499      	strb	r1, [r3, r2]
    LMIC.bands[BAND_CENTI].txcap    = 100;   // 1%
 80026b8:	4b1c      	ldr	r3, [pc, #112]	; (800272c <initDefaultChannels+0x134>)
 80026ba:	2264      	movs	r2, #100	; 0x64
 80026bc:	851a      	strh	r2, [r3, #40]	; 0x28
    LMIC.bands[BAND_CENTI].txpow    = 14;
 80026be:	4b1b      	ldr	r3, [pc, #108]	; (800272c <initDefaultChannels+0x134>)
 80026c0:	222a      	movs	r2, #42	; 0x2a
 80026c2:	210e      	movs	r1, #14
 80026c4:	5499      	strb	r1, [r3, r2]
    LMIC.bands[BAND_CENTI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 80026c6:	f003 fd97 	bl	80061f8 <radio_rand1>
 80026ca:	0003      	movs	r3, r0
 80026cc:	001a      	movs	r2, r3
 80026ce:	230f      	movs	r3, #15
 80026d0:	4013      	ands	r3, r2
 80026d2:	b2d9      	uxtb	r1, r3
 80026d4:	4b15      	ldr	r3, [pc, #84]	; (800272c <initDefaultChannels+0x134>)
 80026d6:	222b      	movs	r2, #43	; 0x2b
 80026d8:	5499      	strb	r1, [r3, r2]
    LMIC.bands[BAND_DECI ].txcap    = 10;    // 10%
 80026da:	4b14      	ldr	r3, [pc, #80]	; (800272c <initDefaultChannels+0x134>)
 80026dc:	220a      	movs	r2, #10
 80026de:	861a      	strh	r2, [r3, #48]	; 0x30
    LMIC.bands[BAND_DECI ].txpow    = 27;
 80026e0:	4b12      	ldr	r3, [pc, #72]	; (800272c <initDefaultChannels+0x134>)
 80026e2:	2232      	movs	r2, #50	; 0x32
 80026e4:	211b      	movs	r1, #27
 80026e6:	5499      	strb	r1, [r3, r2]
    LMIC.bands[BAND_DECI ].lastchnl = os_getRndU1() % MAX_CHANNELS;
 80026e8:	f003 fd86 	bl	80061f8 <radio_rand1>
 80026ec:	0003      	movs	r3, r0
 80026ee:	001a      	movs	r2, r3
 80026f0:	230f      	movs	r3, #15
 80026f2:	4013      	ands	r3, r2
 80026f4:	b2d9      	uxtb	r1, r3
 80026f6:	4b0d      	ldr	r3, [pc, #52]	; (800272c <initDefaultChannels+0x134>)
 80026f8:	2233      	movs	r2, #51	; 0x33
 80026fa:	5499      	strb	r1, [r3, r2]
    LMIC.bands[BAND_MILLI].avail = 
    LMIC.bands[BAND_CENTI].avail =
    LMIC.bands[BAND_DECI ].avail = os_getTime();
 80026fc:	f002 ffe4 	bl	80056c8 <os_getTime>
 8002700:	0002      	movs	r2, r0
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <initDefaultChannels+0x134>)
 8002704:	635a      	str	r2, [r3, #52]	; 0x34
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <initDefaultChannels+0x134>)
 8002708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    LMIC.bands[BAND_CENTI].avail =
 800270a:	4b08      	ldr	r3, [pc, #32]	; (800272c <initDefaultChannels+0x134>)
 800270c:	62da      	str	r2, [r3, #44]	; 0x2c
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <initDefaultChannels+0x134>)
 8002710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    LMIC.bands[BAND_MILLI].avail = 
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <initDefaultChannels+0x134>)
 8002714:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	46bd      	mov	sp, r7
 800271a:	b005      	add	sp, #20
 800271c:	bd90      	pop	{r4, r7, pc}
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	20000304 	.word	0x20000304
 8002724:	20000344 	.word	0x20000344
 8002728:	200002e4 	.word	0x200002e4
 800272c:	200002c4 	.word	0x200002c4
 8002730:	0800cc54 	.word	0x0800cc54

08002734 <LMIC_setupChannel>:
    b->avail = os_getTime();
    b->lastchnl = os_getRndU1() % MAX_CHANNELS;
    return 1;
}

bit_t LMIC_setupChannel (u1_t chidx, u4_t freq, u2_t drmap, s1_t band) {
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	0004      	movs	r4, r0
 800273c:	6039      	str	r1, [r7, #0]
 800273e:	0010      	movs	r0, r2
 8002740:	0019      	movs	r1, r3
 8002742:	1dfb      	adds	r3, r7, #7
 8002744:	1c22      	adds	r2, r4, #0
 8002746:	701a      	strb	r2, [r3, #0]
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	1c02      	adds	r2, r0, #0
 800274c:	801a      	strh	r2, [r3, #0]
 800274e:	1dbb      	adds	r3, r7, #6
 8002750:	1c0a      	adds	r2, r1, #0
 8002752:	701a      	strb	r2, [r3, #0]
    if( chidx >= MAX_CHANNELS )
 8002754:	1dfb      	adds	r3, r7, #7
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b0f      	cmp	r3, #15
 800275a:	d901      	bls.n	8002760 <LMIC_setupChannel+0x2c>
        return 0;
 800275c:	2300      	movs	r3, #0
 800275e:	e05c      	b.n	800281a <LMIC_setupChannel+0xe6>
    if( band == -1 ) {
 8002760:	1dbb      	adds	r3, r7, #6
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	b25b      	sxtb	r3, r3
 8002766:	3301      	adds	r3, #1
 8002768:	d121      	bne.n	80027ae <LMIC_setupChannel+0x7a>
        if( freq >= 869400000 && freq <= 869650000 )
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	4a2d      	ldr	r2, [pc, #180]	; (8002824 <LMIC_setupChannel+0xf0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d908      	bls.n	8002784 <LMIC_setupChannel+0x50>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	4a2c      	ldr	r2, [pc, #176]	; (8002828 <LMIC_setupChannel+0xf4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d804      	bhi.n	8002784 <LMIC_setupChannel+0x50>
            freq |= BAND_DECI;   // 10% 27dBm
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2202      	movs	r2, #2
 800277e:	4313      	orrs	r3, r2
 8002780:	603b      	str	r3, [r7, #0]
 8002782:	e024      	b.n	80027ce <LMIC_setupChannel+0x9a>
        else if( (freq >= 868000000 && freq <= 868600000) ||
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	4a29      	ldr	r2, [pc, #164]	; (800282c <LMIC_setupChannel+0xf8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d903      	bls.n	8002794 <LMIC_setupChannel+0x60>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	4a28      	ldr	r2, [pc, #160]	; (8002830 <LMIC_setupChannel+0xfc>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d907      	bls.n	80027a4 <LMIC_setupChannel+0x70>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	4a27      	ldr	r2, [pc, #156]	; (8002834 <LMIC_setupChannel+0x100>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d918      	bls.n	80027ce <LMIC_setupChannel+0x9a>
                 (freq >= 869700000 && freq <= 870000000)  )
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	4a26      	ldr	r2, [pc, #152]	; (8002838 <LMIC_setupChannel+0x104>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d814      	bhi.n	80027ce <LMIC_setupChannel+0x9a>
            freq |= BAND_CENTI;  // 1% 14dBm 
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	2201      	movs	r2, #1
 80027a8:	4313      	orrs	r3, r2
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	e00f      	b.n	80027ce <LMIC_setupChannel+0x9a>
        else 
            freq |= BAND_MILLI;  // 0.1% 14dBm
    } else {
        if( band > BAND_AUX ) return 0;
 80027ae:	1dbb      	adds	r3, r7, #6
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	b25b      	sxtb	r3, r3
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	dd01      	ble.n	80027bc <LMIC_setupChannel+0x88>
 80027b8:	2300      	movs	r3, #0
 80027ba:	e02e      	b.n	800281a <LMIC_setupChannel+0xe6>
        freq = (freq&~3) | band;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	2203      	movs	r2, #3
 80027c0:	4393      	bics	r3, r2
 80027c2:	001a      	movs	r2, r3
 80027c4:	1dbb      	adds	r3, r7, #6
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	b25b      	sxtb	r3, r3
 80027ca:	4313      	orrs	r3, r2
 80027cc:	603b      	str	r3, [r7, #0]
    }
    LMIC.channelFreq [chidx] = freq;
 80027ce:	1dfb      	adds	r3, r7, #7
 80027d0:	781a      	ldrb	r2, [r3, #0]
 80027d2:	4b1a      	ldr	r3, [pc, #104]	; (800283c <LMIC_setupChannel+0x108>)
 80027d4:	3210      	adds	r2, #16
 80027d6:	0092      	lsls	r2, r2, #2
 80027d8:	6839      	ldr	r1, [r7, #0]
 80027da:	50d1      	str	r1, [r2, r3]
    LMIC.channelDrMap[chidx] = drmap==0 ? DR_RANGE_MAP(DR_SF12,DR_SF7) : drmap;
 80027dc:	1d3b      	adds	r3, r7, #4
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <LMIC_setupChannel+0xb6>
 80027e4:	1d3b      	adds	r3, r7, #4
 80027e6:	8819      	ldrh	r1, [r3, #0]
 80027e8:	e000      	b.n	80027ec <LMIC_setupChannel+0xb8>
 80027ea:	213f      	movs	r1, #63	; 0x3f
 80027ec:	1dfb      	adds	r3, r7, #7
 80027ee:	781a      	ldrb	r2, [r3, #0]
 80027f0:	4b12      	ldr	r3, [pc, #72]	; (800283c <LMIC_setupChannel+0x108>)
 80027f2:	3240      	adds	r2, #64	; 0x40
 80027f4:	0052      	lsls	r2, r2, #1
 80027f6:	52d1      	strh	r1, [r2, r3]
    LMIC.channelMap |= 1<<chidx;  // enabled right away
 80027f8:	4b10      	ldr	r3, [pc, #64]	; (800283c <LMIC_setupChannel+0x108>)
 80027fa:	22a0      	movs	r2, #160	; 0xa0
 80027fc:	5a9b      	ldrh	r3, [r3, r2]
 80027fe:	b21a      	sxth	r2, r3
 8002800:	1dfb      	adds	r3, r7, #7
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2101      	movs	r1, #1
 8002806:	4099      	lsls	r1, r3
 8002808:	000b      	movs	r3, r1
 800280a:	b21b      	sxth	r3, r3
 800280c:	4313      	orrs	r3, r2
 800280e:	b21b      	sxth	r3, r3
 8002810:	b299      	uxth	r1, r3
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <LMIC_setupChannel+0x108>)
 8002814:	22a0      	movs	r2, #160	; 0xa0
 8002816:	5299      	strh	r1, [r3, r2]
    return 1;
 8002818:	2301      	movs	r3, #1
}
 800281a:	0018      	movs	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	b003      	add	sp, #12
 8002820:	bd90      	pop	{r4, r7, pc}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	33d1fdbf 	.word	0x33d1fdbf
 8002828:	33d5ce50 	.word	0x33d5ce50
 800282c:	33bca0ff 	.word	0x33bca0ff
 8002830:	33c5c8c0 	.word	0x33c5c8c0
 8002834:	33d6919f 	.word	0x33d6919f
 8002838:	33db2580 	.word	0x33db2580
 800283c:	200002c4 	.word	0x200002c4

08002840 <convFreq>:
    LMIC.channelFreq[channel] = 0;
    LMIC.channelDrMap[channel] = 0;
    LMIC.channelMap &= ~(1<<channel);
}

static u4_t convFreq (xref2u1_t ptr) {
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
    u4_t freq = (os_rlsbf4(ptr-1) >> 8) * 100;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3b01      	subs	r3, #1
 800284c:	0018      	movs	r0, r3
 800284e:	f7ff f927 	bl	8001aa0 <os_rlsbf4>
 8002852:	0003      	movs	r3, r0
 8002854:	0a1b      	lsrs	r3, r3, #8
 8002856:	2264      	movs	r2, #100	; 0x64
 8002858:	4353      	muls	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
    if( freq < EU868_FREQ_MIN || freq > EU868_FREQ_MAX )
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4a07      	ldr	r2, [pc, #28]	; (800287c <convFreq+0x3c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d903      	bls.n	800286c <convFreq+0x2c>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4a06      	ldr	r2, [pc, #24]	; (8002880 <convFreq+0x40>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d901      	bls.n	8002870 <convFreq+0x30>
        freq = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
    return freq;
 8002870:	68fb      	ldr	r3, [r7, #12]
}
 8002872:	0018      	movs	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	b004      	add	sp, #16
 8002878:	bd80      	pop	{r7, pc}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	337055bf 	.word	0x337055bf
 8002880:	33db2580 	.word	0x33db2580

08002884 <mapChannels>:

static u1_t mapChannels (u1_t chpage, u2_t chmap) {
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	0002      	movs	r2, r0
 800288c:	1dfb      	adds	r3, r7, #7
 800288e:	701a      	strb	r2, [r3, #0]
 8002890:	1d3b      	adds	r3, r7, #4
 8002892:	1c0a      	adds	r2, r1, #0
 8002894:	801a      	strh	r2, [r3, #0]
    // Bad page, disable all channel, enable non-existent
    if( chpage != 0 || chmap==0 || (chmap & ~LMIC.channelMap) != 0 )
 8002896:	1dfb      	adds	r3, r7, #7
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10b      	bne.n	80028b6 <mapChannels+0x32>
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d007      	beq.n	80028b6 <mapChannels+0x32>
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	4a22      	ldr	r2, [pc, #136]	; (8002934 <mapChannels+0xb0>)
 80028ac:	21a0      	movs	r1, #160	; 0xa0
 80028ae:	5a52      	ldrh	r2, [r2, r1]
 80028b0:	43d2      	mvns	r2, r2
 80028b2:	4013      	ands	r3, r2
 80028b4:	d001      	beq.n	80028ba <mapChannels+0x36>
        return 0;  // illegal input
 80028b6:	2300      	movs	r3, #0
 80028b8:	e038      	b.n	800292c <mapChannels+0xa8>
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 80028ba:	230f      	movs	r3, #15
 80028bc:	18fb      	adds	r3, r7, r3
 80028be:	2200      	movs	r2, #0
 80028c0:	701a      	strb	r2, [r3, #0]
 80028c2:	e028      	b.n	8002916 <mapChannels+0x92>
        if( (chmap & (1<<chnl)) != 0 && LMIC.channelFreq[chnl] == 0 )
 80028c4:	1d3b      	adds	r3, r7, #4
 80028c6:	881a      	ldrh	r2, [r3, #0]
 80028c8:	230f      	movs	r3, #15
 80028ca:	18fb      	adds	r3, r7, r3
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	411a      	asrs	r2, r3
 80028d0:	0013      	movs	r3, r2
 80028d2:	2201      	movs	r2, #1
 80028d4:	4013      	ands	r3, r2
 80028d6:	d018      	beq.n	800290a <mapChannels+0x86>
 80028d8:	230f      	movs	r3, #15
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	781a      	ldrb	r2, [r3, #0]
 80028de:	4b15      	ldr	r3, [pc, #84]	; (8002934 <mapChannels+0xb0>)
 80028e0:	3210      	adds	r2, #16
 80028e2:	0092      	lsls	r2, r2, #2
 80028e4:	58d3      	ldr	r3, [r2, r3]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10f      	bne.n	800290a <mapChannels+0x86>
            chmap &= ~(1<<chnl); // ignore - channel is not defined
 80028ea:	230f      	movs	r3, #15
 80028ec:	18fb      	adds	r3, r7, r3
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2201      	movs	r2, #1
 80028f2:	409a      	lsls	r2, r3
 80028f4:	0013      	movs	r3, r2
 80028f6:	b21b      	sxth	r3, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	b21b      	sxth	r3, r3
 80028fc:	1d3a      	adds	r2, r7, #4
 80028fe:	2100      	movs	r1, #0
 8002900:	5e52      	ldrsh	r2, [r2, r1]
 8002902:	4013      	ands	r3, r2
 8002904:	b21a      	sxth	r2, r3
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	801a      	strh	r2, [r3, #0]
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 800290a:	210f      	movs	r1, #15
 800290c:	187b      	adds	r3, r7, r1
 800290e:	781a      	ldrb	r2, [r3, #0]
 8002910:	187b      	adds	r3, r7, r1
 8002912:	3201      	adds	r2, #1
 8002914:	701a      	strb	r2, [r3, #0]
 8002916:	230f      	movs	r3, #15
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b0f      	cmp	r3, #15
 800291e:	d9d1      	bls.n	80028c4 <mapChannels+0x40>
    }
    LMIC.channelMap = chmap;
 8002920:	4b04      	ldr	r3, [pc, #16]	; (8002934 <mapChannels+0xb0>)
 8002922:	1d3a      	adds	r2, r7, #4
 8002924:	21a0      	movs	r1, #160	; 0xa0
 8002926:	8812      	ldrh	r2, [r2, #0]
 8002928:	525a      	strh	r2, [r3, r1]
    return 1;
 800292a:	2301      	movs	r3, #1
}
 800292c:	0018      	movs	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	b004      	add	sp, #16
 8002932:	bd80      	pop	{r7, pc}
 8002934:	200002c4 	.word	0x200002c4

08002938 <updateTx>:


static void updateTx (ostime_t txbeg) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
    u4_t freq = LMIC.channelFreq[LMIC.txChnl];
 8002940:	4b22      	ldr	r3, [pc, #136]	; (80029cc <updateTx+0x94>)
 8002942:	22a2      	movs	r2, #162	; 0xa2
 8002944:	5c9b      	ldrb	r3, [r3, r2]
 8002946:	001a      	movs	r2, r3
 8002948:	4b20      	ldr	r3, [pc, #128]	; (80029cc <updateTx+0x94>)
 800294a:	3210      	adds	r2, #16
 800294c:	0092      	lsls	r2, r2, #2
 800294e:	58d3      	ldr	r3, [r2, r3]
 8002950:	617b      	str	r3, [r7, #20]
    // Update global/band specific duty cycle stats
    ostime_t airtime = calcAirTime(LMIC.rps, LMIC.dataLen);
 8002952:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <updateTx+0x94>)
 8002954:	89d8      	ldrh	r0, [r3, #14]
 8002956:	4a1d      	ldr	r2, [pc, #116]	; (80029cc <updateTx+0x94>)
 8002958:	2348      	movs	r3, #72	; 0x48
 800295a:	33ff      	adds	r3, #255	; 0xff
 800295c:	5cd3      	ldrb	r3, [r2, r3]
 800295e:	0019      	movs	r1, r3
 8002960:	f7ff fb14 	bl	8001f8c <calcAirTime>
 8002964:	0003      	movs	r3, r0
 8002966:	613b      	str	r3, [r7, #16]
    // Update channel/global duty cycle stats
    xref2band_t band = &LMIC.bands[freq & 0x3];
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2203      	movs	r2, #3
 800296c:	4013      	ands	r3, r2
 800296e:	3304      	adds	r3, #4
 8002970:	00da      	lsls	r2, r3, #3
 8002972:	4b16      	ldr	r3, [pc, #88]	; (80029cc <updateTx+0x94>)
 8002974:	18d3      	adds	r3, r2, r3
 8002976:	60fb      	str	r3, [r7, #12]
    LMIC.freq  = freq & ~(u4_t)3;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2203      	movs	r2, #3
 800297c:	4393      	bics	r3, r2
 800297e:	001a      	movs	r2, r3
 8002980:	4b12      	ldr	r3, [pc, #72]	; (80029cc <updateTx+0x94>)
 8002982:	609a      	str	r2, [r3, #8]
    LMIC.txpow = band->txpow;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2202      	movs	r2, #2
 8002988:	569a      	ldrsb	r2, [r3, r2]
 800298a:	4b10      	ldr	r3, [pc, #64]	; (80029cc <updateTx+0x94>)
 800298c:	749a      	strb	r2, [r3, #18]
    band->avail = txbeg + airtime * band->txcap;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	001a      	movs	r2, r3
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	435a      	muls	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	18d2      	adds	r2, r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	605a      	str	r2, [r3, #4]
    if( LMIC.globalDutyRate != 0 )
 80029a0:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <updateTx+0x94>)
 80029a2:	22a3      	movs	r2, #163	; 0xa3
 80029a4:	5c9b      	ldrb	r3, [r3, r2]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00b      	beq.n	80029c2 <updateTx+0x8a>
        LMIC.globalDutyAvail = txbeg + (airtime<<LMIC.globalDutyRate);
 80029aa:	4b08      	ldr	r3, [pc, #32]	; (80029cc <updateTx+0x94>)
 80029ac:	22a3      	movs	r2, #163	; 0xa3
 80029ae:	5c9b      	ldrb	r3, [r3, r2]
 80029b0:	001a      	movs	r2, r3
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	4093      	lsls	r3, r2
 80029b6:	001a      	movs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	18d2      	adds	r2, r2, r3
 80029bc:	4b03      	ldr	r3, [pc, #12]	; (80029cc <updateTx+0x94>)
 80029be:	21a4      	movs	r1, #164	; 0xa4
 80029c0:	505a      	str	r2, [r3, r1]
}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	46bd      	mov	sp, r7
 80029c6:	b006      	add	sp, #24
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	200002c4 	.word	0x200002c4

080029d0 <nextTx>:

static ostime_t nextTx (ostime_t now) {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
    u1_t bmap=0xF;
 80029d8:	2317      	movs	r3, #23
 80029da:	18fb      	adds	r3, r7, r3
 80029dc:	220f      	movs	r2, #15
 80029de:	701a      	strb	r2, [r3, #0]
    do {
        ostime_t mintime = now + /*10h*/36000*OSTICKS_PER_SEC;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a65      	ldr	r2, [pc, #404]	; (8002b78 <nextTx+0x1a8>)
 80029e4:	4694      	mov	ip, r2
 80029e6:	4463      	add	r3, ip
 80029e8:	613b      	str	r3, [r7, #16]
        u1_t band=0;
 80029ea:	230f      	movs	r3, #15
 80029ec:	18fb      	adds	r3, r7, r3
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]
        for( u1_t bi=0; bi<4; bi++ ) {
 80029f2:	230e      	movs	r3, #14
 80029f4:	18fb      	adds	r3, r7, r3
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]
 80029fa:	e02c      	b.n	8002a56 <nextTx+0x86>
            if( (bmap & (1<<bi)) && mintime - LMIC.bands[bi].avail > 0 )
 80029fc:	2317      	movs	r3, #23
 80029fe:	18fb      	adds	r3, r7, r3
 8002a00:	781a      	ldrb	r2, [r3, #0]
 8002a02:	230e      	movs	r3, #14
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	411a      	asrs	r2, r3
 8002a0a:	0013      	movs	r3, r2
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d01b      	beq.n	8002a4a <nextTx+0x7a>
 8002a12:	230e      	movs	r3, #14
 8002a14:	18fb      	adds	r3, r7, r3
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	4a58      	ldr	r2, [pc, #352]	; (8002b7c <nextTx+0x1ac>)
 8002a1a:	3304      	adds	r3, #4
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	18d3      	adds	r3, r2, r3
 8002a20:	3304      	adds	r3, #4
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	dd0e      	ble.n	8002a4a <nextTx+0x7a>
                mintime = LMIC.bands[band = bi].avail;
 8002a2c:	210f      	movs	r1, #15
 8002a2e:	187b      	adds	r3, r7, r1
 8002a30:	220e      	movs	r2, #14
 8002a32:	18ba      	adds	r2, r7, r2
 8002a34:	7812      	ldrb	r2, [r2, #0]
 8002a36:	701a      	strb	r2, [r3, #0]
 8002a38:	187b      	adds	r3, r7, r1
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	4a4f      	ldr	r2, [pc, #316]	; (8002b7c <nextTx+0x1ac>)
 8002a3e:	3304      	adds	r3, #4
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	18d3      	adds	r3, r2, r3
 8002a44:	3304      	adds	r3, #4
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	613b      	str	r3, [r7, #16]
        for( u1_t bi=0; bi<4; bi++ ) {
 8002a4a:	210e      	movs	r1, #14
 8002a4c:	187b      	adds	r3, r7, r1
 8002a4e:	781a      	ldrb	r2, [r3, #0]
 8002a50:	187b      	adds	r3, r7, r1
 8002a52:	3201      	adds	r2, #1
 8002a54:	701a      	strb	r2, [r3, #0]
 8002a56:	230e      	movs	r3, #14
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d9cd      	bls.n	80029fc <nextTx+0x2c>
        }
        // Find next channel in given band
        u1_t chnl = LMIC.bands[band].lastchnl;
 8002a60:	230f      	movs	r3, #15
 8002a62:	18fb      	adds	r3, r7, r3
 8002a64:	781a      	ldrb	r2, [r3, #0]
 8002a66:	230d      	movs	r3, #13
 8002a68:	18fb      	adds	r3, r7, r3
 8002a6a:	4944      	ldr	r1, [pc, #272]	; (8002b7c <nextTx+0x1ac>)
 8002a6c:	3204      	adds	r2, #4
 8002a6e:	00d2      	lsls	r2, r2, #3
 8002a70:	188a      	adds	r2, r1, r2
 8002a72:	3203      	adds	r2, #3
 8002a74:	7812      	ldrb	r2, [r2, #0]
 8002a76:	701a      	strb	r2, [r3, #0]
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 8002a78:	230c      	movs	r3, #12
 8002a7a:	18fb      	adds	r3, r7, r3
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
 8002a80:	e059      	b.n	8002b36 <nextTx+0x166>
            if( (chnl = (chnl+1)) >= MAX_CHANNELS )
 8002a82:	210d      	movs	r1, #13
 8002a84:	187b      	adds	r3, r7, r1
 8002a86:	187a      	adds	r2, r7, r1
 8002a88:	7812      	ldrb	r2, [r2, #0]
 8002a8a:	3201      	adds	r2, #1
 8002a8c:	701a      	strb	r2, [r3, #0]
 8002a8e:	187b      	adds	r3, r7, r1
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b0f      	cmp	r3, #15
 8002a94:	d905      	bls.n	8002aa2 <nextTx+0xd2>
                chnl -=  MAX_CHANNELS;
 8002a96:	220d      	movs	r2, #13
 8002a98:	18bb      	adds	r3, r7, r2
 8002a9a:	18ba      	adds	r2, r7, r2
 8002a9c:	7812      	ldrb	r2, [r2, #0]
 8002a9e:	3a10      	subs	r2, #16
 8002aa0:	701a      	strb	r2, [r3, #0]
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 8002aa2:	4b36      	ldr	r3, [pc, #216]	; (8002b7c <nextTx+0x1ac>)
 8002aa4:	22a0      	movs	r2, #160	; 0xa0
 8002aa6:	5a9b      	ldrh	r3, [r3, r2]
 8002aa8:	001a      	movs	r2, r3
 8002aaa:	230d      	movs	r3, #13
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	411a      	asrs	r2, r3
 8002ab2:	0013      	movs	r3, r2
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d037      	beq.n	8002b2a <nextTx+0x15a>
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 8002aba:	230d      	movs	r3, #13
 8002abc:	18fb      	adds	r3, r7, r3
 8002abe:	781a      	ldrb	r2, [r3, #0]
 8002ac0:	4b2e      	ldr	r3, [pc, #184]	; (8002b7c <nextTx+0x1ac>)
 8002ac2:	3240      	adds	r2, #64	; 0x40
 8002ac4:	0052      	lsls	r2, r2, #1
 8002ac6:	5ad3      	ldrh	r3, [r2, r3]
 8002ac8:	0019      	movs	r1, r3
 8002aca:	4b2c      	ldr	r3, [pc, #176]	; (8002b7c <nextTx+0x1ac>)
 8002acc:	22b0      	movs	r2, #176	; 0xb0
 8002ace:	5c9b      	ldrb	r3, [r3, r2]
 8002ad0:	001a      	movs	r2, r3
 8002ad2:	230f      	movs	r3, #15
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	4119      	asrs	r1, r3
 8002ad8:	000b      	movs	r3, r1
 8002ada:	2201      	movs	r2, #1
 8002adc:	4013      	ands	r3, r2
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 8002ade:	d024      	beq.n	8002b2a <nextTx+0x15a>
                band == (LMIC.channelFreq[chnl] & 0x3) ) { // in selected band
 8002ae0:	230f      	movs	r3, #15
 8002ae2:	18fb      	adds	r3, r7, r3
 8002ae4:	781a      	ldrb	r2, [r3, #0]
 8002ae6:	230d      	movs	r3, #13
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	7819      	ldrb	r1, [r3, #0]
 8002aec:	4b23      	ldr	r3, [pc, #140]	; (8002b7c <nextTx+0x1ac>)
 8002aee:	3110      	adds	r1, #16
 8002af0:	0089      	lsls	r1, r1, #2
 8002af2:	58cb      	ldr	r3, [r1, r3]
 8002af4:	2103      	movs	r1, #3
 8002af6:	400b      	ands	r3, r1
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d116      	bne.n	8002b2a <nextTx+0x15a>
                LMIC.txChnl = LMIC.bands[band].lastchnl = chnl;
 8002afc:	230f      	movs	r3, #15
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	491e      	ldr	r1, [pc, #120]	; (8002b7c <nextTx+0x1ac>)
 8002b04:	1d1a      	adds	r2, r3, #4
 8002b06:	00d2      	lsls	r2, r2, #3
 8002b08:	188a      	adds	r2, r1, r2
 8002b0a:	3203      	adds	r2, #3
 8002b0c:	210d      	movs	r1, #13
 8002b0e:	1879      	adds	r1, r7, r1
 8002b10:	7809      	ldrb	r1, [r1, #0]
 8002b12:	7011      	strb	r1, [r2, #0]
 8002b14:	4a19      	ldr	r2, [pc, #100]	; (8002b7c <nextTx+0x1ac>)
 8002b16:	3304      	adds	r3, #4
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	18d3      	adds	r3, r2, r3
 8002b1c:	3303      	adds	r3, #3
 8002b1e:	7819      	ldrb	r1, [r3, #0]
 8002b20:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <nextTx+0x1ac>)
 8002b22:	22a2      	movs	r2, #162	; 0xa2
 8002b24:	5499      	strb	r1, [r3, r2]
                return mintime;
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	e021      	b.n	8002b6e <nextTx+0x19e>
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 8002b2a:	210c      	movs	r1, #12
 8002b2c:	187b      	adds	r3, r7, r1
 8002b2e:	781a      	ldrb	r2, [r3, #0]
 8002b30:	187b      	adds	r3, r7, r1
 8002b32:	3201      	adds	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]
 8002b36:	230c      	movs	r3, #12
 8002b38:	18fb      	adds	r3, r7, r3
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b0f      	cmp	r3, #15
 8002b3e:	d9a0      	bls.n	8002a82 <nextTx+0xb2>
            }
        }
        if( (bmap &= ~(1<<band)) == 0 ) {
 8002b40:	230f      	movs	r3, #15
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2201      	movs	r2, #1
 8002b48:	409a      	lsls	r2, r3
 8002b4a:	0013      	movs	r3, r2
 8002b4c:	b25b      	sxtb	r3, r3
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	b25b      	sxtb	r3, r3
 8002b52:	2117      	movs	r1, #23
 8002b54:	187a      	adds	r2, r7, r1
 8002b56:	7812      	ldrb	r2, [r2, #0]
 8002b58:	b252      	sxtb	r2, r2
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	b25a      	sxtb	r2, r3
 8002b5e:	187b      	adds	r3, r7, r1
 8002b60:	701a      	strb	r2, [r3, #0]
 8002b62:	187b      	adds	r3, r7, r1
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d000      	beq.n	8002b6c <nextTx+0x19c>
 8002b6a:	e739      	b.n	80029e0 <nextTx+0x10>
            // No feasible channel  found!
            return mintime;
 8002b6c:	693b      	ldr	r3, [r7, #16]
        }
    } while(1);
}
 8002b6e:	0018      	movs	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b006      	add	sp, #24
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	44aa2000 	.word	0x44aa2000
 8002b7c:	200002c4 	.word	0x200002c4

08002b80 <setBcnRxParams>:


static void setBcnRxParams (void) {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
    LMIC.dataLen = 0;
 8002b84:	4a13      	ldr	r2, [pc, #76]	; (8002bd4 <setBcnRxParams+0x54>)
 8002b86:	2348      	movs	r3, #72	; 0x48
 8002b88:	33ff      	adds	r3, #255	; 0xff
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	54d1      	strb	r1, [r2, r3]
    LMIC.freq = LMIC.channelFreq[LMIC.bcnChnl] & ~(u4_t)3;
 8002b8e:	4a11      	ldr	r2, [pc, #68]	; (8002bd4 <setBcnRxParams+0x54>)
 8002b90:	23c4      	movs	r3, #196	; 0xc4
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	5cd3      	ldrb	r3, [r2, r3]
 8002b96:	001a      	movs	r2, r3
 8002b98:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <setBcnRxParams+0x54>)
 8002b9a:	3210      	adds	r2, #16
 8002b9c:	0092      	lsls	r2, r2, #2
 8002b9e:	58d3      	ldr	r3, [r2, r3]
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	4393      	bics	r3, r2
 8002ba4:	001a      	movs	r2, r3
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <setBcnRxParams+0x54>)
 8002ba8:	609a      	str	r2, [r3, #8]
    LMIC.rps  = setIh(setNocrc(dndr2rps((dr_t)DR_BCN),1),LEN_BCN);
 8002baa:	2003      	movs	r0, #3
 8002bac:	f7fe ff00 	bl	80019b0 <dndr2rps>
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f7fe fea9 	bl	800190c <setNocrc>
 8002bba:	0003      	movs	r3, r0
 8002bbc:	2111      	movs	r1, #17
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f7fe fecc 	bl	800195c <setIh>
 8002bc4:	0003      	movs	r3, r0
 8002bc6:	001a      	movs	r2, r3
 8002bc8:	4b02      	ldr	r3, [pc, #8]	; (8002bd4 <setBcnRxParams+0x54>)
 8002bca:	81da      	strh	r2, [r3, #14]
}
 8002bcc:	46c0      	nop			; (mov r8, r8)
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	200002c4 	.word	0x200002c4

08002bd8 <initJoinLoop>:

#define setRx1Params() /*LMIC.freq/rps remain unchanged*/

static void initJoinLoop (void) {
 8002bd8:	b5b0      	push	{r4, r5, r7, lr}
 8002bda:	af00      	add	r7, sp, #0
#if CFG_TxContinuousMode
  LMIC.txChnl = 0;
#else
    LMIC.txChnl = os_getRndU1() % NUM_DEFAULT_CHANNELS;
 8002bdc:	f003 fb0c 	bl	80061f8 <radio_rand1>
 8002be0:	0003      	movs	r3, r0
 8002be2:	2106      	movs	r1, #6
 8002be4:	0018      	movs	r0, r3
 8002be6:	f7fd fb15 	bl	8000214 <__aeabi_uidivmod>
 8002bea:	000b      	movs	r3, r1
 8002bec:	b2d9      	uxtb	r1, r3
 8002bee:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <initJoinLoop+0x60>)
 8002bf0:	22a2      	movs	r2, #162	; 0xa2
 8002bf2:	5499      	strb	r1, [r3, r2]
#endif
    LMIC.adrTxPow = 14;
 8002bf4:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <initJoinLoop+0x60>)
 8002bf6:	22af      	movs	r2, #175	; 0xaf
 8002bf8:	210e      	movs	r1, #14
 8002bfa:	5499      	strb	r1, [r3, r2]
    setDrJoin(DRCHG_SET, DR_SF7);
 8002bfc:	2105      	movs	r1, #5
 8002bfe:	2000      	movs	r0, #0
 8002c00:	f7ff fcb0 	bl	8002564 <setDrJoin>
    initDefaultChannels(1);
 8002c04:	2001      	movs	r0, #1
 8002c06:	f7ff fcf7 	bl	80025f8 <initDefaultChannels>
    ASSERT((LMIC.opmode & OP_NEXTCHNL)==0);
 8002c0a:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <initJoinLoop+0x60>)
 8002c0c:	22ac      	movs	r2, #172	; 0xac
 8002c0e:	5a9b      	ldrh	r3, [r3, r2]
 8002c10:	001a      	movs	r2, r3
 8002c12:	2380      	movs	r3, #128	; 0x80
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	4013      	ands	r3, r2
 8002c18:	d001      	beq.n	8002c1e <initJoinLoop+0x46>
 8002c1a:	f7fe fe11 	bl	8001840 <hal_failed>
    LMIC.txend = LMIC.bands[BAND_MILLI].avail + rndDelay(8);
 8002c1e:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <initJoinLoop+0x60>)
 8002c20:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002c22:	2008      	movs	r0, #8
 8002c24:	f7ff fc26 	bl	8002474 <rndDelay>
 8002c28:	0003      	movs	r3, r0
 8002c2a:	18e2      	adds	r2, r4, r3
 8002c2c:	4b02      	ldr	r3, [pc, #8]	; (8002c38 <initJoinLoop+0x60>)
 8002c2e:	601a      	str	r2, [r3, #0]
}
 8002c30:	46c0      	nop			; (mov r8, r8)
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bdb0      	pop	{r4, r5, r7, pc}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	200002c4 	.word	0x200002c4

08002c3c <nextJoinState>:


static ostime_t nextJoinState (void) {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
    u1_t failed = 0;
 8002c42:	1dfb      	adds	r3, r7, #7
 8002c44:	2200      	movs	r2, #0
 8002c46:	701a      	strb	r2, [r3, #0]

    // Try 869.x and then 864.x with same DR
    // If both fail try next lower datarate
    if( ++LMIC.txChnl == NUM_DEFAULT_CHANNELS )
 8002c48:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <nextJoinState+0xd4>)
 8002c4a:	22a2      	movs	r2, #162	; 0xa2
 8002c4c:	5c9b      	ldrb	r3, [r3, r2]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	b2d9      	uxtb	r1, r3
 8002c52:	4b2f      	ldr	r3, [pc, #188]	; (8002d10 <nextJoinState+0xd4>)
 8002c54:	22a2      	movs	r2, #162	; 0xa2
 8002c56:	5499      	strb	r1, [r3, r2]
 8002c58:	4b2d      	ldr	r3, [pc, #180]	; (8002d10 <nextJoinState+0xd4>)
 8002c5a:	22a2      	movs	r2, #162	; 0xa2
 8002c5c:	5c9b      	ldrb	r3, [r3, r2]
 8002c5e:	2b06      	cmp	r3, #6
 8002c60:	d103      	bne.n	8002c6a <nextJoinState+0x2e>
        LMIC.txChnl = 0;
 8002c62:	4b2b      	ldr	r3, [pc, #172]	; (8002d10 <nextJoinState+0xd4>)
 8002c64:	22a2      	movs	r2, #162	; 0xa2
 8002c66:	2100      	movs	r1, #0
 8002c68:	5499      	strb	r1, [r3, r2]
    if( (++LMIC.txCnt & 1) == 0 ) {
 8002c6a:	4a29      	ldr	r2, [pc, #164]	; (8002d10 <nextJoinState+0xd4>)
 8002c6c:	23a2      	movs	r3, #162	; 0xa2
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	5cd3      	ldrb	r3, [r2, r3]
 8002c72:	3301      	adds	r3, #1
 8002c74:	b2d9      	uxtb	r1, r3
 8002c76:	4a26      	ldr	r2, [pc, #152]	; (8002d10 <nextJoinState+0xd4>)
 8002c78:	23a2      	movs	r3, #162	; 0xa2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	54d1      	strb	r1, [r2, r3]
 8002c7e:	4a24      	ldr	r2, [pc, #144]	; (8002d10 <nextJoinState+0xd4>)
 8002c80:	23a2      	movs	r3, #162	; 0xa2
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	5cd3      	ldrb	r3, [r2, r3]
 8002c86:	001a      	movs	r2, r3
 8002c88:	2301      	movs	r3, #1
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d113      	bne.n	8002cb6 <nextJoinState+0x7a>
        // Lower DR every 2nd try (having tried 868.x and 864.x with the same DR)
        if( LMIC.datarate == DR_SF12 )
 8002c8e:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <nextJoinState+0xd4>)
 8002c90:	22b0      	movs	r2, #176	; 0xb0
 8002c92:	5c9b      	ldrb	r3, [r3, r2]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d103      	bne.n	8002ca0 <nextJoinState+0x64>
            failed = 1; // we have tried all DR - signal EV_JOIN_FAILED
 8002c98:	1dfb      	adds	r3, r7, #7
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	e00a      	b.n	8002cb6 <nextJoinState+0x7a>
        else
            setDrJoin(DRCHG_NOJACC, decDR((dr_t)LMIC.datarate));
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <nextJoinState+0xd4>)
 8002ca2:	22b0      	movs	r2, #176	; 0xb0
 8002ca4:	5c9b      	ldrb	r3, [r3, r2]
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f7fe fe98 	bl	80019dc <decDR>
 8002cac:	0003      	movs	r3, r0
 8002cae:	0019      	movs	r1, r3
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	f7ff fc57 	bl	8002564 <setDrJoin>
    }
    // Clear NEXTCHNL because join state engine controls channel hopping
    LMIC.opmode &= ~OP_NEXTCHNL;
 8002cb6:	4b16      	ldr	r3, [pc, #88]	; (8002d10 <nextJoinState+0xd4>)
 8002cb8:	22ac      	movs	r2, #172	; 0xac
 8002cba:	5a9b      	ldrh	r3, [r3, r2]
 8002cbc:	4a15      	ldr	r2, [pc, #84]	; (8002d14 <nextJoinState+0xd8>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	b299      	uxth	r1, r3
 8002cc2:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <nextJoinState+0xd4>)
 8002cc4:	22ac      	movs	r2, #172	; 0xac
 8002cc6:	5299      	strh	r1, [r3, r2]
    // Move txend to randomize synchronized concurrent joins.
    // Duty cycle is based on txend.
    ostime_t time = os_getTime();
 8002cc8:	f002 fcfe 	bl	80056c8 <os_getTime>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	603b      	str	r3, [r7, #0]
    if( time - LMIC.bands[BAND_MILLI].avail < 0 )
 8002cd0:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <nextJoinState+0xd4>)
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	d502      	bpl.n	8002ce0 <nextJoinState+0xa4>
        time = LMIC.bands[BAND_MILLI].avail;
 8002cda:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <nextJoinState+0xd4>)
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	603b      	str	r3, [r7, #0]
        (isTESTMODE()
         // Avoid collision with JOIN ACCEPT @ SF12 being sent by GW (but we missed it)
         ? DNW2_SAFETY_ZONE
         // Otherwise: randomize join (street lamp case):
         // SF12:255, SF11:127, .., SF7:8secs
         : DNW2_SAFETY_ZONE+rndDelay(255>>LMIC.datarate));
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <nextJoinState+0xd4>)
 8002ce2:	22b0      	movs	r2, #176	; 0xb0
 8002ce4:	5c9b      	ldrb	r3, [r3, r2]
 8002ce6:	001a      	movs	r2, r3
 8002ce8:	23ff      	movs	r3, #255	; 0xff
 8002cea:	4113      	asrs	r3, r2
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f7ff fbc0 	bl	8002474 <rndDelay>
 8002cf4:	0003      	movs	r3, r0
 8002cf6:	4a08      	ldr	r2, [pc, #32]	; (8002d18 <nextJoinState+0xdc>)
 8002cf8:	189a      	adds	r2, r3, r2
    LMIC.txend = time +
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	18d2      	adds	r2, r2, r3
 8002cfe:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <nextJoinState+0xd4>)
 8002d00:	601a      	str	r2, [r3, #0]
    // 1 - triggers EV_JOIN_FAILED event
    return failed;
 8002d02:	1dfb      	adds	r3, r7, #7
 8002d04:	781b      	ldrb	r3, [r3, #0]
}
 8002d06:	0018      	movs	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	b002      	add	sp, #8
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	200002c4 	.word	0x200002c4
 8002d14:	fffff7ff 	.word	0xfffff7ff
 8002d18:	00017700 	.word	0x00017700

08002d1c <runEngineUpdate>:
#else
#error Unsupported frequency band!
#endif


static void runEngineUpdate (xref2osjob_t osjob) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
    engineUpdate();
 8002d24:	f001 fe50 	bl	80049c8 <engineUpdate>
}
 8002d28:	46c0      	nop			; (mov r8, r8)
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	b002      	add	sp, #8
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <reportEvent>:


static void reportEvent (ev_t ev) {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	0002      	movs	r2, r0
 8002d38:	1dfb      	adds	r3, r7, #7
 8002d3a:	701a      	strb	r2, [r3, #0]
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = ev));
    ON_LMIC_EVENT(ev);
 8002d3c:	1dfb      	adds	r3, r7, #7
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	0018      	movs	r0, r3
 8002d42:	f002 f989 	bl	8005058 <onEvent>
    engineUpdate();
 8002d46:	f001 fe3f 	bl	80049c8 <engineUpdate>
}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	b002      	add	sp, #8
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <runReset>:


static void runReset (xref2osjob_t osjob) {
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
    // Disable session
    LMIC_reset();
 8002d5a:	f002 f82b 	bl	8004db4 <LMIC_reset>
    LMIC_startJoining();
 8002d5e:	f001 fb43 	bl	80043e8 <LMIC_startJoining>
    reportEvent(EV_RESET);
 8002d62:	200c      	movs	r0, #12
 8002d64:	f7ff ffe4 	bl	8002d30 <reportEvent>
}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b002      	add	sp, #8
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <stateJustJoined>:

static void stateJustJoined (void) {
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
    LMIC.seqnoDn     = LMIC.seqnoUp = 0;
 8002d74:	4a3a      	ldr	r2, [pc, #232]	; (8002e60 <stateJustJoined+0xf0>)
 8002d76:	238e      	movs	r3, #142	; 0x8e
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	50d1      	str	r1, [r2, r3]
 8002d7e:	4a38      	ldr	r2, [pc, #224]	; (8002e60 <stateJustJoined+0xf0>)
 8002d80:	238e      	movs	r3, #142	; 0x8e
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	58d1      	ldr	r1, [r2, r3]
 8002d86:	4a36      	ldr	r2, [pc, #216]	; (8002e60 <stateJustJoined+0xf0>)
 8002d88:	238c      	movs	r3, #140	; 0x8c
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	50d1      	str	r1, [r2, r3]
    LMIC.rejoinCnt   = 0;
 8002d8e:	4b34      	ldr	r3, [pc, #208]	; (8002e60 <stateJustJoined+0xf0>)
 8002d90:	22b2      	movs	r2, #178	; 0xb2
 8002d92:	2100      	movs	r1, #0
 8002d94:	5499      	strb	r1, [r3, r2]
    LMIC.dnConf      = LMIC.adrChanged = LMIC.ladrAns = LMIC.devsAns = 0;
 8002d96:	4a32      	ldr	r2, [pc, #200]	; (8002e60 <stateJustJoined+0xf0>)
 8002d98:	2393      	movs	r3, #147	; 0x93
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	54d1      	strb	r1, [r2, r3]
 8002da0:	4a2f      	ldr	r2, [pc, #188]	; (8002e60 <stateJustJoined+0xf0>)
 8002da2:	2393      	movs	r3, #147	; 0x93
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	5cd1      	ldrb	r1, [r2, r3]
 8002da8:	4a2d      	ldr	r2, [pc, #180]	; (8002e60 <stateJustJoined+0xf0>)
 8002daa:	2326      	movs	r3, #38	; 0x26
 8002dac:	33ff      	adds	r3, #255	; 0xff
 8002dae:	54d1      	strb	r1, [r2, r3]
 8002db0:	4a2b      	ldr	r2, [pc, #172]	; (8002e60 <stateJustJoined+0xf0>)
 8002db2:	2326      	movs	r3, #38	; 0x26
 8002db4:	33ff      	adds	r3, #255	; 0xff
 8002db6:	5cd1      	ldrb	r1, [r2, r3]
 8002db8:	4a29      	ldr	r2, [pc, #164]	; (8002e60 <stateJustJoined+0xf0>)
 8002dba:	2391      	movs	r3, #145	; 0x91
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	54d1      	strb	r1, [r2, r3]
 8002dc0:	4a27      	ldr	r2, [pc, #156]	; (8002e60 <stateJustJoined+0xf0>)
 8002dc2:	2391      	movs	r3, #145	; 0x91
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	5cd1      	ldrb	r1, [r2, r3]
 8002dc8:	4a25      	ldr	r2, [pc, #148]	; (8002e60 <stateJustJoined+0xf0>)
 8002dca:	2390      	movs	r3, #144	; 0x90
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	54d1      	strb	r1, [r2, r3]
    LMIC.moreData    = LMIC.dn2Ans = LMIC.snchAns = LMIC.dutyCapAns = 0;
 8002dd0:	4a23      	ldr	r2, [pc, #140]	; (8002e60 <stateJustJoined+0xf0>)
 8002dd2:	232a      	movs	r3, #42	; 0x2a
 8002dd4:	33ff      	adds	r3, #255	; 0xff
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	54d1      	strb	r1, [r2, r3]
 8002dda:	4a21      	ldr	r2, [pc, #132]	; (8002e60 <stateJustJoined+0xf0>)
 8002ddc:	232a      	movs	r3, #42	; 0x2a
 8002dde:	33ff      	adds	r3, #255	; 0xff
 8002de0:	5cd1      	ldrb	r1, [r2, r3]
 8002de2:	4a1f      	ldr	r2, [pc, #124]	; (8002e60 <stateJustJoined+0xf0>)
 8002de4:	2395      	movs	r3, #149	; 0x95
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	54d1      	strb	r1, [r2, r3]
 8002dea:	4a1d      	ldr	r2, [pc, #116]	; (8002e60 <stateJustJoined+0xf0>)
 8002dec:	2395      	movs	r3, #149	; 0x95
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	5cd1      	ldrb	r1, [r2, r3]
 8002df2:	4a1b      	ldr	r2, [pc, #108]	; (8002e60 <stateJustJoined+0xf0>)
 8002df4:	2398      	movs	r3, #152	; 0x98
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	54d1      	strb	r1, [r2, r3]
 8002dfa:	4a19      	ldr	r2, [pc, #100]	; (8002e60 <stateJustJoined+0xf0>)
 8002dfc:	2398      	movs	r3, #152	; 0x98
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	5cd1      	ldrb	r1, [r2, r3]
 8002e02:	4a17      	ldr	r2, [pc, #92]	; (8002e60 <stateJustJoined+0xf0>)
 8002e04:	2394      	movs	r3, #148	; 0x94
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	54d1      	strb	r1, [r2, r3]
    LMIC.pingSetAns  = 0;
 8002e0a:	4a15      	ldr	r2, [pc, #84]	; (8002e60 <stateJustJoined+0xf0>)
 8002e0c:	2334      	movs	r3, #52	; 0x34
 8002e0e:	33ff      	adds	r3, #255	; 0xff
 8002e10:	2100      	movs	r1, #0
 8002e12:	54d1      	strb	r1, [r2, r3]
    LMIC.upRepeat    = 0;
 8002e14:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <stateJustJoined+0xf0>)
 8002e16:	22ae      	movs	r2, #174	; 0xae
 8002e18:	2100      	movs	r1, #0
 8002e1a:	5499      	strb	r1, [r3, r2]
    LMIC.adrAckReq   = LINK_CHECK_INIT;
 8002e1c:	4a10      	ldr	r2, [pc, #64]	; (8002e60 <stateJustJoined+0xf0>)
 8002e1e:	2322      	movs	r3, #34	; 0x22
 8002e20:	33ff      	adds	r3, #255	; 0xff
 8002e22:	21f4      	movs	r1, #244	; 0xf4
 8002e24:	54d1      	strb	r1, [r2, r3]
    LMIC.dn2Dr       = DR_DNW2;
 8002e26:	4a0e      	ldr	r2, [pc, #56]	; (8002e60 <stateJustJoined+0xf0>)
 8002e28:	232c      	movs	r3, #44	; 0x2c
 8002e2a:	33ff      	adds	r3, #255	; 0xff
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	54d1      	strb	r1, [r2, r3]
    LMIC.dn2Freq     = FREQ_DNW2;
 8002e30:	4a0b      	ldr	r2, [pc, #44]	; (8002e60 <stateJustJoined+0xf0>)
 8002e32:	2396      	movs	r3, #150	; 0x96
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	490b      	ldr	r1, [pc, #44]	; (8002e64 <stateJustJoined+0xf4>)
 8002e38:	50d1      	str	r1, [r2, r3]
    LMIC.bcnChnl     = CHNL_BCN;
 8002e3a:	4a09      	ldr	r2, [pc, #36]	; (8002e60 <stateJustJoined+0xf0>)
 8002e3c:	23c4      	movs	r3, #196	; 0xc4
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	2105      	movs	r1, #5
 8002e42:	54d1      	strb	r1, [r2, r3]
    LMIC.ping.freq   = FREQ_PING;
 8002e44:	4a06      	ldr	r2, [pc, #24]	; (8002e60 <stateJustJoined+0xf0>)
 8002e46:	23a0      	movs	r3, #160	; 0xa0
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	4906      	ldr	r1, [pc, #24]	; (8002e64 <stateJustJoined+0xf4>)
 8002e4c:	50d1      	str	r1, [r2, r3]
    LMIC.ping.dr     = DR_PING;
 8002e4e:	4a04      	ldr	r2, [pc, #16]	; (8002e60 <stateJustJoined+0xf0>)
 8002e50:	239a      	movs	r3, #154	; 0x9a
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	2103      	movs	r1, #3
 8002e56:	54d1      	strb	r1, [r2, r3]
}
 8002e58:	46c0      	nop			; (mov r8, r8)
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	200002c4 	.word	0x200002c4
 8002e64:	33d3e608 	.word	0x33d3e608

08002e68 <decodeBeacon>:
// ================================================================================
// Decoding frames


// Decode beacon  - do not overwrite bcninfo unless we have a match!
static int decodeBeacon (void) {
 8002e68:	b590      	push	{r4, r7, lr}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
    ASSERT(LMIC.dataLen == LEN_BCN); // implicit header RX guarantees this
 8002e6e:	4a4e      	ldr	r2, [pc, #312]	; (8002fa8 <decodeBeacon+0x140>)
 8002e70:	2348      	movs	r3, #72	; 0x48
 8002e72:	33ff      	adds	r3, #255	; 0xff
 8002e74:	5cd3      	ldrb	r3, [r2, r3]
 8002e76:	2b11      	cmp	r3, #17
 8002e78:	d001      	beq.n	8002e7e <decodeBeacon+0x16>
 8002e7a:	f7fe fce1 	bl	8001840 <hal_failed>
    xref2u1_t d = LMIC.frame;
 8002e7e:	4b4b      	ldr	r3, [pc, #300]	; (8002fac <decodeBeacon+0x144>)
 8002e80:	607b      	str	r3, [r7, #4]
    if(
#if defined CFG_eu868
        d[OFF_BCN_CRC1] != (u1_t)os_crc16(d,OFF_BCN_CRC1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3307      	adds	r3, #7
 8002e86:	781c      	ldrb	r4, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2107      	movs	r1, #7
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f7fe fe99 	bl	8001bc4 <os_crc16>
 8002e92:	0003      	movs	r3, r0
 8002e94:	b2db      	uxtb	r3, r3
    if(
 8002e96:	429c      	cmp	r4, r3
 8002e98:	d001      	beq.n	8002e9e <decodeBeacon+0x36>
#elif CFG_us915
        os_rlsbf2(&d[OFF_BCN_CRC1]) != os_crc16(d,OFF_BCN_CRC1)
#endif
        )
        return 0;   // first (common) part fails CRC check
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	e07f      	b.n	8002f9e <decodeBeacon+0x136>
    // First set of fields is ok
    u4_t bcnnetid = os_rlsbf4(&d[OFF_BCN_NETID]) & 0xFFFFFF;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f7fe fdfd 	bl	8001aa0 <os_rlsbf4>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	021b      	lsls	r3, r3, #8
 8002eaa:	0a1b      	lsrs	r3, r3, #8
 8002eac:	603b      	str	r3, [r7, #0]
    if( bcnnetid != LMIC.netid )
 8002eae:	4b3e      	ldr	r3, [pc, #248]	; (8002fa8 <decodeBeacon+0x140>)
 8002eb0:	22a8      	movs	r2, #168	; 0xa8
 8002eb2:	589b      	ldr	r3, [r3, r2]
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d002      	beq.n	8002ec0 <decodeBeacon+0x58>
        return -1;  // not the beacon we're looking for
 8002eba:	2301      	movs	r3, #1
 8002ebc:	425b      	negs	r3, r3
 8002ebe:	e06e      	b.n	8002f9e <decodeBeacon+0x136>

    LMIC.bcninfo.flags &= ~(BCN_PARTIAL|BCN_FULL);
 8002ec0:	4a39      	ldr	r2, [pc, #228]	; (8002fa8 <decodeBeacon+0x140>)
 8002ec2:	23cb      	movs	r3, #203	; 0xcb
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	5cd3      	ldrb	r3, [r2, r3]
 8002ec8:	2203      	movs	r2, #3
 8002eca:	4393      	bics	r3, r2
 8002ecc:	b2d9      	uxtb	r1, r3
 8002ece:	4a36      	ldr	r2, [pc, #216]	; (8002fa8 <decodeBeacon+0x140>)
 8002ed0:	23cb      	movs	r3, #203	; 0xcb
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	54d1      	strb	r1, [r2, r3]
    // Match - update bcninfo structure
    LMIC.bcninfo.snr    = LMIC.snr;
 8002ed6:	4b34      	ldr	r3, [pc, #208]	; (8002fa8 <decodeBeacon+0x140>)
 8002ed8:	210d      	movs	r1, #13
 8002eda:	5659      	ldrsb	r1, [r3, r1]
 8002edc:	4a32      	ldr	r2, [pc, #200]	; (8002fa8 <decodeBeacon+0x140>)
 8002ede:	2396      	movs	r3, #150	; 0x96
 8002ee0:	33ff      	adds	r3, #255	; 0xff
 8002ee2:	54d1      	strb	r1, [r2, r3]
    LMIC.bcninfo.rssi   = LMIC.rssi;
 8002ee4:	4b30      	ldr	r3, [pc, #192]	; (8002fa8 <decodeBeacon+0x140>)
 8002ee6:	210c      	movs	r1, #12
 8002ee8:	5659      	ldrsb	r1, [r3, r1]
 8002eea:	4a2f      	ldr	r2, [pc, #188]	; (8002fa8 <decodeBeacon+0x140>)
 8002eec:	23ca      	movs	r3, #202	; 0xca
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	54d1      	strb	r1, [r2, r3]
    LMIC.bcninfo.txtime = LMIC.rxtime - AIRTIME_BCN_osticks;
 8002ef2:	4b2d      	ldr	r3, [pc, #180]	; (8002fa8 <decodeBeacon+0x140>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	4a2e      	ldr	r2, [pc, #184]	; (8002fb0 <decodeBeacon+0x148>)
 8002ef8:	1899      	adds	r1, r3, r2
 8002efa:	4a2b      	ldr	r2, [pc, #172]	; (8002fa8 <decodeBeacon+0x140>)
 8002efc:	23c8      	movs	r3, #200	; 0xc8
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	50d1      	str	r1, [r2, r3]
    LMIC.bcninfo.time   = os_rlsbf4(&d[OFF_BCN_TIME]);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3303      	adds	r3, #3
 8002f06:	0018      	movs	r0, r3
 8002f08:	f7fe fdca 	bl	8001aa0 <os_rlsbf4>
 8002f0c:	0001      	movs	r1, r0
 8002f0e:	4a26      	ldr	r2, [pc, #152]	; (8002fa8 <decodeBeacon+0x140>)
 8002f10:	23cc      	movs	r3, #204	; 0xcc
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	50d1      	str	r1, [r2, r3]
    LMIC.bcninfo.flags |= BCN_PARTIAL;
 8002f16:	4a24      	ldr	r2, [pc, #144]	; (8002fa8 <decodeBeacon+0x140>)
 8002f18:	23cb      	movs	r3, #203	; 0xcb
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	5cd3      	ldrb	r3, [r2, r3]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	4313      	orrs	r3, r2
 8002f22:	b2d9      	uxtb	r1, r3
 8002f24:	4a20      	ldr	r2, [pc, #128]	; (8002fa8 <decodeBeacon+0x140>)
 8002f26:	23cb      	movs	r3, #203	; 0xcb
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	54d1      	strb	r1, [r2, r3]

    // Check 2nd set
    if( os_rlsbf2(&d[OFF_BCN_CRC2]) != os_crc16(d,OFF_BCN_CRC2) )
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	330f      	adds	r3, #15
 8002f30:	0018      	movs	r0, r3
 8002f32:	f7fe fda2 	bl	8001a7a <os_rlsbf2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	001c      	movs	r4, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	210f      	movs	r1, #15
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f7fe fe40 	bl	8001bc4 <os_crc16>
 8002f44:	0003      	movs	r3, r0
 8002f46:	429c      	cmp	r4, r3
 8002f48:	d001      	beq.n	8002f4e <decodeBeacon+0xe6>
        return 1;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e027      	b.n	8002f9e <decodeBeacon+0x136>
    // Second set of fields is ok
    LMIC.bcninfo.lat    = (s4_t)os_rlsbf4(&d[OFF_BCN_LAT-1]) >> 8; // read as signed 24-bit
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3308      	adds	r3, #8
 8002f52:	0018      	movs	r0, r3
 8002f54:	f7fe fda4 	bl	8001aa0 <os_rlsbf4>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	1219      	asrs	r1, r3, #8
 8002f5c:	4a12      	ldr	r2, [pc, #72]	; (8002fa8 <decodeBeacon+0x140>)
 8002f5e:	23d0      	movs	r3, #208	; 0xd0
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	50d1      	str	r1, [r2, r3]
    LMIC.bcninfo.lon    = (s4_t)os_rlsbf4(&d[OFF_BCN_LON-1]) >> 8; // ditto
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	330b      	adds	r3, #11
 8002f68:	0018      	movs	r0, r3
 8002f6a:	f7fe fd99 	bl	8001aa0 <os_rlsbf4>
 8002f6e:	0003      	movs	r3, r0
 8002f70:	1219      	asrs	r1, r3, #8
 8002f72:	4a0d      	ldr	r2, [pc, #52]	; (8002fa8 <decodeBeacon+0x140>)
 8002f74:	23d2      	movs	r3, #210	; 0xd2
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	50d1      	str	r1, [r2, r3]
    LMIC.bcninfo.info   = d[OFF_BCN_INFO];
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	7a19      	ldrb	r1, [r3, #8]
 8002f7e:	4a0a      	ldr	r2, [pc, #40]	; (8002fa8 <decodeBeacon+0x140>)
 8002f80:	23ce      	movs	r3, #206	; 0xce
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	54d1      	strb	r1, [r2, r3]
    LMIC.bcninfo.flags |= BCN_FULL;
 8002f86:	4a08      	ldr	r2, [pc, #32]	; (8002fa8 <decodeBeacon+0x140>)
 8002f88:	23cb      	movs	r3, #203	; 0xcb
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	5cd3      	ldrb	r3, [r2, r3]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	4313      	orrs	r3, r2
 8002f92:	b2d9      	uxtb	r1, r3
 8002f94:	4a04      	ldr	r2, [pc, #16]	; (8002fa8 <decodeBeacon+0x140>)
 8002f96:	23cb      	movs	r3, #203	; 0xcb
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	54d1      	strb	r1, [r2, r3]
    return 2;
 8002f9c:	2302      	movs	r3, #2
}
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	b003      	add	sp, #12
 8002fa4:	bd90      	pop	{r4, r7, pc}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	200002c4 	.word	0x200002c4
 8002fac:	2000040c 	.word	0x2000040c
 8002fb0:	ffffedf4 	.word	0xffffedf4

08002fb4 <decodeFrame>:


static bit_t decodeFrame (void) {
 8002fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fb6:	b09b      	sub	sp, #108	; 0x6c
 8002fb8:	af02      	add	r7, sp, #8
    xref2u1_t d = LMIC.frame;
 8002fba:	4bd5      	ldr	r3, [pc, #852]	; (8003310 <decodeFrame+0x35c>)
 8002fbc:	64bb      	str	r3, [r7, #72]	; 0x48
    u1_t hdr    = d[0];
 8002fbe:	2147      	movs	r1, #71	; 0x47
 8002fc0:	187b      	adds	r3, r7, r1
 8002fc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fc4:	7812      	ldrb	r2, [r2, #0]
 8002fc6:	701a      	strb	r2, [r3, #0]
    u1_t ftype  = hdr & HDR_FTYPE;
 8002fc8:	2346      	movs	r3, #70	; 0x46
 8002fca:	18fb      	adds	r3, r7, r3
 8002fcc:	187a      	adds	r2, r7, r1
 8002fce:	7812      	ldrb	r2, [r2, #0]
 8002fd0:	211f      	movs	r1, #31
 8002fd2:	438a      	bics	r2, r1
 8002fd4:	701a      	strb	r2, [r3, #0]
    int  dlen   = LMIC.dataLen;
 8002fd6:	4acf      	ldr	r2, [pc, #828]	; (8003314 <decodeFrame+0x360>)
 8002fd8:	2348      	movs	r3, #72	; 0x48
 8002fda:	33ff      	adds	r3, #255	; 0xff
 8002fdc:	5cd3      	ldrb	r3, [r2, r3]
 8002fde:	643b      	str	r3, [r7, #64]	; 0x40
    if( dlen < OFF_DAT_OPTS+4 ||
 8002fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fe2:	2b0b      	cmp	r3, #11
 8002fe4:	dd0f      	ble.n	8003006 <decodeFrame+0x52>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 8002fe6:	2347      	movs	r3, #71	; 0x47
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2203      	movs	r2, #3
 8002fee:	4013      	ands	r3, r2
    if( dlen < OFF_DAT_OPTS+4 ||
 8002ff0:	d109      	bne.n	8003006 <decodeFrame+0x52>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 8002ff2:	2346      	movs	r3, #70	; 0x46
 8002ff4:	18fb      	adds	r3, r7, r3
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b60      	cmp	r3, #96	; 0x60
 8002ffa:	d014      	beq.n	8003026 <decodeFrame+0x72>
        (ftype != HDR_FTYPE_DADN  &&  ftype != HDR_FTYPE_DCDN) ) {
 8002ffc:	2346      	movs	r3, #70	; 0x46
 8002ffe:	18fb      	adds	r3, r7, r3
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2ba0      	cmp	r3, #160	; 0xa0
 8003004:	d00f      	beq.n	8003026 <decodeFrame+0x72>
        // Basic sanity checks failed
        EV(specCond, WARN, (e_.reason = EV::specCond_t::UNEXPECTED_FRAME,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = dlen < 4 ? 0 : os_rlsbf4(&d[dlen-4]),
                            e_.info2  = hdr + (dlen<<8)));
      norx:
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	e006      	b.n	8003018 <decodeFrame+0x64>
    if( addr != LMIC.devaddr ) {
        EV(specCond, WARN, (e_.reason = EV::specCond_t::ALIEN_ADDRESS,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = addr,
                            e_.info2  = LMIC.devaddr));
        goto norx;
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	e004      	b.n	8003018 <decodeFrame+0x64>
    }
    if( poff > pend ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (poff-pend) + (fct<<8) + (dlen<<16)));
        goto norx;
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	e002      	b.n	8003018 <decodeFrame+0x64>
        EV(spe3Cond, ERR, (e_.reason = EV::spe3Cond_t::CORRUPTED_MIC,
                           e_.eui1   = MAIN::CDEV->getEui(),
                           e_.info1  = Base::lsbf4(&d[pend]),
                           e_.info2  = seqno,
                           e_.info3  = LMIC.devaddr));
        goto norx;
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	e000      	b.n	8003018 <decodeFrame+0x64>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_ROLL_OVER,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
            goto norx;
 8003016:	46c0      	nop			; (mov r8, r8)
        LMIC.dataLen = 0;
 8003018:	4abe      	ldr	r2, [pc, #760]	; (8003314 <decodeFrame+0x360>)
 800301a:	2348      	movs	r3, #72	; 0x48
 800301c:	33ff      	adds	r3, #255	; 0xff
 800301e:	2100      	movs	r1, #0
 8003020:	54d1      	strb	r1, [r2, r3]
        return 0;
 8003022:	2300      	movs	r3, #0
 8003024:	e340      	b.n	80036a8 <decodeFrame+0x6f4>
    int  fct   = d[OFF_DAT_FCT];
 8003026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003028:	3305      	adds	r3, #5
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	63fb      	str	r3, [r7, #60]	; 0x3c
    u4_t addr  = os_rlsbf4(&d[OFF_DAT_ADDR]);
 800302e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003030:	3301      	adds	r3, #1
 8003032:	0018      	movs	r0, r3
 8003034:	f7fe fd34 	bl	8001aa0 <os_rlsbf4>
 8003038:	0003      	movs	r3, r0
 800303a:	63bb      	str	r3, [r7, #56]	; 0x38
    u4_t seqno = os_rlsbf2(&d[OFF_DAT_SEQNO]);
 800303c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800303e:	3306      	adds	r3, #6
 8003040:	0018      	movs	r0, r3
 8003042:	f7fe fd1a 	bl	8001a7a <os_rlsbf2>
 8003046:	0003      	movs	r3, r0
 8003048:	637b      	str	r3, [r7, #52]	; 0x34
    int  olen  = fct & FCT_OPTLEN;
 800304a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800304c:	220f      	movs	r2, #15
 800304e:	4013      	ands	r3, r2
 8003050:	633b      	str	r3, [r7, #48]	; 0x30
    int  ackup = (fct & FCT_ACK) != 0 ? 1 : 0;   // ACK last up frame
 8003052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003054:	115b      	asrs	r3, r3, #5
 8003056:	2201      	movs	r2, #1
 8003058:	4013      	ands	r3, r2
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
    int  poff  = OFF_DAT_OPTS+olen;
 800305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305e:	3308      	adds	r3, #8
 8003060:	65fb      	str	r3, [r7, #92]	; 0x5c
    int  pend  = dlen-4;  // MIC
 8003062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003064:	3b04      	subs	r3, #4
 8003066:	62bb      	str	r3, [r7, #40]	; 0x28
    if( addr != LMIC.devaddr ) {
 8003068:	4aaa      	ldr	r2, [pc, #680]	; (8003314 <decodeFrame+0x360>)
 800306a:	238a      	movs	r3, #138	; 0x8a
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	58d3      	ldr	r3, [r2, r3]
 8003070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003072:	429a      	cmp	r2, r3
 8003074:	d1c9      	bne.n	800300a <decodeFrame+0x56>
    if( poff > pend ) {
 8003076:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307a:	429a      	cmp	r2, r3
 800307c:	dcc7      	bgt.n	800300e <decodeFrame+0x5a>
    int port = -1;
 800307e:	2301      	movs	r3, #1
 8003080:	425b      	negs	r3, r3
 8003082:	65bb      	str	r3, [r7, #88]	; 0x58
    int replayConf = 0;
 8003084:	2300      	movs	r3, #0
 8003086:	657b      	str	r3, [r7, #84]	; 0x54
    if( pend > poff )
 8003088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800308a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800308c:	429a      	cmp	r2, r3
 800308e:	dd07      	ble.n	80030a0 <decodeFrame+0xec>
        port = d[poff++];
 8003090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003096:	001a      	movs	r2, r3
 8003098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800309a:	189b      	adds	r3, r3, r2
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	65bb      	str	r3, [r7, #88]	; 0x58
    seqno = LMIC.seqnoDn + (u2_t)(seqno - LMIC.seqnoDn);
 80030a0:	4a9c      	ldr	r2, [pc, #624]	; (8003314 <decodeFrame+0x360>)
 80030a2:	238c      	movs	r3, #140	; 0x8c
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	58d3      	ldr	r3, [r2, r3]
 80030a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030aa:	b291      	uxth	r1, r2
 80030ac:	4899      	ldr	r0, [pc, #612]	; (8003314 <decodeFrame+0x360>)
 80030ae:	228c      	movs	r2, #140	; 0x8c
 80030b0:	0052      	lsls	r2, r2, #1
 80030b2:	5882      	ldr	r2, [r0, r2]
 80030b4:	b292      	uxth	r2, r2
 80030b6:	1a8a      	subs	r2, r1, r2
 80030b8:	b292      	uxth	r2, r2
 80030ba:	189b      	adds	r3, r3, r2
 80030bc:	637b      	str	r3, [r7, #52]	; 0x34
    if( !aes_verifyMic(LMIC.nwkKey, LMIC.devaddr, seqno, /*dn*/1, d, pend) ) {
 80030be:	4a95      	ldr	r2, [pc, #596]	; (8003314 <decodeFrame+0x360>)
 80030c0:	238a      	movs	r3, #138	; 0x8a
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	58d1      	ldr	r1, [r2, r3]
 80030c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030c8:	4893      	ldr	r0, [pc, #588]	; (8003318 <decodeFrame+0x364>)
 80030ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030cc:	9301      	str	r3, [sp, #4]
 80030ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	2301      	movs	r3, #1
 80030d4:	f7fe fe02 	bl	8001cdc <aes_verifyMic>
 80030d8:	1e03      	subs	r3, r0, #0
 80030da:	d09a      	beq.n	8003012 <decodeFrame+0x5e>
    if( seqno < LMIC.seqnoDn ) {
 80030dc:	4a8d      	ldr	r2, [pc, #564]	; (8003314 <decodeFrame+0x360>)
 80030de:	238c      	movs	r3, #140	; 0x8c
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	58d3      	ldr	r3, [r2, r3]
 80030e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d220      	bcs.n	800312c <decodeFrame+0x178>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
 80030ea:	4a8a      	ldr	r2, [pc, #552]	; (8003314 <decodeFrame+0x360>)
 80030ec:	238c      	movs	r3, #140	; 0x8c
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	58d3      	ldr	r3, [r2, r3]
 80030f2:	001a      	movs	r2, r3
 80030f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f6:	429a      	cmp	r2, r3
 80030f8:	db8d      	blt.n	8003016 <decodeFrame+0x62>
        }
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
 80030fa:	4a86      	ldr	r2, [pc, #536]	; (8003314 <decodeFrame+0x360>)
 80030fc:	238c      	movs	r3, #140	; 0x8c
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	58d3      	ldr	r3, [r2, r3]
 8003102:	3b01      	subs	r3, #1
 8003104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003106:	429a      	cmp	r2, r3
 8003108:	d000      	beq.n	800310c <decodeFrame+0x158>
 800310a:	e77c      	b.n	8003006 <decodeFrame+0x52>
 800310c:	4a81      	ldr	r2, [pc, #516]	; (8003314 <decodeFrame+0x360>)
 800310e:	2390      	movs	r3, #144	; 0x90
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	5cd3      	ldrb	r3, [r2, r3]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d100      	bne.n	800311a <decodeFrame+0x166>
 8003118:	e775      	b.n	8003006 <decodeFrame+0x52>
 800311a:	2346      	movs	r3, #70	; 0x46
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2ba0      	cmp	r3, #160	; 0xa0
 8003122:	d000      	beq.n	8003126 <decodeFrame+0x172>
 8003124:	e76f      	b.n	8003006 <decodeFrame+0x52>
                                e_.info2  = seqno));
            goto norx;
        }
        // Replay of previous sequence number allowed only if
        // previous frame and repeated both requested confirmation
        replayConf = 1;
 8003126:	2301      	movs	r3, #1
 8003128:	657b      	str	r3, [r7, #84]	; 0x54
 800312a:	e011      	b.n	8003150 <decodeFrame+0x19c>
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_SKIP,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
        }
        LMIC.seqnoDn = seqno+1;  // next number to be expected
 800312c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312e:	1c59      	adds	r1, r3, #1
 8003130:	4a78      	ldr	r2, [pc, #480]	; (8003314 <decodeFrame+0x360>)
 8003132:	238c      	movs	r3, #140	; 0x8c
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	50d1      	str	r1, [r2, r3]
        DO_DEVDB(LMIC.seqnoDn,seqnoDn);
        // DN frame requested confirmation - provide ACK once with next UP frame
        LMIC.dnConf = (ftype == HDR_FTYPE_DCDN ? FCT_ACK : 0);
 8003138:	2346      	movs	r3, #70	; 0x46
 800313a:	18fb      	adds	r3, r7, r3
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2ba0      	cmp	r3, #160	; 0xa0
 8003140:	d101      	bne.n	8003146 <decodeFrame+0x192>
 8003142:	2120      	movs	r1, #32
 8003144:	e000      	b.n	8003148 <decodeFrame+0x194>
 8003146:	2100      	movs	r1, #0
 8003148:	4a72      	ldr	r2, [pc, #456]	; (8003314 <decodeFrame+0x360>)
 800314a:	2390      	movs	r3, #144	; 0x90
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	54d1      	strb	r1, [r2, r3]
    }

    if( LMIC.dnConf || (fct & FCT_MORE) )
 8003150:	4a70      	ldr	r2, [pc, #448]	; (8003314 <decodeFrame+0x360>)
 8003152:	2390      	movs	r3, #144	; 0x90
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	5cd3      	ldrb	r3, [r2, r3]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d103      	bne.n	8003164 <decodeFrame+0x1b0>
 800315c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800315e:	2210      	movs	r2, #16
 8003160:	4013      	ands	r3, r2
 8003162:	d008      	beq.n	8003176 <decodeFrame+0x1c2>
        LMIC.opmode |= OP_POLL;
 8003164:	4b6b      	ldr	r3, [pc, #428]	; (8003314 <decodeFrame+0x360>)
 8003166:	22ac      	movs	r2, #172	; 0xac
 8003168:	5a9b      	ldrh	r3, [r3, r2]
 800316a:	2210      	movs	r2, #16
 800316c:	4313      	orrs	r3, r2
 800316e:	b299      	uxth	r1, r3
 8003170:	4b68      	ldr	r3, [pc, #416]	; (8003314 <decodeFrame+0x360>)
 8003172:	22ac      	movs	r2, #172	; 0xac
 8003174:	5299      	strh	r1, [r3, r2]

    // We heard from network
    LMIC.adrChanged = LMIC.rejoinCnt = 0;
 8003176:	4b67      	ldr	r3, [pc, #412]	; (8003314 <decodeFrame+0x360>)
 8003178:	22b2      	movs	r2, #178	; 0xb2
 800317a:	2100      	movs	r1, #0
 800317c:	5499      	strb	r1, [r3, r2]
 800317e:	4b65      	ldr	r3, [pc, #404]	; (8003314 <decodeFrame+0x360>)
 8003180:	22b2      	movs	r2, #178	; 0xb2
 8003182:	5c99      	ldrb	r1, [r3, r2]
 8003184:	4a63      	ldr	r2, [pc, #396]	; (8003314 <decodeFrame+0x360>)
 8003186:	2391      	movs	r3, #145	; 0x91
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	54d1      	strb	r1, [r2, r3]
    if( LMIC.adrAckReq != LINK_CHECK_OFF )
 800318c:	4a61      	ldr	r2, [pc, #388]	; (8003314 <decodeFrame+0x360>)
 800318e:	2322      	movs	r3, #34	; 0x22
 8003190:	33ff      	adds	r3, #255	; 0xff
 8003192:	56d3      	ldrsb	r3, [r2, r3]
 8003194:	3380      	adds	r3, #128	; 0x80
 8003196:	d004      	beq.n	80031a2 <decodeFrame+0x1ee>
        LMIC.adrAckReq = LINK_CHECK_INIT;
 8003198:	4a5e      	ldr	r2, [pc, #376]	; (8003314 <decodeFrame+0x360>)
 800319a:	2322      	movs	r3, #34	; 0x22
 800319c:	33ff      	adds	r3, #255	; 0xff
 800319e:	21f4      	movs	r1, #244	; 0xf4
 80031a0:	54d1      	strb	r1, [r2, r3]

    // Process OPTS
    int m = LMIC.rssi - RSSI_OFF - getSensitivity(LMIC.rps);
 80031a2:	4b5c      	ldr	r3, [pc, #368]	; (8003314 <decodeFrame+0x360>)
 80031a4:	7b1b      	ldrb	r3, [r3, #12]
 80031a6:	b25b      	sxtb	r3, r3
 80031a8:	3b40      	subs	r3, #64	; 0x40
 80031aa:	001c      	movs	r4, r3
 80031ac:	4b59      	ldr	r3, [pc, #356]	; (8003314 <decodeFrame+0x360>)
 80031ae:	89db      	ldrh	r3, [r3, #14]
 80031b0:	0018      	movs	r0, r3
 80031b2:	f7fe fec9 	bl	8001f48 <getSensitivity>
 80031b6:	0003      	movs	r3, r0
 80031b8:	1ae3      	subs	r3, r4, r3
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
    LMIC.margin = m < 0 ? 0 : m > 254 ? 254 : m;
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	2b00      	cmp	r3, #0
 80031c0:	db05      	blt.n	80031ce <decodeFrame+0x21a>
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	2bfe      	cmp	r3, #254	; 0xfe
 80031c6:	dd00      	ble.n	80031ca <decodeFrame+0x216>
 80031c8:	23fe      	movs	r3, #254	; 0xfe
 80031ca:	b2d9      	uxtb	r1, r3
 80031cc:	e000      	b.n	80031d0 <decodeFrame+0x21c>
 80031ce:	2100      	movs	r1, #0
 80031d0:	4a50      	ldr	r2, [pc, #320]	; (8003314 <decodeFrame+0x360>)
 80031d2:	2392      	movs	r3, #146	; 0x92
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	54d1      	strb	r1, [r2, r3]

    xref2u1_t opts = &d[OFF_DAT_OPTS];
 80031d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031da:	3308      	adds	r3, #8
 80031dc:	623b      	str	r3, [r7, #32]
    int oidx = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	653b      	str	r3, [r7, #80]	; 0x50
    while( oidx < olen ) {
 80031e2:	e1e8      	b.n	80035b6 <decodeFrame+0x602>
        switch( opts[oidx] ) {
 80031e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031e6:	6a3a      	ldr	r2, [r7, #32]
 80031e8:	18d3      	adds	r3, r2, r3
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b12      	cmp	r3, #18
 80031ee:	d900      	bls.n	80031f2 <decodeFrame+0x23e>
 80031f0:	e1e7      	b.n	80035c2 <decodeFrame+0x60e>
 80031f2:	009a      	lsls	r2, r3, #2
 80031f4:	4b49      	ldr	r3, [pc, #292]	; (800331c <decodeFrame+0x368>)
 80031f6:	18d3      	adds	r3, r2, r3
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	469f      	mov	pc, r3
        case MCMD_LCHK_ANS: {
            //int gwmargin = opts[oidx+1];
            //int ngws = opts[oidx+2];
            oidx += 3;
 80031fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031fe:	3303      	adds	r3, #3
 8003200:	653b      	str	r3, [r7, #80]	; 0x50
            continue;
 8003202:	e1d8      	b.n	80035b6 <decodeFrame+0x602>
        }
        case MCMD_LADR_REQ: {
            u1_t p1     = opts[oidx+1];            // txpow + DR
 8003204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003206:	3301      	adds	r3, #1
 8003208:	6a3a      	ldr	r2, [r7, #32]
 800320a:	18d2      	adds	r2, r2, r3
 800320c:	230a      	movs	r3, #10
 800320e:	18fb      	adds	r3, r7, r3
 8003210:	7812      	ldrb	r2, [r2, #0]
 8003212:	701a      	strb	r2, [r3, #0]
            u2_t chmap  = os_rlsbf2(&opts[oidx+2]);// list of enabled channels
 8003214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003216:	3302      	adds	r3, #2
 8003218:	6a3a      	ldr	r2, [r7, #32]
 800321a:	18d3      	adds	r3, r2, r3
 800321c:	2208      	movs	r2, #8
 800321e:	18bc      	adds	r4, r7, r2
 8003220:	0018      	movs	r0, r3
 8003222:	f7fe fc2a 	bl	8001a7a <os_rlsbf2>
 8003226:	0003      	movs	r3, r0
 8003228:	8023      	strh	r3, [r4, #0]
            u1_t chpage = opts[oidx+4] & MCMD_LADR_CHPAGE_MASK;     // channel page
 800322a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800322c:	3304      	adds	r3, #4
 800322e:	6a3a      	ldr	r2, [r7, #32]
 8003230:	18d3      	adds	r3, r2, r3
 8003232:	781a      	ldrb	r2, [r3, #0]
 8003234:	1dfb      	adds	r3, r7, #7
 8003236:	210f      	movs	r1, #15
 8003238:	438a      	bics	r2, r1
 800323a:	701a      	strb	r2, [r3, #0]
            u1_t uprpt  = opts[oidx+4] & MCMD_LADR_REPEAT_MASK;     // up repeat count
 800323c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800323e:	3304      	adds	r3, #4
 8003240:	6a3a      	ldr	r2, [r7, #32]
 8003242:	18d3      	adds	r3, r2, r3
 8003244:	781a      	ldrb	r2, [r3, #0]
 8003246:	1dbb      	adds	r3, r7, #6
 8003248:	210f      	movs	r1, #15
 800324a:	400a      	ands	r2, r1
 800324c:	701a      	strb	r2, [r3, #0]
            oidx += 5;
 800324e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003250:	3305      	adds	r3, #5
 8003252:	653b      	str	r3, [r7, #80]	; 0x50

            LMIC.ladrAns = 0x80 |     // Include an answer into next frame up
 8003254:	4a2f      	ldr	r2, [pc, #188]	; (8003314 <decodeFrame+0x360>)
 8003256:	2326      	movs	r3, #38	; 0x26
 8003258:	33ff      	adds	r3, #255	; 0xff
 800325a:	2187      	movs	r1, #135	; 0x87
 800325c:	54d1      	strb	r1, [r2, r3]
                MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK;
            if( !mapChannels(chpage, chmap) )
 800325e:	2208      	movs	r2, #8
 8003260:	18bb      	adds	r3, r7, r2
 8003262:	881a      	ldrh	r2, [r3, #0]
 8003264:	1dfb      	adds	r3, r7, #7
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	0011      	movs	r1, r2
 800326a:	0018      	movs	r0, r3
 800326c:	f7ff fb0a 	bl	8002884 <mapChannels>
 8003270:	1e03      	subs	r3, r0, #0
 8003272:	d10a      	bne.n	800328a <decodeFrame+0x2d6>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_CHACK;
 8003274:	4a27      	ldr	r2, [pc, #156]	; (8003314 <decodeFrame+0x360>)
 8003276:	2326      	movs	r3, #38	; 0x26
 8003278:	33ff      	adds	r3, #255	; 0xff
 800327a:	5cd3      	ldrb	r3, [r2, r3]
 800327c:	2201      	movs	r2, #1
 800327e:	4393      	bics	r3, r2
 8003280:	b2d9      	uxtb	r1, r3
 8003282:	4a24      	ldr	r2, [pc, #144]	; (8003314 <decodeFrame+0x360>)
 8003284:	2326      	movs	r3, #38	; 0x26
 8003286:	33ff      	adds	r3, #255	; 0xff
 8003288:	54d1      	strb	r1, [r2, r3]
            dr_t dr = (dr_t)(p1>>MCMD_LADR_DR_SHIFT);
 800328a:	1d7b      	adds	r3, r7, #5
 800328c:	220a      	movs	r2, #10
 800328e:	18ba      	adds	r2, r7, r2
 8003290:	7812      	ldrb	r2, [r2, #0]
 8003292:	0912      	lsrs	r2, r2, #4
 8003294:	701a      	strb	r2, [r3, #0]
            if( !validDR(dr) ) {
 8003296:	1d7b      	adds	r3, r7, #5
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	0018      	movs	r0, r3
 800329c:	f7fe fbb8 	bl	8001a10 <validDR>
 80032a0:	1e03      	subs	r3, r0, #0
 80032a2:	d10a      	bne.n	80032ba <decodeFrame+0x306>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_DRACK;
 80032a4:	4a1b      	ldr	r2, [pc, #108]	; (8003314 <decodeFrame+0x360>)
 80032a6:	2326      	movs	r3, #38	; 0x26
 80032a8:	33ff      	adds	r3, #255	; 0xff
 80032aa:	5cd3      	ldrb	r3, [r2, r3]
 80032ac:	2202      	movs	r2, #2
 80032ae:	4393      	bics	r3, r2
 80032b0:	b2d9      	uxtb	r1, r3
 80032b2:	4a18      	ldr	r2, [pc, #96]	; (8003314 <decodeFrame+0x360>)
 80032b4:	2326      	movs	r3, #38	; 0x26
 80032b6:	33ff      	adds	r3, #255	; 0xff
 80032b8:	54d1      	strb	r1, [r2, r3]
                EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                                   e_.eui    = MAIN::CDEV->getEui(),
                                   e_.info   = Base::lsbf4(&d[pend]),
                                   e_.info2  = Base::msbf4(&opts[oidx-4])));
            }
            if( (LMIC.ladrAns & 0x7F) == (MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK) ) {
 80032ba:	4a16      	ldr	r2, [pc, #88]	; (8003314 <decodeFrame+0x360>)
 80032bc:	2326      	movs	r3, #38	; 0x26
 80032be:	33ff      	adds	r3, #255	; 0xff
 80032c0:	5cd3      	ldrb	r3, [r2, r3]
 80032c2:	001a      	movs	r2, r3
 80032c4:	237f      	movs	r3, #127	; 0x7f
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b07      	cmp	r3, #7
 80032ca:	d111      	bne.n	80032f0 <decodeFrame+0x33c>
                // Nothing went wrong - use settings
                LMIC.upRepeat = uprpt;
 80032cc:	4b11      	ldr	r3, [pc, #68]	; (8003314 <decodeFrame+0x360>)
 80032ce:	1dba      	adds	r2, r7, #6
 80032d0:	21ae      	movs	r1, #174	; 0xae
 80032d2:	7812      	ldrb	r2, [r2, #0]
 80032d4:	545a      	strb	r2, [r3, r1]
                setDrTxpow(DRCHG_NWKCMD, dr, pow2dBm(p1));
 80032d6:	230a      	movs	r3, #10
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	220f      	movs	r2, #15
 80032de:	4013      	ands	r3, r2
 80032e0:	4a0f      	ldr	r2, [pc, #60]	; (8003320 <decodeFrame+0x36c>)
 80032e2:	56d2      	ldrsb	r2, [r2, r3]
 80032e4:	1d7b      	adds	r3, r7, #5
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	0019      	movs	r1, r3
 80032ea:	2004      	movs	r0, #4
 80032ec:	f7ff f94e 	bl	800258c <setDrTxpow>
            }
            LMIC.adrChanged = 1;  // Trigger an ACK to NWK
 80032f0:	4a08      	ldr	r2, [pc, #32]	; (8003314 <decodeFrame+0x360>)
 80032f2:	2391      	movs	r3, #145	; 0x91
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	2101      	movs	r1, #1
 80032f8:	54d1      	strb	r1, [r2, r3]
            continue;
 80032fa:	e15c      	b.n	80035b6 <decodeFrame+0x602>
        }
        case MCMD_DEVS_REQ: {
            LMIC.devsAns = 1;
 80032fc:	4a05      	ldr	r2, [pc, #20]	; (8003314 <decodeFrame+0x360>)
 80032fe:	2393      	movs	r3, #147	; 0x93
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	2101      	movs	r1, #1
 8003304:	54d1      	strb	r1, [r2, r3]
            oidx += 1;
 8003306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003308:	3301      	adds	r3, #1
 800330a:	653b      	str	r3, [r7, #80]	; 0x50
            continue;
 800330c:	e153      	b.n	80035b6 <decodeFrame+0x602>
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	2000040c 	.word	0x2000040c
 8003314:	200002c4 	.word	0x200002c4
 8003318:	200003b8 	.word	0x200003b8
 800331c:	0800cc84 	.word	0x0800cc84
 8003320:	0800cc00 	.word	0x0800cc00
        }
        case MCMD_DN2P_SET: {
            dr_t dr = (dr_t)(opts[oidx+1] & 0x0F);
 8003324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003326:	3301      	adds	r3, #1
 8003328:	6a3a      	ldr	r2, [r7, #32]
 800332a:	18d3      	adds	r3, r2, r3
 800332c:	781a      	ldrb	r2, [r3, #0]
 800332e:	2412      	movs	r4, #18
 8003330:	193b      	adds	r3, r7, r4
 8003332:	210f      	movs	r1, #15
 8003334:	400a      	ands	r2, r1
 8003336:	701a      	strb	r2, [r3, #0]
            u4_t freq = convFreq(&opts[oidx+2]);
 8003338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800333a:	3302      	adds	r3, #2
 800333c:	6a3a      	ldr	r2, [r7, #32]
 800333e:	18d3      	adds	r3, r2, r3
 8003340:	0018      	movs	r0, r3
 8003342:	f7ff fa7d 	bl	8002840 <convFreq>
 8003346:	0003      	movs	r3, r0
 8003348:	60fb      	str	r3, [r7, #12]
            oidx += 5;
 800334a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800334c:	3305      	adds	r3, #5
 800334e:	653b      	str	r3, [r7, #80]	; 0x50
            LMIC.dn2Ans = 0x80;   // answer pending
 8003350:	4ad7      	ldr	r2, [pc, #860]	; (80036b0 <decodeFrame+0x6fc>)
 8003352:	2398      	movs	r3, #152	; 0x98
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	2180      	movs	r1, #128	; 0x80
 8003358:	54d1      	strb	r1, [r2, r3]
            if( validDR(dr) )
 800335a:	193b      	adds	r3, r7, r4
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	0018      	movs	r0, r3
 8003360:	f7fe fb56 	bl	8001a10 <validDR>
 8003364:	1e03      	subs	r3, r0, #0
 8003366:	d00a      	beq.n	800337e <decodeFrame+0x3ca>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_DRACK;
 8003368:	4ad1      	ldr	r2, [pc, #836]	; (80036b0 <decodeFrame+0x6fc>)
 800336a:	2398      	movs	r3, #152	; 0x98
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	5cd3      	ldrb	r3, [r2, r3]
 8003370:	2202      	movs	r2, #2
 8003372:	4313      	orrs	r3, r2
 8003374:	b2d9      	uxtb	r1, r3
 8003376:	4ace      	ldr	r2, [pc, #824]	; (80036b0 <decodeFrame+0x6fc>)
 8003378:	2398      	movs	r3, #152	; 0x98
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	54d1      	strb	r1, [r2, r3]
            if( freq != 0 )
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <decodeFrame+0x3e6>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_CHACK;
 8003384:	4aca      	ldr	r2, [pc, #808]	; (80036b0 <decodeFrame+0x6fc>)
 8003386:	2398      	movs	r3, #152	; 0x98
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	5cd3      	ldrb	r3, [r2, r3]
 800338c:	2201      	movs	r2, #1
 800338e:	4313      	orrs	r3, r2
 8003390:	b2d9      	uxtb	r1, r3
 8003392:	4ac7      	ldr	r2, [pc, #796]	; (80036b0 <decodeFrame+0x6fc>)
 8003394:	2398      	movs	r3, #152	; 0x98
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	54d1      	strb	r1, [r2, r3]
            if( LMIC.dn2Ans == (0x80|MCMD_DN2P_ANS_DRACK|MCMD_DN2P_ANS_CHACK) ) {
 800339a:	4ac5      	ldr	r2, [pc, #788]	; (80036b0 <decodeFrame+0x6fc>)
 800339c:	2398      	movs	r3, #152	; 0x98
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	5cd3      	ldrb	r3, [r2, r3]
 80033a2:	2b83      	cmp	r3, #131	; 0x83
 80033a4:	d000      	beq.n	80033a8 <decodeFrame+0x3f4>
 80033a6:	e106      	b.n	80035b6 <decodeFrame+0x602>
                LMIC.dn2Dr = dr;
 80033a8:	4ac1      	ldr	r2, [pc, #772]	; (80036b0 <decodeFrame+0x6fc>)
 80033aa:	2312      	movs	r3, #18
 80033ac:	18f9      	adds	r1, r7, r3
 80033ae:	232c      	movs	r3, #44	; 0x2c
 80033b0:	33ff      	adds	r3, #255	; 0xff
 80033b2:	7809      	ldrb	r1, [r1, #0]
 80033b4:	54d1      	strb	r1, [r2, r3]
                LMIC.dn2Freq = freq;
 80033b6:	4abe      	ldr	r2, [pc, #760]	; (80036b0 <decodeFrame+0x6fc>)
 80033b8:	2396      	movs	r3, #150	; 0x96
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	68f9      	ldr	r1, [r7, #12]
 80033be:	50d1      	str	r1, [r2, r3]
                DO_DEVDB(LMIC.dn2Dr,dn2Dr);
                DO_DEVDB(LMIC.dn2Freq,dn2Freq);
            }
            continue;
 80033c0:	e0f9      	b.n	80035b6 <decodeFrame+0x602>
        }
        case MCMD_DCAP_REQ: {
            u1_t cap = opts[oidx+1];
 80033c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033c4:	3301      	adds	r3, #1
 80033c6:	6a3a      	ldr	r2, [r7, #32]
 80033c8:	18d2      	adds	r2, r2, r3
 80033ca:	210b      	movs	r1, #11
 80033cc:	187b      	adds	r3, r7, r1
 80033ce:	7812      	ldrb	r2, [r2, #0]
 80033d0:	701a      	strb	r2, [r3, #0]
            oidx += 2;
 80033d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033d4:	3302      	adds	r3, #2
 80033d6:	653b      	str	r3, [r7, #80]	; 0x50
            // A value cap=0xFF means device is OFF unless enabled again manually.
            if( cap==0xFF )
 80033d8:	187b      	adds	r3, r7, r1
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2bff      	cmp	r3, #255	; 0xff
 80033de:	d108      	bne.n	80033f2 <decodeFrame+0x43e>
                LMIC.opmode |= OP_SHUTDOWN;  // stop any sending
 80033e0:	4bb3      	ldr	r3, [pc, #716]	; (80036b0 <decodeFrame+0x6fc>)
 80033e2:	22ac      	movs	r2, #172	; 0xac
 80033e4:	5a9b      	ldrh	r3, [r3, r2]
 80033e6:	2240      	movs	r2, #64	; 0x40
 80033e8:	4313      	orrs	r3, r2
 80033ea:	b299      	uxth	r1, r3
 80033ec:	4bb0      	ldr	r3, [pc, #704]	; (80036b0 <decodeFrame+0x6fc>)
 80033ee:	22ac      	movs	r2, #172	; 0xac
 80033f0:	5299      	strh	r1, [r3, r2]
            LMIC.globalDutyRate  = cap & 0xF;
 80033f2:	230b      	movs	r3, #11
 80033f4:	18fb      	adds	r3, r7, r3
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	220f      	movs	r2, #15
 80033fa:	4013      	ands	r3, r2
 80033fc:	b2d9      	uxtb	r1, r3
 80033fe:	4bac      	ldr	r3, [pc, #688]	; (80036b0 <decodeFrame+0x6fc>)
 8003400:	22a3      	movs	r2, #163	; 0xa3
 8003402:	5499      	strb	r1, [r3, r2]
            LMIC.globalDutyAvail = os_getTime();
 8003404:	f002 f960 	bl	80056c8 <os_getTime>
 8003408:	0001      	movs	r1, r0
 800340a:	4ba9      	ldr	r3, [pc, #676]	; (80036b0 <decodeFrame+0x6fc>)
 800340c:	22a4      	movs	r2, #164	; 0xa4
 800340e:	5099      	str	r1, [r3, r2]
            DO_DEVDB(cap,dutyCap);
            LMIC.dutyCapAns = 1;
 8003410:	4aa7      	ldr	r2, [pc, #668]	; (80036b0 <decodeFrame+0x6fc>)
 8003412:	232a      	movs	r3, #42	; 0x2a
 8003414:	33ff      	adds	r3, #255	; 0xff
 8003416:	2101      	movs	r1, #1
 8003418:	54d1      	strb	r1, [r2, r3]
            continue;
 800341a:	e0cc      	b.n	80035b6 <decodeFrame+0x602>
        }
        case MCMD_SNCH_REQ: {
            u1_t chidx = opts[oidx+1];  // channel
 800341c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800341e:	3301      	adds	r3, #1
 8003420:	6a3a      	ldr	r2, [r7, #32]
 8003422:	18d2      	adds	r2, r2, r3
 8003424:	231b      	movs	r3, #27
 8003426:	18fb      	adds	r3, r7, r3
 8003428:	7812      	ldrb	r2, [r2, #0]
 800342a:	701a      	strb	r2, [r3, #0]
            u4_t freq  = convFreq(&opts[oidx+2]); // freq
 800342c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800342e:	3302      	adds	r3, #2
 8003430:	6a3a      	ldr	r2, [r7, #32]
 8003432:	18d3      	adds	r3, r2, r3
 8003434:	0018      	movs	r0, r3
 8003436:	f7ff fa03 	bl	8002840 <convFreq>
 800343a:	0003      	movs	r3, r0
 800343c:	617b      	str	r3, [r7, #20]
            u1_t drs   = opts[oidx+5];  // datarate span
 800343e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003440:	3305      	adds	r3, #5
 8003442:	6a3a      	ldr	r2, [r7, #32]
 8003444:	18d2      	adds	r2, r2, r3
 8003446:	2313      	movs	r3, #19
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	7812      	ldrb	r2, [r2, #0]
 800344c:	701a      	strb	r2, [r3, #0]
            LMIC.snchAns = 0x80;
 800344e:	4a98      	ldr	r2, [pc, #608]	; (80036b0 <decodeFrame+0x6fc>)
 8003450:	2395      	movs	r3, #149	; 0x95
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	2180      	movs	r1, #128	; 0x80
 8003456:	54d1      	strb	r1, [r2, r3]
            if( freq != 0 && LMIC_setupChannel(chidx, freq, DR_RANGE_MAP(drs&0xF,drs>>4), -1) )
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d02c      	beq.n	80034b8 <decodeFrame+0x504>
 800345e:	2113      	movs	r1, #19
 8003460:	187b      	adds	r3, r7, r1
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	220f      	movs	r2, #15
 8003466:	4013      	ands	r3, r2
 8003468:	4a92      	ldr	r2, [pc, #584]	; (80036b4 <decodeFrame+0x700>)
 800346a:	409a      	lsls	r2, r3
 800346c:	0013      	movs	r3, r2
 800346e:	b21b      	sxth	r3, r3
 8003470:	187a      	adds	r2, r7, r1
 8003472:	7812      	ldrb	r2, [r2, #0]
 8003474:	0912      	lsrs	r2, r2, #4
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	0011      	movs	r1, r2
 800347a:	220f      	movs	r2, #15
 800347c:	1a52      	subs	r2, r2, r1
 800347e:	498d      	ldr	r1, [pc, #564]	; (80036b4 <decodeFrame+0x700>)
 8003480:	4111      	asrs	r1, r2
 8003482:	000a      	movs	r2, r1
 8003484:	b212      	sxth	r2, r2
 8003486:	4013      	ands	r3, r2
 8003488:	b21b      	sxth	r3, r3
 800348a:	b29a      	uxth	r2, r3
 800348c:	2301      	movs	r3, #1
 800348e:	425c      	negs	r4, r3
 8003490:	6979      	ldr	r1, [r7, #20]
 8003492:	231b      	movs	r3, #27
 8003494:	18fb      	adds	r3, r7, r3
 8003496:	7818      	ldrb	r0, [r3, #0]
 8003498:	0023      	movs	r3, r4
 800349a:	f7ff f94b 	bl	8002734 <LMIC_setupChannel>
 800349e:	1e03      	subs	r3, r0, #0
 80034a0:	d00a      	beq.n	80034b8 <decodeFrame+0x504>
                LMIC.snchAns |= MCMD_SNCH_ANS_DRACK|MCMD_SNCH_ANS_FQACK;
 80034a2:	4a83      	ldr	r2, [pc, #524]	; (80036b0 <decodeFrame+0x6fc>)
 80034a4:	2395      	movs	r3, #149	; 0x95
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	5cd3      	ldrb	r3, [r2, r3]
 80034aa:	2203      	movs	r2, #3
 80034ac:	4313      	orrs	r3, r2
 80034ae:	b2d9      	uxtb	r1, r3
 80034b0:	4a7f      	ldr	r2, [pc, #508]	; (80036b0 <decodeFrame+0x6fc>)
 80034b2:	2395      	movs	r3, #149	; 0x95
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	54d1      	strb	r1, [r2, r3]
            oidx += 6;
 80034b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ba:	3306      	adds	r3, #6
 80034bc:	653b      	str	r3, [r7, #80]	; 0x50
            continue;
 80034be:	e07a      	b.n	80035b6 <decodeFrame+0x602>
        }
        case MCMD_PING_SET: {
            u4_t freq = convFreq(&opts[oidx+1]);
 80034c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034c2:	3301      	adds	r3, #1
 80034c4:	6a3a      	ldr	r2, [r7, #32]
 80034c6:	18d3      	adds	r3, r2, r3
 80034c8:	0018      	movs	r0, r3
 80034ca:	f7ff f9b9 	bl	8002840 <convFreq>
 80034ce:	0003      	movs	r3, r0
 80034d0:	61fb      	str	r3, [r7, #28]
            oidx += 4;
 80034d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034d4:	3304      	adds	r3, #4
 80034d6:	653b      	str	r3, [r7, #80]	; 0x50
            u1_t flags = 0x80;
 80034d8:	234f      	movs	r3, #79	; 0x4f
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	2280      	movs	r2, #128	; 0x80
 80034de:	701a      	strb	r2, [r3, #0]
            if( freq != 0 ) {
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <decodeFrame+0x54a>
                flags |= MCMD_PING_ANS_FQACK;
 80034e6:	224f      	movs	r2, #79	; 0x4f
 80034e8:	18bb      	adds	r3, r7, r2
 80034ea:	18ba      	adds	r2, r7, r2
 80034ec:	7812      	ldrb	r2, [r2, #0]
 80034ee:	2101      	movs	r1, #1
 80034f0:	430a      	orrs	r2, r1
 80034f2:	701a      	strb	r2, [r3, #0]
                LMIC.ping.freq = freq;
 80034f4:	4a6e      	ldr	r2, [pc, #440]	; (80036b0 <decodeFrame+0x6fc>)
 80034f6:	23a0      	movs	r3, #160	; 0xa0
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	69f9      	ldr	r1, [r7, #28]
 80034fc:	50d1      	str	r1, [r2, r3]
                DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
                DO_DEVDB(LMIC.ping.freq, pingFreq);
                DO_DEVDB(LMIC.ping.dr, pingDr);
            }
            LMIC.pingSetAns = flags;
 80034fe:	4a6c      	ldr	r2, [pc, #432]	; (80036b0 <decodeFrame+0x6fc>)
 8003500:	234f      	movs	r3, #79	; 0x4f
 8003502:	18f9      	adds	r1, r7, r3
 8003504:	2334      	movs	r3, #52	; 0x34
 8003506:	33ff      	adds	r3, #255	; 0xff
 8003508:	7809      	ldrb	r1, [r1, #0]
 800350a:	54d1      	strb	r1, [r2, r3]
            continue;
 800350c:	e053      	b.n	80035b6 <decodeFrame+0x602>
        }
        case MCMD_BCNI_ANS: {
            // Ignore if tracking already enabled
            if( (LMIC.opmode & OP_TRACK) == 0 ) {
 800350e:	4b68      	ldr	r3, [pc, #416]	; (80036b0 <decodeFrame+0x6fc>)
 8003510:	22ac      	movs	r2, #172	; 0xac
 8003512:	5a9b      	ldrh	r3, [r3, r2]
 8003514:	001a      	movs	r2, r3
 8003516:	2302      	movs	r3, #2
 8003518:	4013      	ands	r3, r2
 800351a:	d148      	bne.n	80035ae <decodeFrame+0x5fa>
                LMIC.bcnChnl = opts[oidx+3];
 800351c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800351e:	3303      	adds	r3, #3
 8003520:	6a3a      	ldr	r2, [r7, #32]
 8003522:	18d3      	adds	r3, r2, r3
 8003524:	7819      	ldrb	r1, [r3, #0]
 8003526:	4a62      	ldr	r2, [pc, #392]	; (80036b0 <decodeFrame+0x6fc>)
 8003528:	23c4      	movs	r3, #196	; 0xc4
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	54d1      	strb	r1, [r2, r3]
                // Enable tracking - bcninfoTries
                LMIC.opmode |= OP_TRACK;
 800352e:	4b60      	ldr	r3, [pc, #384]	; (80036b0 <decodeFrame+0x6fc>)
 8003530:	22ac      	movs	r2, #172	; 0xac
 8003532:	5a9b      	ldrh	r3, [r3, r2]
 8003534:	2202      	movs	r2, #2
 8003536:	4313      	orrs	r3, r2
 8003538:	b299      	uxth	r1, r3
 800353a:	4b5d      	ldr	r3, [pc, #372]	; (80036b0 <decodeFrame+0x6fc>)
 800353c:	22ac      	movs	r2, #172	; 0xac
 800353e:	5299      	strh	r1, [r3, r2]
                // Cleared later in txComplete handling - triggers EV_BEACON_FOUND
                ASSERT(LMIC.bcninfoTries!=0);
 8003540:	4a5b      	ldr	r2, [pc, #364]	; (80036b0 <decodeFrame+0x6fc>)
 8003542:	2399      	movs	r3, #153	; 0x99
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	5cd3      	ldrb	r3, [r2, r3]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <decodeFrame+0x59c>
 800354c:	f7fe f978 	bl	8001840 <hal_failed>
                // Setup RX parameters
                LMIC.bcninfo.txtime = (LMIC.rxtime
 8003550:	4b57      	ldr	r3, [pc, #348]	; (80036b0 <decodeFrame+0x6fc>)
 8003552:	685c      	ldr	r4, [r3, #4]
                                       + ms2osticks(os_rlsbf2(&opts[oidx+1]) * MCMD_BCNI_TUNIT)
 8003554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003556:	3301      	adds	r3, #1
 8003558:	6a3a      	ldr	r2, [r7, #32]
 800355a:	18d3      	adds	r3, r2, r3
 800355c:	0018      	movs	r0, r3
 800355e:	f7fe fa8c 	bl	8001a7a <os_rlsbf2>
 8003562:	0003      	movs	r3, r0
 8003564:	001d      	movs	r5, r3
 8003566:	2300      	movs	r3, #0
 8003568:	001e      	movs	r6, r3
 800356a:	4a53      	ldr	r2, [pc, #332]	; (80036b8 <decodeFrame+0x704>)
 800356c:	2300      	movs	r3, #0
 800356e:	0028      	movs	r0, r5
 8003570:	0031      	movs	r1, r6
 8003572:	f7fc ff83 	bl	800047c <__aeabi_lmul>
 8003576:	0002      	movs	r2, r0
 8003578:	000b      	movs	r3, r1
 800357a:	0010      	movs	r0, r2
 800357c:	0019      	movs	r1, r3
 800357e:	22fa      	movs	r2, #250	; 0xfa
 8003580:	0092      	lsls	r2, r2, #2
 8003582:	2300      	movs	r3, #0
 8003584:	f7fc ff36 	bl	80003f4 <__aeabi_ldivmod>
 8003588:	0002      	movs	r2, r0
 800358a:	000b      	movs	r3, r1
 800358c:	0013      	movs	r3, r2
 800358e:	18e3      	adds	r3, r4, r3
                                       + ms2osticksCeil(MCMD_BCNI_TUNIT/2)
                                       - BCN_INTV_osticks);
 8003590:	4a4a      	ldr	r2, [pc, #296]	; (80036bc <decodeFrame+0x708>)
 8003592:	1899      	adds	r1, r3, r2
                LMIC.bcninfo.txtime = (LMIC.rxtime
 8003594:	4a46      	ldr	r2, [pc, #280]	; (80036b0 <decodeFrame+0x6fc>)
 8003596:	23c8      	movs	r3, #200	; 0xc8
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	50d1      	str	r1, [r2, r3]
                LMIC.bcninfo.flags = 0;  // txtime above cannot be used as reference (BCN_PARTIAL|BCN_FULL cleared)
 800359c:	4a44      	ldr	r2, [pc, #272]	; (80036b0 <decodeFrame+0x6fc>)
 800359e:	23cb      	movs	r3, #203	; 0xcb
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	2100      	movs	r1, #0
 80035a4:	54d1      	strb	r1, [r2, r3]
                calcBcnRxWindowFromMillis(MCMD_BCNI_TUNIT,1);  // error of +/-N ms 
 80035a6:	2101      	movs	r1, #1
 80035a8:	201e      	movs	r0, #30
 80035aa:	f7fe fe0f 	bl	80021cc <calcBcnRxWindowFromMillis>
                                     e_.info    = (LMIC.missedBcns |
                                                   (osticks2us(LMIC.bcninfo.txtime + BCN_INTV_osticks
                                                               - LMIC.bcnRxtime) << 8)),
                                     e_.time    = MAIN::CDEV->ostime2ustime(LMIC.bcninfo.txtime + BCN_INTV_osticks)));
            }
            oidx += 4;
 80035ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035b0:	3304      	adds	r3, #4
 80035b2:	653b      	str	r3, [r7, #80]	; 0x50
            continue;
 80035b4:	46c0      	nop			; (mov r8, r8)
    while( oidx < olen ) {
 80035b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80035b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ba:	429a      	cmp	r2, r3
 80035bc:	da00      	bge.n	80035c0 <decodeFrame+0x60c>
 80035be:	e611      	b.n	80031e4 <decodeFrame+0x230>
 80035c0:	e000      	b.n	80035c4 <decodeFrame+0x610>
        }
        EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = Base::lsbf4(&d[pend]),
                           e_.info2  = Base::msbf4(&opts[oidx])));
        break;
 80035c2:	46c0      	nop			; (mov r8, r8)
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (oidx) + (olen<<8)));
    }

    if( !replayConf ) {
 80035c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d11f      	bne.n	800360a <decodeFrame+0x656>
        // Handle payload only if not a replay
        // Decrypt payload - if any
        if( port >= 0  &&  pend-poff > 0 )
 80035ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	db1c      	blt.n	800360a <decodeFrame+0x656>
 80035d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	dd17      	ble.n	800360a <decodeFrame+0x656>
            aes_cipher(port <= 0 ? LMIC.nwkKey : LMIC.artKey, LMIC.devaddr, seqno, /*dn*/1, d+poff, pend-poff);
 80035da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035dc:	2b00      	cmp	r3, #0
 80035de:	dc01      	bgt.n	80035e4 <decodeFrame+0x630>
 80035e0:	4837      	ldr	r0, [pc, #220]	; (80036c0 <decodeFrame+0x70c>)
 80035e2:	e000      	b.n	80035e6 <decodeFrame+0x632>
 80035e4:	4837      	ldr	r0, [pc, #220]	; (80036c4 <decodeFrame+0x710>)
 80035e6:	4a32      	ldr	r2, [pc, #200]	; (80036b0 <decodeFrame+0x6fc>)
 80035e8:	238a      	movs	r3, #138	; 0x8a
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	58d4      	ldr	r4, [r2, r3]
 80035ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035f2:	18d3      	adds	r3, r2, r3
 80035f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035f8:	1a8a      	subs	r2, r1, r2
 80035fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80035fc:	9201      	str	r2, [sp, #4]
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	2301      	movs	r3, #1
 8003602:	000a      	movs	r2, r1
 8003604:	0021      	movs	r1, r4
 8003606:	f7fe fc13 	bl	8001e30 <aes_cipher>
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = seqno,
                           e_.info2  = ackup));
    }

    if( LMIC.txCnt != 0 ) // we requested an ACK
 800360a:	4a29      	ldr	r2, [pc, #164]	; (80036b0 <decodeFrame+0x6fc>)
 800360c:	23a2      	movs	r3, #162	; 0xa2
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	5cd3      	ldrb	r3, [r2, r3]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d012      	beq.n	800363c <decodeFrame+0x688>
        LMIC.txrxFlags |= ackup ? TXRX_ACK : TXRX_NACK;
 8003616:	4a26      	ldr	r2, [pc, #152]	; (80036b0 <decodeFrame+0x6fc>)
 8003618:	2346      	movs	r3, #70	; 0x46
 800361a:	33ff      	adds	r3, #255	; 0xff
 800361c:	5cd3      	ldrb	r3, [r2, r3]
 800361e:	b25a      	sxtb	r2, r3
 8003620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <decodeFrame+0x678>
 8003626:	2380      	movs	r3, #128	; 0x80
 8003628:	425b      	negs	r3, r3
 800362a:	e000      	b.n	800362e <decodeFrame+0x67a>
 800362c:	2340      	movs	r3, #64	; 0x40
 800362e:	4313      	orrs	r3, r2
 8003630:	b25b      	sxtb	r3, r3
 8003632:	b2d9      	uxtb	r1, r3
 8003634:	4a1e      	ldr	r2, [pc, #120]	; (80036b0 <decodeFrame+0x6fc>)
 8003636:	2346      	movs	r3, #70	; 0x46
 8003638:	33ff      	adds	r3, #255	; 0xff
 800363a:	54d1      	strb	r1, [r2, r3]

    if( port < 0 ) {
 800363c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800363e:	2b00      	cmp	r3, #0
 8003640:	da16      	bge.n	8003670 <decodeFrame+0x6bc>
        LMIC.txrxFlags |= TXRX_NOPORT;
 8003642:	4a1b      	ldr	r2, [pc, #108]	; (80036b0 <decodeFrame+0x6fc>)
 8003644:	2346      	movs	r3, #70	; 0x46
 8003646:	33ff      	adds	r3, #255	; 0xff
 8003648:	5cd3      	ldrb	r3, [r2, r3]
 800364a:	2220      	movs	r2, #32
 800364c:	4313      	orrs	r3, r2
 800364e:	b2d9      	uxtb	r1, r3
 8003650:	4a17      	ldr	r2, [pc, #92]	; (80036b0 <decodeFrame+0x6fc>)
 8003652:	2346      	movs	r3, #70	; 0x46
 8003654:	33ff      	adds	r3, #255	; 0xff
 8003656:	54d1      	strb	r1, [r2, r3]
        LMIC.dataBeg = poff;
 8003658:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800365a:	b2d9      	uxtb	r1, r3
 800365c:	4a14      	ldr	r2, [pc, #80]	; (80036b0 <decodeFrame+0x6fc>)
 800365e:	23a3      	movs	r3, #163	; 0xa3
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	54d1      	strb	r1, [r2, r3]
        LMIC.dataLen = 0;
 8003664:	4a12      	ldr	r2, [pc, #72]	; (80036b0 <decodeFrame+0x6fc>)
 8003666:	2348      	movs	r3, #72	; 0x48
 8003668:	33ff      	adds	r3, #255	; 0xff
 800366a:	2100      	movs	r1, #0
 800366c:	54d1      	strb	r1, [r2, r3]
 800366e:	e01a      	b.n	80036a6 <decodeFrame+0x6f2>
    } else {
        LMIC.txrxFlags |= TXRX_PORT;
 8003670:	4a0f      	ldr	r2, [pc, #60]	; (80036b0 <decodeFrame+0x6fc>)
 8003672:	2346      	movs	r3, #70	; 0x46
 8003674:	33ff      	adds	r3, #255	; 0xff
 8003676:	5cd3      	ldrb	r3, [r2, r3]
 8003678:	2210      	movs	r2, #16
 800367a:	4313      	orrs	r3, r2
 800367c:	b2d9      	uxtb	r1, r3
 800367e:	4a0c      	ldr	r2, [pc, #48]	; (80036b0 <decodeFrame+0x6fc>)
 8003680:	2346      	movs	r3, #70	; 0x46
 8003682:	33ff      	adds	r3, #255	; 0xff
 8003684:	54d1      	strb	r1, [r2, r3]
        LMIC.dataBeg = poff;
 8003686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003688:	b2d9      	uxtb	r1, r3
 800368a:	4a09      	ldr	r2, [pc, #36]	; (80036b0 <decodeFrame+0x6fc>)
 800368c:	23a3      	movs	r3, #163	; 0xa3
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	54d1      	strb	r1, [r2, r3]
        LMIC.dataLen = pend-poff;
 8003692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003694:	b2da      	uxtb	r2, r3
 8003696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003698:	b2db      	uxtb	r3, r3
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	b2d9      	uxtb	r1, r3
 800369e:	4a04      	ldr	r2, [pc, #16]	; (80036b0 <decodeFrame+0x6fc>)
 80036a0:	2348      	movs	r3, #72	; 0x48
 80036a2:	33ff      	adds	r3, #255	; 0xff
 80036a4:	54d1      	strb	r1, [r2, r3]
    }
    return 1;
 80036a6:	2301      	movs	r3, #1
}
 80036a8:	0018      	movs	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b019      	add	sp, #100	; 0x64
 80036ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036b0:	200002c4 	.word	0x200002c4
 80036b4:	0000ffff 	.word	0x0000ffff
 80036b8:	000ea600 	.word	0x000ea600
 80036bc:	ffc181e0 	.word	0xffc181e0
 80036c0:	200003b8 	.word	0x200003b8
 80036c4:	200003c8 	.word	0x200003c8

080036c8 <setupRx2>:

// ================================================================================
// TX/RX transaction support


static void setupRx2 (void) {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
    LMIC.txrxFlags = TXRX_DNW2;
 80036cc:	4a10      	ldr	r2, [pc, #64]	; (8003710 <setupRx2+0x48>)
 80036ce:	2346      	movs	r3, #70	; 0x46
 80036d0:	33ff      	adds	r3, #255	; 0xff
 80036d2:	2102      	movs	r1, #2
 80036d4:	54d1      	strb	r1, [r2, r3]
    LMIC.rps = dndr2rps(LMIC.dn2Dr);
 80036d6:	4a0e      	ldr	r2, [pc, #56]	; (8003710 <setupRx2+0x48>)
 80036d8:	232c      	movs	r3, #44	; 0x2c
 80036da:	33ff      	adds	r3, #255	; 0xff
 80036dc:	5cd3      	ldrb	r3, [r2, r3]
 80036de:	0018      	movs	r0, r3
 80036e0:	f7fe f966 	bl	80019b0 <dndr2rps>
 80036e4:	0003      	movs	r3, r0
 80036e6:	001a      	movs	r2, r3
 80036e8:	4b09      	ldr	r3, [pc, #36]	; (8003710 <setupRx2+0x48>)
 80036ea:	81da      	strh	r2, [r3, #14]
    LMIC.freq = LMIC.dn2Freq;
 80036ec:	4a08      	ldr	r2, [pc, #32]	; (8003710 <setupRx2+0x48>)
 80036ee:	2396      	movs	r3, #150	; 0x96
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	58d2      	ldr	r2, [r2, r3]
 80036f4:	4b06      	ldr	r3, [pc, #24]	; (8003710 <setupRx2+0x48>)
 80036f6:	609a      	str	r2, [r3, #8]
    LMIC.dataLen = 0;
 80036f8:	4a05      	ldr	r2, [pc, #20]	; (8003710 <setupRx2+0x48>)
 80036fa:	2348      	movs	r3, #72	; 0x48
 80036fc:	33ff      	adds	r3, #255	; 0xff
 80036fe:	2100      	movs	r1, #0
 8003700:	54d1      	strb	r1, [r2, r3]
    os_radio(RADIO_RX);
 8003702:	2002      	movs	r0, #2
 8003704:	f002 fe92 	bl	800642c <os_radio>
}
 8003708:	46c0      	nop			; (mov r8, r8)
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	200002c4 	.word	0x200002c4

08003714 <schedRx2>:


static void schedRx2 (ostime_t delay, osjobcb_t func) {
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
    // Add 1.5 symbols we need 5 out of 8. Try to sync 1.5 symbols into the preamble.
    LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dn2Dr);
 800371e:	4b0f      	ldr	r3, [pc, #60]	; (800375c <schedRx2+0x48>)
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	18d1      	adds	r1, r2, r3
 8003726:	4a0d      	ldr	r2, [pc, #52]	; (800375c <schedRx2+0x48>)
 8003728:	232c      	movs	r3, #44	; 0x2c
 800372a:	33ff      	adds	r3, #255	; 0xff
 800372c:	5cd3      	ldrb	r3, [r2, r3]
 800372e:	001a      	movs	r2, r3
 8003730:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <schedRx2+0x4c>)
 8003732:	0092      	lsls	r2, r2, #2
 8003734:	58d2      	ldr	r2, [r2, r3]
 8003736:	0013      	movs	r3, r2
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	189b      	adds	r3, r3, r2
 800373c:	18ca      	adds	r2, r1, r3
 800373e:	4b07      	ldr	r3, [pc, #28]	; (800375c <schedRx2+0x48>)
 8003740:	605a      	str	r2, [r3, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 8003742:	4b06      	ldr	r3, [pc, #24]	; (800375c <schedRx2+0x48>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	3b40      	subs	r3, #64	; 0x40
 8003748:	0019      	movs	r1, r3
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	4b05      	ldr	r3, [pc, #20]	; (8003764 <schedRx2+0x50>)
 800374e:	0018      	movs	r0, r3
 8003750:	f002 f828 	bl	80057a4 <os_setTimedCallback>
}
 8003754:	46c0      	nop			; (mov r8, r8)
 8003756:	46bd      	mov	sp, r7
 8003758:	b002      	add	sp, #8
 800375a:	bd80      	pop	{r7, pc}
 800375c:	200002c4 	.word	0x200002c4
 8003760:	0800cc34 	.word	0x0800cc34
 8003764:	200002d8 	.word	0x200002d8

08003768 <setupRx1>:

static void setupRx1 (osjobcb_t func) {
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
    LMIC.txrxFlags = TXRX_DNW1;
 8003770:	4a0e      	ldr	r2, [pc, #56]	; (80037ac <setupRx1+0x44>)
 8003772:	2346      	movs	r3, #70	; 0x46
 8003774:	33ff      	adds	r3, #255	; 0xff
 8003776:	2101      	movs	r1, #1
 8003778:	54d1      	strb	r1, [r2, r3]
    // Turn LMIC.rps from TX over to RX
    LMIC.rps = setNocrc(LMIC.rps,1);
 800377a:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <setupRx1+0x44>)
 800377c:	89db      	ldrh	r3, [r3, #14]
 800377e:	2101      	movs	r1, #1
 8003780:	0018      	movs	r0, r3
 8003782:	f7fe f8c3 	bl	800190c <setNocrc>
 8003786:	0003      	movs	r3, r0
 8003788:	001a      	movs	r2, r3
 800378a:	4b08      	ldr	r3, [pc, #32]	; (80037ac <setupRx1+0x44>)
 800378c:	81da      	strh	r2, [r3, #14]
    LMIC.dataLen = 0;
 800378e:	4a07      	ldr	r2, [pc, #28]	; (80037ac <setupRx1+0x44>)
 8003790:	2348      	movs	r3, #72	; 0x48
 8003792:	33ff      	adds	r3, #255	; 0xff
 8003794:	2100      	movs	r1, #0
 8003796:	54d1      	strb	r1, [r2, r3]
    LMIC.osjob.func = func;
 8003798:	4b04      	ldr	r3, [pc, #16]	; (80037ac <setupRx1+0x44>)
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 800379e:	2002      	movs	r0, #2
 80037a0:	f002 fe44 	bl	800642c <os_radio>
}
 80037a4:	46c0      	nop			; (mov r8, r8)
 80037a6:	46bd      	mov	sp, r7
 80037a8:	b002      	add	sp, #8
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	200002c4 	.word	0x200002c4

080037b0 <txDone>:


// Called by HAL once TX complete and delivers exact end of TX time stamp in LMIC.rxtime
static void txDone (ostime_t delay, osjobcb_t func) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE|OP_PINGINI)) == (OP_TRACK|OP_PINGABLE) ) {
 80037ba:	4b23      	ldr	r3, [pc, #140]	; (8003848 <txDone+0x98>)
 80037bc:	22ac      	movs	r2, #172	; 0xac
 80037be:	5a9b      	ldrh	r3, [r3, r2]
 80037c0:	001a      	movs	r2, r3
 80037c2:	4b22      	ldr	r3, [pc, #136]	; (800384c <txDone+0x9c>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	4a22      	ldr	r2, [pc, #136]	; (8003850 <txDone+0xa0>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d10d      	bne.n	80037e8 <txDone+0x38>
        rxschedInit(&LMIC.ping);    // note: reuses LMIC.frame buffer!
 80037cc:	4b21      	ldr	r3, [pc, #132]	; (8003854 <txDone+0xa4>)
 80037ce:	0018      	movs	r0, r3
 80037d0:	f7fe fd68 	bl	80022a4 <rxschedInit>
        LMIC.opmode |= OP_PINGINI;
 80037d4:	4b1c      	ldr	r3, [pc, #112]	; (8003848 <txDone+0x98>)
 80037d6:	22ac      	movs	r2, #172	; 0xac
 80037d8:	5a9b      	ldrh	r3, [r3, r2]
 80037da:	2280      	movs	r2, #128	; 0x80
 80037dc:	0092      	lsls	r2, r2, #2
 80037de:	4313      	orrs	r3, r2
 80037e0:	b299      	uxth	r1, r3
 80037e2:	4b19      	ldr	r3, [pc, #100]	; (8003848 <txDone+0x98>)
 80037e4:	22ac      	movs	r2, #172	; 0xac
 80037e6:	5299      	strh	r1, [r3, r2]
    setRx1Params();
    // LMIC.rxsyms carries the TX datarate (can be != LMIC.datarate [confirm retries etc.])
    // Setup receive - LMIC.rxtime is preloaded with 1.5 symbols offset to tune
    // into the middle of the 8 symbols preamble.
#if defined(CFG_eu868)
    if( /* TX datarate */LMIC.rxsyms == DR_FSK ) {
 80037e8:	4b17      	ldr	r3, [pc, #92]	; (8003848 <txDone+0x98>)
 80037ea:	7c1b      	ldrb	r3, [r3, #16]
 80037ec:	2b07      	cmp	r3, #7
 80037ee:	d10a      	bne.n	8003806 <txDone+0x56>
        LMIC.rxtime = LMIC.txend + delay - PRERX_FSK*us2osticksRound(160);
 80037f0:	4b15      	ldr	r3, [pc, #84]	; (8003848 <txDone+0x98>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	18d3      	adds	r3, r2, r3
 80037f8:	1f5a      	subs	r2, r3, #5
 80037fa:	4b13      	ldr	r3, [pc, #76]	; (8003848 <txDone+0x98>)
 80037fc:	605a      	str	r2, [r3, #4]
        LMIC.rxsyms = RXLEN_FSK;
 80037fe:	4b12      	ldr	r3, [pc, #72]	; (8003848 <txDone+0x98>)
 8003800:	2208      	movs	r2, #8
 8003802:	741a      	strb	r2, [r3, #16]
 8003804:	e012      	b.n	800382c <txDone+0x7c>
    }
    else
#endif
    {
        LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dndr);
 8003806:	4b10      	ldr	r3, [pc, #64]	; (8003848 <txDone+0x98>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	18d1      	adds	r1, r2, r3
 800380e:	4b0e      	ldr	r3, [pc, #56]	; (8003848 <txDone+0x98>)
 8003810:	7c5b      	ldrb	r3, [r3, #17]
 8003812:	001a      	movs	r2, r3
 8003814:	4b10      	ldr	r3, [pc, #64]	; (8003858 <txDone+0xa8>)
 8003816:	0092      	lsls	r2, r2, #2
 8003818:	58d2      	ldr	r2, [r2, r3]
 800381a:	0013      	movs	r3, r2
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	189b      	adds	r3, r3, r2
 8003820:	18ca      	adds	r2, r1, r3
 8003822:	4b09      	ldr	r3, [pc, #36]	; (8003848 <txDone+0x98>)
 8003824:	605a      	str	r2, [r3, #4]
        LMIC.rxsyms = MINRX_SYMS;
 8003826:	4b08      	ldr	r3, [pc, #32]	; (8003848 <txDone+0x98>)
 8003828:	2205      	movs	r2, #5
 800382a:	741a      	strb	r2, [r3, #16]
    }
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <txDone+0x98>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	3b40      	subs	r3, #64	; 0x40
 8003832:	0019      	movs	r1, r3
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	4b09      	ldr	r3, [pc, #36]	; (800385c <txDone+0xac>)
 8003838:	0018      	movs	r0, r3
 800383a:	f001 ffb3 	bl	80057a4 <os_setTimedCallback>
}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	46bd      	mov	sp, r7
 8003842:	b002      	add	sp, #8
 8003844:	bd80      	pop	{r7, pc}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	200002c4 	.word	0x200002c4
 800384c:	00000602 	.word	0x00000602
 8003850:	00000402 	.word	0x00000402
 8003854:	200003f8 	.word	0x200003f8
 8003858:	0800cc34 	.word	0x0800cc34
 800385c:	200002d8 	.word	0x200002d8

08003860 <onJoinFailed>:


// ======================================== Join frames


static void onJoinFailed (xref2osjob_t osjob) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
    // Notify app - must call LMIC_reset() to stop joining
    // otherwise join procedure continues.
    reportEvent(EV_JOIN_FAILED);
 8003868:	2008      	movs	r0, #8
 800386a:	f7ff fa61 	bl	8002d30 <reportEvent>
}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	46bd      	mov	sp, r7
 8003872:	b002      	add	sp, #8
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <processJoinAccept>:


static bit_t processJoinAccept (void) {
 8003878:	b590      	push	{r4, r7, lr}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
    ASSERT(LMIC.txrxFlags != TXRX_DNW1 || LMIC.dataLen != 0);
 800387e:	4ab2      	ldr	r2, [pc, #712]	; (8003b48 <processJoinAccept+0x2d0>)
 8003880:	2346      	movs	r3, #70	; 0x46
 8003882:	33ff      	adds	r3, #255	; 0xff
 8003884:	5cd3      	ldrb	r3, [r2, r3]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d107      	bne.n	800389a <processJoinAccept+0x22>
 800388a:	4aaf      	ldr	r2, [pc, #700]	; (8003b48 <processJoinAccept+0x2d0>)
 800388c:	2348      	movs	r3, #72	; 0x48
 800388e:	33ff      	adds	r3, #255	; 0xff
 8003890:	5cd3      	ldrb	r3, [r2, r3]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <processJoinAccept+0x22>
 8003896:	f7fd ffd3 	bl	8001840 <hal_failed>
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 800389a:	4bab      	ldr	r3, [pc, #684]	; (8003b48 <processJoinAccept+0x2d0>)
 800389c:	22ac      	movs	r2, #172	; 0xac
 800389e:	5a9b      	ldrh	r3, [r3, r2]
 80038a0:	001a      	movs	r2, r3
 80038a2:	2380      	movs	r3, #128	; 0x80
 80038a4:	4013      	ands	r3, r2
 80038a6:	d101      	bne.n	80038ac <processJoinAccept+0x34>
 80038a8:	f7fd ffca 	bl	8001840 <hal_failed>

    if( LMIC.dataLen == 0 ) {
 80038ac:	4aa6      	ldr	r2, [pc, #664]	; (8003b48 <processJoinAccept+0x2d0>)
 80038ae:	2348      	movs	r3, #72	; 0x48
 80038b0:	33ff      	adds	r3, #255	; 0xff
 80038b2:	5cd3      	ldrb	r3, [r2, r3]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d14c      	bne.n	8003952 <processJoinAccept+0xda>
      nojoinframe:
 80038b8:	46c0      	nop			; (mov r8, r8)
 80038ba:	e000      	b.n	80038be <processJoinAccept+0x46>
                           e_.info   = dlen < 4 ? 0 : mic,
                           e_.info2  = hdr + (dlen<<8)));
      badframe:
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto nojoinframe;
 80038bc:	46c0      	nop			; (mov r8, r8)
        if( (LMIC.opmode & OP_JOINING) == 0 ) {
 80038be:	4ba2      	ldr	r3, [pc, #648]	; (8003b48 <processJoinAccept+0x2d0>)
 80038c0:	22ac      	movs	r2, #172	; 0xac
 80038c2:	5a9b      	ldrh	r3, [r3, r2]
 80038c4:	001a      	movs	r2, r3
 80038c6:	2304      	movs	r3, #4
 80038c8:	4013      	ands	r3, r2
 80038ca:	d123      	bne.n	8003914 <processJoinAccept+0x9c>
            ASSERT((LMIC.opmode & OP_REJOIN) != 0);
 80038cc:	4b9e      	ldr	r3, [pc, #632]	; (8003b48 <processJoinAccept+0x2d0>)
 80038ce:	22ac      	movs	r2, #172	; 0xac
 80038d0:	5a9b      	ldrh	r3, [r3, r2]
 80038d2:	001a      	movs	r2, r3
 80038d4:	2320      	movs	r3, #32
 80038d6:	4013      	ands	r3, r2
 80038d8:	d101      	bne.n	80038de <processJoinAccept+0x66>
 80038da:	f7fd ffb1 	bl	8001840 <hal_failed>
            LMIC.opmode &= ~(OP_REJOIN|OP_TXRXPEND);
 80038de:	4b9a      	ldr	r3, [pc, #616]	; (8003b48 <processJoinAccept+0x2d0>)
 80038e0:	22ac      	movs	r2, #172	; 0xac
 80038e2:	5a9b      	ldrh	r3, [r3, r2]
 80038e4:	22a0      	movs	r2, #160	; 0xa0
 80038e6:	4393      	bics	r3, r2
 80038e8:	b299      	uxth	r1, r3
 80038ea:	4b97      	ldr	r3, [pc, #604]	; (8003b48 <processJoinAccept+0x2d0>)
 80038ec:	22ac      	movs	r2, #172	; 0xac
 80038ee:	5299      	strh	r1, [r3, r2]
            if( LMIC.rejoinCnt < 10 )
 80038f0:	4b95      	ldr	r3, [pc, #596]	; (8003b48 <processJoinAccept+0x2d0>)
 80038f2:	22b2      	movs	r2, #178	; 0xb2
 80038f4:	5c9b      	ldrb	r3, [r3, r2]
 80038f6:	2b09      	cmp	r3, #9
 80038f8:	d807      	bhi.n	800390a <processJoinAccept+0x92>
                LMIC.rejoinCnt++;
 80038fa:	4b93      	ldr	r3, [pc, #588]	; (8003b48 <processJoinAccept+0x2d0>)
 80038fc:	22b2      	movs	r2, #178	; 0xb2
 80038fe:	5c9b      	ldrb	r3, [r3, r2]
 8003900:	3301      	adds	r3, #1
 8003902:	b2d9      	uxtb	r1, r3
 8003904:	4b90      	ldr	r3, [pc, #576]	; (8003b48 <processJoinAccept+0x2d0>)
 8003906:	22b2      	movs	r2, #178	; 0xb2
 8003908:	5499      	strb	r1, [r3, r2]
            reportEvent(EV_REJOIN_FAILED);
 800390a:	2009      	movs	r0, #9
 800390c:	f7ff fa10 	bl	8002d30 <reportEvent>
            return 1;
 8003910:	2301      	movs	r3, #1
 8003912:	e115      	b.n	8003b40 <processJoinAccept+0x2c8>
        LMIC.opmode &= ~OP_TXRXPEND;
 8003914:	4b8c      	ldr	r3, [pc, #560]	; (8003b48 <processJoinAccept+0x2d0>)
 8003916:	22ac      	movs	r2, #172	; 0xac
 8003918:	5a9b      	ldrh	r3, [r3, r2]
 800391a:	2280      	movs	r2, #128	; 0x80
 800391c:	4393      	bics	r3, r2
 800391e:	b299      	uxth	r1, r3
 8003920:	4b89      	ldr	r3, [pc, #548]	; (8003b48 <processJoinAccept+0x2d0>)
 8003922:	22ac      	movs	r2, #172	; 0xac
 8003924:	5299      	strh	r1, [r3, r2]
        ostime_t delay = nextJoinState();
 8003926:	f7ff f989 	bl	8002c3c <nextJoinState>
 800392a:	0003      	movs	r3, r0
 800392c:	607b      	str	r3, [r7, #4]
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 800392e:	f001 fecb 	bl	80056c8 <os_getTime>
 8003932:	0002      	movs	r2, r0
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	18d1      	adds	r1, r2, r3
                            (delay&1) != 0
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	4013      	ands	r3, r2
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 800393e:	d001      	beq.n	8003944 <processJoinAccept+0xcc>
 8003940:	4b82      	ldr	r3, [pc, #520]	; (8003b4c <processJoinAccept+0x2d4>)
 8003942:	e000      	b.n	8003946 <processJoinAccept+0xce>
 8003944:	4b82      	ldr	r3, [pc, #520]	; (8003b50 <processJoinAccept+0x2d8>)
 8003946:	4883      	ldr	r0, [pc, #524]	; (8003b54 <processJoinAccept+0x2dc>)
 8003948:	001a      	movs	r2, r3
 800394a:	f001 ff2b 	bl	80057a4 <os_setTimedCallback>
        return 1;
 800394e:	2301      	movs	r3, #1
 8003950:	e0f6      	b.n	8003b40 <processJoinAccept+0x2c8>
    u1_t hdr  = LMIC.frame[0];
 8003952:	2315      	movs	r3, #21
 8003954:	18fb      	adds	r3, r7, r3
 8003956:	497c      	ldr	r1, [pc, #496]	; (8003b48 <processJoinAccept+0x2d0>)
 8003958:	22a4      	movs	r2, #164	; 0xa4
 800395a:	0052      	lsls	r2, r2, #1
 800395c:	5c8a      	ldrb	r2, [r1, r2]
 800395e:	701a      	strb	r2, [r3, #0]
    u1_t dlen = LMIC.dataLen;
 8003960:	2417      	movs	r4, #23
 8003962:	193b      	adds	r3, r7, r4
 8003964:	4978      	ldr	r1, [pc, #480]	; (8003b48 <processJoinAccept+0x2d0>)
 8003966:	2248      	movs	r2, #72	; 0x48
 8003968:	32ff      	adds	r2, #255	; 0xff
 800396a:	5c8a      	ldrb	r2, [r1, r2]
 800396c:	701a      	strb	r2, [r3, #0]
    u4_t mic  = os_rlsbf4(&LMIC.frame[dlen-4]); // safe before modified by encrypt!
 800396e:	193b      	adds	r3, r7, r4
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	3b04      	subs	r3, #4
 8003974:	3349      	adds	r3, #73	; 0x49
 8003976:	33ff      	adds	r3, #255	; 0xff
 8003978:	001a      	movs	r2, r3
 800397a:	4b73      	ldr	r3, [pc, #460]	; (8003b48 <processJoinAccept+0x2d0>)
 800397c:	18d3      	adds	r3, r2, r3
 800397e:	0018      	movs	r0, r3
 8003980:	f7fe f88e 	bl	8001aa0 <os_rlsbf4>
 8003984:	0003      	movs	r3, r0
 8003986:	613b      	str	r3, [r7, #16]
    if( (dlen != LEN_JA && dlen != LEN_JAEXT)
 8003988:	193b      	adds	r3, r7, r4
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2b11      	cmp	r3, #17
 800398e:	d004      	beq.n	800399a <processJoinAccept+0x122>
 8003990:	2317      	movs	r3, #23
 8003992:	18fb      	adds	r3, r7, r3
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b21      	cmp	r3, #33	; 0x21
 8003998:	d106      	bne.n	80039a8 <processJoinAccept+0x130>
        || (hdr & (HDR_FTYPE|HDR_MAJOR)) != (HDR_FTYPE_JACC|HDR_MAJOR_V1) ) {
 800399a:	2315      	movs	r3, #21
 800399c:	18fb      	adds	r3, r7, r3
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	22e3      	movs	r2, #227	; 0xe3
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d00d      	beq.n	80039c4 <processJoinAccept+0x14c>
      badframe:
 80039a8:	46c0      	nop			; (mov r8, r8)
 80039aa:	e000      	b.n	80039ae <processJoinAccept+0x136>
    }
    aes_encrypt(LMIC.frame+1, dlen-1);
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::JOIN_BAD_MIC,
                           e_.info   = mic));
        goto badframe;
 80039ac:	46c0      	nop			; (mov r8, r8)
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 80039ae:	4a66      	ldr	r2, [pc, #408]	; (8003b48 <processJoinAccept+0x2d0>)
 80039b0:	2346      	movs	r3, #70	; 0x46
 80039b2:	33ff      	adds	r3, #255	; 0xff
 80039b4:	5cd3      	ldrb	r3, [r2, r3]
 80039b6:	001a      	movs	r2, r3
 80039b8:	2301      	movs	r3, #1
 80039ba:	4013      	ands	r3, r2
 80039bc:	d100      	bne.n	80039c0 <processJoinAccept+0x148>
 80039be:	e77d      	b.n	80038bc <processJoinAccept+0x44>
            return 0;
 80039c0:	2300      	movs	r3, #0
 80039c2:	e0bd      	b.n	8003b40 <processJoinAccept+0x2c8>
    aes_encrypt(LMIC.frame+1, dlen-1);
 80039c4:	4a64      	ldr	r2, [pc, #400]	; (8003b58 <processJoinAccept+0x2e0>)
 80039c6:	2417      	movs	r4, #23
 80039c8:	193b      	adds	r3, r7, r4
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	3b01      	subs	r3, #1
 80039ce:	0019      	movs	r1, r3
 80039d0:	0010      	movs	r0, r2
 80039d2:	f7fe fa17 	bl	8001e04 <aes_encrypt>
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
 80039d6:	193b      	adds	r3, r7, r4
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	1f1a      	subs	r2, r3, #4
 80039dc:	4b5f      	ldr	r3, [pc, #380]	; (8003b5c <processJoinAccept+0x2e4>)
 80039de:	0011      	movs	r1, r2
 80039e0:	0018      	movs	r0, r3
 80039e2:	f7fe f9ed 	bl	8001dc0 <aes_verifyMic0>
 80039e6:	1e03      	subs	r3, r0, #0
 80039e8:	d0e0      	beq.n	80039ac <processJoinAccept+0x134>
    }

    u4_t addr = os_rlsbf4(LMIC.frame+OFF_JA_DEVADDR);
 80039ea:	4b5d      	ldr	r3, [pc, #372]	; (8003b60 <processJoinAccept+0x2e8>)
 80039ec:	0018      	movs	r0, r3
 80039ee:	f7fe f857 	bl	8001aa0 <os_rlsbf4>
 80039f2:	0003      	movs	r3, r0
 80039f4:	60fb      	str	r3, [r7, #12]
    LMIC.devaddr = addr;
 80039f6:	4a54      	ldr	r2, [pc, #336]	; (8003b48 <processJoinAccept+0x2d0>)
 80039f8:	238a      	movs	r3, #138	; 0x8a
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	68f9      	ldr	r1, [r7, #12]
 80039fe:	50d1      	str	r1, [r2, r3]
    LMIC.netid = os_rlsbf4(&LMIC.frame[OFF_JA_NETID]) & 0xFFFFFF;
 8003a00:	4b58      	ldr	r3, [pc, #352]	; (8003b64 <processJoinAccept+0x2ec>)
 8003a02:	0018      	movs	r0, r3
 8003a04:	f7fe f84c 	bl	8001aa0 <os_rlsbf4>
 8003a08:	0003      	movs	r3, r0
 8003a0a:	021b      	lsls	r3, r3, #8
 8003a0c:	0a1a      	lsrs	r2, r3, #8
 8003a0e:	4b4e      	ldr	r3, [pc, #312]	; (8003b48 <processJoinAccept+0x2d0>)
 8003a10:	21a8      	movs	r1, #168	; 0xa8
 8003a12:	505a      	str	r2, [r3, r1]

#if defined(CFG_eu868)
    initDefaultChannels(0);
 8003a14:	2000      	movs	r0, #0
 8003a16:	f7fe fdef 	bl	80025f8 <initDefaultChannels>
#endif
    if( dlen > LEN_JA ) {
 8003a1a:	2317      	movs	r3, #23
 8003a1c:	18fb      	adds	r3, r7, r3
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b11      	cmp	r3, #17
 8003a22:	d933      	bls.n	8003a8c <processJoinAccept+0x214>
#if defined(CFG_us915)
        goto badframe;
#endif
        dlen = OFF_CFLIST;
 8003a24:	2317      	movs	r3, #23
 8003a26:	18fb      	adds	r3, r7, r3
 8003a28:	220d      	movs	r2, #13
 8003a2a:	701a      	strb	r2, [r3, #0]
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 8003a2c:	2316      	movs	r3, #22
 8003a2e:	18fb      	adds	r3, r7, r3
 8003a30:	2203      	movs	r2, #3
 8003a32:	701a      	strb	r2, [r3, #0]
 8003a34:	e025      	b.n	8003a82 <processJoinAccept+0x20a>
            u4_t freq = convFreq(&LMIC.frame[dlen]);
 8003a36:	2317      	movs	r3, #23
 8003a38:	18fb      	adds	r3, r7, r3
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	3349      	adds	r3, #73	; 0x49
 8003a3e:	33ff      	adds	r3, #255	; 0xff
 8003a40:	001a      	movs	r2, r3
 8003a42:	4b41      	ldr	r3, [pc, #260]	; (8003b48 <processJoinAccept+0x2d0>)
 8003a44:	18d3      	adds	r3, r2, r3
 8003a46:	0018      	movs	r0, r3
 8003a48:	f7fe fefa 	bl	8002840 <convFreq>
 8003a4c:	0003      	movs	r3, r0
 8003a4e:	60bb      	str	r3, [r7, #8]
            if( freq )
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d009      	beq.n	8003a6a <processJoinAccept+0x1f2>
                LMIC_setupChannel(chidx, freq, 0, -1);
 8003a56:	2301      	movs	r3, #1
 8003a58:	425a      	negs	r2, r3
 8003a5a:	68b9      	ldr	r1, [r7, #8]
 8003a5c:	2316      	movs	r3, #22
 8003a5e:	18fb      	adds	r3, r7, r3
 8003a60:	7818      	ldrb	r0, [r3, #0]
 8003a62:	0013      	movs	r3, r2
 8003a64:	2200      	movs	r2, #0
 8003a66:	f7fe fe65 	bl	8002734 <LMIC_setupChannel>
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 8003a6a:	2116      	movs	r1, #22
 8003a6c:	187b      	adds	r3, r7, r1
 8003a6e:	781a      	ldrb	r2, [r3, #0]
 8003a70:	187b      	adds	r3, r7, r1
 8003a72:	3201      	adds	r2, #1
 8003a74:	701a      	strb	r2, [r3, #0]
 8003a76:	2217      	movs	r2, #23
 8003a78:	18bb      	adds	r3, r7, r2
 8003a7a:	18ba      	adds	r2, r7, r2
 8003a7c:	7812      	ldrb	r2, [r2, #0]
 8003a7e:	3203      	adds	r2, #3
 8003a80:	701a      	strb	r2, [r3, #0]
 8003a82:	2316      	movs	r3, #22
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b07      	cmp	r3, #7
 8003a8a:	d9d4      	bls.n	8003a36 <processJoinAccept+0x1be>
        }
    }

    // already incremented when JOIN REQ got sent off
    aes_sessKeys(LMIC.devNonce-1, &LMIC.frame[OFF_JA_ARTNONCE], LMIC.nwkKey, LMIC.artKey);
 8003a8c:	4b2e      	ldr	r3, [pc, #184]	; (8003b48 <processJoinAccept+0x2d0>)
 8003a8e:	22f2      	movs	r2, #242	; 0xf2
 8003a90:	5a9b      	ldrh	r3, [r3, r2]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b298      	uxth	r0, r3
 8003a96:	4b34      	ldr	r3, [pc, #208]	; (8003b68 <processJoinAccept+0x2f0>)
 8003a98:	4a34      	ldr	r2, [pc, #208]	; (8003b6c <processJoinAccept+0x2f4>)
 8003a9a:	492f      	ldr	r1, [pc, #188]	; (8003b58 <processJoinAccept+0x2e0>)
 8003a9c:	f7fe fa0e 	bl	8001ebc <aes_sessKeys>
                        e_.mic     = mic,
                        e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                      ? EV::joininfo_t::REJOIN_ACCEPT
                                      : EV::joininfo_t::ACCEPT)));
    
    ASSERT((LMIC.opmode & (OP_JOINING|OP_REJOIN))!=0);
 8003aa0:	4b29      	ldr	r3, [pc, #164]	; (8003b48 <processJoinAccept+0x2d0>)
 8003aa2:	22ac      	movs	r2, #172	; 0xac
 8003aa4:	5a9b      	ldrh	r3, [r3, r2]
 8003aa6:	001a      	movs	r2, r3
 8003aa8:	2324      	movs	r3, #36	; 0x24
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d101      	bne.n	8003ab2 <processJoinAccept+0x23a>
 8003aae:	f7fd fec7 	bl	8001840 <hal_failed>
    if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 8003ab2:	4b25      	ldr	r3, [pc, #148]	; (8003b48 <processJoinAccept+0x2d0>)
 8003ab4:	22ac      	movs	r2, #172	; 0xac
 8003ab6:	5a9b      	ldrh	r3, [r3, r2]
 8003ab8:	001a      	movs	r2, r3
 8003aba:	2320      	movs	r3, #32
 8003abc:	4013      	ands	r3, r2
 8003abe:	d00d      	beq.n	8003adc <processJoinAccept+0x264>
        // Lower DR every try below current UP DR
        LMIC.datarate = lowerDR(LMIC.datarate, LMIC.rejoinCnt);
 8003ac0:	4b21      	ldr	r3, [pc, #132]	; (8003b48 <processJoinAccept+0x2d0>)
 8003ac2:	22b0      	movs	r2, #176	; 0xb0
 8003ac4:	5c98      	ldrb	r0, [r3, r2]
 8003ac6:	4b20      	ldr	r3, [pc, #128]	; (8003b48 <processJoinAccept+0x2d0>)
 8003ac8:	22b2      	movs	r2, #178	; 0xb2
 8003aca:	5c9b      	ldrb	r3, [r3, r2]
 8003acc:	0019      	movs	r1, r3
 8003ace:	f7fd ffb5 	bl	8001a3c <lowerDR>
 8003ad2:	0003      	movs	r3, r0
 8003ad4:	0019      	movs	r1, r3
 8003ad6:	4b1c      	ldr	r3, [pc, #112]	; (8003b48 <processJoinAccept+0x2d0>)
 8003ad8:	22b0      	movs	r2, #176	; 0xb0
 8003ada:	5499      	strb	r1, [r3, r2]
    }
    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI) | OP_NEXTCHNL;
 8003adc:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <processJoinAccept+0x2d0>)
 8003ade:	22ac      	movs	r2, #172	; 0xac
 8003ae0:	5a9b      	ldrh	r3, [r3, r2]
 8003ae2:	4a23      	ldr	r2, [pc, #140]	; (8003b70 <processJoinAccept+0x2f8>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	b299      	uxth	r1, r3
 8003ae8:	4b17      	ldr	r3, [pc, #92]	; (8003b48 <processJoinAccept+0x2d0>)
 8003aea:	22ac      	movs	r2, #172	; 0xac
 8003aec:	5299      	strh	r1, [r3, r2]
    LMIC.txCnt = 0;
 8003aee:	4a16      	ldr	r2, [pc, #88]	; (8003b48 <processJoinAccept+0x2d0>)
 8003af0:	23a2      	movs	r3, #162	; 0xa2
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	2100      	movs	r1, #0
 8003af6:	54d1      	strb	r1, [r2, r3]
    stateJustJoined();
 8003af8:	f7ff f93a 	bl	8002d70 <stateJustJoined>
    LMIC.dn2Dr = LMIC.frame[OFF_JA_DLSET] & 0x0F;
 8003afc:	4a12      	ldr	r2, [pc, #72]	; (8003b48 <processJoinAccept+0x2d0>)
 8003afe:	2354      	movs	r3, #84	; 0x54
 8003b00:	33ff      	adds	r3, #255	; 0xff
 8003b02:	5cd3      	ldrb	r3, [r2, r3]
 8003b04:	220f      	movs	r2, #15
 8003b06:	4013      	ands	r3, r2
 8003b08:	b2d9      	uxtb	r1, r3
 8003b0a:	4a0f      	ldr	r2, [pc, #60]	; (8003b48 <processJoinAccept+0x2d0>)
 8003b0c:	232c      	movs	r3, #44	; 0x2c
 8003b0e:	33ff      	adds	r3, #255	; 0xff
 8003b10:	54d1      	strb	r1, [r2, r3]
    LMIC.rxDelay = LMIC.frame[OFF_JA_RXDLY];
 8003b12:	4a0d      	ldr	r2, [pc, #52]	; (8003b48 <processJoinAccept+0x2d0>)
 8003b14:	23aa      	movs	r3, #170	; 0xaa
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	5cd1      	ldrb	r1, [r2, r3]
 8003b1a:	4a0b      	ldr	r2, [pc, #44]	; (8003b48 <processJoinAccept+0x2d0>)
 8003b1c:	2324      	movs	r3, #36	; 0x24
 8003b1e:	33ff      	adds	r3, #255	; 0xff
 8003b20:	54d1      	strb	r1, [r2, r3]
    if (LMIC.rxDelay == 0) LMIC.rxDelay = 1;   
 8003b22:	4a09      	ldr	r2, [pc, #36]	; (8003b48 <processJoinAccept+0x2d0>)
 8003b24:	2324      	movs	r3, #36	; 0x24
 8003b26:	33ff      	adds	r3, #255	; 0xff
 8003b28:	5cd3      	ldrb	r3, [r2, r3]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d104      	bne.n	8003b38 <processJoinAccept+0x2c0>
 8003b2e:	4a06      	ldr	r2, [pc, #24]	; (8003b48 <processJoinAccept+0x2d0>)
 8003b30:	2324      	movs	r3, #36	; 0x24
 8003b32:	33ff      	adds	r3, #255	; 0xff
 8003b34:	2101      	movs	r1, #1
 8003b36:	54d1      	strb	r1, [r2, r3]
    reportEvent(EV_JOINED);
 8003b38:	2006      	movs	r0, #6
 8003b3a:	f7ff f8f9 	bl	8002d30 <reportEvent>
    return 1;
 8003b3e:	2301      	movs	r3, #1
}
 8003b40:	0018      	movs	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b007      	add	sp, #28
 8003b46:	bd90      	pop	{r4, r7, pc}
 8003b48:	200002c4 	.word	0x200002c4
 8003b4c:	08003861 	.word	0x08003861
 8003b50:	08002d1d 	.word	0x08002d1d
 8003b54:	200002d8 	.word	0x200002d8
 8003b58:	2000040d 	.word	0x2000040d
 8003b5c:	2000040c 	.word	0x2000040c
 8003b60:	20000413 	.word	0x20000413
 8003b64:	20000410 	.word	0x20000410
 8003b68:	200003c8 	.word	0x200003c8
 8003b6c:	200003b8 	.word	0x200003b8
 8003b70:	fffffd59 	.word	0xfffffd59

08003b74 <processRx2Jacc>:


static void processRx2Jacc (xref2osjob_t osjob) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 )
 8003b7c:	4a08      	ldr	r2, [pc, #32]	; (8003ba0 <processRx2Jacc+0x2c>)
 8003b7e:	2348      	movs	r3, #72	; 0x48
 8003b80:	33ff      	adds	r3, #255	; 0xff
 8003b82:	5cd3      	ldrb	r3, [r2, r3]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d104      	bne.n	8003b92 <processRx2Jacc+0x1e>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 8003b88:	4a05      	ldr	r2, [pc, #20]	; (8003ba0 <processRx2Jacc+0x2c>)
 8003b8a:	2346      	movs	r3, #70	; 0x46
 8003b8c:	33ff      	adds	r3, #255	; 0xff
 8003b8e:	2100      	movs	r1, #0
 8003b90:	54d1      	strb	r1, [r2, r3]
    processJoinAccept();
 8003b92:	f7ff fe71 	bl	8003878 <processJoinAccept>
}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	b002      	add	sp, #8
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	200002c4 	.word	0x200002c4

08003ba4 <setupRx2Jacc>:


static void setupRx2Jacc (xref2osjob_t osjob) {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2Jacc);
 8003bac:	4b04      	ldr	r3, [pc, #16]	; (8003bc0 <setupRx2Jacc+0x1c>)
 8003bae:	4a05      	ldr	r2, [pc, #20]	; (8003bc4 <setupRx2Jacc+0x20>)
 8003bb0:	61da      	str	r2, [r3, #28]
    setupRx2();
 8003bb2:	f7ff fd89 	bl	80036c8 <setupRx2>
}
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	b002      	add	sp, #8
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	200002c4 	.word	0x200002c4
 8003bc4:	08003b75 	.word	0x08003b75

08003bc8 <processRx1Jacc>:


static void processRx1Jacc (xref2osjob_t osjob) {
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processJoinAccept() )
 8003bd0:	4a09      	ldr	r2, [pc, #36]	; (8003bf8 <processRx1Jacc+0x30>)
 8003bd2:	2348      	movs	r3, #72	; 0x48
 8003bd4:	33ff      	adds	r3, #255	; 0xff
 8003bd6:	5cd3      	ldrb	r3, [r2, r3]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <processRx1Jacc+0x1c>
 8003bdc:	f7ff fe4c 	bl	8003878 <processJoinAccept>
 8003be0:	1e03      	subs	r3, r0, #0
 8003be2:	d105      	bne.n	8003bf0 <processRx1Jacc+0x28>
        schedRx2(DELAY_JACC2_osticks, FUNC_ADDR(setupRx2Jacc));
 8003be4:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <processRx1Jacc+0x34>)
 8003be6:	4a06      	ldr	r2, [pc, #24]	; (8003c00 <processRx1Jacc+0x38>)
 8003be8:	0019      	movs	r1, r3
 8003bea:	0010      	movs	r0, r2
 8003bec:	f7ff fd92 	bl	8003714 <schedRx2>
}
 8003bf0:	46c0      	nop			; (mov r8, r8)
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b002      	add	sp, #8
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	200002c4 	.word	0x200002c4
 8003bfc:	08003ba5 	.word	0x08003ba5
 8003c00:	0002ee00 	.word	0x0002ee00

08003c04 <setupRx1Jacc>:


static void setupRx1Jacc (xref2osjob_t osjob) {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1Jacc));
 8003c0c:	4b03      	ldr	r3, [pc, #12]	; (8003c1c <setupRx1Jacc+0x18>)
 8003c0e:	0018      	movs	r0, r3
 8003c10:	f7ff fdaa 	bl	8003768 <setupRx1>
}
 8003c14:	46c0      	nop			; (mov r8, r8)
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b002      	add	sp, #8
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	08003bc9 	.word	0x08003bc9

08003c20 <jreqDone>:


static void jreqDone (xref2osjob_t osjob) {
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
    txDone(DELAY_JACC1_osticks, FUNC_ADDR(setupRx1Jacc));
 8003c28:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <jreqDone+0x1c>)
 8003c2a:	4a05      	ldr	r2, [pc, #20]	; (8003c40 <jreqDone+0x20>)
 8003c2c:	0019      	movs	r1, r3
 8003c2e:	0010      	movs	r0, r2
 8003c30:	f7ff fdbe 	bl	80037b0 <txDone>
}
 8003c34:	46c0      	nop			; (mov r8, r8)
 8003c36:	46bd      	mov	sp, r7
 8003c38:	b002      	add	sp, #8
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	08003c05 	.word	0x08003c05
 8003c40:	00027100 	.word	0x00027100

08003c44 <processRx2DnDataDelay>:
// ======================================== Data frames

// Fwd decl.
static bit_t processDnData(void);

static void processRx2DnDataDelay (xref2osjob_t osjob) {
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
    processDnData();
 8003c4c:	f000 fc3a 	bl	80044c4 <processDnData>
}
 8003c50:	46c0      	nop			; (mov r8, r8)
 8003c52:	46bd      	mov	sp, r7
 8003c54:	b002      	add	sp, #8
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <processRx2DnData>:

static void processRx2DnData (xref2osjob_t osjob) {
 8003c58:	b590      	push	{r4, r7, lr}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 ) {
 8003c60:	4a0f      	ldr	r2, [pc, #60]	; (8003ca0 <processRx2DnData+0x48>)
 8003c62:	2348      	movs	r3, #72	; 0x48
 8003c64:	33ff      	adds	r3, #255	; 0xff
 8003c66:	5cd3      	ldrb	r3, [r2, r3]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d114      	bne.n	8003c96 <processRx2DnData+0x3e>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 8003c6c:	4a0c      	ldr	r2, [pc, #48]	; (8003ca0 <processRx2DnData+0x48>)
 8003c6e:	2346      	movs	r3, #70	; 0x46
 8003c70:	33ff      	adds	r3, #255	; 0xff
 8003c72:	2100      	movs	r1, #0
 8003c74:	54d1      	strb	r1, [r2, r3]
        // Delay callback processing to avoid up TX while gateway is txing our missed frame! 
        // Since DNW2 uses SF12 by default we wait 3 secs.
        os_setTimedCallback(&LMIC.osjob,
                            (os_getTime() + DNW2_SAFETY_ZONE + rndDelay(2)),
 8003c76:	f001 fd27 	bl	80056c8 <os_getTime>
 8003c7a:	0003      	movs	r3, r0
 8003c7c:	4a09      	ldr	r2, [pc, #36]	; (8003ca4 <processRx2DnData+0x4c>)
 8003c7e:	189c      	adds	r4, r3, r2
 8003c80:	2002      	movs	r0, #2
 8003c82:	f7fe fbf7 	bl	8002474 <rndDelay>
 8003c86:	0003      	movs	r3, r0
        os_setTimedCallback(&LMIC.osjob,
 8003c88:	18e1      	adds	r1, r4, r3
 8003c8a:	4a07      	ldr	r2, [pc, #28]	; (8003ca8 <processRx2DnData+0x50>)
 8003c8c:	4b07      	ldr	r3, [pc, #28]	; (8003cac <processRx2DnData+0x54>)
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f001 fd88 	bl	80057a4 <os_setTimedCallback>
                            FUNC_ADDR(processRx2DnDataDelay));
        return;
 8003c94:	e001      	b.n	8003c9a <processRx2DnData+0x42>
    }
    processDnData();
 8003c96:	f000 fc15 	bl	80044c4 <processDnData>
}
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b003      	add	sp, #12
 8003c9e:	bd90      	pop	{r4, r7, pc}
 8003ca0:	200002c4 	.word	0x200002c4
 8003ca4:	00017700 	.word	0x00017700
 8003ca8:	08003c45 	.word	0x08003c45
 8003cac:	200002d8 	.word	0x200002d8

08003cb0 <setupRx2DnData>:


static void setupRx2DnData (xref2osjob_t osjob) {
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2DnData);
 8003cb8:	4b04      	ldr	r3, [pc, #16]	; (8003ccc <setupRx2DnData+0x1c>)
 8003cba:	4a05      	ldr	r2, [pc, #20]	; (8003cd0 <setupRx2DnData+0x20>)
 8003cbc:	61da      	str	r2, [r3, #28]
    setupRx2();
 8003cbe:	f7ff fd03 	bl	80036c8 <setupRx2>
}
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	b002      	add	sp, #8
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	46c0      	nop			; (mov r8, r8)
 8003ccc:	200002c4 	.word	0x200002c4
 8003cd0:	08003c59 	.word	0x08003c59

08003cd4 <processRx1DnData>:


static void processRx1DnData (xref2osjob_t osjob) {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processDnData() )
 8003cdc:	4a0f      	ldr	r2, [pc, #60]	; (8003d1c <processRx1DnData+0x48>)
 8003cde:	2348      	movs	r3, #72	; 0x48
 8003ce0:	33ff      	adds	r3, #255	; 0xff
 8003ce2:	5cd3      	ldrb	r3, [r2, r3]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <processRx1DnData+0x1c>
 8003ce8:	f000 fbec 	bl	80044c4 <processDnData>
 8003cec:	1e03      	subs	r3, r0, #0
 8003cee:	d111      	bne.n	8003d14 <processRx1DnData+0x40>
        schedRx2(sec2osticks(LMIC.rxDelay + (int)DELAY_EXTDNW2), FUNC_ADDR(setupRx2DnData));
 8003cf0:	4a0a      	ldr	r2, [pc, #40]	; (8003d1c <processRx1DnData+0x48>)
 8003cf2:	2324      	movs	r3, #36	; 0x24
 8003cf4:	33ff      	adds	r3, #255	; 0xff
 8003cf6:	5cd3      	ldrb	r3, [r2, r3]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	001a      	movs	r2, r3
 8003cfc:	0013      	movs	r3, r2
 8003cfe:	015b      	lsls	r3, r3, #5
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	189b      	adds	r3, r3, r2
 8003d06:	021b      	lsls	r3, r3, #8
 8003d08:	001a      	movs	r2, r3
 8003d0a:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <processRx1DnData+0x4c>)
 8003d0c:	0019      	movs	r1, r3
 8003d0e:	0010      	movs	r0, r2
 8003d10:	f7ff fd00 	bl	8003714 <schedRx2>
}
 8003d14:	46c0      	nop			; (mov r8, r8)
 8003d16:	46bd      	mov	sp, r7
 8003d18:	b002      	add	sp, #8
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	200002c4 	.word	0x200002c4
 8003d20:	08003cb1 	.word	0x08003cb1

08003d24 <setupRx1DnData>:


static void setupRx1DnData (xref2osjob_t osjob) {
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1DnData));
 8003d2c:	4b03      	ldr	r3, [pc, #12]	; (8003d3c <setupRx1DnData+0x18>)
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f7ff fd1a 	bl	8003768 <setupRx1>
}
 8003d34:	46c0      	nop			; (mov r8, r8)
 8003d36:	46bd      	mov	sp, r7
 8003d38:	b002      	add	sp, #8
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	08003cd5 	.word	0x08003cd5

08003d40 <updataDone>:


static void updataDone (xref2osjob_t osjob) {
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
    txDone(sec2osticks(LMIC.rxDelay), FUNC_ADDR(setupRx1DnData));
 8003d48:	4a0a      	ldr	r2, [pc, #40]	; (8003d74 <updataDone+0x34>)
 8003d4a:	2324      	movs	r3, #36	; 0x24
 8003d4c:	33ff      	adds	r3, #255	; 0xff
 8003d4e:	5cd3      	ldrb	r3, [r2, r3]
 8003d50:	001a      	movs	r2, r3
 8003d52:	0013      	movs	r3, r2
 8003d54:	015b      	lsls	r3, r3, #5
 8003d56:	1a9b      	subs	r3, r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	189b      	adds	r3, r3, r2
 8003d5c:	021b      	lsls	r3, r3, #8
 8003d5e:	001a      	movs	r2, r3
 8003d60:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <updataDone+0x38>)
 8003d62:	0019      	movs	r1, r3
 8003d64:	0010      	movs	r0, r2
 8003d66:	f7ff fd23 	bl	80037b0 <txDone>
}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b002      	add	sp, #8
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	200002c4 	.word	0x200002c4
 8003d78:	08003d25 	.word	0x08003d25

08003d7c <buildDataFrame>:

// ======================================== 


static void buildDataFrame (void) {
 8003d7c:	b590      	push	{r4, r7, lr}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af02      	add	r7, sp, #8
    bit_t txdata = ((LMIC.opmode & (OP_TXDATA|OP_POLL)) != OP_POLL);
 8003d82:	4bc2      	ldr	r3, [pc, #776]	; (800408c <buildDataFrame+0x310>)
 8003d84:	22ac      	movs	r2, #172	; 0xac
 8003d86:	5a9b      	ldrh	r3, [r3, r2]
 8003d88:	001a      	movs	r2, r3
 8003d8a:	2318      	movs	r3, #24
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	3b10      	subs	r3, #16
 8003d90:	1e5a      	subs	r2, r3, #1
 8003d92:	4193      	sbcs	r3, r2
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	210f      	movs	r1, #15
 8003d98:	187b      	adds	r3, r7, r1
 8003d9a:	701a      	strb	r2, [r3, #0]
    u1_t dlen = txdata ? LMIC.pendTxLen : 0;
 8003d9c:	187b      	adds	r3, r7, r1
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <buildDataFrame+0x30>
 8003da4:	4bb9      	ldr	r3, [pc, #740]	; (800408c <buildDataFrame+0x310>)
 8003da6:	22bc      	movs	r2, #188	; 0xbc
 8003da8:	5c9a      	ldrb	r2, [r3, r2]
 8003daa:	e000      	b.n	8003dae <buildDataFrame+0x32>
 8003dac:	2200      	movs	r2, #0
 8003dae:	1dbb      	adds	r3, r7, #6
 8003db0:	701a      	strb	r2, [r3, #0]

    // Piggyback MAC options
    // Prioritize by importance
    int  end = OFF_DAT_OPTS;
 8003db2:	2308      	movs	r3, #8
 8003db4:	60bb      	str	r3, [r7, #8]
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE)) == (OP_TRACK|OP_PINGABLE) ) {
 8003db6:	4bb5      	ldr	r3, [pc, #724]	; (800408c <buildDataFrame+0x310>)
 8003db8:	22ac      	movs	r2, #172	; 0xac
 8003dba:	5a9b      	ldrh	r3, [r3, r2]
 8003dbc:	001a      	movs	r2, r3
 8003dbe:	4bb4      	ldr	r3, [pc, #720]	; (8004090 <buildDataFrame+0x314>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	4ab3      	ldr	r2, [pc, #716]	; (8004090 <buildDataFrame+0x314>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d121      	bne.n	8003e0c <buildDataFrame+0x90>
        // Indicate pingability in every UP frame
        LMIC.frame[end] = MCMD_PING_IND;
 8003dc8:	49b0      	ldr	r1, [pc, #704]	; (800408c <buildDataFrame+0x310>)
 8003dca:	23a4      	movs	r3, #164	; 0xa4
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	188a      	adds	r2, r1, r2
 8003dd2:	18d3      	adds	r3, r2, r3
 8003dd4:	2210      	movs	r2, #16
 8003dd6:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ping.dr | (LMIC.ping.intvExp<<4);
 8003dd8:	4aac      	ldr	r2, [pc, #688]	; (800408c <buildDataFrame+0x310>)
 8003dda:	239a      	movs	r3, #154	; 0x9a
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	5cd3      	ldrb	r3, [r2, r3]
 8003de0:	b25a      	sxtb	r2, r3
 8003de2:	49aa      	ldr	r1, [pc, #680]	; (800408c <buildDataFrame+0x310>)
 8003de4:	2336      	movs	r3, #54	; 0x36
 8003de6:	33ff      	adds	r3, #255	; 0xff
 8003de8:	5ccb      	ldrb	r3, [r1, r3]
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	b25b      	sxtb	r3, r3
 8003dee:	4313      	orrs	r3, r2
 8003df0:	b259      	sxtb	r1, r3
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	b2c8      	uxtb	r0, r1
 8003df8:	49a4      	ldr	r1, [pc, #656]	; (800408c <buildDataFrame+0x310>)
 8003dfa:	23a4      	movs	r3, #164	; 0xa4
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	188a      	adds	r2, r1, r2
 8003e00:	18d3      	adds	r3, r2, r3
 8003e02:	1c02      	adds	r2, r0, #0
 8003e04:	701a      	strb	r2, [r3, #0]
        end += 2;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	3302      	adds	r3, #2
 8003e0a:	60bb      	str	r3, [r7, #8]
    }
    if( LMIC.dutyCapAns ) {
 8003e0c:	4a9f      	ldr	r2, [pc, #636]	; (800408c <buildDataFrame+0x310>)
 8003e0e:	232a      	movs	r3, #42	; 0x2a
 8003e10:	33ff      	adds	r3, #255	; 0xff
 8003e12:	5cd3      	ldrb	r3, [r2, r3]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00f      	beq.n	8003e38 <buildDataFrame+0xbc>
        LMIC.frame[end] = MCMD_DCAP_ANS;
 8003e18:	499c      	ldr	r1, [pc, #624]	; (800408c <buildDataFrame+0x310>)
 8003e1a:	23a4      	movs	r3, #164	; 0xa4
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	188a      	adds	r2, r1, r2
 8003e22:	18d3      	adds	r3, r2, r3
 8003e24:	2204      	movs	r2, #4
 8003e26:	701a      	strb	r2, [r3, #0]
        end += 1;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	60bb      	str	r3, [r7, #8]
        LMIC.dutyCapAns = 0;
 8003e2e:	4a97      	ldr	r2, [pc, #604]	; (800408c <buildDataFrame+0x310>)
 8003e30:	232a      	movs	r3, #42	; 0x2a
 8003e32:	33ff      	adds	r3, #255	; 0xff
 8003e34:	2100      	movs	r1, #0
 8003e36:	54d1      	strb	r1, [r2, r3]
    }
    if( LMIC.dn2Ans ) {
 8003e38:	4a94      	ldr	r2, [pc, #592]	; (800408c <buildDataFrame+0x310>)
 8003e3a:	2398      	movs	r3, #152	; 0x98
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	5cd3      	ldrb	r3, [r2, r3]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d01f      	beq.n	8003e84 <buildDataFrame+0x108>
        LMIC.frame[end+0] = MCMD_DN2P_ANS;
 8003e44:	4991      	ldr	r1, [pc, #580]	; (800408c <buildDataFrame+0x310>)
 8003e46:	23a4      	movs	r3, #164	; 0xa4
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	188a      	adds	r2, r1, r2
 8003e4e:	18d3      	adds	r3, r2, r3
 8003e50:	2205      	movs	r2, #5
 8003e52:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.dn2Ans & ~MCMD_DN2P_ANS_RFU;
 8003e54:	4a8d      	ldr	r2, [pc, #564]	; (800408c <buildDataFrame+0x310>)
 8003e56:	2398      	movs	r3, #152	; 0x98
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	5cd3      	ldrb	r3, [r2, r3]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	3201      	adds	r2, #1
 8003e60:	2103      	movs	r1, #3
 8003e62:	400b      	ands	r3, r1
 8003e64:	b2d8      	uxtb	r0, r3
 8003e66:	4989      	ldr	r1, [pc, #548]	; (800408c <buildDataFrame+0x310>)
 8003e68:	23a4      	movs	r3, #164	; 0xa4
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	188a      	adds	r2, r1, r2
 8003e6e:	18d3      	adds	r3, r2, r3
 8003e70:	1c02      	adds	r2, r0, #0
 8003e72:	701a      	strb	r2, [r3, #0]
        end += 2;
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	3302      	adds	r3, #2
 8003e78:	60bb      	str	r3, [r7, #8]
        LMIC.dn2Ans = 0;
 8003e7a:	4a84      	ldr	r2, [pc, #528]	; (800408c <buildDataFrame+0x310>)
 8003e7c:	2398      	movs	r3, #152	; 0x98
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	2100      	movs	r1, #0
 8003e82:	54d1      	strb	r1, [r2, r3]
    }
    if( LMIC.devsAns ) {  // answer to device status
 8003e84:	4a81      	ldr	r2, [pc, #516]	; (800408c <buildDataFrame+0x310>)
 8003e86:	2393      	movs	r3, #147	; 0x93
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	5cd3      	ldrb	r3, [r2, r3]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d029      	beq.n	8003ee4 <buildDataFrame+0x168>
        LMIC.frame[end+0] = MCMD_DEVS_ANS;
 8003e90:	497e      	ldr	r1, [pc, #504]	; (800408c <buildDataFrame+0x310>)
 8003e92:	23a4      	movs	r3, #164	; 0xa4
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	188a      	adds	r2, r1, r2
 8003e9a:	18d3      	adds	r3, r2, r3
 8003e9c:	2206      	movs	r2, #6
 8003e9e:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = os_getBattLevel();
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	1c5c      	adds	r4, r3, #1
 8003ea4:	f7fd fe88 	bl	8001bb8 <os_getBattLevel>
 8003ea8:	0003      	movs	r3, r0
 8003eaa:	0019      	movs	r1, r3
 8003eac:	4a77      	ldr	r2, [pc, #476]	; (800408c <buildDataFrame+0x310>)
 8003eae:	23a4      	movs	r3, #164	; 0xa4
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	1912      	adds	r2, r2, r4
 8003eb4:	18d3      	adds	r3, r2, r3
 8003eb6:	1c0a      	adds	r2, r1, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+2] = LMIC.margin;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	1c9a      	adds	r2, r3, #2
 8003ebe:	4973      	ldr	r1, [pc, #460]	; (800408c <buildDataFrame+0x310>)
 8003ec0:	2392      	movs	r3, #146	; 0x92
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	5cc8      	ldrb	r0, [r1, r3]
 8003ec6:	4971      	ldr	r1, [pc, #452]	; (800408c <buildDataFrame+0x310>)
 8003ec8:	23a4      	movs	r3, #164	; 0xa4
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	188a      	adds	r2, r1, r2
 8003ece:	18d3      	adds	r3, r2, r3
 8003ed0:	1c02      	adds	r2, r0, #0
 8003ed2:	701a      	strb	r2, [r3, #0]
        end += 3;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	3303      	adds	r3, #3
 8003ed8:	60bb      	str	r3, [r7, #8]
        LMIC.devsAns = 0;
 8003eda:	4a6c      	ldr	r2, [pc, #432]	; (800408c <buildDataFrame+0x310>)
 8003edc:	2393      	movs	r3, #147	; 0x93
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	54d1      	strb	r1, [r2, r3]
    }
    if( LMIC.ladrAns ) {  // answer to ADR change
 8003ee4:	4a69      	ldr	r2, [pc, #420]	; (800408c <buildDataFrame+0x310>)
 8003ee6:	2326      	movs	r3, #38	; 0x26
 8003ee8:	33ff      	adds	r3, #255	; 0xff
 8003eea:	5cd3      	ldrb	r3, [r2, r3]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d01f      	beq.n	8003f30 <buildDataFrame+0x1b4>
        LMIC.frame[end+0] = MCMD_LADR_ANS;
 8003ef0:	4966      	ldr	r1, [pc, #408]	; (800408c <buildDataFrame+0x310>)
 8003ef2:	23a4      	movs	r3, #164	; 0xa4
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	188a      	adds	r2, r1, r2
 8003efa:	18d3      	adds	r3, r2, r3
 8003efc:	2203      	movs	r2, #3
 8003efe:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ladrAns & ~MCMD_LADR_ANS_RFU;
 8003f00:	4a62      	ldr	r2, [pc, #392]	; (800408c <buildDataFrame+0x310>)
 8003f02:	2326      	movs	r3, #38	; 0x26
 8003f04:	33ff      	adds	r3, #255	; 0xff
 8003f06:	5cd3      	ldrb	r3, [r2, r3]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	3201      	adds	r2, #1
 8003f0c:	2107      	movs	r1, #7
 8003f0e:	400b      	ands	r3, r1
 8003f10:	b2d8      	uxtb	r0, r3
 8003f12:	495e      	ldr	r1, [pc, #376]	; (800408c <buildDataFrame+0x310>)
 8003f14:	23a4      	movs	r3, #164	; 0xa4
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	188a      	adds	r2, r1, r2
 8003f1a:	18d3      	adds	r3, r2, r3
 8003f1c:	1c02      	adds	r2, r0, #0
 8003f1e:	701a      	strb	r2, [r3, #0]
        end += 2;
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	3302      	adds	r3, #2
 8003f24:	60bb      	str	r3, [r7, #8]
        LMIC.ladrAns = 0;
 8003f26:	4a59      	ldr	r2, [pc, #356]	; (800408c <buildDataFrame+0x310>)
 8003f28:	2326      	movs	r3, #38	; 0x26
 8003f2a:	33ff      	adds	r3, #255	; 0xff
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	54d1      	strb	r1, [r2, r3]
    }
    if( LMIC.bcninfoTries > 0 ) {
 8003f30:	4a56      	ldr	r2, [pc, #344]	; (800408c <buildDataFrame+0x310>)
 8003f32:	2399      	movs	r3, #153	; 0x99
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	5cd3      	ldrb	r3, [r2, r3]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <buildDataFrame+0x1d6>
        LMIC.frame[end] = MCMD_BCNI_REQ;
 8003f3c:	4953      	ldr	r1, [pc, #332]	; (800408c <buildDataFrame+0x310>)
 8003f3e:	23a4      	movs	r3, #164	; 0xa4
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	188a      	adds	r2, r1, r2
 8003f46:	18d3      	adds	r3, r2, r3
 8003f48:	2212      	movs	r2, #18
 8003f4a:	701a      	strb	r2, [r3, #0]
        end += 1;
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	60bb      	str	r3, [r7, #8]
    }
    if( LMIC.adrChanged ) {
 8003f52:	4a4e      	ldr	r2, [pc, #312]	; (800408c <buildDataFrame+0x310>)
 8003f54:	2391      	movs	r3, #145	; 0x91
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	5cd3      	ldrb	r3, [r2, r3]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00f      	beq.n	8003f7e <buildDataFrame+0x202>
        if( LMIC.adrAckReq < 0 )
 8003f5e:	4a4b      	ldr	r2, [pc, #300]	; (800408c <buildDataFrame+0x310>)
 8003f60:	2322      	movs	r3, #34	; 0x22
 8003f62:	33ff      	adds	r3, #255	; 0xff
 8003f64:	56d3      	ldrsb	r3, [r2, r3]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	da04      	bge.n	8003f74 <buildDataFrame+0x1f8>
            LMIC.adrAckReq = 0;
 8003f6a:	4a48      	ldr	r2, [pc, #288]	; (800408c <buildDataFrame+0x310>)
 8003f6c:	2322      	movs	r3, #34	; 0x22
 8003f6e:	33ff      	adds	r3, #255	; 0xff
 8003f70:	2100      	movs	r1, #0
 8003f72:	54d1      	strb	r1, [r2, r3]
        LMIC.adrChanged = 0;
 8003f74:	4a45      	ldr	r2, [pc, #276]	; (800408c <buildDataFrame+0x310>)
 8003f76:	2391      	movs	r3, #145	; 0x91
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	54d1      	strb	r1, [r2, r3]
    }
    if( LMIC.pingSetAns != 0 ) {
 8003f7e:	4a43      	ldr	r2, [pc, #268]	; (800408c <buildDataFrame+0x310>)
 8003f80:	2334      	movs	r3, #52	; 0x34
 8003f82:	33ff      	adds	r3, #255	; 0xff
 8003f84:	5cd3      	ldrb	r3, [r2, r3]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d01f      	beq.n	8003fca <buildDataFrame+0x24e>
        LMIC.frame[end+0] = MCMD_PING_ANS;
 8003f8a:	4940      	ldr	r1, [pc, #256]	; (800408c <buildDataFrame+0x310>)
 8003f8c:	23a4      	movs	r3, #164	; 0xa4
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	188a      	adds	r2, r1, r2
 8003f94:	18d3      	adds	r3, r2, r3
 8003f96:	2211      	movs	r2, #17
 8003f98:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.pingSetAns & ~MCMD_PING_ANS_RFU;
 8003f9a:	4a3c      	ldr	r2, [pc, #240]	; (800408c <buildDataFrame+0x310>)
 8003f9c:	2334      	movs	r3, #52	; 0x34
 8003f9e:	33ff      	adds	r3, #255	; 0xff
 8003fa0:	5cd3      	ldrb	r3, [r2, r3]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	3201      	adds	r2, #1
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	400b      	ands	r3, r1
 8003faa:	b2d8      	uxtb	r0, r3
 8003fac:	4937      	ldr	r1, [pc, #220]	; (800408c <buildDataFrame+0x310>)
 8003fae:	23a4      	movs	r3, #164	; 0xa4
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	188a      	adds	r2, r1, r2
 8003fb4:	18d3      	adds	r3, r2, r3
 8003fb6:	1c02      	adds	r2, r0, #0
 8003fb8:	701a      	strb	r2, [r3, #0]
        end += 2;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	60bb      	str	r3, [r7, #8]
        LMIC.pingSetAns = 0;
 8003fc0:	4a32      	ldr	r2, [pc, #200]	; (800408c <buildDataFrame+0x310>)
 8003fc2:	2334      	movs	r3, #52	; 0x34
 8003fc4:	33ff      	adds	r3, #255	; 0xff
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	54d1      	strb	r1, [r2, r3]
    }
    if( LMIC.snchAns ) {
 8003fca:	4a30      	ldr	r2, [pc, #192]	; (800408c <buildDataFrame+0x310>)
 8003fcc:	2395      	movs	r3, #149	; 0x95
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	5cd3      	ldrb	r3, [r2, r3]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d01f      	beq.n	8004016 <buildDataFrame+0x29a>
        LMIC.frame[end+0] = MCMD_SNCH_ANS;
 8003fd6:	492d      	ldr	r1, [pc, #180]	; (800408c <buildDataFrame+0x310>)
 8003fd8:	23a4      	movs	r3, #164	; 0xa4
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	188a      	adds	r2, r1, r2
 8003fe0:	18d3      	adds	r3, r2, r3
 8003fe2:	2207      	movs	r2, #7
 8003fe4:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.snchAns & ~MCMD_SNCH_ANS_RFU;
 8003fe6:	4a29      	ldr	r2, [pc, #164]	; (800408c <buildDataFrame+0x310>)
 8003fe8:	2395      	movs	r3, #149	; 0x95
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	5cd3      	ldrb	r3, [r2, r3]
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	3201      	adds	r2, #1
 8003ff2:	2103      	movs	r1, #3
 8003ff4:	400b      	ands	r3, r1
 8003ff6:	b2d8      	uxtb	r0, r3
 8003ff8:	4924      	ldr	r1, [pc, #144]	; (800408c <buildDataFrame+0x310>)
 8003ffa:	23a4      	movs	r3, #164	; 0xa4
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	188a      	adds	r2, r1, r2
 8004000:	18d3      	adds	r3, r2, r3
 8004002:	1c02      	adds	r2, r0, #0
 8004004:	701a      	strb	r2, [r3, #0]
        end += 2;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	3302      	adds	r3, #2
 800400a:	60bb      	str	r3, [r7, #8]
        LMIC.snchAns = 0;
 800400c:	4a1f      	ldr	r2, [pc, #124]	; (800408c <buildDataFrame+0x310>)
 800400e:	2395      	movs	r3, #149	; 0x95
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	2100      	movs	r1, #0
 8004014:	54d1      	strb	r1, [r2, r3]
    }
    ASSERT(end <= OFF_DAT_OPTS+16);
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2b18      	cmp	r3, #24
 800401a:	dd01      	ble.n	8004020 <buildDataFrame+0x2a4>
 800401c:	f7fd fc10 	bl	8001840 <hal_failed>

    u1_t flen = end + (txdata ? 5+dlen : 4);
 8004020:	230f      	movs	r3, #15
 8004022:	18fb      	adds	r3, r7, r3
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d004      	beq.n	8004034 <buildDataFrame+0x2b8>
 800402a:	1dbb      	adds	r3, r7, #6
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	3305      	adds	r3, #5
 8004030:	b2db      	uxtb	r3, r3
 8004032:	e000      	b.n	8004036 <buildDataFrame+0x2ba>
 8004034:	2304      	movs	r3, #4
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	b2d1      	uxtb	r1, r2
 800403a:	1dfa      	adds	r2, r7, #7
 800403c:	185b      	adds	r3, r3, r1
 800403e:	7013      	strb	r3, [r2, #0]
    if( flen > MAX_LEN_FRAME ) {
 8004040:	1dfb      	adds	r3, r7, #7
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b40      	cmp	r3, #64	; 0x40
 8004046:	d908      	bls.n	800405a <buildDataFrame+0x2de>
        // Options and payload too big - delay payload
        txdata = 0;
 8004048:	230f      	movs	r3, #15
 800404a:	18fb      	adds	r3, r7, r3
 800404c:	2200      	movs	r2, #0
 800404e:	701a      	strb	r2, [r3, #0]
        flen = end+4;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	b2da      	uxtb	r2, r3
 8004054:	1dfb      	adds	r3, r7, #7
 8004056:	3204      	adds	r2, #4
 8004058:	701a      	strb	r2, [r3, #0]
    }
    LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DAUP | HDR_MAJOR_V1;
 800405a:	4a0c      	ldr	r2, [pc, #48]	; (800408c <buildDataFrame+0x310>)
 800405c:	23a4      	movs	r3, #164	; 0xa4
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	2140      	movs	r1, #64	; 0x40
 8004062:	54d1      	strb	r1, [r2, r3]
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 8004064:	4a09      	ldr	r2, [pc, #36]	; (800408c <buildDataFrame+0x310>)
 8004066:	2390      	movs	r3, #144	; 0x90
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	5cd2      	ldrb	r2, [r2, r3]
 800406c:	4907      	ldr	r1, [pc, #28]	; (800408c <buildDataFrame+0x310>)
 800406e:	2328      	movs	r3, #40	; 0x28
 8004070:	33ff      	adds	r3, #255	; 0xff
 8004072:	5ccb      	ldrb	r3, [r1, r3]
                              | (LMIC.adrAckReq >= 0 ? FCT_ADRARQ : 0)
 8004074:	4313      	orrs	r3, r2
 8004076:	b2db      	uxtb	r3, r3
 8004078:	b25a      	sxtb	r2, r3
 800407a:	4904      	ldr	r1, [pc, #16]	; (800408c <buildDataFrame+0x310>)
 800407c:	2322      	movs	r3, #34	; 0x22
 800407e:	33ff      	adds	r3, #255	; 0xff
 8004080:	56cb      	ldrsb	r3, [r1, r3]
 8004082:	2b00      	cmp	r3, #0
 8004084:	db06      	blt.n	8004094 <buildDataFrame+0x318>
 8004086:	2340      	movs	r3, #64	; 0x40
 8004088:	e005      	b.n	8004096 <buildDataFrame+0x31a>
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	200002c4 	.word	0x200002c4
 8004090:	00000402 	.word	0x00000402
 8004094:	2300      	movs	r3, #0
 8004096:	4313      	orrs	r3, r2
 8004098:	b25a      	sxtb	r2, r3
                              | (end-OFF_DAT_OPTS));
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	3b08      	subs	r3, #8
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	b25b      	sxtb	r3, r3
 80040a4:	4313      	orrs	r3, r2
 80040a6:	b25b      	sxtb	r3, r3
 80040a8:	b2d9      	uxtb	r1, r3
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 80040aa:	4a4a      	ldr	r2, [pc, #296]	; (80041d4 <buildDataFrame+0x458>)
 80040ac:	234e      	movs	r3, #78	; 0x4e
 80040ae:	33ff      	adds	r3, #255	; 0xff
 80040b0:	54d1      	strb	r1, [r2, r3]
    os_wlsbf4(LMIC.frame+OFF_DAT_ADDR,  LMIC.devaddr);
 80040b2:	4849      	ldr	r0, [pc, #292]	; (80041d8 <buildDataFrame+0x45c>)
 80040b4:	4a47      	ldr	r2, [pc, #284]	; (80041d4 <buildDataFrame+0x458>)
 80040b6:	238a      	movs	r3, #138	; 0x8a
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	58d3      	ldr	r3, [r2, r3]
 80040bc:	0019      	movs	r1, r3
 80040be:	f7fd fd3d 	bl	8001b3c <os_wlsbf4>

    if( LMIC.txCnt == 0 ) {
 80040c2:	4a44      	ldr	r2, [pc, #272]	; (80041d4 <buildDataFrame+0x458>)
 80040c4:	23a2      	movs	r3, #162	; 0xa2
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	5cd3      	ldrb	r3, [r2, r3]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d108      	bne.n	80040e0 <buildDataFrame+0x364>
        LMIC.seqnoUp += 1;
 80040ce:	4a41      	ldr	r2, [pc, #260]	; (80041d4 <buildDataFrame+0x458>)
 80040d0:	238e      	movs	r3, #142	; 0x8e
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	58d3      	ldr	r3, [r2, r3]
 80040d6:	1c59      	adds	r1, r3, #1
 80040d8:	4a3e      	ldr	r2, [pc, #248]	; (80041d4 <buildDataFrame+0x458>)
 80040da:	238e      	movs	r3, #142	; 0x8e
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	50d1      	str	r1, [r2, r3]
                           e_.info   = LMIC.seqnoUp-1,
                           e_.info2  = ((LMIC.txCnt+1) |
                                        (DRADJUST[LMIC.txCnt+1] << 8) |
                                        ((LMIC.datarate|DR_PAGE)<<16))));
    }
    os_wlsbf2(LMIC.frame+OFF_DAT_SEQNO, LMIC.seqnoUp-1);
 80040e0:	483e      	ldr	r0, [pc, #248]	; (80041dc <buildDataFrame+0x460>)
 80040e2:	4a3c      	ldr	r2, [pc, #240]	; (80041d4 <buildDataFrame+0x458>)
 80040e4:	238e      	movs	r3, #142	; 0x8e
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	58d3      	ldr	r3, [r2, r3]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	0019      	movs	r1, r3
 80040f2:	f7fd fd0b 	bl	8001b0c <os_wlsbf2>

    // Clear pending DN confirmation
    LMIC.dnConf = 0;
 80040f6:	4a37      	ldr	r2, [pc, #220]	; (80041d4 <buildDataFrame+0x458>)
 80040f8:	2390      	movs	r3, #144	; 0x90
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	2100      	movs	r1, #0
 80040fe:	54d1      	strb	r1, [r2, r3]

    if( txdata ) {
 8004100:	230f      	movs	r3, #15
 8004102:	18fb      	adds	r3, r7, r3
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d046      	beq.n	8004198 <buildDataFrame+0x41c>
        if( LMIC.pendTxConf ) {
 800410a:	4b32      	ldr	r3, [pc, #200]	; (80041d4 <buildDataFrame+0x458>)
 800410c:	22bb      	movs	r2, #187	; 0xbb
 800410e:	5c9b      	ldrb	r3, [r3, r2]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00f      	beq.n	8004134 <buildDataFrame+0x3b8>
            // Confirmed only makes sense if we have a payload (or at least a port)
            LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DCUP | HDR_MAJOR_V1;
 8004114:	4a2f      	ldr	r2, [pc, #188]	; (80041d4 <buildDataFrame+0x458>)
 8004116:	23a4      	movs	r3, #164	; 0xa4
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	2180      	movs	r1, #128	; 0x80
 800411c:	54d1      	strb	r1, [r2, r3]
            if( LMIC.txCnt == 0 ) LMIC.txCnt = 1;
 800411e:	4a2d      	ldr	r2, [pc, #180]	; (80041d4 <buildDataFrame+0x458>)
 8004120:	23a2      	movs	r3, #162	; 0xa2
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	5cd3      	ldrb	r3, [r2, r3]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d104      	bne.n	8004134 <buildDataFrame+0x3b8>
 800412a:	4a2a      	ldr	r2, [pc, #168]	; (80041d4 <buildDataFrame+0x458>)
 800412c:	23a2      	movs	r3, #162	; 0xa2
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	2101      	movs	r1, #1
 8004132:	54d1      	strb	r1, [r2, r3]
        }
        LMIC.frame[end] = LMIC.pendTxPort;
 8004134:	4b27      	ldr	r3, [pc, #156]	; (80041d4 <buildDataFrame+0x458>)
 8004136:	22ba      	movs	r2, #186	; 0xba
 8004138:	5c98      	ldrb	r0, [r3, r2]
 800413a:	4926      	ldr	r1, [pc, #152]	; (80041d4 <buildDataFrame+0x458>)
 800413c:	23a4      	movs	r3, #164	; 0xa4
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	188a      	adds	r2, r1, r2
 8004144:	18d3      	adds	r3, r2, r3
 8004146:	1c02      	adds	r2, r0, #0
 8004148:	701a      	strb	r2, [r3, #0]
        os_copyMem(LMIC.frame+end+1, LMIC.pendTxData, dlen);
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	4b24      	ldr	r3, [pc, #144]	; (80041e0 <buildDataFrame+0x464>)
 8004150:	18d0      	adds	r0, r2, r3
 8004152:	1dbb      	adds	r3, r7, #6
 8004154:	781a      	ldrb	r2, [r3, #0]
 8004156:	4b23      	ldr	r3, [pc, #140]	; (80041e4 <buildDataFrame+0x468>)
 8004158:	0019      	movs	r1, r3
 800415a:	f007 fa35 	bl	800b5c8 <memcpy>
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 800415e:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <buildDataFrame+0x458>)
 8004160:	22ba      	movs	r2, #186	; 0xba
 8004162:	5c9b      	ldrb	r3, [r3, r2]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <buildDataFrame+0x3f0>
 8004168:	481f      	ldr	r0, [pc, #124]	; (80041e8 <buildDataFrame+0x46c>)
 800416a:	e000      	b.n	800416e <buildDataFrame+0x3f2>
 800416c:	481f      	ldr	r0, [pc, #124]	; (80041ec <buildDataFrame+0x470>)
 800416e:	4a19      	ldr	r2, [pc, #100]	; (80041d4 <buildDataFrame+0x458>)
 8004170:	238a      	movs	r3, #138	; 0x8a
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	58d1      	ldr	r1, [r2, r3]
                   LMIC.devaddr, LMIC.seqnoUp-1,
 8004176:	4a17      	ldr	r2, [pc, #92]	; (80041d4 <buildDataFrame+0x458>)
 8004178:	238e      	movs	r3, #142	; 0x8e
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	58d3      	ldr	r3, [r2, r3]
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 800417e:	1e5c      	subs	r4, r3, #1
                   /*up*/0, LMIC.frame+end+1, dlen);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	1c5a      	adds	r2, r3, #1
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 8004184:	4b16      	ldr	r3, [pc, #88]	; (80041e0 <buildDataFrame+0x464>)
 8004186:	18d3      	adds	r3, r2, r3
 8004188:	1dba      	adds	r2, r7, #6
 800418a:	7812      	ldrb	r2, [r2, #0]
 800418c:	9201      	str	r2, [sp, #4]
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	2300      	movs	r3, #0
 8004192:	0022      	movs	r2, r4
 8004194:	f7fd fe4c 	bl	8001e30 <aes_cipher>
    }
    aes_appendMic(LMIC.nwkKey, LMIC.devaddr, LMIC.seqnoUp-1, /*up*/0, LMIC.frame, flen-4);
 8004198:	4a0e      	ldr	r2, [pc, #56]	; (80041d4 <buildDataFrame+0x458>)
 800419a:	238a      	movs	r3, #138	; 0x8a
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	58d1      	ldr	r1, [r2, r3]
 80041a0:	4a0c      	ldr	r2, [pc, #48]	; (80041d4 <buildDataFrame+0x458>)
 80041a2:	238e      	movs	r3, #142	; 0x8e
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	58d3      	ldr	r3, [r2, r3]
 80041a8:	1e5a      	subs	r2, r3, #1
 80041aa:	1dfb      	adds	r3, r7, #7
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	3b04      	subs	r3, #4
 80041b0:	480d      	ldr	r0, [pc, #52]	; (80041e8 <buildDataFrame+0x46c>)
 80041b2:	9301      	str	r3, [sp, #4]
 80041b4:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <buildDataFrame+0x464>)
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	2300      	movs	r3, #0
 80041ba:	f7fd fdbb 	bl	8001d34 <aes_appendMic>
                       e_.fct     = LMIC.frame[LORA::OFF_DAT_FCT],
                       e_.port    = LMIC.pendTxPort,
                       e_.plen    = txdata ? dlen : 0,
                       e_.opts.length = end-LORA::OFF_DAT_OPTS,
                       memcpy(&e_.opts[0], LMIC.frame+LORA::OFF_DAT_OPTS, end-LORA::OFF_DAT_OPTS)));
    LMIC.dataLen = flen;
 80041be:	4a05      	ldr	r2, [pc, #20]	; (80041d4 <buildDataFrame+0x458>)
 80041c0:	1df9      	adds	r1, r7, #7
 80041c2:	2348      	movs	r3, #72	; 0x48
 80041c4:	33ff      	adds	r3, #255	; 0xff
 80041c6:	7809      	ldrb	r1, [r1, #0]
 80041c8:	54d1      	strb	r1, [r2, r3]
}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	46bd      	mov	sp, r7
 80041ce:	b005      	add	sp, #20
 80041d0:	bd90      	pop	{r4, r7, pc}
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	200002c4 	.word	0x200002c4
 80041d8:	2000040d 	.word	0x2000040d
 80041dc:	20000412 	.word	0x20000412
 80041e0:	2000040c 	.word	0x2000040c
 80041e4:	20000381 	.word	0x20000381
 80041e8:	200003b8 	.word	0x200003b8
 80041ec:	200003c8 	.word	0x200003c8

080041f0 <onBcnRx>:


// Callback from HAL during scan mode or when job timer expires.
static void onBcnRx (xref2osjob_t job) {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
    // If we arrive via job timer make sure to put radio to rest.
    os_radio(RADIO_RST);
 80041f8:	2000      	movs	r0, #0
 80041fa:	f002 f917 	bl	800642c <os_radio>
    os_clearCallback(&LMIC.osjob);
 80041fe:	4b24      	ldr	r3, [pc, #144]	; (8004290 <onBcnRx+0xa0>)
 8004200:	0018      	movs	r0, r3
 8004202:	f001 fa87 	bl	8005714 <os_clearCallback>
    if( LMIC.dataLen == 0 ) {
 8004206:	4a23      	ldr	r2, [pc, #140]	; (8004294 <onBcnRx+0xa4>)
 8004208:	2348      	movs	r3, #72	; 0x48
 800420a:	33ff      	adds	r3, #255	; 0xff
 800420c:	5cd3      	ldrb	r3, [r2, r3]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10c      	bne.n	800422c <onBcnRx+0x3c>
        // Nothing received - timeout
        LMIC.opmode &= ~(OP_SCAN | OP_TRACK);
 8004212:	4b20      	ldr	r3, [pc, #128]	; (8004294 <onBcnRx+0xa4>)
 8004214:	22ac      	movs	r2, #172	; 0xac
 8004216:	5a9b      	ldrh	r3, [r3, r2]
 8004218:	2203      	movs	r2, #3
 800421a:	4393      	bics	r3, r2
 800421c:	b299      	uxth	r1, r3
 800421e:	4b1d      	ldr	r3, [pc, #116]	; (8004294 <onBcnRx+0xa4>)
 8004220:	22ac      	movs	r2, #172	; 0xac
 8004222:	5299      	strh	r1, [r3, r2]
        reportEvent(EV_SCAN_TIMEOUT);
 8004224:	2001      	movs	r0, #1
 8004226:	f7fe fd83 	bl	8002d30 <reportEvent>
        return;
 800422a:	e02e      	b.n	800428a <onBcnRx+0x9a>
    }
    if( decodeBeacon() <= 0 ) {
 800422c:	f7fe fe1c 	bl	8002e68 <decodeBeacon>
 8004230:	1e03      	subs	r3, r0, #0
 8004232:	dc11      	bgt.n	8004258 <onBcnRx+0x68>
        // Something is wrong with the beacon - continue scan
        LMIC.dataLen = 0;
 8004234:	4a17      	ldr	r2, [pc, #92]	; (8004294 <onBcnRx+0xa4>)
 8004236:	2348      	movs	r3, #72	; 0x48
 8004238:	33ff      	adds	r3, #255	; 0xff
 800423a:	2100      	movs	r1, #0
 800423c:	54d1      	strb	r1, [r2, r3]
        os_radio(RADIO_RXON);
 800423e:	2003      	movs	r0, #3
 8004240:	f002 f8f4 	bl	800642c <os_radio>
        os_setTimedCallback(&LMIC.osjob, LMIC.bcninfo.txtime, FUNC_ADDR(onBcnRx));
 8004244:	4a13      	ldr	r2, [pc, #76]	; (8004294 <onBcnRx+0xa4>)
 8004246:	23c8      	movs	r3, #200	; 0xc8
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	58d1      	ldr	r1, [r2, r3]
 800424c:	4a12      	ldr	r2, [pc, #72]	; (8004298 <onBcnRx+0xa8>)
 800424e:	4b10      	ldr	r3, [pc, #64]	; (8004290 <onBcnRx+0xa0>)
 8004250:	0018      	movs	r0, r3
 8004252:	f001 faa7 	bl	80057a4 <os_setTimedCallback>
        return;
 8004256:	e018      	b.n	800428a <onBcnRx+0x9a>
    }
    // Found our 1st beacon
    // We don't have a previous beacon to calc some drift - assume
    // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
    calcBcnRxWindowFromMillis(13,1);
 8004258:	2101      	movs	r1, #1
 800425a:	200d      	movs	r0, #13
 800425c:	f7fd ffb6 	bl	80021cc <calcBcnRxWindowFromMillis>
    LMIC.opmode &= ~OP_SCAN;          // turn SCAN off
 8004260:	4b0c      	ldr	r3, [pc, #48]	; (8004294 <onBcnRx+0xa4>)
 8004262:	22ac      	movs	r2, #172	; 0xac
 8004264:	5a9b      	ldrh	r3, [r3, r2]
 8004266:	2201      	movs	r2, #1
 8004268:	4393      	bics	r3, r2
 800426a:	b299      	uxth	r1, r3
 800426c:	4b09      	ldr	r3, [pc, #36]	; (8004294 <onBcnRx+0xa4>)
 800426e:	22ac      	movs	r2, #172	; 0xac
 8004270:	5299      	strh	r1, [r3, r2]
    LMIC.opmode |=  OP_TRACK;         // auto enable tracking
 8004272:	4b08      	ldr	r3, [pc, #32]	; (8004294 <onBcnRx+0xa4>)
 8004274:	22ac      	movs	r2, #172	; 0xac
 8004276:	5a9b      	ldrh	r3, [r3, r2]
 8004278:	2202      	movs	r2, #2
 800427a:	4313      	orrs	r3, r2
 800427c:	b299      	uxth	r1, r3
 800427e:	4b05      	ldr	r3, [pc, #20]	; (8004294 <onBcnRx+0xa4>)
 8004280:	22ac      	movs	r2, #172	; 0xac
 8004282:	5299      	strh	r1, [r3, r2]
    reportEvent(EV_BEACON_FOUND);    // can be disabled in callback
 8004284:	2002      	movs	r0, #2
 8004286:	f7fe fd53 	bl	8002d30 <reportEvent>
}
 800428a:	46bd      	mov	sp, r7
 800428c:	b002      	add	sp, #8
 800428e:	bd80      	pop	{r7, pc}
 8004290:	200002d8 	.word	0x200002d8
 8004294:	200002c4 	.word	0x200002c4
 8004298:	080041f1 	.word	0x080041f1

0800429c <startScan>:
// Enable receiver to listen to incoming beacons
// netid defines when scan stops (any or specific beacon)
// This mode ends with events: EV_SCAN_TIMEOUT/EV_SCAN_BEACON
// Implicitely cancels any pending TX/RX transaction.
// Also cancels an onpoing joining procedure.
static void startScan (void) {
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
    ASSERT(LMIC.devaddr!=0 && (LMIC.opmode & OP_JOINING)==0);
 80042a0:	4a2a      	ldr	r2, [pc, #168]	; (800434c <startScan+0xb0>)
 80042a2:	238a      	movs	r3, #138	; 0x8a
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	58d3      	ldr	r3, [r2, r3]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d006      	beq.n	80042ba <startScan+0x1e>
 80042ac:	4b27      	ldr	r3, [pc, #156]	; (800434c <startScan+0xb0>)
 80042ae:	22ac      	movs	r2, #172	; 0xac
 80042b0:	5a9b      	ldrh	r3, [r3, r2]
 80042b2:	001a      	movs	r2, r3
 80042b4:	2304      	movs	r3, #4
 80042b6:	4013      	ands	r3, r2
 80042b8:	d001      	beq.n	80042be <startScan+0x22>
 80042ba:	f7fd fac1 	bl	8001840 <hal_failed>
    if( (LMIC.opmode & OP_SHUTDOWN) != 0 )
 80042be:	4b23      	ldr	r3, [pc, #140]	; (800434c <startScan+0xb0>)
 80042c0:	22ac      	movs	r2, #172	; 0xac
 80042c2:	5a9b      	ldrh	r3, [r3, r2]
 80042c4:	001a      	movs	r2, r3
 80042c6:	2340      	movs	r3, #64	; 0x40
 80042c8:	4013      	ands	r3, r2
 80042ca:	d13c      	bne.n	8004346 <startScan+0xaa>
        return;
    // Cancel onging TX/RX transaction
    LMIC.txCnt = LMIC.dnConf = LMIC.bcninfo.flags = 0;
 80042cc:	4a1f      	ldr	r2, [pc, #124]	; (800434c <startScan+0xb0>)
 80042ce:	23cb      	movs	r3, #203	; 0xcb
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	2100      	movs	r1, #0
 80042d4:	54d1      	strb	r1, [r2, r3]
 80042d6:	4a1d      	ldr	r2, [pc, #116]	; (800434c <startScan+0xb0>)
 80042d8:	23cb      	movs	r3, #203	; 0xcb
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	5cd1      	ldrb	r1, [r2, r3]
 80042de:	4a1b      	ldr	r2, [pc, #108]	; (800434c <startScan+0xb0>)
 80042e0:	2390      	movs	r3, #144	; 0x90
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	54d1      	strb	r1, [r2, r3]
 80042e6:	4a19      	ldr	r2, [pc, #100]	; (800434c <startScan+0xb0>)
 80042e8:	2390      	movs	r3, #144	; 0x90
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	5cd1      	ldrb	r1, [r2, r3]
 80042ee:	4a17      	ldr	r2, [pc, #92]	; (800434c <startScan+0xb0>)
 80042f0:	23a2      	movs	r3, #162	; 0xa2
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	54d1      	strb	r1, [r2, r3]
    LMIC.opmode = (LMIC.opmode | OP_SCAN) & ~(OP_TXRXPEND);
 80042f6:	4b15      	ldr	r3, [pc, #84]	; (800434c <startScan+0xb0>)
 80042f8:	22ac      	movs	r2, #172	; 0xac
 80042fa:	5a9b      	ldrh	r3, [r3, r2]
 80042fc:	2201      	movs	r2, #1
 80042fe:	4313      	orrs	r3, r2
 8004300:	b29b      	uxth	r3, r3
 8004302:	2280      	movs	r2, #128	; 0x80
 8004304:	4393      	bics	r3, r2
 8004306:	b299      	uxth	r1, r3
 8004308:	4b10      	ldr	r3, [pc, #64]	; (800434c <startScan+0xb0>)
 800430a:	22ac      	movs	r2, #172	; 0xac
 800430c:	5299      	strh	r1, [r3, r2]
    setBcnRxParams();
 800430e:	f7fe fc37 	bl	8002b80 <setBcnRxParams>
    LMIC.rxtime = LMIC.bcninfo.txtime = os_getTime() + sec2osticks(BCN_INTV_sec+1);
 8004312:	f001 f9d9 	bl	80056c8 <os_getTime>
 8004316:	0003      	movs	r3, r0
 8004318:	4a0d      	ldr	r2, [pc, #52]	; (8004350 <startScan+0xb4>)
 800431a:	1899      	adds	r1, r3, r2
 800431c:	4a0b      	ldr	r2, [pc, #44]	; (800434c <startScan+0xb0>)
 800431e:	23c8      	movs	r3, #200	; 0xc8
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	50d1      	str	r1, [r2, r3]
 8004324:	4a09      	ldr	r2, [pc, #36]	; (800434c <startScan+0xb0>)
 8004326:	23c8      	movs	r3, #200	; 0xc8
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	58d2      	ldr	r2, [r2, r3]
 800432c:	4b07      	ldr	r3, [pc, #28]	; (800434c <startScan+0xb0>)
 800432e:	605a      	str	r2, [r3, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime, FUNC_ADDR(onBcnRx));
 8004330:	4b06      	ldr	r3, [pc, #24]	; (800434c <startScan+0xb0>)
 8004332:	6859      	ldr	r1, [r3, #4]
 8004334:	4a07      	ldr	r2, [pc, #28]	; (8004354 <startScan+0xb8>)
 8004336:	4b08      	ldr	r3, [pc, #32]	; (8004358 <startScan+0xbc>)
 8004338:	0018      	movs	r0, r3
 800433a:	f001 fa33 	bl	80057a4 <os_setTimedCallback>
    os_radio(RADIO_RXON);
 800433e:	2003      	movs	r0, #3
 8004340:	f002 f874 	bl	800642c <os_radio>
 8004344:	e000      	b.n	8004348 <startScan+0xac>
        return;
 8004346:	46c0      	nop			; (mov r8, r8)
}
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	200002c4 	.word	0x200002c4
 8004350:	003efd00 	.word	0x003efd00
 8004354:	080041f1 	.word	0x080041f1
 8004358:	200002d8 	.word	0x200002d8

0800435c <buildJoinRequest>:
//
// Join stuff
//
// ================================================================================

static void buildJoinRequest (u1_t ftype) {
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	0002      	movs	r2, r0
 8004364:	1dfb      	adds	r3, r7, #7
 8004366:	701a      	strb	r2, [r3, #0]
    // Do not use pendTxData since we might have a pending
    // user level frame in there. Use RX holding area instead.
    xref2u1_t d = LMIC.frame;
 8004368:	4b17      	ldr	r3, [pc, #92]	; (80043c8 <buildJoinRequest+0x6c>)
 800436a:	60fb      	str	r3, [r7, #12]
    d[OFF_JR_HDR] = ftype;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	1dfa      	adds	r2, r7, #7
 8004370:	7812      	ldrb	r2, [r2, #0]
 8004372:	701a      	strb	r2, [r3, #0]
    os_getArtEui(d + OFF_JR_ARTEUI);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3301      	adds	r3, #1
 8004378:	0018      	movs	r0, r3
 800437a:	f000 fdd9 	bl	8004f30 <os_getArtEui>
    os_getDevEui(d + OFF_JR_DEVEUI);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	3309      	adds	r3, #9
 8004382:	0018      	movs	r0, r3
 8004384:	f000 fde6 	bl	8004f54 <os_getDevEui>
    os_wlsbf2(d + OFF_JR_DEVNONCE, LMIC.devNonce);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	3311      	adds	r3, #17
 800438c:	0018      	movs	r0, r3
 800438e:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <buildJoinRequest+0x70>)
 8004390:	22f2      	movs	r2, #242	; 0xf2
 8004392:	5a9b      	ldrh	r3, [r3, r2]
 8004394:	0019      	movs	r1, r3
 8004396:	f7fd fbb9 	bl	8001b0c <os_wlsbf2>
    aes_appendMic0(d, OFF_JR_MIC);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2113      	movs	r1, #19
 800439e:	0018      	movs	r0, r3
 80043a0:	f7fd fcf0 	bl	8001d84 <aes_appendMic0>
                      e_.oldaddr = LMIC.devaddr,
                      e_.mic     = Base::lsbf4(&d[LORA::OFF_JR_MIC]),
                      e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                    ? EV::joininfo_t::REJOIN_REQUEST
                                    : EV::joininfo_t::REQUEST)));
    LMIC.dataLen = LEN_JR;
 80043a4:	4a09      	ldr	r2, [pc, #36]	; (80043cc <buildJoinRequest+0x70>)
 80043a6:	2348      	movs	r3, #72	; 0x48
 80043a8:	33ff      	adds	r3, #255	; 0xff
 80043aa:	2117      	movs	r1, #23
 80043ac:	54d1      	strb	r1, [r2, r3]
    LMIC.devNonce++;
 80043ae:	4b07      	ldr	r3, [pc, #28]	; (80043cc <buildJoinRequest+0x70>)
 80043b0:	22f2      	movs	r2, #242	; 0xf2
 80043b2:	5a9b      	ldrh	r3, [r3, r2]
 80043b4:	3301      	adds	r3, #1
 80043b6:	b299      	uxth	r1, r3
 80043b8:	4b04      	ldr	r3, [pc, #16]	; (80043cc <buildJoinRequest+0x70>)
 80043ba:	22f2      	movs	r2, #242	; 0xf2
 80043bc:	5299      	strh	r1, [r3, r2]
    DO_DEVDB(LMIC.devNonce,devNonce);
}
 80043be:	46c0      	nop			; (mov r8, r8)
 80043c0:	46bd      	mov	sp, r7
 80043c2:	b004      	add	sp, #16
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	2000040c 	.word	0x2000040c
 80043cc:	200002c4 	.word	0x200002c4

080043d0 <startJoining>:

static void startJoining (xref2osjob_t osjob) {
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
    reportEvent(EV_JOINING);
 80043d8:	2005      	movs	r0, #5
 80043da:	f7fe fca9 	bl	8002d30 <reportEvent>
}
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	46bd      	mov	sp, r7
 80043e2:	b002      	add	sp, #8
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <LMIC_startJoining>:

// Start join procedure if not already joined.
bit_t LMIC_startJoining (void) {
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
    if( LMIC.devaddr == 0 ) {
 80043ec:	4a22      	ldr	r2, [pc, #136]	; (8004478 <LMIC_startJoining+0x90>)
 80043ee:	238a      	movs	r3, #138	; 0x8a
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	58d3      	ldr	r3, [r2, r3]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d13a      	bne.n	800446e <LMIC_startJoining+0x86>
        // There should be no TX/RX going on
        ASSERT((LMIC.opmode & (OP_POLL|OP_TXRXPEND)) == 0);
 80043f8:	4b1f      	ldr	r3, [pc, #124]	; (8004478 <LMIC_startJoining+0x90>)
 80043fa:	22ac      	movs	r2, #172	; 0xac
 80043fc:	5a9b      	ldrh	r3, [r3, r2]
 80043fe:	001a      	movs	r2, r3
 8004400:	2390      	movs	r3, #144	; 0x90
 8004402:	4013      	ands	r3, r2
 8004404:	d001      	beq.n	800440a <LMIC_startJoining+0x22>
 8004406:	f7fd fa1b 	bl	8001840 <hal_failed>
        // Lift any previous duty limitation
        LMIC.globalDutyRate = 0;
 800440a:	4b1b      	ldr	r3, [pc, #108]	; (8004478 <LMIC_startJoining+0x90>)
 800440c:	22a3      	movs	r2, #163	; 0xa3
 800440e:	2100      	movs	r1, #0
 8004410:	5499      	strb	r1, [r3, r2]
        // Cancel scanning
        LMIC.opmode &= ~(OP_SCAN|OP_REJOIN|OP_LINKDEAD|OP_NEXTCHNL);
 8004412:	4b19      	ldr	r3, [pc, #100]	; (8004478 <LMIC_startJoining+0x90>)
 8004414:	22ac      	movs	r2, #172	; 0xac
 8004416:	5a9b      	ldrh	r3, [r3, r2]
 8004418:	4a18      	ldr	r2, [pc, #96]	; (800447c <LMIC_startJoining+0x94>)
 800441a:	4013      	ands	r3, r2
 800441c:	b299      	uxth	r1, r3
 800441e:	4b16      	ldr	r3, [pc, #88]	; (8004478 <LMIC_startJoining+0x90>)
 8004420:	22ac      	movs	r2, #172	; 0xac
 8004422:	5299      	strh	r1, [r3, r2]
        // Setup state
        LMIC.rejoinCnt = LMIC.txCnt = LMIC.pendTxConf = 0;
 8004424:	4b14      	ldr	r3, [pc, #80]	; (8004478 <LMIC_startJoining+0x90>)
 8004426:	22bb      	movs	r2, #187	; 0xbb
 8004428:	2100      	movs	r1, #0
 800442a:	5499      	strb	r1, [r3, r2]
 800442c:	4b12      	ldr	r3, [pc, #72]	; (8004478 <LMIC_startJoining+0x90>)
 800442e:	22bb      	movs	r2, #187	; 0xbb
 8004430:	5c99      	ldrb	r1, [r3, r2]
 8004432:	4a11      	ldr	r2, [pc, #68]	; (8004478 <LMIC_startJoining+0x90>)
 8004434:	23a2      	movs	r3, #162	; 0xa2
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	54d1      	strb	r1, [r2, r3]
 800443a:	4a0f      	ldr	r2, [pc, #60]	; (8004478 <LMIC_startJoining+0x90>)
 800443c:	23a2      	movs	r3, #162	; 0xa2
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	5cd1      	ldrb	r1, [r2, r3]
 8004442:	4b0d      	ldr	r3, [pc, #52]	; (8004478 <LMIC_startJoining+0x90>)
 8004444:	22b2      	movs	r2, #178	; 0xb2
 8004446:	5499      	strb	r1, [r3, r2]
        initJoinLoop();
 8004448:	f7fe fbc6 	bl	8002bd8 <initJoinLoop>
        LMIC.opmode |= OP_JOINING;
 800444c:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <LMIC_startJoining+0x90>)
 800444e:	22ac      	movs	r2, #172	; 0xac
 8004450:	5a9b      	ldrh	r3, [r3, r2]
 8004452:	2204      	movs	r2, #4
 8004454:	4313      	orrs	r3, r2
 8004456:	b299      	uxth	r1, r3
 8004458:	4b07      	ldr	r3, [pc, #28]	; (8004478 <LMIC_startJoining+0x90>)
 800445a:	22ac      	movs	r2, #172	; 0xac
 800445c:	5299      	strh	r1, [r3, r2]
        // reportEvent will call engineUpdate which then starts sending JOIN REQUESTS
        os_setCallback(&LMIC.osjob, FUNC_ADDR(startJoining));
 800445e:	4a08      	ldr	r2, [pc, #32]	; (8004480 <LMIC_startJoining+0x98>)
 8004460:	4b08      	ldr	r3, [pc, #32]	; (8004484 <LMIC_startJoining+0x9c>)
 8004462:	0011      	movs	r1, r2
 8004464:	0018      	movs	r0, r3
 8004466:	f001 f975 	bl	8005754 <os_setCallback>
        return 1;
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <LMIC_startJoining+0x88>
    }
    return 0; // already joined
 800446e:	2300      	movs	r3, #0
}
 8004470:	0018      	movs	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	200002c4 	.word	0x200002c4
 800447c:	ffffe7de 	.word	0xffffe7de
 8004480:	080043d1 	.word	0x080043d1
 8004484:	200002d8 	.word	0x200002d8

08004488 <processPingRx>:
//
//
//
// ================================================================================

static void processPingRx (xref2osjob_t osjob) {
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen != 0 ) {
 8004490:	4a0b      	ldr	r2, [pc, #44]	; (80044c0 <processPingRx+0x38>)
 8004492:	2348      	movs	r3, #72	; 0x48
 8004494:	33ff      	adds	r3, #255	; 0xff
 8004496:	5cd3      	ldrb	r3, [r2, r3]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00c      	beq.n	80044b6 <processPingRx+0x2e>
        LMIC.txrxFlags = TXRX_PING;
 800449c:	4a08      	ldr	r2, [pc, #32]	; (80044c0 <processPingRx+0x38>)
 800449e:	2346      	movs	r3, #70	; 0x46
 80044a0:	33ff      	adds	r3, #255	; 0xff
 80044a2:	2104      	movs	r1, #4
 80044a4:	54d1      	strb	r1, [r2, r3]
        if( decodeFrame() ) {
 80044a6:	f7fe fd85 	bl	8002fb4 <decodeFrame>
 80044aa:	1e03      	subs	r3, r0, #0
 80044ac:	d003      	beq.n	80044b6 <processPingRx+0x2e>
            reportEvent(EV_RXCOMPLETE);
 80044ae:	200d      	movs	r0, #13
 80044b0:	f7fe fc3e 	bl	8002d30 <reportEvent>
            return;
 80044b4:	e001      	b.n	80044ba <processPingRx+0x32>
        }
    }
    // Pick next ping slot
    engineUpdate();
 80044b6:	f000 fa87 	bl	80049c8 <engineUpdate>
}
 80044ba:	46bd      	mov	sp, r7
 80044bc:	b002      	add	sp, #8
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	200002c4 	.word	0x200002c4

080044c4 <processDnData>:


static bit_t processDnData (void) {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 80044c8:	4b83      	ldr	r3, [pc, #524]	; (80046d8 <processDnData+0x214>)
 80044ca:	22ac      	movs	r2, #172	; 0xac
 80044cc:	5a9b      	ldrh	r3, [r3, r2]
 80044ce:	001a      	movs	r2, r3
 80044d0:	2380      	movs	r3, #128	; 0x80
 80044d2:	4013      	ands	r3, r2
 80044d4:	d101      	bne.n	80044da <processDnData+0x16>
 80044d6:	f7fd f9b3 	bl	8001840 <hal_failed>

    if( LMIC.dataLen == 0 ) {
 80044da:	4a7f      	ldr	r2, [pc, #508]	; (80046d8 <processDnData+0x214>)
 80044dc:	2348      	movs	r3, #72	; 0x48
 80044de:	33ff      	adds	r3, #255	; 0xff
 80044e0:	5cd3      	ldrb	r3, [r2, r3]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d000      	beq.n	80044e8 <processDnData+0x24>
 80044e6:	e0e4      	b.n	80046b2 <processDnData+0x1ee>
      norx:
 80044e8:	46c0      	nop			; (mov r8, r8)
 80044ea:	e000      	b.n	80044ee <processDnData+0x2a>
        return 1;
    }
    if( !decodeFrame() ) {
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto norx;
 80044ec:	46c0      	nop			; (mov r8, r8)
        if( LMIC.txCnt != 0 ) {
 80044ee:	4a7a      	ldr	r2, [pc, #488]	; (80046d8 <processDnData+0x214>)
 80044f0:	23a2      	movs	r3, #162	; 0xa2
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	5cd3      	ldrb	r3, [r2, r3]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d03d      	beq.n	8004576 <processDnData+0xb2>
            if( LMIC.txCnt < TXCONF_ATTEMPTS ) {
 80044fa:	4a77      	ldr	r2, [pc, #476]	; (80046d8 <processDnData+0x214>)
 80044fc:	23a2      	movs	r3, #162	; 0xa2
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	5cd3      	ldrb	r3, [r2, r3]
 8004502:	2b07      	cmp	r3, #7
 8004504:	d831      	bhi.n	800456a <processDnData+0xa6>
                LMIC.txCnt += 1;
 8004506:	4a74      	ldr	r2, [pc, #464]	; (80046d8 <processDnData+0x214>)
 8004508:	23a2      	movs	r3, #162	; 0xa2
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	5cd3      	ldrb	r3, [r2, r3]
 800450e:	3301      	adds	r3, #1
 8004510:	b2d9      	uxtb	r1, r3
 8004512:	4a71      	ldr	r2, [pc, #452]	; (80046d8 <processDnData+0x214>)
 8004514:	23a2      	movs	r3, #162	; 0xa2
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	54d1      	strb	r1, [r2, r3]
                setDrTxpow(DRCHG_NOACK, lowerDR(LMIC.datarate, DRADJUST[LMIC.txCnt]), KEEP_TXPOW);
 800451a:	4b6f      	ldr	r3, [pc, #444]	; (80046d8 <processDnData+0x214>)
 800451c:	22b0      	movs	r2, #176	; 0xb0
 800451e:	5c98      	ldrb	r0, [r3, r2]
 8004520:	4a6d      	ldr	r2, [pc, #436]	; (80046d8 <processDnData+0x214>)
 8004522:	23a2      	movs	r3, #162	; 0xa2
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	5cd3      	ldrb	r3, [r2, r3]
 8004528:	001a      	movs	r2, r3
 800452a:	4b6c      	ldr	r3, [pc, #432]	; (80046dc <processDnData+0x218>)
 800452c:	5c9b      	ldrb	r3, [r3, r2]
 800452e:	0019      	movs	r1, r3
 8004530:	f7fd fa84 	bl	8001a3c <lowerDR>
 8004534:	0003      	movs	r3, r0
 8004536:	0019      	movs	r1, r3
 8004538:	2380      	movs	r3, #128	; 0x80
 800453a:	425b      	negs	r3, r3
 800453c:	001a      	movs	r2, r3
 800453e:	2002      	movs	r0, #2
 8004540:	f7fe f824 	bl	800258c <setDrTxpow>
                txDelay(LMIC.rxtime, RETRY_PERIOD_secs);
 8004544:	4b64      	ldr	r3, [pc, #400]	; (80046d8 <processDnData+0x214>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2103      	movs	r1, #3
 800454a:	0018      	movs	r0, r3
 800454c:	f7fd ffda 	bl	8002504 <txDelay>
                LMIC.opmode &= ~OP_TXRXPEND;
 8004550:	4b61      	ldr	r3, [pc, #388]	; (80046d8 <processDnData+0x214>)
 8004552:	22ac      	movs	r2, #172	; 0xac
 8004554:	5a9b      	ldrh	r3, [r3, r2]
 8004556:	2280      	movs	r2, #128	; 0x80
 8004558:	4393      	bics	r3, r2
 800455a:	b299      	uxth	r1, r3
 800455c:	4b5e      	ldr	r3, [pc, #376]	; (80046d8 <processDnData+0x214>)
 800455e:	22ac      	movs	r2, #172	; 0xac
 8004560:	5299      	strh	r1, [r3, r2]
                engineUpdate();
 8004562:	f000 fa31 	bl	80049c8 <engineUpdate>
                return 1;
 8004566:	2301      	movs	r3, #1
 8004568:	e0b2      	b.n	80046d0 <processDnData+0x20c>
            LMIC.txrxFlags = TXRX_NACK | TXRX_NOPORT;
 800456a:	4a5b      	ldr	r2, [pc, #364]	; (80046d8 <processDnData+0x214>)
 800456c:	2346      	movs	r3, #70	; 0x46
 800456e:	33ff      	adds	r3, #255	; 0xff
 8004570:	2160      	movs	r1, #96	; 0x60
 8004572:	54d1      	strb	r1, [r2, r3]
 8004574:	e004      	b.n	8004580 <processDnData+0xbc>
            LMIC.txrxFlags = TXRX_NOPORT;
 8004576:	4a58      	ldr	r2, [pc, #352]	; (80046d8 <processDnData+0x214>)
 8004578:	2346      	movs	r3, #70	; 0x46
 800457a:	33ff      	adds	r3, #255	; 0xff
 800457c:	2120      	movs	r1, #32
 800457e:	54d1      	strb	r1, [r2, r3]
        if( LMIC.adrAckReq != LINK_CHECK_OFF )
 8004580:	4a55      	ldr	r2, [pc, #340]	; (80046d8 <processDnData+0x214>)
 8004582:	2322      	movs	r3, #34	; 0x22
 8004584:	33ff      	adds	r3, #255	; 0xff
 8004586:	56d3      	ldrsb	r3, [r2, r3]
 8004588:	3380      	adds	r3, #128	; 0x80
 800458a:	d00b      	beq.n	80045a4 <processDnData+0xe0>
            LMIC.adrAckReq += 1;
 800458c:	4a52      	ldr	r2, [pc, #328]	; (80046d8 <processDnData+0x214>)
 800458e:	2322      	movs	r3, #34	; 0x22
 8004590:	33ff      	adds	r3, #255	; 0xff
 8004592:	56d3      	ldrsb	r3, [r2, r3]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	3301      	adds	r3, #1
 8004598:	b2db      	uxtb	r3, r3
 800459a:	b259      	sxtb	r1, r3
 800459c:	4a4e      	ldr	r2, [pc, #312]	; (80046d8 <processDnData+0x214>)
 800459e:	2322      	movs	r3, #34	; 0x22
 80045a0:	33ff      	adds	r3, #255	; 0xff
 80045a2:	54d1      	strb	r1, [r2, r3]
        LMIC.dataBeg = LMIC.dataLen = 0;
 80045a4:	4a4c      	ldr	r2, [pc, #304]	; (80046d8 <processDnData+0x214>)
 80045a6:	2348      	movs	r3, #72	; 0x48
 80045a8:	33ff      	adds	r3, #255	; 0xff
 80045aa:	2100      	movs	r1, #0
 80045ac:	54d1      	strb	r1, [r2, r3]
 80045ae:	4a4a      	ldr	r2, [pc, #296]	; (80046d8 <processDnData+0x214>)
 80045b0:	2348      	movs	r3, #72	; 0x48
 80045b2:	33ff      	adds	r3, #255	; 0xff
 80045b4:	5cd1      	ldrb	r1, [r2, r3]
 80045b6:	4a48      	ldr	r2, [pc, #288]	; (80046d8 <processDnData+0x214>)
 80045b8:	23a3      	movs	r3, #163	; 0xa3
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	54d1      	strb	r1, [r2, r3]
 80045be:	e000      	b.n	80045c2 <processDnData+0xfe>
    }
    goto txcomplete;
 80045c0:	46c0      	nop			; (mov r8, r8)
        LMIC.opmode &= ~(OP_TXDATA|OP_TXRXPEND);
 80045c2:	4b45      	ldr	r3, [pc, #276]	; (80046d8 <processDnData+0x214>)
 80045c4:	22ac      	movs	r2, #172	; 0xac
 80045c6:	5a9b      	ldrh	r3, [r3, r2]
 80045c8:	2288      	movs	r2, #136	; 0x88
 80045ca:	4393      	bics	r3, r2
 80045cc:	b299      	uxth	r1, r3
 80045ce:	4b42      	ldr	r3, [pc, #264]	; (80046d8 <processDnData+0x214>)
 80045d0:	22ac      	movs	r2, #172	; 0xac
 80045d2:	5299      	strh	r1, [r3, r2]
        if( (LMIC.txrxFlags & (TXRX_DNW1|TXRX_DNW2|TXRX_PING)) != 0  &&  (LMIC.opmode & OP_LINKDEAD) != 0 ) {
 80045d4:	4a40      	ldr	r2, [pc, #256]	; (80046d8 <processDnData+0x214>)
 80045d6:	2346      	movs	r3, #70	; 0x46
 80045d8:	33ff      	adds	r3, #255	; 0xff
 80045da:	5cd3      	ldrb	r3, [r2, r3]
 80045dc:	001a      	movs	r2, r3
 80045de:	2307      	movs	r3, #7
 80045e0:	4013      	ands	r3, r2
 80045e2:	d013      	beq.n	800460c <processDnData+0x148>
 80045e4:	4b3c      	ldr	r3, [pc, #240]	; (80046d8 <processDnData+0x214>)
 80045e6:	22ac      	movs	r2, #172	; 0xac
 80045e8:	5a9b      	ldrh	r3, [r3, r2]
 80045ea:	001a      	movs	r2, r3
 80045ec:	2380      	movs	r3, #128	; 0x80
 80045ee:	015b      	lsls	r3, r3, #5
 80045f0:	4013      	ands	r3, r2
 80045f2:	d00b      	beq.n	800460c <processDnData+0x148>
            LMIC.opmode &= ~OP_LINKDEAD;
 80045f4:	4b38      	ldr	r3, [pc, #224]	; (80046d8 <processDnData+0x214>)
 80045f6:	22ac      	movs	r2, #172	; 0xac
 80045f8:	5a9b      	ldrh	r3, [r3, r2]
 80045fa:	4a39      	ldr	r2, [pc, #228]	; (80046e0 <processDnData+0x21c>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	b299      	uxth	r1, r3
 8004600:	4b35      	ldr	r3, [pc, #212]	; (80046d8 <processDnData+0x214>)
 8004602:	22ac      	movs	r2, #172	; 0xac
 8004604:	5299      	strh	r1, [r3, r2]
            reportEvent(EV_LINK_ALIVE);
 8004606:	200f      	movs	r0, #15
 8004608:	f7fe fb92 	bl	8002d30 <reportEvent>
        reportEvent(EV_TXCOMPLETE);
 800460c:	200a      	movs	r0, #10
 800460e:	f7fe fb8f 	bl	8002d30 <reportEvent>
        if( LMIC.adrAckReq > LINK_CHECK_DEAD ) {
 8004612:	4a31      	ldr	r2, [pc, #196]	; (80046d8 <processDnData+0x214>)
 8004614:	2322      	movs	r3, #34	; 0x22
 8004616:	33ff      	adds	r3, #255	; 0xff
 8004618:	56d3      	ldrsb	r3, [r2, r3]
 800461a:	2b18      	cmp	r3, #24
 800461c:	dd1f      	ble.n	800465e <processDnData+0x19a>
            setDrTxpow(DRCHG_NOADRACK, decDR((dr_t)LMIC.datarate), KEEP_TXPOW);
 800461e:	4b2e      	ldr	r3, [pc, #184]	; (80046d8 <processDnData+0x214>)
 8004620:	22b0      	movs	r2, #176	; 0xb0
 8004622:	5c9b      	ldrb	r3, [r3, r2]
 8004624:	0018      	movs	r0, r3
 8004626:	f7fd f9d9 	bl	80019dc <decDR>
 800462a:	0003      	movs	r3, r0
 800462c:	0019      	movs	r1, r3
 800462e:	2380      	movs	r3, #128	; 0x80
 8004630:	425b      	negs	r3, r3
 8004632:	001a      	movs	r2, r3
 8004634:	2003      	movs	r0, #3
 8004636:	f7fd ffa9 	bl	800258c <setDrTxpow>
            LMIC.adrAckReq = LINK_CHECK_CONT;
 800463a:	4a27      	ldr	r2, [pc, #156]	; (80046d8 <processDnData+0x214>)
 800463c:	2322      	movs	r3, #34	; 0x22
 800463e:	33ff      	adds	r3, #255	; 0xff
 8004640:	210c      	movs	r1, #12
 8004642:	54d1      	strb	r1, [r2, r3]
            LMIC.opmode |= OP_REJOIN|OP_LINKDEAD;
 8004644:	4b24      	ldr	r3, [pc, #144]	; (80046d8 <processDnData+0x214>)
 8004646:	22ac      	movs	r2, #172	; 0xac
 8004648:	5a9b      	ldrh	r3, [r3, r2]
 800464a:	2281      	movs	r2, #129	; 0x81
 800464c:	0152      	lsls	r2, r2, #5
 800464e:	4313      	orrs	r3, r2
 8004650:	b299      	uxth	r1, r3
 8004652:	4b21      	ldr	r3, [pc, #132]	; (80046d8 <processDnData+0x214>)
 8004654:	22ac      	movs	r2, #172	; 0xac
 8004656:	5299      	strh	r1, [r3, r2]
            reportEvent(EV_LINK_DEAD);
 8004658:	200e      	movs	r0, #14
 800465a:	f7fe fb69 	bl	8002d30 <reportEvent>
        if( LMIC.bcninfoTries > 0 ) {
 800465e:	4a1e      	ldr	r2, [pc, #120]	; (80046d8 <processDnData+0x214>)
 8004660:	2399      	movs	r3, #153	; 0x99
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	5cd3      	ldrb	r3, [r2, r3]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d021      	beq.n	80046ae <processDnData+0x1ea>
            if( (LMIC.opmode & OP_TRACK) != 0 ) {
 800466a:	4b1b      	ldr	r3, [pc, #108]	; (80046d8 <processDnData+0x214>)
 800466c:	22ac      	movs	r2, #172	; 0xac
 800466e:	5a9b      	ldrh	r3, [r3, r2]
 8004670:	001a      	movs	r2, r3
 8004672:	2302      	movs	r3, #2
 8004674:	4013      	ands	r3, r2
 8004676:	d008      	beq.n	800468a <processDnData+0x1c6>
                reportEvent(EV_BEACON_FOUND);
 8004678:	2002      	movs	r0, #2
 800467a:	f7fe fb59 	bl	8002d30 <reportEvent>
                LMIC.bcninfoTries = 0;
 800467e:	4a16      	ldr	r2, [pc, #88]	; (80046d8 <processDnData+0x214>)
 8004680:	2399      	movs	r3, #153	; 0x99
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	2100      	movs	r1, #0
 8004686:	54d1      	strb	r1, [r2, r3]
 8004688:	e011      	b.n	80046ae <processDnData+0x1ea>
            else if( --LMIC.bcninfoTries == 0 ) {
 800468a:	4a13      	ldr	r2, [pc, #76]	; (80046d8 <processDnData+0x214>)
 800468c:	2399      	movs	r3, #153	; 0x99
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	5cd3      	ldrb	r3, [r2, r3]
 8004692:	3b01      	subs	r3, #1
 8004694:	b2d9      	uxtb	r1, r3
 8004696:	4a10      	ldr	r2, [pc, #64]	; (80046d8 <processDnData+0x214>)
 8004698:	2399      	movs	r3, #153	; 0x99
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	54d1      	strb	r1, [r2, r3]
 800469e:	4a0e      	ldr	r2, [pc, #56]	; (80046d8 <processDnData+0x214>)
 80046a0:	2399      	movs	r3, #153	; 0x99
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	5cd3      	ldrb	r3, [r2, r3]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <processDnData+0x1ea>
                startScan();   // NWK did not answer - try scan
 80046aa:	f7ff fdf7 	bl	800429c <startScan>
        return 1;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e00e      	b.n	80046d0 <processDnData+0x20c>
    if( !decodeFrame() ) {
 80046b2:	f7fe fc7f 	bl	8002fb4 <decodeFrame>
 80046b6:	1e03      	subs	r3, r0, #0
 80046b8:	d000      	beq.n	80046bc <processDnData+0x1f8>
 80046ba:	e781      	b.n	80045c0 <processDnData+0xfc>
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 80046bc:	4a06      	ldr	r2, [pc, #24]	; (80046d8 <processDnData+0x214>)
 80046be:	2346      	movs	r3, #70	; 0x46
 80046c0:	33ff      	adds	r3, #255	; 0xff
 80046c2:	5cd3      	ldrb	r3, [r2, r3]
 80046c4:	001a      	movs	r2, r3
 80046c6:	2301      	movs	r3, #1
 80046c8:	4013      	ands	r3, r2
 80046ca:	d100      	bne.n	80046ce <processDnData+0x20a>
 80046cc:	e70e      	b.n	80044ec <processDnData+0x28>
            return 0;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	0018      	movs	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	200002c4 	.word	0x200002c4
 80046dc:	0800cc28 	.word	0x0800cc28
 80046e0:	ffffefff 	.word	0xffffefff

080046e4 <processBeacon>:


static void processBeacon (xref2osjob_t osjob) {
 80046e4:	b5b0      	push	{r4, r5, r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
    ostime_t lasttx = LMIC.bcninfo.txtime;   // save here - decodeBeacon might overwrite
 80046ec:	4a9f      	ldr	r2, [pc, #636]	; (800496c <processBeacon+0x288>)
 80046ee:	23c8      	movs	r3, #200	; 0xc8
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	58d3      	ldr	r3, [r2, r3]
 80046f4:	60fb      	str	r3, [r7, #12]
    u1_t flags = LMIC.bcninfo.flags;
 80046f6:	230b      	movs	r3, #11
 80046f8:	18fb      	adds	r3, r7, r3
 80046fa:	499c      	ldr	r1, [pc, #624]	; (800496c <processBeacon+0x288>)
 80046fc:	22cb      	movs	r2, #203	; 0xcb
 80046fe:	0052      	lsls	r2, r2, #1
 8004700:	5c8a      	ldrb	r2, [r1, r2]
 8004702:	701a      	strb	r2, [r3, #0]
    ev_t ev;

    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8004704:	4a99      	ldr	r2, [pc, #612]	; (800496c <processBeacon+0x288>)
 8004706:	2348      	movs	r3, #72	; 0x48
 8004708:	33ff      	adds	r3, #255	; 0xff
 800470a:	5cd3      	ldrb	r3, [r2, r3]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d100      	bne.n	8004712 <processBeacon+0x2e>
 8004710:	e0a9      	b.n	8004866 <processBeacon+0x182>
 8004712:	f7fe fba9 	bl	8002e68 <decodeBeacon>
 8004716:	1e03      	subs	r3, r0, #0
 8004718:	dc00      	bgt.n	800471c <processBeacon+0x38>
 800471a:	e0a4      	b.n	8004866 <processBeacon+0x182>
        ev = EV_BEACON_TRACKED;
 800471c:	2317      	movs	r3, #23
 800471e:	18fb      	adds	r3, r7, r3
 8004720:	2204      	movs	r2, #4
 8004722:	701a      	strb	r2, [r3, #0]
        if( (flags & (BCN_PARTIAL|BCN_FULL)) == 0 ) {
 8004724:	230b      	movs	r3, #11
 8004726:	18fb      	adds	r3, r7, r3
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	2203      	movs	r2, #3
 800472c:	4013      	ands	r3, r2
 800472e:	d104      	bne.n	800473a <processBeacon+0x56>
            // We don't have a previous beacon to calc some drift - assume
            // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
            calcBcnRxWindowFromMillis(13,0);
 8004730:	2100      	movs	r1, #0
 8004732:	200d      	movs	r0, #13
 8004734:	f7fd fd4a 	bl	80021cc <calcBcnRxWindowFromMillis>
            goto rev;
 8004738:	e102      	b.n	8004940 <processBeacon+0x25c>
        }
        // We have a previous BEACON to calculate some drift
        s2_t drift = BCN_INTV_osticks - (LMIC.bcninfo.txtime - lasttx);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	b29a      	uxth	r2, r3
 800473e:	498b      	ldr	r1, [pc, #556]	; (800496c <processBeacon+0x288>)
 8004740:	23c8      	movs	r3, #200	; 0xc8
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	58cb      	ldr	r3, [r1, r3]
 8004746:	b29b      	uxth	r3, r3
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	b29b      	uxth	r3, r3
 800474c:	4a88      	ldr	r2, [pc, #544]	; (8004970 <processBeacon+0x28c>)
 800474e:	4694      	mov	ip, r2
 8004750:	4463      	add	r3, ip
 8004752:	b29a      	uxth	r2, r3
 8004754:	2314      	movs	r3, #20
 8004756:	18fb      	adds	r3, r7, r3
 8004758:	801a      	strh	r2, [r3, #0]
        if( LMIC.missedBcns > 0 ) {
 800475a:	4a84      	ldr	r2, [pc, #528]	; (800496c <processBeacon+0x288>)
 800475c:	2332      	movs	r3, #50	; 0x32
 800475e:	33ff      	adds	r3, #255	; 0xff
 8004760:	5cd3      	ldrb	r3, [r2, r3]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d019      	beq.n	800479a <processBeacon+0xb6>
            drift = LMIC.drift + (drift - LMIC.drift) / (LMIC.missedBcns+1);
 8004766:	4b81      	ldr	r3, [pc, #516]	; (800496c <processBeacon+0x288>)
 8004768:	22b4      	movs	r2, #180	; 0xb4
 800476a:	5e9b      	ldrsh	r3, [r3, r2]
 800476c:	b29c      	uxth	r4, r3
 800476e:	2514      	movs	r5, #20
 8004770:	197b      	adds	r3, r7, r5
 8004772:	2200      	movs	r2, #0
 8004774:	5e9b      	ldrsh	r3, [r3, r2]
 8004776:	4a7d      	ldr	r2, [pc, #500]	; (800496c <processBeacon+0x288>)
 8004778:	21b4      	movs	r1, #180	; 0xb4
 800477a:	5e52      	ldrsh	r2, [r2, r1]
 800477c:	1a98      	subs	r0, r3, r2
 800477e:	4a7b      	ldr	r2, [pc, #492]	; (800496c <processBeacon+0x288>)
 8004780:	2332      	movs	r3, #50	; 0x32
 8004782:	33ff      	adds	r3, #255	; 0xff
 8004784:	5cd3      	ldrb	r3, [r2, r3]
 8004786:	3301      	adds	r3, #1
 8004788:	0019      	movs	r1, r3
 800478a:	f7fb fd47 	bl	800021c <__divsi3>
 800478e:	0003      	movs	r3, r0
 8004790:	b29b      	uxth	r3, r3
 8004792:	18e3      	adds	r3, r4, r3
 8004794:	b29a      	uxth	r2, r3
 8004796:	197b      	adds	r3, r7, r5
 8004798:	801a      	strh	r2, [r3, #0]
        }
        if( (LMIC.bcninfo.flags & BCN_NODRIFT) == 0 ) {
 800479a:	4a74      	ldr	r2, [pc, #464]	; (800496c <processBeacon+0x288>)
 800479c:	23cb      	movs	r3, #203	; 0xcb
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	5cd3      	ldrb	r3, [r2, r3]
 80047a2:	001a      	movs	r2, r3
 80047a4:	2304      	movs	r3, #4
 80047a6:	4013      	ands	r3, r2
 80047a8:	d136      	bne.n	8004818 <processBeacon+0x134>
            s2_t diff = LMIC.drift - drift;
 80047aa:	4b70      	ldr	r3, [pc, #448]	; (800496c <processBeacon+0x288>)
 80047ac:	22b4      	movs	r2, #180	; 0xb4
 80047ae:	5e9b      	ldrsh	r3, [r3, r2]
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	2314      	movs	r3, #20
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	2112      	movs	r1, #18
 80047be:	187b      	adds	r3, r7, r1
 80047c0:	801a      	strh	r2, [r3, #0]
            if( diff < 0 ) diff = -diff;
 80047c2:	187b      	adds	r3, r7, r1
 80047c4:	2200      	movs	r2, #0
 80047c6:	5e9b      	ldrsh	r3, [r3, r2]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	da06      	bge.n	80047da <processBeacon+0xf6>
 80047cc:	2112      	movs	r1, #18
 80047ce:	187b      	adds	r3, r7, r1
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	425b      	negs	r3, r3
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	187b      	adds	r3, r7, r1
 80047d8:	801a      	strh	r2, [r3, #0]
            LMIC.lastDriftDiff = diff;
 80047da:	4b64      	ldr	r3, [pc, #400]	; (800496c <processBeacon+0x288>)
 80047dc:	2012      	movs	r0, #18
 80047de:	183a      	adds	r2, r7, r0
 80047e0:	21b6      	movs	r1, #182	; 0xb6
 80047e2:	8812      	ldrh	r2, [r2, #0]
 80047e4:	525a      	strh	r2, [r3, r1]
            if( LMIC.maxDriftDiff < diff )
 80047e6:	4b61      	ldr	r3, [pc, #388]	; (800496c <processBeacon+0x288>)
 80047e8:	22b8      	movs	r2, #184	; 0xb8
 80047ea:	5e9b      	ldrsh	r3, [r3, r2]
 80047ec:	183a      	adds	r2, r7, r0
 80047ee:	2100      	movs	r1, #0
 80047f0:	5e52      	ldrsh	r2, [r2, r1]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	dd05      	ble.n	8004802 <processBeacon+0x11e>
                LMIC.maxDriftDiff = diff;
 80047f6:	4b5d      	ldr	r3, [pc, #372]	; (800496c <processBeacon+0x288>)
 80047f8:	2212      	movs	r2, #18
 80047fa:	18ba      	adds	r2, r7, r2
 80047fc:	21b8      	movs	r1, #184	; 0xb8
 80047fe:	8812      	ldrh	r2, [r2, #0]
 8004800:	525a      	strh	r2, [r3, r1]
            LMIC.bcninfo.flags &= ~BCN_NODDIFF;
 8004802:	4a5a      	ldr	r2, [pc, #360]	; (800496c <processBeacon+0x288>)
 8004804:	23cb      	movs	r3, #203	; 0xcb
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	5cd3      	ldrb	r3, [r2, r3]
 800480a:	2208      	movs	r2, #8
 800480c:	4393      	bics	r3, r2
 800480e:	b2d9      	uxtb	r1, r3
 8004810:	4a56      	ldr	r2, [pc, #344]	; (800496c <processBeacon+0x288>)
 8004812:	23cb      	movs	r3, #203	; 0xcb
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	54d1      	strb	r1, [r2, r3]
        }
        LMIC.drift = drift;
 8004818:	4b54      	ldr	r3, [pc, #336]	; (800496c <processBeacon+0x288>)
 800481a:	2214      	movs	r2, #20
 800481c:	18ba      	adds	r2, r7, r2
 800481e:	21b4      	movs	r1, #180	; 0xb4
 8004820:	8812      	ldrh	r2, [r2, #0]
 8004822:	525a      	strh	r2, [r3, r1]
        LMIC.missedBcns = LMIC.rejoinCnt = 0;
 8004824:	4b51      	ldr	r3, [pc, #324]	; (800496c <processBeacon+0x288>)
 8004826:	22b2      	movs	r2, #178	; 0xb2
 8004828:	2100      	movs	r1, #0
 800482a:	5499      	strb	r1, [r3, r2]
 800482c:	4b4f      	ldr	r3, [pc, #316]	; (800496c <processBeacon+0x288>)
 800482e:	22b2      	movs	r2, #178	; 0xb2
 8004830:	5c99      	ldrb	r1, [r3, r2]
 8004832:	4a4e      	ldr	r2, [pc, #312]	; (800496c <processBeacon+0x288>)
 8004834:	2332      	movs	r3, #50	; 0x32
 8004836:	33ff      	adds	r3, #255	; 0xff
 8004838:	54d1      	strb	r1, [r2, r3]
        LMIC.bcninfo.flags &= ~BCN_NODRIFT;
 800483a:	4a4c      	ldr	r2, [pc, #304]	; (800496c <processBeacon+0x288>)
 800483c:	23cb      	movs	r3, #203	; 0xcb
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	5cd3      	ldrb	r3, [r2, r3]
 8004842:	2204      	movs	r2, #4
 8004844:	4393      	bics	r3, r2
 8004846:	b2d9      	uxtb	r1, r3
 8004848:	4a48      	ldr	r2, [pc, #288]	; (800496c <processBeacon+0x288>)
 800484a:	23cb      	movs	r3, #203	; 0xcb
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	54d1      	strb	r1, [r2, r3]
        EV(devCond,INFO,(e_.reason = EV::devCond_t::CLOCK_DRIFT,
                         e_.eui    = MAIN::CDEV->getEui(),
                         e_.info   = drift,
                         e_.info2  = /*occasion BEACON*/0));
        ASSERT((LMIC.bcninfo.flags & (BCN_PARTIAL|BCN_FULL)) != 0);
 8004850:	4a46      	ldr	r2, [pc, #280]	; (800496c <processBeacon+0x288>)
 8004852:	23cb      	movs	r3, #203	; 0xcb
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	5cd3      	ldrb	r3, [r2, r3]
 8004858:	001a      	movs	r2, r3
 800485a:	2303      	movs	r3, #3
 800485c:	4013      	ands	r3, r2
 800485e:	d157      	bne.n	8004910 <processBeacon+0x22c>
 8004860:	f7fc ffee 	bl	8001840 <hal_failed>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8004864:	e054      	b.n	8004910 <processBeacon+0x22c>
    } else {
        ev = EV_BEACON_MISSED;
 8004866:	2317      	movs	r3, #23
 8004868:	18fb      	adds	r3, r7, r3
 800486a:	2203      	movs	r2, #3
 800486c:	701a      	strb	r2, [r3, #0]
        LMIC.bcninfo.txtime += BCN_INTV_osticks - LMIC.drift;
 800486e:	4a3f      	ldr	r2, [pc, #252]	; (800496c <processBeacon+0x288>)
 8004870:	23c8      	movs	r3, #200	; 0xc8
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	58d2      	ldr	r2, [r2, r3]
 8004876:	4b3d      	ldr	r3, [pc, #244]	; (800496c <processBeacon+0x288>)
 8004878:	21b4      	movs	r1, #180	; 0xb4
 800487a:	5e5b      	ldrsh	r3, [r3, r1]
 800487c:	0019      	movs	r1, r3
 800487e:	23fa      	movs	r3, #250	; 0xfa
 8004880:	039b      	lsls	r3, r3, #14
 8004882:	1a5b      	subs	r3, r3, r1
 8004884:	18d1      	adds	r1, r2, r3
 8004886:	4a39      	ldr	r2, [pc, #228]	; (800496c <processBeacon+0x288>)
 8004888:	23c8      	movs	r3, #200	; 0xc8
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	50d1      	str	r1, [r2, r3]
        LMIC.bcninfo.time   += BCN_INTV_sec;
 800488e:	4a37      	ldr	r2, [pc, #220]	; (800496c <processBeacon+0x288>)
 8004890:	23cc      	movs	r3, #204	; 0xcc
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	58d3      	ldr	r3, [r2, r3]
 8004896:	3380      	adds	r3, #128	; 0x80
 8004898:	0019      	movs	r1, r3
 800489a:	4a34      	ldr	r2, [pc, #208]	; (800496c <processBeacon+0x288>)
 800489c:	23cc      	movs	r3, #204	; 0xcc
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	50d1      	str	r1, [r2, r3]
        LMIC.missedBcns++;
 80048a2:	4a32      	ldr	r2, [pc, #200]	; (800496c <processBeacon+0x288>)
 80048a4:	2332      	movs	r3, #50	; 0x32
 80048a6:	33ff      	adds	r3, #255	; 0xff
 80048a8:	5cd3      	ldrb	r3, [r2, r3]
 80048aa:	3301      	adds	r3, #1
 80048ac:	b2d9      	uxtb	r1, r3
 80048ae:	4a2f      	ldr	r2, [pc, #188]	; (800496c <processBeacon+0x288>)
 80048b0:	2332      	movs	r3, #50	; 0x32
 80048b2:	33ff      	adds	r3, #255	; 0xff
 80048b4:	54d1      	strb	r1, [r2, r3]
        // Delay any possible TX after surmised beacon - it's there although we missed it
        txDelay(LMIC.bcninfo.txtime + BCN_RESERVE_osticks, 4);
 80048b6:	4a2d      	ldr	r2, [pc, #180]	; (800496c <processBeacon+0x288>)
 80048b8:	23c8      	movs	r3, #200	; 0xc8
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	58d3      	ldr	r3, [r2, r3]
 80048be:	4a2d      	ldr	r2, [pc, #180]	; (8004974 <processBeacon+0x290>)
 80048c0:	4694      	mov	ip, r2
 80048c2:	4463      	add	r3, ip
 80048c4:	2104      	movs	r1, #4
 80048c6:	0018      	movs	r0, r3
 80048c8:	f7fd fe1c 	bl	8002504 <txDelay>
        if( LMIC.missedBcns > MAX_MISSED_BCNS )
 80048cc:	4a27      	ldr	r2, [pc, #156]	; (800496c <processBeacon+0x288>)
 80048ce:	2332      	movs	r3, #50	; 0x32
 80048d0:	33ff      	adds	r3, #255	; 0xff
 80048d2:	5cd3      	ldrb	r3, [r2, r3]
 80048d4:	2b14      	cmp	r3, #20
 80048d6:	d908      	bls.n	80048ea <processBeacon+0x206>
            LMIC.opmode |= OP_REJOIN;  // try if we can roam to another network
 80048d8:	4b24      	ldr	r3, [pc, #144]	; (800496c <processBeacon+0x288>)
 80048da:	22ac      	movs	r2, #172	; 0xac
 80048dc:	5a9b      	ldrh	r3, [r3, r2]
 80048de:	2220      	movs	r2, #32
 80048e0:	4313      	orrs	r3, r2
 80048e2:	b299      	uxth	r1, r3
 80048e4:	4b21      	ldr	r3, [pc, #132]	; (800496c <processBeacon+0x288>)
 80048e6:	22ac      	movs	r2, #172	; 0xac
 80048e8:	5299      	strh	r1, [r3, r2]
        if( LMIC.bcnRxsyms > MAX_RXSYMS ) {
 80048ea:	4a20      	ldr	r2, [pc, #128]	; (800496c <processBeacon+0x288>)
 80048ec:	238a      	movs	r3, #138	; 0x8a
 80048ee:	33ff      	adds	r3, #255	; 0xff
 80048f0:	5cd3      	ldrb	r3, [r2, r3]
 80048f2:	2b64      	cmp	r3, #100	; 0x64
 80048f4:	d90d      	bls.n	8004912 <processBeacon+0x22e>
            LMIC.opmode &= ~(OP_TRACK|OP_PINGABLE|OP_PINGINI|OP_REJOIN);
 80048f6:	4b1d      	ldr	r3, [pc, #116]	; (800496c <processBeacon+0x288>)
 80048f8:	22ac      	movs	r2, #172	; 0xac
 80048fa:	5a9b      	ldrh	r3, [r3, r2]
 80048fc:	4a1e      	ldr	r2, [pc, #120]	; (8004978 <processBeacon+0x294>)
 80048fe:	4013      	ands	r3, r2
 8004900:	b299      	uxth	r1, r3
 8004902:	4b1a      	ldr	r3, [pc, #104]	; (800496c <processBeacon+0x288>)
 8004904:	22ac      	movs	r2, #172	; 0xac
 8004906:	5299      	strh	r1, [r3, r2]
            reportEvent(EV_LOST_TSYNC);
 8004908:	200b      	movs	r0, #11
 800490a:	f7fe fa11 	bl	8002d30 <reportEvent>
            return;
 800490e:	e029      	b.n	8004964 <processBeacon+0x280>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8004910:	46c0      	nop			; (mov r8, r8)
        }
    }
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - calcRxWindow(0,DR_BCN);
 8004912:	4a16      	ldr	r2, [pc, #88]	; (800496c <processBeacon+0x288>)
 8004914:	23c8      	movs	r3, #200	; 0xc8
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	58d3      	ldr	r3, [r2, r3]
 800491a:	22fa      	movs	r2, #250	; 0xfa
 800491c:	0392      	lsls	r2, r2, #14
 800491e:	189c      	adds	r4, r3, r2
 8004920:	2103      	movs	r1, #3
 8004922:	2000      	movs	r0, #0
 8004924:	f7fd fbf8 	bl	8002118 <calcRxWindow>
 8004928:	0003      	movs	r3, r0
 800492a:	1ae1      	subs	r1, r4, r3
 800492c:	4a0f      	ldr	r2, [pc, #60]	; (800496c <processBeacon+0x288>)
 800492e:	23c6      	movs	r3, #198	; 0xc6
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	50d1      	str	r1, [r2, r3]
    LMIC.bcnRxsyms = LMIC.rxsyms;    
 8004934:	4b0d      	ldr	r3, [pc, #52]	; (800496c <processBeacon+0x288>)
 8004936:	7c19      	ldrb	r1, [r3, #16]
 8004938:	4a0c      	ldr	r2, [pc, #48]	; (800496c <processBeacon+0x288>)
 800493a:	238a      	movs	r3, #138	; 0x8a
 800493c:	33ff      	adds	r3, #255	; 0xff
 800493e:	54d1      	strb	r1, [r2, r3]
  rev:
#if CFG_us915
    LMIC.bcnChnl = (LMIC.bcnChnl+1) & 7;
#endif
    if( (LMIC.opmode & OP_PINGINI) != 0 )
 8004940:	4b0a      	ldr	r3, [pc, #40]	; (800496c <processBeacon+0x288>)
 8004942:	22ac      	movs	r2, #172	; 0xac
 8004944:	5a9b      	ldrh	r3, [r3, r2]
 8004946:	001a      	movs	r2, r3
 8004948:	2380      	movs	r3, #128	; 0x80
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4013      	ands	r3, r2
 800494e:	d003      	beq.n	8004958 <processBeacon+0x274>
        rxschedInit(&LMIC.ping);  // note: reuses LMIC.frame buffer!
 8004950:	4b0a      	ldr	r3, [pc, #40]	; (800497c <processBeacon+0x298>)
 8004952:	0018      	movs	r0, r3
 8004954:	f7fd fca6 	bl	80022a4 <rxschedInit>
    reportEvent(ev);
 8004958:	2317      	movs	r3, #23
 800495a:	18fb      	adds	r3, r7, r3
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	0018      	movs	r0, r3
 8004960:	f7fe f9e6 	bl	8002d30 <reportEvent>
}
 8004964:	46bd      	mov	sp, r7
 8004966:	b006      	add	sp, #24
 8004968:	bdb0      	pop	{r4, r5, r7, pc}
 800496a:	46c0      	nop			; (mov r8, r8)
 800496c:	200002c4 	.word	0x200002c4
 8004970:	ffff8000 	.word	0xffff8000
 8004974:	00010900 	.word	0x00010900
 8004978:	fffff9dd 	.word	0xfffff9dd
 800497c:	200003f8 	.word	0x200003f8

08004980 <startRxBcn>:


static void startRxBcn (xref2osjob_t osjob) {
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processBeacon);
 8004988:	4b04      	ldr	r3, [pc, #16]	; (800499c <startRxBcn+0x1c>)
 800498a:	4a05      	ldr	r2, [pc, #20]	; (80049a0 <startRxBcn+0x20>)
 800498c:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 800498e:	2002      	movs	r0, #2
 8004990:	f001 fd4c 	bl	800642c <os_radio>
}
 8004994:	46c0      	nop			; (mov r8, r8)
 8004996:	46bd      	mov	sp, r7
 8004998:	b002      	add	sp, #8
 800499a:	bd80      	pop	{r7, pc}
 800499c:	200002c4 	.word	0x200002c4
 80049a0:	080046e5 	.word	0x080046e5

080049a4 <startRxPing>:


static void startRxPing (xref2osjob_t osjob) {
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processPingRx);
 80049ac:	4b04      	ldr	r3, [pc, #16]	; (80049c0 <startRxPing+0x1c>)
 80049ae:	4a05      	ldr	r2, [pc, #20]	; (80049c4 <startRxPing+0x20>)
 80049b0:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 80049b2:	2002      	movs	r0, #2
 80049b4:	f001 fd3a 	bl	800642c <os_radio>
}
 80049b8:	46c0      	nop			; (mov r8, r8)
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b002      	add	sp, #8
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	200002c4 	.word	0x200002c4
 80049c4:	08004489 	.word	0x08004489

080049c8 <engineUpdate>:


// Decide what to do next for the MAC layer of a device
static void engineUpdate (void) {
 80049c8:	b590      	push	{r4, r7, lr}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
    // Check for ongoing state: scan or TX/RX transaction
    if( (LMIC.opmode & (OP_SCAN|OP_TXRXPEND|OP_SHUTDOWN)) != 0 ) 
 80049ce:	4bca      	ldr	r3, [pc, #808]	; (8004cf8 <engineUpdate+0x330>)
 80049d0:	22ac      	movs	r2, #172	; 0xac
 80049d2:	5a9b      	ldrh	r3, [r3, r2]
 80049d4:	001a      	movs	r2, r3
 80049d6:	23c1      	movs	r3, #193	; 0xc1
 80049d8:	4013      	ands	r3, r2
 80049da:	d000      	beq.n	80049de <engineUpdate+0x16>
 80049dc:	e1d9      	b.n	8004d92 <engineUpdate+0x3ca>
        return;

    if( LMIC.devaddr == 0 && (LMIC.opmode & OP_JOINING) == 0 ) {
 80049de:	4ac6      	ldr	r2, [pc, #792]	; (8004cf8 <engineUpdate+0x330>)
 80049e0:	238a      	movs	r3, #138	; 0x8a
 80049e2:	005b      	lsls	r3, r3, #1
 80049e4:	58d3      	ldr	r3, [r2, r3]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <engineUpdate+0x36>
 80049ea:	4bc3      	ldr	r3, [pc, #780]	; (8004cf8 <engineUpdate+0x330>)
 80049ec:	22ac      	movs	r2, #172	; 0xac
 80049ee:	5a9b      	ldrh	r3, [r3, r2]
 80049f0:	001a      	movs	r2, r3
 80049f2:	2304      	movs	r3, #4
 80049f4:	4013      	ands	r3, r2
 80049f6:	d102      	bne.n	80049fe <engineUpdate+0x36>
        LMIC_startJoining();
 80049f8:	f7ff fcf6 	bl	80043e8 <LMIC_startJoining>
        return;
 80049fc:	e1cc      	b.n	8004d98 <engineUpdate+0x3d0>
    }

    ostime_t now    = os_getTime();
 80049fe:	f000 fe63 	bl	80056c8 <os_getTime>
 8004a02:	0003      	movs	r3, r0
 8004a04:	60bb      	str	r3, [r7, #8]
    ostime_t rxtime = 0;
 8004a06:	2300      	movs	r3, #0
 8004a08:	617b      	str	r3, [r7, #20]
    ostime_t txbeg  = 0;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	613b      	str	r3, [r7, #16]

    if( (LMIC.opmode & OP_TRACK) != 0 ) {
 8004a0e:	4bba      	ldr	r3, [pc, #744]	; (8004cf8 <engineUpdate+0x330>)
 8004a10:	22ac      	movs	r2, #172	; 0xac
 8004a12:	5a9b      	ldrh	r3, [r3, r2]
 8004a14:	001a      	movs	r2, r3
 8004a16:	2302      	movs	r3, #2
 8004a18:	4013      	ands	r3, r2
 8004a1a:	d011      	beq.n	8004a40 <engineUpdate+0x78>
        // We are tracking a beacon
        ASSERT( now + RX_RAMPUP - LMIC.bcnRxtime <= 0 );
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	3340      	adds	r3, #64	; 0x40
 8004a20:	001a      	movs	r2, r3
 8004a22:	49b5      	ldr	r1, [pc, #724]	; (8004cf8 <engineUpdate+0x330>)
 8004a24:	23c6      	movs	r3, #198	; 0xc6
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	58cb      	ldr	r3, [r1, r3]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	dd01      	ble.n	8004a34 <engineUpdate+0x6c>
 8004a30:	f7fc ff06 	bl	8001840 <hal_failed>
        rxtime = LMIC.bcnRxtime - RX_RAMPUP;
 8004a34:	4ab0      	ldr	r2, [pc, #704]	; (8004cf8 <engineUpdate+0x330>)
 8004a36:	23c6      	movs	r3, #198	; 0xc6
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	58d3      	ldr	r3, [r2, r3]
 8004a3c:	3b40      	subs	r3, #64	; 0x40
 8004a3e:	617b      	str	r3, [r7, #20]
    }

    if( (LMIC.opmode & (OP_JOINING|OP_REJOIN|OP_TXDATA|OP_POLL)) != 0 ) {
 8004a40:	4bad      	ldr	r3, [pc, #692]	; (8004cf8 <engineUpdate+0x330>)
 8004a42:	22ac      	movs	r2, #172	; 0xac
 8004a44:	5a9b      	ldrh	r3, [r3, r2]
 8004a46:	001a      	movs	r2, r3
 8004a48:	233c      	movs	r3, #60	; 0x3c
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	d100      	bne.n	8004a50 <engineUpdate+0x88>
 8004a4e:	e0f8      	b.n	8004c42 <engineUpdate+0x27a>
        // Need to TX some data...
        // Assuming txChnl points to channel which first becomes available again.
        bit_t jacc = ((LMIC.opmode & (OP_JOINING|OP_REJOIN)) != 0 ? 1 : 0);
 8004a50:	4ba9      	ldr	r3, [pc, #676]	; (8004cf8 <engineUpdate+0x330>)
 8004a52:	22ac      	movs	r2, #172	; 0xac
 8004a54:	5a9b      	ldrh	r3, [r3, r2]
 8004a56:	001a      	movs	r2, r3
 8004a58:	2324      	movs	r3, #36	; 0x24
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	1e5a      	subs	r2, r3, #1
 8004a5e:	4193      	sbcs	r3, r2
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	1dfb      	adds	r3, r7, #7
 8004a64:	701a      	strb	r2, [r3, #0]
        // Find next suitable channel and return availability time
        if( (LMIC.opmode & OP_NEXTCHNL) != 0 ) {
 8004a66:	4ba4      	ldr	r3, [pc, #656]	; (8004cf8 <engineUpdate+0x330>)
 8004a68:	22ac      	movs	r2, #172	; 0xac
 8004a6a:	5a9b      	ldrh	r3, [r3, r2]
 8004a6c:	001a      	movs	r2, r3
 8004a6e:	2380      	movs	r3, #128	; 0x80
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	4013      	ands	r3, r2
 8004a74:	d013      	beq.n	8004a9e <engineUpdate+0xd6>
            txbeg = LMIC.txend = nextTx(now);
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f7fd ffa9 	bl	80029d0 <nextTx>
 8004a7e:	0002      	movs	r2, r0
 8004a80:	4b9d      	ldr	r3, [pc, #628]	; (8004cf8 <engineUpdate+0x330>)
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	4b9c      	ldr	r3, [pc, #624]	; (8004cf8 <engineUpdate+0x330>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	613b      	str	r3, [r7, #16]
            LMIC.opmode &= ~OP_NEXTCHNL;
 8004a8a:	4b9b      	ldr	r3, [pc, #620]	; (8004cf8 <engineUpdate+0x330>)
 8004a8c:	22ac      	movs	r2, #172	; 0xac
 8004a8e:	5a9b      	ldrh	r3, [r3, r2]
 8004a90:	4a9a      	ldr	r2, [pc, #616]	; (8004cfc <engineUpdate+0x334>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	b299      	uxth	r1, r3
 8004a96:	4b98      	ldr	r3, [pc, #608]	; (8004cf8 <engineUpdate+0x330>)
 8004a98:	22ac      	movs	r2, #172	; 0xac
 8004a9a:	5299      	strh	r1, [r3, r2]
 8004a9c:	e002      	b.n	8004aa4 <engineUpdate+0xdc>
        } else {
            txbeg = LMIC.txend;
 8004a9e:	4b96      	ldr	r3, [pc, #600]	; (8004cf8 <engineUpdate+0x330>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	613b      	str	r3, [r7, #16]
        }
        // Delayed TX or waiting for duty cycle?
        if( (LMIC.globalDutyRate != 0 || (LMIC.opmode & OP_RNDTX) != 0)  &&  (txbeg - LMIC.globalDutyAvail) < 0 )
 8004aa4:	4b94      	ldr	r3, [pc, #592]	; (8004cf8 <engineUpdate+0x330>)
 8004aa6:	22a3      	movs	r2, #163	; 0xa3
 8004aa8:	5c9b      	ldrb	r3, [r3, r2]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d107      	bne.n	8004abe <engineUpdate+0xf6>
 8004aae:	4b92      	ldr	r3, [pc, #584]	; (8004cf8 <engineUpdate+0x330>)
 8004ab0:	22ac      	movs	r2, #172	; 0xac
 8004ab2:	5a9b      	ldrh	r3, [r3, r2]
 8004ab4:	001a      	movs	r2, r3
 8004ab6:	2380      	movs	r3, #128	; 0x80
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	4013      	ands	r3, r2
 8004abc:	d009      	beq.n	8004ad2 <engineUpdate+0x10a>
 8004abe:	4b8e      	ldr	r3, [pc, #568]	; (8004cf8 <engineUpdate+0x330>)
 8004ac0:	22a4      	movs	r2, #164	; 0xa4
 8004ac2:	589b      	ldr	r3, [r3, r2]
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	d503      	bpl.n	8004ad2 <engineUpdate+0x10a>
            txbeg = LMIC.globalDutyAvail;
 8004aca:	4b8b      	ldr	r3, [pc, #556]	; (8004cf8 <engineUpdate+0x330>)
 8004acc:	22a4      	movs	r2, #164	; 0xa4
 8004ace:	589b      	ldr	r3, [r3, r2]
 8004ad0:	613b      	str	r3, [r7, #16]
        // If we're tracking a beacon...
        // then make sure TX-RX transaction is complete before beacon
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 8004ad2:	4b89      	ldr	r3, [pc, #548]	; (8004cf8 <engineUpdate+0x330>)
 8004ad4:	22ac      	movs	r2, #172	; 0xac
 8004ad6:	5a9b      	ldrh	r3, [r3, r2]
 8004ad8:	001a      	movs	r2, r3
 8004ada:	2302      	movs	r3, #2
 8004adc:	4013      	ands	r3, r2
 8004ade:	d017      	beq.n	8004b10 <engineUpdate+0x148>
            txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks) - rxtime > 0 ) {
 8004ae0:	1dfb      	adds	r3, r7, #7
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <engineUpdate+0x124>
 8004ae8:	4b85      	ldr	r3, [pc, #532]	; (8004d00 <engineUpdate+0x338>)
 8004aea:	e000      	b.n	8004aee <engineUpdate+0x126>
 8004aec:	4b85      	ldr	r3, [pc, #532]	; (8004d04 <engineUpdate+0x33c>)
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	189a      	adds	r2, r3, r2
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	1ad3      	subs	r3, r2, r3
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	dd0a      	ble.n	8004b10 <engineUpdate+0x148>
            // Not enough time to complete TX-RX before beacon - postpone after beacon.
            // In order to avoid clustering of postponed TX right after beacon randomize start!
            txDelay(rxtime + BCN_RESERVE_osticks, 16);
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	4a82      	ldr	r2, [pc, #520]	; (8004d08 <engineUpdate+0x340>)
 8004afe:	4694      	mov	ip, r2
 8004b00:	4463      	add	r3, ip
 8004b02:	2110      	movs	r1, #16
 8004b04:	0018      	movs	r0, r3
 8004b06:	f7fd fcfd 	bl	8002504 <txDelay>
            txbeg = 0;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	613b      	str	r3, [r7, #16]
            goto checkrx;
 8004b0e:	e0a1      	b.n	8004c54 <engineUpdate+0x28c>
        }
        // Earliest possible time vs overhead to setup radio
        if( txbeg - (now + TX_RAMPUP) < 0 ) {
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	3340      	adds	r3, #64	; 0x40
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	d400      	bmi.n	8004b1c <engineUpdate+0x154>
 8004b1a:	e083      	b.n	8004c24 <engineUpdate+0x25c>
            // We could send right now!
        txbeg = now;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	613b      	str	r3, [r7, #16]
            dr_t txdr = (dr_t)LMIC.datarate;
 8004b20:	230f      	movs	r3, #15
 8004b22:	18fb      	adds	r3, r7, r3
 8004b24:	4a74      	ldr	r2, [pc, #464]	; (8004cf8 <engineUpdate+0x330>)
 8004b26:	21b0      	movs	r1, #176	; 0xb0
 8004b28:	5c52      	ldrb	r2, [r2, r1]
 8004b2a:	701a      	strb	r2, [r3, #0]
            if( jacc ) {
 8004b2c:	1dfb      	adds	r3, r7, #7
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d026      	beq.n	8004b82 <engineUpdate+0x1ba>
                u1_t ftype;
                if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 8004b34:	4b70      	ldr	r3, [pc, #448]	; (8004cf8 <engineUpdate+0x330>)
 8004b36:	22ac      	movs	r2, #172	; 0xac
 8004b38:	5a9b      	ldrh	r3, [r3, r2]
 8004b3a:	001a      	movs	r2, r3
 8004b3c:	2320      	movs	r3, #32
 8004b3e:	4013      	ands	r3, r2
 8004b40:	d011      	beq.n	8004b66 <engineUpdate+0x19e>
                    txdr = lowerDR(txdr, LMIC.rejoinCnt);
 8004b42:	4b6d      	ldr	r3, [pc, #436]	; (8004cf8 <engineUpdate+0x330>)
 8004b44:	22b2      	movs	r2, #178	; 0xb2
 8004b46:	5c9a      	ldrb	r2, [r3, r2]
 8004b48:	230f      	movs	r3, #15
 8004b4a:	18fc      	adds	r4, r7, r3
 8004b4c:	18fb      	adds	r3, r7, r3
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	0011      	movs	r1, r2
 8004b52:	0018      	movs	r0, r3
 8004b54:	f7fc ff72 	bl	8001a3c <lowerDR>
 8004b58:	0003      	movs	r3, r0
 8004b5a:	7023      	strb	r3, [r4, #0]
                    ftype = HDR_FTYPE_REJOIN;
 8004b5c:	230e      	movs	r3, #14
 8004b5e:	18fb      	adds	r3, r7, r3
 8004b60:	22c0      	movs	r2, #192	; 0xc0
 8004b62:	701a      	strb	r2, [r3, #0]
 8004b64:	e003      	b.n	8004b6e <engineUpdate+0x1a6>
                } else {
                    ftype = HDR_FTYPE_JREQ;
 8004b66:	230e      	movs	r3, #14
 8004b68:	18fb      	adds	r3, r7, r3
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	701a      	strb	r2, [r3, #0]
                }
                buildJoinRequest(ftype);
 8004b6e:	230e      	movs	r3, #14
 8004b70:	18fb      	adds	r3, r7, r3
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	0018      	movs	r0, r3
 8004b76:	f7ff fbf1 	bl	800435c <buildJoinRequest>
                LMIC.osjob.func = FUNC_ADDR(jreqDone);
 8004b7a:	4b5f      	ldr	r3, [pc, #380]	; (8004cf8 <engineUpdate+0x330>)
 8004b7c:	4a63      	ldr	r2, [pc, #396]	; (8004d0c <engineUpdate+0x344>)
 8004b7e:	61da      	str	r2, [r3, #28]
 8004b80:	e020      	b.n	8004bc4 <engineUpdate+0x1fc>
            } else {
                if( LMIC.seqnoDn >= 0xFFFFFF80 ) {
 8004b82:	4a5d      	ldr	r2, [pc, #372]	; (8004cf8 <engineUpdate+0x330>)
 8004b84:	238c      	movs	r3, #140	; 0x8c
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	58d3      	ldr	r3, [r2, r3]
 8004b8a:	3381      	adds	r3, #129	; 0x81
 8004b8c:	d909      	bls.n	8004ba2 <engineUpdate+0x1da>
                                        e_.eui    = MAIN::CDEV->getEui(),
                                        e_.info   = LMIC.seqnoDn, 
                                        e_.info2  = 0));
                    // Device has to react! NWK will not roll over and just stop sending.
                    // Thus, we have N frames to detect a possible lock up.
                  reset:
 8004b8e:	46c0      	nop			; (mov r8, r8)
 8004b90:	e000      	b.n	8004b94 <engineUpdate+0x1cc>
                    EV(specCond, ERR, (e_.reason = EV::specCond_t::UPSEQNO_ROLL_OVER,
                                       e_.eui    = MAIN::CDEV->getEui(),
                                       e_.info2  = LMIC.seqnoUp));
                    // Do not run RESET event callback from here!
                    // App code might do some stuff after send unaware of RESET.
                    goto reset;
 8004b92:	46c0      	nop			; (mov r8, r8)
                    os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
 8004b94:	4a5e      	ldr	r2, [pc, #376]	; (8004d10 <engineUpdate+0x348>)
 8004b96:	4b5f      	ldr	r3, [pc, #380]	; (8004d14 <engineUpdate+0x34c>)
 8004b98:	0011      	movs	r1, r2
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	f000 fdda 	bl	8005754 <os_setCallback>
                    return;
 8004ba0:	e0fa      	b.n	8004d98 <engineUpdate+0x3d0>
                if( (LMIC.txCnt==0 && LMIC.seqnoUp == 0xFFFFFFFF) ) {
 8004ba2:	4a55      	ldr	r2, [pc, #340]	; (8004cf8 <engineUpdate+0x330>)
 8004ba4:	23a2      	movs	r3, #162	; 0xa2
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	5cd3      	ldrb	r3, [r2, r3]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d105      	bne.n	8004bba <engineUpdate+0x1f2>
 8004bae:	4a52      	ldr	r2, [pc, #328]	; (8004cf8 <engineUpdate+0x330>)
 8004bb0:	238e      	movs	r3, #142	; 0x8e
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	58d3      	ldr	r3, [r2, r3]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	d0eb      	beq.n	8004b92 <engineUpdate+0x1ca>
                }
                buildDataFrame();
 8004bba:	f7ff f8df 	bl	8003d7c <buildDataFrame>
                LMIC.osjob.func = FUNC_ADDR(updataDone);
 8004bbe:	4b4e      	ldr	r3, [pc, #312]	; (8004cf8 <engineUpdate+0x330>)
 8004bc0:	4a55      	ldr	r2, [pc, #340]	; (8004d18 <engineUpdate+0x350>)
 8004bc2:	61da      	str	r2, [r3, #28]
            }
            LMIC.rps    = setCr(updr2rps(txdr), (cr_t)LMIC.errcr);
 8004bc4:	240f      	movs	r4, #15
 8004bc6:	193b      	adds	r3, r7, r4
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	0018      	movs	r0, r3
 8004bcc:	f7fc fede 	bl	800198c <updr2rps>
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	4b48      	ldr	r3, [pc, #288]	; (8004cf8 <engineUpdate+0x330>)
 8004bd6:	22b1      	movs	r2, #177	; 0xb1
 8004bd8:	5c9b      	ldrb	r3, [r3, r2]
 8004bda:	0019      	movs	r1, r3
 8004bdc:	f7fc fe6b 	bl	80018b6 <setCr>
 8004be0:	0003      	movs	r3, r0
 8004be2:	001a      	movs	r2, r3
 8004be4:	4b44      	ldr	r3, [pc, #272]	; (8004cf8 <engineUpdate+0x330>)
 8004be6:	81da      	strh	r2, [r3, #14]
            LMIC.dndr   = txdr;  // carry TX datarate (can be != LMIC.datarate) over to txDone/setupRx1
 8004be8:	4b43      	ldr	r3, [pc, #268]	; (8004cf8 <engineUpdate+0x330>)
 8004bea:	193a      	adds	r2, r7, r4
 8004bec:	7812      	ldrb	r2, [r2, #0]
 8004bee:	745a      	strb	r2, [r3, #17]
            LMIC.opmode = (LMIC.opmode & ~(OP_POLL|OP_RNDTX)) | OP_TXRXPEND | OP_NEXTCHNL;
 8004bf0:	4b41      	ldr	r3, [pc, #260]	; (8004cf8 <engineUpdate+0x330>)
 8004bf2:	22ac      	movs	r2, #172	; 0xac
 8004bf4:	5a9b      	ldrh	r3, [r3, r2]
 8004bf6:	b21b      	sxth	r3, r3
 8004bf8:	4a48      	ldr	r2, [pc, #288]	; (8004d1c <engineUpdate+0x354>)
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	b21b      	sxth	r3, r3
 8004bfe:	2288      	movs	r2, #136	; 0x88
 8004c00:	0112      	lsls	r2, r2, #4
 8004c02:	4313      	orrs	r3, r2
 8004c04:	b21b      	sxth	r3, r3
 8004c06:	b299      	uxth	r1, r3
 8004c08:	4b3b      	ldr	r3, [pc, #236]	; (8004cf8 <engineUpdate+0x330>)
 8004c0a:	22ac      	movs	r2, #172	; 0xac
 8004c0c:	5299      	strh	r1, [r3, r2]
            updateTx(txbeg);
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	0018      	movs	r0, r3
 8004c12:	f7fd fe91 	bl	8002938 <updateTx>
            reportEvent(EV_TXSTART);
 8004c16:	2011      	movs	r0, #17
 8004c18:	f7fe f88a 	bl	8002d30 <reportEvent>
            os_radio(RADIO_TX);
 8004c1c:	2001      	movs	r0, #1
 8004c1e:	f001 fc05 	bl	800642c <os_radio>
            return;
 8004c22:	e0b9      	b.n	8004d98 <engineUpdate+0x3d0>
        }
        // Cannot yet TX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 8004c24:	4b34      	ldr	r3, [pc, #208]	; (8004cf8 <engineUpdate+0x330>)
 8004c26:	22ac      	movs	r2, #172	; 0xac
 8004c28:	5a9b      	ldrh	r3, [r3, r2]
 8004c2a:	001a      	movs	r2, r3
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	4013      	ands	r3, r2
 8004c30:	d100      	bne.n	8004c34 <engineUpdate+0x26c>
 8004c32:	e0a0      	b.n	8004d76 <engineUpdate+0x3ae>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
        // Consider RX tasks
        if( txbeg == 0 ) // zero indicates no TX pending
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10c      	bne.n	8004c54 <engineUpdate+0x28c>
            txbeg += 1;  // TX delayed by one tick (insignificant amount of time)
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	613b      	str	r3, [r7, #16]
 8004c40:	e008      	b.n	8004c54 <engineUpdate+0x28c>
    } else {
        // No TX pending - no scheduled RX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 8004c42:	4b2d      	ldr	r3, [pc, #180]	; (8004cf8 <engineUpdate+0x330>)
 8004c44:	22ac      	movs	r2, #172	; 0xac
 8004c46:	5a9b      	ldrh	r3, [r3, r2]
 8004c48:	001a      	movs	r2, r3
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	d100      	bne.n	8004c52 <engineUpdate+0x28a>
 8004c50:	e0a1      	b.n	8004d96 <engineUpdate+0x3ce>
            return;
    }

    // Are we pingable?
  checkrx:
 8004c52:	46c0      	nop			; (mov r8, r8)
    if( (LMIC.opmode & OP_PINGINI) != 0 ) {
 8004c54:	4b28      	ldr	r3, [pc, #160]	; (8004cf8 <engineUpdate+0x330>)
 8004c56:	22ac      	movs	r2, #172	; 0xac
 8004c58:	5a9b      	ldrh	r3, [r3, r2]
 8004c5a:	001a      	movs	r2, r3
 8004c5c:	2380      	movs	r3, #128	; 0x80
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4013      	ands	r3, r2
 8004c62:	d061      	beq.n	8004d28 <engineUpdate+0x360>
        // One more RX slot in this beacon period?
        if( rxschedNext(&LMIC.ping, now+RX_RAMPUP) ) {
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	3340      	adds	r3, #64	; 0x40
 8004c68:	001a      	movs	r2, r3
 8004c6a:	4b2d      	ldr	r3, [pc, #180]	; (8004d20 <engineUpdate+0x358>)
 8004c6c:	0011      	movs	r1, r2
 8004c6e:	0018      	movs	r0, r3
 8004c70:	f7fd fba2 	bl	80023b8 <rxschedNext>
 8004c74:	1e03      	subs	r3, r0, #0
 8004c76:	d057      	beq.n	8004d28 <engineUpdate+0x360>
            if( txbeg != 0  &&  (txbeg - LMIC.ping.rxtime) < 0 )
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <engineUpdate+0x2c6>
 8004c7e:	4a1e      	ldr	r2, [pc, #120]	; (8004cf8 <engineUpdate+0x330>)
 8004c80:	239e      	movs	r3, #158	; 0x9e
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	58d3      	ldr	r3, [r2, r3]
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	d500      	bpl.n	8004c8e <engineUpdate+0x2c6>
 8004c8c:	e075      	b.n	8004d7a <engineUpdate+0x3b2>
                goto txdelay;
            LMIC.rxsyms  = LMIC.ping.rxsyms;
 8004c8e:	4a1a      	ldr	r2, [pc, #104]	; (8004cf8 <engineUpdate+0x330>)
 8004c90:	2338      	movs	r3, #56	; 0x38
 8004c92:	33ff      	adds	r3, #255	; 0xff
 8004c94:	5cd2      	ldrb	r2, [r2, r3]
 8004c96:	4b18      	ldr	r3, [pc, #96]	; (8004cf8 <engineUpdate+0x330>)
 8004c98:	741a      	strb	r2, [r3, #16]
            LMIC.rxtime  = LMIC.ping.rxtime;
 8004c9a:	4a17      	ldr	r2, [pc, #92]	; (8004cf8 <engineUpdate+0x330>)
 8004c9c:	239e      	movs	r3, #158	; 0x9e
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	58d2      	ldr	r2, [r2, r3]
 8004ca2:	4b15      	ldr	r3, [pc, #84]	; (8004cf8 <engineUpdate+0x330>)
 8004ca4:	605a      	str	r2, [r3, #4]
            LMIC.freq    = LMIC.ping.freq;
 8004ca6:	4a14      	ldr	r2, [pc, #80]	; (8004cf8 <engineUpdate+0x330>)
 8004ca8:	23a0      	movs	r3, #160	; 0xa0
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	58d2      	ldr	r2, [r2, r3]
 8004cae:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <engineUpdate+0x330>)
 8004cb0:	609a      	str	r2, [r3, #8]
            LMIC.rps     = dndr2rps(LMIC.ping.dr);
 8004cb2:	4a11      	ldr	r2, [pc, #68]	; (8004cf8 <engineUpdate+0x330>)
 8004cb4:	239a      	movs	r3, #154	; 0x9a
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	5cd3      	ldrb	r3, [r2, r3]
 8004cba:	0018      	movs	r0, r3
 8004cbc:	f7fc fe78 	bl	80019b0 <dndr2rps>
 8004cc0:	0003      	movs	r3, r0
 8004cc2:	001a      	movs	r2, r3
 8004cc4:	4b0c      	ldr	r3, [pc, #48]	; (8004cf8 <engineUpdate+0x330>)
 8004cc6:	81da      	strh	r2, [r3, #14]
            LMIC.dataLen = 0;
 8004cc8:	4a0b      	ldr	r2, [pc, #44]	; (8004cf8 <engineUpdate+0x330>)
 8004cca:	2348      	movs	r3, #72	; 0x48
 8004ccc:	33ff      	adds	r3, #255	; 0xff
 8004cce:	2100      	movs	r1, #0
 8004cd0:	54d1      	strb	r1, [r2, r3]
            ASSERT(LMIC.rxtime - now+RX_RAMPUP >= 0 );
 8004cd2:	4b09      	ldr	r3, [pc, #36]	; (8004cf8 <engineUpdate+0x330>)
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	3340      	adds	r3, #64	; 0x40
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	da01      	bge.n	8004ce4 <engineUpdate+0x31c>
 8004ce0:	f7fc fdae 	bl	8001840 <hal_failed>
            os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, FUNC_ADDR(startRxPing));
 8004ce4:	4b04      	ldr	r3, [pc, #16]	; (8004cf8 <engineUpdate+0x330>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	3b40      	subs	r3, #64	; 0x40
 8004cea:	0019      	movs	r1, r3
 8004cec:	4a0d      	ldr	r2, [pc, #52]	; (8004d24 <engineUpdate+0x35c>)
 8004cee:	4b09      	ldr	r3, [pc, #36]	; (8004d14 <engineUpdate+0x34c>)
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	f000 fd57 	bl	80057a4 <os_setTimedCallback>
            return;
 8004cf6:	e04f      	b.n	8004d98 <engineUpdate+0x3d0>
 8004cf8:	200002c4 	.word	0x200002c4
 8004cfc:	fffff7ff 	.word	0xfffff7ff
 8004d00:	00046500 	.word	0x00046500
 8004d04:	0002ee00 	.word	0x0002ee00
 8004d08:	00010900 	.word	0x00010900
 8004d0c:	08003c21 	.word	0x08003c21
 8004d10:	08002d53 	.word	0x08002d53
 8004d14:	200002d8 	.word	0x200002d8
 8004d18:	08003d41 	.word	0x08003d41
 8004d1c:	fffff66f 	.word	0xfffff66f
 8004d20:	200003f8 	.word	0x200003f8
 8004d24:	080049a5 	.word	0x080049a5
        }
        // no - just wait for the beacon
    }

    if( txbeg != 0  &&  (txbeg - rxtime) < 0 )
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <engineUpdate+0x36e>
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	d423      	bmi.n	8004d7e <engineUpdate+0x3b6>
        goto txdelay;

    setBcnRxParams();
 8004d36:	f7fd ff23 	bl	8002b80 <setBcnRxParams>
    LMIC.rxsyms = LMIC.bcnRxsyms;
 8004d3a:	4a19      	ldr	r2, [pc, #100]	; (8004da0 <engineUpdate+0x3d8>)
 8004d3c:	238a      	movs	r3, #138	; 0x8a
 8004d3e:	33ff      	adds	r3, #255	; 0xff
 8004d40:	5cd2      	ldrb	r2, [r2, r3]
 8004d42:	4b17      	ldr	r3, [pc, #92]	; (8004da0 <engineUpdate+0x3d8>)
 8004d44:	741a      	strb	r2, [r3, #16]
    LMIC.rxtime = LMIC.bcnRxtime;
 8004d46:	4a16      	ldr	r2, [pc, #88]	; (8004da0 <engineUpdate+0x3d8>)
 8004d48:	23c6      	movs	r3, #198	; 0xc6
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	58d2      	ldr	r2, [r2, r3]
 8004d4e:	4b14      	ldr	r3, [pc, #80]	; (8004da0 <engineUpdate+0x3d8>)
 8004d50:	605a      	str	r2, [r3, #4]
    if( now - rxtime >= 0 ) {
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	d406      	bmi.n	8004d68 <engineUpdate+0x3a0>
        LMIC.osjob.func = FUNC_ADDR(processBeacon);
 8004d5a:	4b11      	ldr	r3, [pc, #68]	; (8004da0 <engineUpdate+0x3d8>)
 8004d5c:	4a11      	ldr	r2, [pc, #68]	; (8004da4 <engineUpdate+0x3dc>)
 8004d5e:	61da      	str	r2, [r3, #28]
        os_radio(RADIO_RX);
 8004d60:	2002      	movs	r0, #2
 8004d62:	f001 fb63 	bl	800642c <os_radio>
        return;
 8004d66:	e017      	b.n	8004d98 <engineUpdate+0x3d0>
    }
    os_setTimedCallback(&LMIC.osjob, rxtime, FUNC_ADDR(startRxBcn));
 8004d68:	4a0f      	ldr	r2, [pc, #60]	; (8004da8 <engineUpdate+0x3e0>)
 8004d6a:	6979      	ldr	r1, [r7, #20]
 8004d6c:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <engineUpdate+0x3e4>)
 8004d6e:	0018      	movs	r0, r3
 8004d70:	f000 fd18 	bl	80057a4 <os_setTimedCallback>
    return;
 8004d74:	e010      	b.n	8004d98 <engineUpdate+0x3d0>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	e002      	b.n	8004d80 <engineUpdate+0x3b8>
                goto txdelay;
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	e000      	b.n	8004d80 <engineUpdate+0x3b8>
        goto txdelay;
 8004d7e:	46c0      	nop			; (mov r8, r8)
  txdelay:
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	3b40      	subs	r3, #64	; 0x40
 8004d84:	0019      	movs	r1, r3
 8004d86:	4a0a      	ldr	r2, [pc, #40]	; (8004db0 <engineUpdate+0x3e8>)
 8004d88:	4b08      	ldr	r3, [pc, #32]	; (8004dac <engineUpdate+0x3e4>)
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	f000 fd0a 	bl	80057a4 <os_setTimedCallback>
 8004d90:	e002      	b.n	8004d98 <engineUpdate+0x3d0>
        return;
 8004d92:	46c0      	nop			; (mov r8, r8)
 8004d94:	e000      	b.n	8004d98 <engineUpdate+0x3d0>
            return;
 8004d96:	46c0      	nop			; (mov r8, r8)
}
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	b007      	add	sp, #28
 8004d9c:	bd90      	pop	{r4, r7, pc}
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	200002c4 	.word	0x200002c4
 8004da4:	080046e5 	.word	0x080046e5
 8004da8:	08004981 	.word	0x08004981
 8004dac:	200002d8 	.word	0x200002d8
 8004db0:	08002d1d 	.word	0x08002d1d

08004db4 <LMIC_reset>:
    os_radio(RADIO_RST);
    LMIC.opmode |= OP_SHUTDOWN;
}


void LMIC_reset (void) {
 8004db4:	b5b0      	push	{r4, r5, r7, lr}
 8004db6:	af00      	add	r7, sp, #0
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = EV_RESET));
    os_radio(RADIO_RST);
 8004db8:	2000      	movs	r0, #0
 8004dba:	f001 fb37 	bl	800642c <os_radio>
    os_clearCallback(&LMIC.osjob);
 8004dbe:	4b26      	ldr	r3, [pc, #152]	; (8004e58 <LMIC_reset+0xa4>)
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	f000 fca7 	bl	8005714 <os_clearCallback>

    os_clearMem((xref2u1_t)&LMIC,SIZEOFEXPR(LMIC));
 8004dc6:	23d6      	movs	r3, #214	; 0xd6
 8004dc8:	005a      	lsls	r2, r3, #1
 8004dca:	4b24      	ldr	r3, [pc, #144]	; (8004e5c <LMIC_reset+0xa8>)
 8004dcc:	2100      	movs	r1, #0
 8004dce:	0018      	movs	r0, r3
 8004dd0:	f006 fc03 	bl	800b5da <memset>
    LMIC.devaddr      =  0;
 8004dd4:	4a21      	ldr	r2, [pc, #132]	; (8004e5c <LMIC_reset+0xa8>)
 8004dd6:	238a      	movs	r3, #138	; 0x8a
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	2100      	movs	r1, #0
 8004ddc:	50d1      	str	r1, [r2, r3]
    LMIC.devNonce     =  os_getRndU2();
 8004dde:	f001 fa0b 	bl	80061f8 <radio_rand1>
 8004de2:	0003      	movs	r3, r0
 8004de4:	021b      	lsls	r3, r3, #8
 8004de6:	b21c      	sxth	r4, r3
 8004de8:	f001 fa06 	bl	80061f8 <radio_rand1>
 8004dec:	0003      	movs	r3, r0
 8004dee:	b21b      	sxth	r3, r3
 8004df0:	4323      	orrs	r3, r4
 8004df2:	b21b      	sxth	r3, r3
 8004df4:	b299      	uxth	r1, r3
 8004df6:	4b19      	ldr	r3, [pc, #100]	; (8004e5c <LMIC_reset+0xa8>)
 8004df8:	22f2      	movs	r2, #242	; 0xf2
 8004dfa:	5299      	strh	r1, [r3, r2]
    LMIC.opmode       =  OP_NONE;
 8004dfc:	4b17      	ldr	r3, [pc, #92]	; (8004e5c <LMIC_reset+0xa8>)
 8004dfe:	22ac      	movs	r2, #172	; 0xac
 8004e00:	2100      	movs	r1, #0
 8004e02:	5299      	strh	r1, [r3, r2]
    LMIC.errcr        =  CR_4_5;
 8004e04:	4b15      	ldr	r3, [pc, #84]	; (8004e5c <LMIC_reset+0xa8>)
 8004e06:	22b1      	movs	r2, #177	; 0xb1
 8004e08:	2100      	movs	r1, #0
 8004e0a:	5499      	strb	r1, [r3, r2]
    LMIC.adrEnabled   =  FCT_ADREN;
 8004e0c:	4a13      	ldr	r2, [pc, #76]	; (8004e5c <LMIC_reset+0xa8>)
 8004e0e:	2328      	movs	r3, #40	; 0x28
 8004e10:	33ff      	adds	r3, #255	; 0xff
 8004e12:	2180      	movs	r1, #128	; 0x80
 8004e14:	54d1      	strb	r1, [r2, r3]
    LMIC.dn2Dr        =  DR_DNW2;   // we need this for 2nd DN window of join accept
 8004e16:	4a11      	ldr	r2, [pc, #68]	; (8004e5c <LMIC_reset+0xa8>)
 8004e18:	232c      	movs	r3, #44	; 0x2c
 8004e1a:	33ff      	adds	r3, #255	; 0xff
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	54d1      	strb	r1, [r2, r3]
    LMIC.dn2Freq      =  FREQ_DNW2; // ditto
 8004e20:	4a0e      	ldr	r2, [pc, #56]	; (8004e5c <LMIC_reset+0xa8>)
 8004e22:	2396      	movs	r3, #150	; 0x96
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	490e      	ldr	r1, [pc, #56]	; (8004e60 <LMIC_reset+0xac>)
 8004e28:	50d1      	str	r1, [r2, r3]
    LMIC.rxDelay      =  DELAY_DNW1;
 8004e2a:	4a0c      	ldr	r2, [pc, #48]	; (8004e5c <LMIC_reset+0xa8>)
 8004e2c:	2324      	movs	r3, #36	; 0x24
 8004e2e:	33ff      	adds	r3, #255	; 0xff
 8004e30:	2101      	movs	r1, #1
 8004e32:	54d1      	strb	r1, [r2, r3]
    LMIC.ping.freq    =  FREQ_PING; // defaults for ping
 8004e34:	4a09      	ldr	r2, [pc, #36]	; (8004e5c <LMIC_reset+0xa8>)
 8004e36:	23a0      	movs	r3, #160	; 0xa0
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	4909      	ldr	r1, [pc, #36]	; (8004e60 <LMIC_reset+0xac>)
 8004e3c:	50d1      	str	r1, [r2, r3]
    LMIC.ping.dr      =  DR_PING;   // ditto
 8004e3e:	4a07      	ldr	r2, [pc, #28]	; (8004e5c <LMIC_reset+0xa8>)
 8004e40:	239a      	movs	r3, #154	; 0x9a
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	2103      	movs	r1, #3
 8004e46:	54d1      	strb	r1, [r2, r3]
    LMIC.ping.intvExp =  0xFF;
 8004e48:	4a04      	ldr	r2, [pc, #16]	; (8004e5c <LMIC_reset+0xa8>)
 8004e4a:	2336      	movs	r3, #54	; 0x36
 8004e4c:	33ff      	adds	r3, #255	; 0xff
 8004e4e:	21ff      	movs	r1, #255	; 0xff
 8004e50:	54d1      	strb	r1, [r2, r3]
    DO_DEVDB(LMIC.dn2Dr,        dn2Dr);
    DO_DEVDB(LMIC.dn2Freq,      dn2Freq);
    DO_DEVDB(LMIC.ping.freq,    pingFreq);
    DO_DEVDB(LMIC.ping.dr,      pingDr);
    DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
}
 8004e52:	46c0      	nop			; (mov r8, r8)
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bdb0      	pop	{r4, r5, r7, pc}
 8004e58:	200002d8 	.word	0x200002d8
 8004e5c:	200002c4 	.word	0x200002c4
 8004e60:	33d3e608 	.word	0x33d3e608

08004e64 <LMIC_init>:


void LMIC_init (void) {
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
    LMIC.opmode = OP_SHUTDOWN;
 8004e68:	4b03      	ldr	r3, [pc, #12]	; (8004e78 <LMIC_init+0x14>)
 8004e6a:	22ac      	movs	r2, #172	; 0xac
 8004e6c:	2140      	movs	r1, #64	; 0x40
 8004e6e:	5299      	strh	r1, [r3, r2]
}
 8004e70:	46c0      	nop			; (mov r8, r8)
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	46c0      	nop			; (mov r8, r8)
 8004e78:	200002c4 	.word	0x200002c4

08004e7c <LMIC_setTxData>:
    os_radio(RADIO_RST);
    engineUpdate();
}


void LMIC_setTxData (void) {
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
    LMIC.opmode |= OP_TXDATA;
 8004e80:	4b0c      	ldr	r3, [pc, #48]	; (8004eb4 <LMIC_setTxData+0x38>)
 8004e82:	22ac      	movs	r2, #172	; 0xac
 8004e84:	5a9b      	ldrh	r3, [r3, r2]
 8004e86:	2208      	movs	r2, #8
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	b299      	uxth	r1, r3
 8004e8c:	4b09      	ldr	r3, [pc, #36]	; (8004eb4 <LMIC_setTxData+0x38>)
 8004e8e:	22ac      	movs	r2, #172	; 0xac
 8004e90:	5299      	strh	r1, [r3, r2]
    if( (LMIC.opmode & OP_JOINING) == 0 )
 8004e92:	4b08      	ldr	r3, [pc, #32]	; (8004eb4 <LMIC_setTxData+0x38>)
 8004e94:	22ac      	movs	r2, #172	; 0xac
 8004e96:	5a9b      	ldrh	r3, [r3, r2]
 8004e98:	001a      	movs	r2, r3
 8004e9a:	2304      	movs	r3, #4
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d104      	bne.n	8004eaa <LMIC_setTxData+0x2e>
        LMIC.txCnt = 0;             // cancel any ongoing TX/RX retries
 8004ea0:	4a04      	ldr	r2, [pc, #16]	; (8004eb4 <LMIC_setTxData+0x38>)
 8004ea2:	23a2      	movs	r3, #162	; 0xa2
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	54d1      	strb	r1, [r2, r3]
    engineUpdate();
 8004eaa:	f7ff fd8d 	bl	80049c8 <engineUpdate>
}
 8004eae:	46c0      	nop			; (mov r8, r8)
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	200002c4 	.word	0x200002c4

08004eb8 <LMIC_setTxData2>:


//
int LMIC_setTxData2 (u1_t port, xref2u1_t data, u1_t dlen, u1_t confirmed) {
 8004eb8:	b590      	push	{r4, r7, lr}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	0004      	movs	r4, r0
 8004ec0:	6039      	str	r1, [r7, #0]
 8004ec2:	0010      	movs	r0, r2
 8004ec4:	0019      	movs	r1, r3
 8004ec6:	1dfb      	adds	r3, r7, #7
 8004ec8:	1c22      	adds	r2, r4, #0
 8004eca:	701a      	strb	r2, [r3, #0]
 8004ecc:	1dbb      	adds	r3, r7, #6
 8004ece:	1c02      	adds	r2, r0, #0
 8004ed0:	701a      	strb	r2, [r3, #0]
 8004ed2:	1d7b      	adds	r3, r7, #5
 8004ed4:	1c0a      	adds	r2, r1, #0
 8004ed6:	701a      	strb	r2, [r3, #0]
    if( dlen > SIZEOFEXPR(LMIC.pendTxData) )
 8004ed8:	1dbb      	adds	r3, r7, #6
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b34      	cmp	r3, #52	; 0x34
 8004ede:	d902      	bls.n	8004ee6 <LMIC_setTxData2+0x2e>
        return -2;
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	425b      	negs	r3, r3
 8004ee4:	e01b      	b.n	8004f1e <LMIC_setTxData2+0x66>
    if( data != (xref2u1_t)0 )
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d006      	beq.n	8004efa <LMIC_setTxData2+0x42>
        os_copyMem(LMIC.pendTxData, data, dlen);
 8004eec:	1dbb      	adds	r3, r7, #6
 8004eee:	781a      	ldrb	r2, [r3, #0]
 8004ef0:	6839      	ldr	r1, [r7, #0]
 8004ef2:	4b0d      	ldr	r3, [pc, #52]	; (8004f28 <LMIC_setTxData2+0x70>)
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f006 fb67 	bl	800b5c8 <memcpy>
    LMIC.pendTxConf = confirmed;
 8004efa:	4b0c      	ldr	r3, [pc, #48]	; (8004f2c <LMIC_setTxData2+0x74>)
 8004efc:	1d7a      	adds	r2, r7, #5
 8004efe:	21bb      	movs	r1, #187	; 0xbb
 8004f00:	7812      	ldrb	r2, [r2, #0]
 8004f02:	545a      	strb	r2, [r3, r1]
    LMIC.pendTxPort = port;
 8004f04:	4b09      	ldr	r3, [pc, #36]	; (8004f2c <LMIC_setTxData2+0x74>)
 8004f06:	1dfa      	adds	r2, r7, #7
 8004f08:	21ba      	movs	r1, #186	; 0xba
 8004f0a:	7812      	ldrb	r2, [r2, #0]
 8004f0c:	545a      	strb	r2, [r3, r1]
    LMIC.pendTxLen  = dlen;
 8004f0e:	4b07      	ldr	r3, [pc, #28]	; (8004f2c <LMIC_setTxData2+0x74>)
 8004f10:	1dba      	adds	r2, r7, #6
 8004f12:	21bc      	movs	r1, #188	; 0xbc
 8004f14:	7812      	ldrb	r2, [r2, #0]
 8004f16:	545a      	strb	r2, [r3, r1]
    LMIC_setTxData();
 8004f18:	f7ff ffb0 	bl	8004e7c <LMIC_setTxData>
    return 0;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	0018      	movs	r0, r3
 8004f20:	46bd      	mov	sp, r7
 8004f22:	b003      	add	sp, #12
 8004f24:	bd90      	pop	{r4, r7, pc}
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	20000381 	.word	0x20000381
 8004f2c:	200002c4 	.word	0x200002c4

08004f30 <os_getArtEui>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// provide application router ID (8 bytes, LSBF)
void os_getArtEui (u1_t* buf) {
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
    memcpy(buf, APPEUI, 8);
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	4b05      	ldr	r3, [pc, #20]	; (8004f50 <os_getArtEui+0x20>)
 8004f3c:	0010      	movs	r0, r2
 8004f3e:	0019      	movs	r1, r3
 8004f40:	2308      	movs	r3, #8
 8004f42:	001a      	movs	r2, r3
 8004f44:	f006 fb40 	bl	800b5c8 <memcpy>
}
 8004f48:	46c0      	nop			; (mov r8, r8)
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	b002      	add	sp, #8
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	0800ccd0 	.word	0x0800ccd0

08004f54 <os_getDevEui>:

// provide device ID (8 bytes, LSBF)
void os_getDevEui (u1_t* buf) {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
    memcpy(buf, DEVEUI, 8);
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	4b05      	ldr	r3, [pc, #20]	; (8004f74 <os_getDevEui+0x20>)
 8004f60:	0010      	movs	r0, r2
 8004f62:	0019      	movs	r1, r3
 8004f64:	2308      	movs	r3, #8
 8004f66:	001a      	movs	r2, r3
 8004f68:	f006 fb2e 	bl	800b5c8 <memcpy>
}
 8004f6c:	46c0      	nop			; (mov r8, r8)
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	b002      	add	sp, #8
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	0800ccd8 	.word	0x0800ccd8

08004f78 <os_getDevKey>:

// provide device key (16 bytes)
void os_getDevKey (u1_t* buf) {
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
    memcpy(buf, DEVKEY, 16);
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	4b05      	ldr	r3, [pc, #20]	; (8004f98 <os_getDevKey+0x20>)
 8004f84:	0010      	movs	r0, r2
 8004f86:	0019      	movs	r1, r3
 8004f88:	2310      	movs	r3, #16
 8004f8a:	001a      	movs	r2, r3
 8004f8c:	f006 fb1c 	bl	800b5c8 <memcpy>
}
 8004f90:	46c0      	nop			; (mov r8, r8)
 8004f92:	46bd      	mov	sp, r7
 8004f94:	b002      	add	sp, #8
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	0800cce0 	.word	0x0800cce0

08004f9c <initsensor>:

void initsensor(){
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	af00      	add	r7, sp, #0
	 // Here you init your sensors
}
 8004fa0:	46c0      	nop			; (mov r8, r8)
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <initfunc>:

void initfunc (osjob_t* j) {
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b082      	sub	sp, #8
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
    // intialize sensor hardware
    initsensor();
 8004fae:	f7ff fff5 	bl	8004f9c <initsensor>
    // reset MAC state
    LMIC_reset();
 8004fb2:	f7ff feff 	bl	8004db4 <LMIC_reset>
    // start joining
    LMIC_startJoining();
 8004fb6:	f7ff fa17 	bl	80043e8 <LMIC_startJoining>
    // init done - onEvent() callback will be invoked...
}
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	b002      	add	sp, #8
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <readsensor>:

u2_t readsensor(){
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b082      	sub	sp, #8
 8004fc6:	af00      	add	r7, sp, #0
	u2_t value = 0xDF;    /// read from evrything ...make your own sensor
 8004fc8:	1dbb      	adds	r3, r7, #6
 8004fca:	22df      	movs	r2, #223	; 0xdf
 8004fcc:	801a      	strh	r2, [r3, #0]
	return value;
 8004fce:	1dbb      	adds	r3, r7, #6
 8004fd0:	881b      	ldrh	r3, [r3, #0]
}
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	b002      	add	sp, #8
 8004fd8:	bd80      	pop	{r7, pc}
	...

08004fdc <reportfunc>:

static osjob_t reportjob;

// report sensor value every minute
static void reportfunc (osjob_t* j) {
 8004fdc:	b5b0      	push	{r4, r5, r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
    // read sensor
    u2_t val = readsensor();
 8004fe4:	240e      	movs	r4, #14
 8004fe6:	0025      	movs	r5, r4
 8004fe8:	193c      	adds	r4, r7, r4
 8004fea:	f7ff ffea 	bl	8004fc2 <readsensor>
 8004fee:	0003      	movs	r3, r0
 8004ff0:	8023      	strh	r3, [r4, #0]
    debug_val("val = ", val);
 8004ff2:	002c      	movs	r4, r5
 8004ff4:	193b      	adds	r3, r7, r4
 8004ff6:	881a      	ldrh	r2, [r3, #0]
 8004ff8:	4b12      	ldr	r3, [pc, #72]	; (8005044 <reportfunc+0x68>)
 8004ffa:	0011      	movs	r1, r2
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	f7fc fa3e 	bl	800147e <debug_val>
    // prepare and schedule data for transmission
    LMIC.frame[0] = val << 8;
 8005002:	4a11      	ldr	r2, [pc, #68]	; (8005048 <reportfunc+0x6c>)
 8005004:	23a4      	movs	r3, #164	; 0xa4
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	2100      	movs	r1, #0
 800500a:	54d1      	strb	r1, [r2, r3]
    LMIC.frame[1] = val;
 800500c:	193b      	adds	r3, r7, r4
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	b2d9      	uxtb	r1, r3
 8005012:	4a0d      	ldr	r2, [pc, #52]	; (8005048 <reportfunc+0x6c>)
 8005014:	234a      	movs	r3, #74	; 0x4a
 8005016:	33ff      	adds	r3, #255	; 0xff
 8005018:	54d1      	strb	r1, [r2, r3]
    LMIC_setTxData2(1, LMIC.frame, 2, 0); // (port 1, 2 bytes, unconfirmed)
 800501a:	490c      	ldr	r1, [pc, #48]	; (800504c <reportfunc+0x70>)
 800501c:	2300      	movs	r3, #0
 800501e:	2202      	movs	r2, #2
 8005020:	2001      	movs	r0, #1
 8005022:	f7ff ff49 	bl	8004eb8 <LMIC_setTxData2>
    // reschedule job in 60 seconds
    os_setTimedCallback(j, os_getTime()+sec2osticks(10), reportfunc);
 8005026:	f000 fb4f 	bl	80056c8 <os_getTime>
 800502a:	0003      	movs	r3, r0
 800502c:	4a08      	ldr	r2, [pc, #32]	; (8005050 <reportfunc+0x74>)
 800502e:	1899      	adds	r1, r3, r2
 8005030:	4a08      	ldr	r2, [pc, #32]	; (8005054 <reportfunc+0x78>)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	0018      	movs	r0, r3
 8005036:	f000 fbb5 	bl	80057a4 <os_setTimedCallback>
}
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	46bd      	mov	sp, r7
 800503e:	b004      	add	sp, #16
 8005040:	bdb0      	pop	{r4, r5, r7, pc}
 8005042:	46c0      	nop			; (mov r8, r8)
 8005044:	0800b72c 	.word	0x0800b72c
 8005048:	200002c4 	.word	0x200002c4
 800504c:	2000040c 	.word	0x2000040c
 8005050:	0004e200 	.word	0x0004e200
 8005054:	08004fdd 	.word	0x08004fdd

08005058 <onEvent>:

//////////////////////////////////////////////////
// LMIC EVENT CALLBACK
//////////////////////////////////////////////////

void onEvent (ev_t ev) {
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	0002      	movs	r2, r0
 8005060:	1dfb      	adds	r3, r7, #7
 8005062:	701a      	strb	r2, [r3, #0]
    debug_event(ev);
 8005064:	1dfb      	adds	r3, r7, #7
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	0018      	movs	r0, r3
 800506a:	f7fc fa1f 	bl	80014ac <debug_event>

    switch(ev) {
 800506e:	1dfb      	adds	r3, r7, #7
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	2b0f      	cmp	r3, #15
 8005074:	d900      	bls.n	8005078 <onEvent+0x20>
 8005076:	e072      	b.n	800515e <onEvent+0x106>
 8005078:	009a      	lsls	r2, r3, #2
 800507a:	4b3e      	ldr	r3, [pc, #248]	; (8005174 <onEvent+0x11c>)
 800507c:	18d3      	adds	r3, r2, r3
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	469f      	mov	pc, r3

      // network joined, session established
      case EV_JOINING:
       	  debug_str("try joining\r\n");
 8005082:	4b3d      	ldr	r3, [pc, #244]	; (8005178 <onEvent+0x120>)
 8005084:	0018      	movs	r0, r3
 8005086:	f7fc f9e6 	bl	8001456 <debug_str>
       	  break;
 800508a:	e06e      	b.n	800516a <onEvent+0x112>
      case EV_JOINED:
          debug_led(1);
 800508c:	2001      	movs	r0, #1
 800508e:	f7fc f971 	bl	8001374 <debug_led>
          // kick-off periodic sensor job
          reportfunc(&reportjob);
 8005092:	4b3a      	ldr	r3, [pc, #232]	; (800517c <onEvent+0x124>)
 8005094:	0018      	movs	r0, r3
 8005096:	f7ff ffa1 	bl	8004fdc <reportfunc>
          break;
 800509a:	e066      	b.n	800516a <onEvent+0x112>
      case EV_JOIN_FAILED:
    	  debug_str("join failed\r\n");
 800509c:	4b38      	ldr	r3, [pc, #224]	; (8005180 <onEvent+0x128>)
 800509e:	0018      	movs	r0, r3
 80050a0:	f7fc f9d9 	bl	8001456 <debug_str>
    	  break;
 80050a4:	e061      	b.n	800516a <onEvent+0x112>
      case EV_SCAN_TIMEOUT:
    	  debug_str("EV_SCAN_TIMEOUT\r\n");
 80050a6:	4b37      	ldr	r3, [pc, #220]	; (8005184 <onEvent+0x12c>)
 80050a8:	0018      	movs	r0, r3
 80050aa:	f7fc f9d4 	bl	8001456 <debug_str>
		  break;
 80050ae:	e05c      	b.n	800516a <onEvent+0x112>
	  case EV_BEACON_FOUND:
		  debug_str("EV_BEACON_FOUND\r\n");
 80050b0:	4b35      	ldr	r3, [pc, #212]	; (8005188 <onEvent+0x130>)
 80050b2:	0018      	movs	r0, r3
 80050b4:	f7fc f9cf 	bl	8001456 <debug_str>
		  break;
 80050b8:	e057      	b.n	800516a <onEvent+0x112>
	  case EV_BEACON_MISSED:
		  debug_str("EV_BEACON_MISSED\r\n");
 80050ba:	4b34      	ldr	r3, [pc, #208]	; (800518c <onEvent+0x134>)
 80050bc:	0018      	movs	r0, r3
 80050be:	f7fc f9ca 	bl	8001456 <debug_str>
		  break;
 80050c2:	e052      	b.n	800516a <onEvent+0x112>
	  case EV_BEACON_TRACKED:
		  debug_str("EV_BEACON_TRACKED\r\n");
 80050c4:	4b32      	ldr	r3, [pc, #200]	; (8005190 <onEvent+0x138>)
 80050c6:	0018      	movs	r0, r3
 80050c8:	f7fc f9c5 	bl	8001456 <debug_str>
		  break;
 80050cc:	e04d      	b.n	800516a <onEvent+0x112>
	  case EV_RFU1:
		  debug_str("EV_RFU1\r\n");
 80050ce:	4b31      	ldr	r3, [pc, #196]	; (8005194 <onEvent+0x13c>)
 80050d0:	0018      	movs	r0, r3
 80050d2:	f7fc f9c0 	bl	8001456 <debug_str>
		  break;
 80050d6:	e048      	b.n	800516a <onEvent+0x112>
	  case EV_REJOIN_FAILED:
		  debug_str("EV_REJOIN_FAILED\r\n");
 80050d8:	4b2f      	ldr	r3, [pc, #188]	; (8005198 <onEvent+0x140>)
 80050da:	0018      	movs	r0, r3
 80050dc:	f7fc f9bb 	bl	8001456 <debug_str>
		  break;
 80050e0:	e043      	b.n	800516a <onEvent+0x112>
	  case EV_TXCOMPLETE:
		  debug_str("EV_TXCOMPLETE (includes waiting for RX windows)\r\n");
 80050e2:	4b2e      	ldr	r3, [pc, #184]	; (800519c <onEvent+0x144>)
 80050e4:	0018      	movs	r0, r3
 80050e6:	f7fc f9b6 	bl	8001456 <debug_str>
		  if (LMIC.txrxFlags & TXRX_ACK)
 80050ea:	4a2d      	ldr	r2, [pc, #180]	; (80051a0 <onEvent+0x148>)
 80050ec:	2346      	movs	r3, #70	; 0x46
 80050ee:	33ff      	adds	r3, #255	; 0xff
 80050f0:	5cd3      	ldrb	r3, [r2, r3]
 80050f2:	b25b      	sxtb	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	da03      	bge.n	8005100 <onEvent+0xa8>
			  debug_str("Received ack\r\n");
 80050f8:	4b2a      	ldr	r3, [pc, #168]	; (80051a4 <onEvent+0x14c>)
 80050fa:	0018      	movs	r0, r3
 80050fc:	f7fc f9ab 	bl	8001456 <debug_str>
		  if (LMIC.dataLen) {
 8005100:	4a27      	ldr	r2, [pc, #156]	; (80051a0 <onEvent+0x148>)
 8005102:	2348      	movs	r3, #72	; 0x48
 8005104:	33ff      	adds	r3, #255	; 0xff
 8005106:	5cd3      	ldrb	r3, [r2, r3]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d02d      	beq.n	8005168 <onEvent+0x110>
			  debug_str("Received ");
 800510c:	4b26      	ldr	r3, [pc, #152]	; (80051a8 <onEvent+0x150>)
 800510e:	0018      	movs	r0, r3
 8005110:	f7fc f9a1 	bl	8001456 <debug_str>
			  debug_str(LMIC.dataLen);
 8005114:	4a22      	ldr	r2, [pc, #136]	; (80051a0 <onEvent+0x148>)
 8005116:	2348      	movs	r3, #72	; 0x48
 8005118:	33ff      	adds	r3, #255	; 0xff
 800511a:	5cd3      	ldrb	r3, [r2, r3]
 800511c:	0018      	movs	r0, r3
 800511e:	f7fc f99a 	bl	8001456 <debug_str>
			  debug_str(" bytes of payload\r\n");
 8005122:	4b22      	ldr	r3, [pc, #136]	; (80051ac <onEvent+0x154>)
 8005124:	0018      	movs	r0, r3
 8005126:	f7fc f996 	bl	8001456 <debug_str>
		  }
		  break;
 800512a:	e01d      	b.n	8005168 <onEvent+0x110>
	  case EV_LOST_TSYNC:
		  debug_str("EV_LOST_TSYNC\r\n");
 800512c:	4b20      	ldr	r3, [pc, #128]	; (80051b0 <onEvent+0x158>)
 800512e:	0018      	movs	r0, r3
 8005130:	f7fc f991 	bl	8001456 <debug_str>
		  break;
 8005134:	e019      	b.n	800516a <onEvent+0x112>
	  case EV_RESET:
		  debug_str("EV_RESET\r\n");
 8005136:	4b1f      	ldr	r3, [pc, #124]	; (80051b4 <onEvent+0x15c>)
 8005138:	0018      	movs	r0, r3
 800513a:	f7fc f98c 	bl	8001456 <debug_str>
		  break;
 800513e:	e014      	b.n	800516a <onEvent+0x112>
	  case EV_RXCOMPLETE:
		  // data received in ping slot
		  debug_str("EV_RXCOMPLETE\r\n");
 8005140:	4b1d      	ldr	r3, [pc, #116]	; (80051b8 <onEvent+0x160>)
 8005142:	0018      	movs	r0, r3
 8005144:	f7fc f987 	bl	8001456 <debug_str>
		  break;
 8005148:	e00f      	b.n	800516a <onEvent+0x112>
	  case EV_LINK_DEAD:
		  debug_str("EV_LINK_DEAD\r\n");
 800514a:	4b1c      	ldr	r3, [pc, #112]	; (80051bc <onEvent+0x164>)
 800514c:	0018      	movs	r0, r3
 800514e:	f7fc f982 	bl	8001456 <debug_str>
		  break;
 8005152:	e00a      	b.n	800516a <onEvent+0x112>
	  case EV_LINK_ALIVE:
		  debug_str("EV_LINK_ALIVE\r\n");
 8005154:	4b1a      	ldr	r3, [pc, #104]	; (80051c0 <onEvent+0x168>)
 8005156:	0018      	movs	r0, r3
 8005158:	f7fc f97d 	bl	8001456 <debug_str>
		  break;
 800515c:	e005      	b.n	800516a <onEvent+0x112>
	  default:
		   debug_str("Unknown event\r\n");
 800515e:	4b19      	ldr	r3, [pc, #100]	; (80051c4 <onEvent+0x16c>)
 8005160:	0018      	movs	r0, r3
 8005162:	f7fc f978 	bl	8001456 <debug_str>
		  break;
 8005166:	e000      	b.n	800516a <onEvent+0x112>
		  break;
 8005168:	46c0      	nop			; (mov r8, r8)
    }
}
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	46bd      	mov	sp, r7
 800516e:	b002      	add	sp, #8
 8005170:	bd80      	pop	{r7, pc}
 8005172:	46c0      	nop			; (mov r8, r8)
 8005174:	0800ccf0 	.word	0x0800ccf0
 8005178:	0800b734 	.word	0x0800b734
 800517c:	20000078 	.word	0x20000078
 8005180:	0800b744 	.word	0x0800b744
 8005184:	0800b754 	.word	0x0800b754
 8005188:	0800b768 	.word	0x0800b768
 800518c:	0800b77c 	.word	0x0800b77c
 8005190:	0800b790 	.word	0x0800b790
 8005194:	0800b7a4 	.word	0x0800b7a4
 8005198:	0800b7b0 	.word	0x0800b7b0
 800519c:	0800b7c4 	.word	0x0800b7c4
 80051a0:	200002c4 	.word	0x200002c4
 80051a4:	0800b7f8 	.word	0x0800b7f8
 80051a8:	0800b808 	.word	0x0800b808
 80051ac:	0800b814 	.word	0x0800b814
 80051b0:	0800b828 	.word	0x0800b828
 80051b4:	0800b838 	.word	0x0800b838
 80051b8:	0800b844 	.word	0x0800b844
 80051bc:	0800b854 	.word	0x0800b854
 80051c0:	0800b864 	.word	0x0800b864
 80051c4:	0800b874 	.word	0x0800b874

080051c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80051ce:	f001 fae3 	bl	8006798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80051d2:	f000 f82d 	bl	8005230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80051d6:	f000 f9c7 	bl	8005568 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80051da:	f000 f995 	bl	8005508 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80051de:	f000 f89d 	bl	800531c <MX_I2C1_Init>
  MX_SPI1_Init();
 80051e2:	f000 f8db 	bl	800539c <MX_SPI1_Init>
  MX_TIM21_Init();
 80051e6:	f000 f911 	bl	800540c <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim21);    // <-----------  change to your setup
 80051ea:	4b0e      	ldr	r3, [pc, #56]	; (8005224 <main+0x5c>)
 80051ec:	0018      	movs	r0, r3
 80051ee:	f004 f9bd 	bl	800956c <HAL_TIM_Base_Start_IT>
    __HAL_SPI_ENABLE(&hspi1);         // <-----------  change to your setup
 80051f2:	4b0d      	ldr	r3, [pc, #52]	; (8005228 <main+0x60>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	4b0b      	ldr	r3, [pc, #44]	; (8005228 <main+0x60>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2140      	movs	r1, #64	; 0x40
 80051fe:	430a      	orrs	r2, r1
 8005200:	601a      	str	r2, [r3, #0]

    osjob_t initjob;

    // initialize runtime env
    os_init();
 8005202:	f000 fa4d 	bl	80056a0 <os_init>

    // initialize debug library
    debug_init();
 8005206:	f7fc f8a7 	bl	8001358 <debug_init>
    // setup initial job
     os_setCallback(&initjob, initfunc);
 800520a:	4a08      	ldr	r2, [pc, #32]	; (800522c <main+0x64>)
 800520c:	1d3b      	adds	r3, r7, #4
 800520e:	0011      	movs	r1, r2
 8005210:	0018      	movs	r0, r3
 8005212:	f000 fa9f 	bl	8005754 <os_setCallback>
    // execute scheduled jobs and events
    os_runloop();
 8005216:	f000 fafd 	bl	8005814 <os_runloop>
    // (not reached)
    return 0;
 800521a:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800521c:	0018      	movs	r0, r3
 800521e:	46bd      	mov	sp, r7
 8005220:	b004      	add	sp, #16
 8005222:	bd80      	pop	{r7, pc}
 8005224:	20000284 	.word	0x20000284
 8005228:	200001a8 	.word	0x200001a8
 800522c:	08004fa7 	.word	0x08004fa7

08005230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005230:	b590      	push	{r4, r7, lr}
 8005232:	b09f      	sub	sp, #124	; 0x7c
 8005234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005236:	2440      	movs	r4, #64	; 0x40
 8005238:	193b      	adds	r3, r7, r4
 800523a:	0018      	movs	r0, r3
 800523c:	2338      	movs	r3, #56	; 0x38
 800523e:	001a      	movs	r2, r3
 8005240:	2100      	movs	r1, #0
 8005242:	f006 f9ca 	bl	800b5da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005246:	232c      	movs	r3, #44	; 0x2c
 8005248:	18fb      	adds	r3, r7, r3
 800524a:	0018      	movs	r0, r3
 800524c:	2314      	movs	r3, #20
 800524e:	001a      	movs	r2, r3
 8005250:	2100      	movs	r1, #0
 8005252:	f006 f9c2 	bl	800b5da <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005256:	1d3b      	adds	r3, r7, #4
 8005258:	0018      	movs	r0, r3
 800525a:	2328      	movs	r3, #40	; 0x28
 800525c:	001a      	movs	r2, r3
 800525e:	2100      	movs	r1, #0
 8005260:	f006 f9bb 	bl	800b5da <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005264:	4b2b      	ldr	r3, [pc, #172]	; (8005314 <SystemClock_Config+0xe4>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a2b      	ldr	r2, [pc, #172]	; (8005318 <SystemClock_Config+0xe8>)
 800526a:	401a      	ands	r2, r3
 800526c:	4b29      	ldr	r3, [pc, #164]	; (8005314 <SystemClock_Config+0xe4>)
 800526e:	2180      	movs	r1, #128	; 0x80
 8005270:	0109      	lsls	r1, r1, #4
 8005272:	430a      	orrs	r2, r1
 8005274:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005276:	0021      	movs	r1, r4
 8005278:	187b      	adds	r3, r7, r1
 800527a:	2202      	movs	r2, #2
 800527c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800527e:	187b      	adds	r3, r7, r1
 8005280:	2201      	movs	r2, #1
 8005282:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005284:	187b      	adds	r3, r7, r1
 8005286:	2210      	movs	r2, #16
 8005288:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800528a:	187b      	adds	r3, r7, r1
 800528c:	2202      	movs	r2, #2
 800528e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005290:	187b      	adds	r3, r7, r1
 8005292:	2200      	movs	r2, #0
 8005294:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8005296:	187b      	adds	r3, r7, r1
 8005298:	2280      	movs	r2, #128	; 0x80
 800529a:	02d2      	lsls	r2, r2, #11
 800529c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800529e:	187b      	adds	r3, r7, r1
 80052a0:	2280      	movs	r2, #128	; 0x80
 80052a2:	03d2      	lsls	r2, r2, #15
 80052a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80052a6:	187b      	adds	r3, r7, r1
 80052a8:	0018      	movs	r0, r3
 80052aa:	f002 f921 	bl	80074f0 <HAL_RCC_OscConfig>
 80052ae:	1e03      	subs	r3, r0, #0
 80052b0:	d001      	beq.n	80052b6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80052b2:	f000 f9e7 	bl	8005684 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80052b6:	212c      	movs	r1, #44	; 0x2c
 80052b8:	187b      	adds	r3, r7, r1
 80052ba:	220f      	movs	r2, #15
 80052bc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80052be:	187b      	adds	r3, r7, r1
 80052c0:	2203      	movs	r2, #3
 80052c2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80052c4:	187b      	adds	r3, r7, r1
 80052c6:	2200      	movs	r2, #0
 80052c8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80052ca:	187b      	adds	r3, r7, r1
 80052cc:	2200      	movs	r2, #0
 80052ce:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80052d0:	187b      	adds	r3, r7, r1
 80052d2:	2200      	movs	r2, #0
 80052d4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80052d6:	187b      	adds	r3, r7, r1
 80052d8:	2101      	movs	r1, #1
 80052da:	0018      	movs	r0, r3
 80052dc:	f002 fe9e 	bl	800801c <HAL_RCC_ClockConfig>
 80052e0:	1e03      	subs	r3, r0, #0
 80052e2:	d001      	beq.n	80052e8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80052e4:	f000 f9ce 	bl	8005684 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80052e8:	1d3b      	adds	r3, r7, #4
 80052ea:	220a      	movs	r2, #10
 80052ec:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80052ee:	1d3b      	adds	r3, r7, #4
 80052f0:	2200      	movs	r2, #0
 80052f2:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80052f4:	1d3b      	adds	r3, r7, #4
 80052f6:	2200      	movs	r2, #0
 80052f8:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80052fa:	1d3b      	adds	r3, r7, #4
 80052fc:	0018      	movs	r0, r3
 80052fe:	f003 f969 	bl	80085d4 <HAL_RCCEx_PeriphCLKConfig>
 8005302:	1e03      	subs	r3, r0, #0
 8005304:	d001      	beq.n	800530a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8005306:	f000 f9bd 	bl	8005684 <Error_Handler>
  }
}
 800530a:	46c0      	nop			; (mov r8, r8)
 800530c:	46bd      	mov	sp, r7
 800530e:	b01f      	add	sp, #124	; 0x7c
 8005310:	bd90      	pop	{r4, r7, pc}
 8005312:	46c0      	nop			; (mov r8, r8)
 8005314:	40007000 	.word	0x40007000
 8005318:	ffffe7ff 	.word	0xffffe7ff

0800531c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005320:	4b1b      	ldr	r3, [pc, #108]	; (8005390 <MX_I2C1_Init+0x74>)
 8005322:	4a1c      	ldr	r2, [pc, #112]	; (8005394 <MX_I2C1_Init+0x78>)
 8005324:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8005326:	4b1a      	ldr	r3, [pc, #104]	; (8005390 <MX_I2C1_Init+0x74>)
 8005328:	4a1b      	ldr	r2, [pc, #108]	; (8005398 <MX_I2C1_Init+0x7c>)
 800532a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800532c:	4b18      	ldr	r3, [pc, #96]	; (8005390 <MX_I2C1_Init+0x74>)
 800532e:	2200      	movs	r2, #0
 8005330:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005332:	4b17      	ldr	r3, [pc, #92]	; (8005390 <MX_I2C1_Init+0x74>)
 8005334:	2201      	movs	r2, #1
 8005336:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005338:	4b15      	ldr	r3, [pc, #84]	; (8005390 <MX_I2C1_Init+0x74>)
 800533a:	2200      	movs	r2, #0
 800533c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800533e:	4b14      	ldr	r3, [pc, #80]	; (8005390 <MX_I2C1_Init+0x74>)
 8005340:	2200      	movs	r2, #0
 8005342:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005344:	4b12      	ldr	r3, [pc, #72]	; (8005390 <MX_I2C1_Init+0x74>)
 8005346:	2200      	movs	r2, #0
 8005348:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800534a:	4b11      	ldr	r3, [pc, #68]	; (8005390 <MX_I2C1_Init+0x74>)
 800534c:	2200      	movs	r2, #0
 800534e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005350:	4b0f      	ldr	r3, [pc, #60]	; (8005390 <MX_I2C1_Init+0x74>)
 8005352:	2200      	movs	r2, #0
 8005354:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005356:	4b0e      	ldr	r3, [pc, #56]	; (8005390 <MX_I2C1_Init+0x74>)
 8005358:	0018      	movs	r0, r3
 800535a:	f001 feab 	bl	80070b4 <HAL_I2C_Init>
 800535e:	1e03      	subs	r3, r0, #0
 8005360:	d001      	beq.n	8005366 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005362:	f000 f98f 	bl	8005684 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005366:	4b0a      	ldr	r3, [pc, #40]	; (8005390 <MX_I2C1_Init+0x74>)
 8005368:	2100      	movs	r1, #0
 800536a:	0018      	movs	r0, r3
 800536c:	f001 ffdc 	bl	8007328 <HAL_I2CEx_ConfigAnalogFilter>
 8005370:	1e03      	subs	r3, r0, #0
 8005372:	d001      	beq.n	8005378 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005374:	f000 f986 	bl	8005684 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005378:	4b05      	ldr	r3, [pc, #20]	; (8005390 <MX_I2C1_Init+0x74>)
 800537a:	2100      	movs	r1, #0
 800537c:	0018      	movs	r0, r3
 800537e:	f002 f847 	bl	8007410 <HAL_I2CEx_ConfigDigitalFilter>
 8005382:	1e03      	subs	r3, r0, #0
 8005384:	d001      	beq.n	800538a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005386:	f000 f97d 	bl	8005684 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	2000015c 	.word	0x2000015c
 8005394:	40005400 	.word	0x40005400
 8005398:	00707cbb 	.word	0x00707cbb

0800539c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80053a0:	4b18      	ldr	r3, [pc, #96]	; (8005404 <MX_SPI1_Init+0x68>)
 80053a2:	4a19      	ldr	r2, [pc, #100]	; (8005408 <MX_SPI1_Init+0x6c>)
 80053a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80053a6:	4b17      	ldr	r3, [pc, #92]	; (8005404 <MX_SPI1_Init+0x68>)
 80053a8:	2282      	movs	r2, #130	; 0x82
 80053aa:	0052      	lsls	r2, r2, #1
 80053ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80053ae:	4b15      	ldr	r3, [pc, #84]	; (8005404 <MX_SPI1_Init+0x68>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80053b4:	4b13      	ldr	r3, [pc, #76]	; (8005404 <MX_SPI1_Init+0x68>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80053ba:	4b12      	ldr	r3, [pc, #72]	; (8005404 <MX_SPI1_Init+0x68>)
 80053bc:	2200      	movs	r2, #0
 80053be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80053c0:	4b10      	ldr	r3, [pc, #64]	; (8005404 <MX_SPI1_Init+0x68>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80053c6:	4b0f      	ldr	r3, [pc, #60]	; (8005404 <MX_SPI1_Init+0x68>)
 80053c8:	2280      	movs	r2, #128	; 0x80
 80053ca:	0092      	lsls	r2, r2, #2
 80053cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80053ce:	4b0d      	ldr	r3, [pc, #52]	; (8005404 <MX_SPI1_Init+0x68>)
 80053d0:	2238      	movs	r2, #56	; 0x38
 80053d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80053d4:	4b0b      	ldr	r3, [pc, #44]	; (8005404 <MX_SPI1_Init+0x68>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80053da:	4b0a      	ldr	r3, [pc, #40]	; (8005404 <MX_SPI1_Init+0x68>)
 80053dc:	2200      	movs	r2, #0
 80053de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053e0:	4b08      	ldr	r3, [pc, #32]	; (8005404 <MX_SPI1_Init+0x68>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80053e6:	4b07      	ldr	r3, [pc, #28]	; (8005404 <MX_SPI1_Init+0x68>)
 80053e8:	2207      	movs	r2, #7
 80053ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80053ec:	4b05      	ldr	r3, [pc, #20]	; (8005404 <MX_SPI1_Init+0x68>)
 80053ee:	0018      	movs	r0, r3
 80053f0:	f003 fb7c 	bl	8008aec <HAL_SPI_Init>
 80053f4:	1e03      	subs	r3, r0, #0
 80053f6:	d001      	beq.n	80053fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80053f8:	f000 f944 	bl	8005684 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80053fc:	46c0      	nop			; (mov r8, r8)
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	46c0      	nop			; (mov r8, r8)
 8005404:	200001a8 	.word	0x200001a8
 8005408:	40013000 	.word	0x40013000

0800540c <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b08a      	sub	sp, #40	; 0x28
 8005410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005412:	2318      	movs	r3, #24
 8005414:	18fb      	adds	r3, r7, r3
 8005416:	0018      	movs	r0, r3
 8005418:	2310      	movs	r3, #16
 800541a:	001a      	movs	r2, r3
 800541c:	2100      	movs	r1, #0
 800541e:	f006 f8dc 	bl	800b5da <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005422:	2310      	movs	r3, #16
 8005424:	18fb      	adds	r3, r7, r3
 8005426:	0018      	movs	r0, r3
 8005428:	2308      	movs	r3, #8
 800542a:	001a      	movs	r2, r3
 800542c:	2100      	movs	r1, #0
 800542e:	f006 f8d4 	bl	800b5da <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005432:	003b      	movs	r3, r7
 8005434:	0018      	movs	r0, r3
 8005436:	2310      	movs	r3, #16
 8005438:	001a      	movs	r2, r3
 800543a:	2100      	movs	r1, #0
 800543c:	f006 f8cd 	bl	800b5da <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8005440:	4b2d      	ldr	r3, [pc, #180]	; (80054f8 <MX_TIM21_Init+0xec>)
 8005442:	4a2e      	ldr	r2, [pc, #184]	; (80054fc <MX_TIM21_Init+0xf0>)
 8005444:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 1000 - 1;
 8005446:	4b2c      	ldr	r3, [pc, #176]	; (80054f8 <MX_TIM21_Init+0xec>)
 8005448:	4a2d      	ldr	r2, [pc, #180]	; (8005500 <MX_TIM21_Init+0xf4>)
 800544a:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 800544c:	4b2a      	ldr	r3, [pc, #168]	; (80054f8 <MX_TIM21_Init+0xec>)
 800544e:	2200      	movs	r2, #0
 8005450:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535 - 1;
 8005452:	4b29      	ldr	r3, [pc, #164]	; (80054f8 <MX_TIM21_Init+0xec>)
 8005454:	4a2b      	ldr	r2, [pc, #172]	; (8005504 <MX_TIM21_Init+0xf8>)
 8005456:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005458:	4b27      	ldr	r3, [pc, #156]	; (80054f8 <MX_TIM21_Init+0xec>)
 800545a:	2200      	movs	r2, #0
 800545c:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800545e:	4b26      	ldr	r3, [pc, #152]	; (80054f8 <MX_TIM21_Init+0xec>)
 8005460:	2200      	movs	r2, #0
 8005462:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8005464:	4b24      	ldr	r3, [pc, #144]	; (80054f8 <MX_TIM21_Init+0xec>)
 8005466:	0018      	movs	r0, r3
 8005468:	f003 ffb0 	bl	80093cc <HAL_TIM_Base_Init>
 800546c:	1e03      	subs	r3, r0, #0
 800546e:	d001      	beq.n	8005474 <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 8005470:	f000 f908 	bl	8005684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005474:	2118      	movs	r1, #24
 8005476:	187b      	adds	r3, r7, r1
 8005478:	2280      	movs	r2, #128	; 0x80
 800547a:	0152      	lsls	r2, r2, #5
 800547c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 800547e:	187a      	adds	r2, r7, r1
 8005480:	4b1d      	ldr	r3, [pc, #116]	; (80054f8 <MX_TIM21_Init+0xec>)
 8005482:	0011      	movs	r1, r2
 8005484:	0018      	movs	r0, r3
 8005486:	f004 fba5 	bl	8009bd4 <HAL_TIM_ConfigClockSource>
 800548a:	1e03      	subs	r3, r0, #0
 800548c:	d001      	beq.n	8005492 <MX_TIM21_Init+0x86>
  {
    Error_Handler();
 800548e:	f000 f8f9 	bl	8005684 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 8005492:	4b19      	ldr	r3, [pc, #100]	; (80054f8 <MX_TIM21_Init+0xec>)
 8005494:	0018      	movs	r0, r3
 8005496:	f004 f8e7 	bl	8009668 <HAL_TIM_OC_Init>
 800549a:	1e03      	subs	r3, r0, #0
 800549c:	d001      	beq.n	80054a2 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 800549e:	f000 f8f1 	bl	8005684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054a2:	2110      	movs	r1, #16
 80054a4:	187b      	adds	r3, r7, r1
 80054a6:	2200      	movs	r2, #0
 80054a8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054aa:	187b      	adds	r3, r7, r1
 80054ac:	2200      	movs	r2, #0
 80054ae:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80054b0:	187a      	adds	r2, r7, r1
 80054b2:	4b11      	ldr	r3, [pc, #68]	; (80054f8 <MX_TIM21_Init+0xec>)
 80054b4:	0011      	movs	r1, r2
 80054b6:	0018      	movs	r0, r3
 80054b8:	f005 f888 	bl	800a5cc <HAL_TIMEx_MasterConfigSynchronization>
 80054bc:	1e03      	subs	r3, r0, #0
 80054be:	d001      	beq.n	80054c4 <MX_TIM21_Init+0xb8>
  {
    Error_Handler();
 80054c0:	f000 f8e0 	bl	8005684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80054c4:	003b      	movs	r3, r7
 80054c6:	2200      	movs	r2, #0
 80054c8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80054ca:	003b      	movs	r3, r7
 80054cc:	2200      	movs	r2, #0
 80054ce:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80054d0:	003b      	movs	r3, r7
 80054d2:	2200      	movs	r2, #0
 80054d4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80054d6:	003b      	movs	r3, r7
 80054d8:	2200      	movs	r2, #0
 80054da:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80054dc:	0039      	movs	r1, r7
 80054de:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <MX_TIM21_Init+0xec>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	0018      	movs	r0, r3
 80054e4:	f004 fa82 	bl	80099ec <HAL_TIM_OC_ConfigChannel>
 80054e8:	1e03      	subs	r3, r0, #0
 80054ea:	d001      	beq.n	80054f0 <MX_TIM21_Init+0xe4>
  {
    Error_Handler();
 80054ec:	f000 f8ca 	bl	8005684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 80054f0:	46c0      	nop			; (mov r8, r8)
 80054f2:	46bd      	mov	sp, r7
 80054f4:	b00a      	add	sp, #40	; 0x28
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	20000284 	.word	0x20000284
 80054fc:	40010800 	.word	0x40010800
 8005500:	000003e7 	.word	0x000003e7
 8005504:	0000fffe 	.word	0x0000fffe

08005508 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800550c:	4b14      	ldr	r3, [pc, #80]	; (8005560 <MX_USART2_UART_Init+0x58>)
 800550e:	4a15      	ldr	r2, [pc, #84]	; (8005564 <MX_USART2_UART_Init+0x5c>)
 8005510:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005512:	4b13      	ldr	r3, [pc, #76]	; (8005560 <MX_USART2_UART_Init+0x58>)
 8005514:	22e1      	movs	r2, #225	; 0xe1
 8005516:	0252      	lsls	r2, r2, #9
 8005518:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800551a:	4b11      	ldr	r3, [pc, #68]	; (8005560 <MX_USART2_UART_Init+0x58>)
 800551c:	2200      	movs	r2, #0
 800551e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005520:	4b0f      	ldr	r3, [pc, #60]	; (8005560 <MX_USART2_UART_Init+0x58>)
 8005522:	2200      	movs	r2, #0
 8005524:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005526:	4b0e      	ldr	r3, [pc, #56]	; (8005560 <MX_USART2_UART_Init+0x58>)
 8005528:	2200      	movs	r2, #0
 800552a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800552c:	4b0c      	ldr	r3, [pc, #48]	; (8005560 <MX_USART2_UART_Init+0x58>)
 800552e:	220c      	movs	r2, #12
 8005530:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005532:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <MX_USART2_UART_Init+0x58>)
 8005534:	2200      	movs	r2, #0
 8005536:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005538:	4b09      	ldr	r3, [pc, #36]	; (8005560 <MX_USART2_UART_Init+0x58>)
 800553a:	2200      	movs	r2, #0
 800553c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800553e:	4b08      	ldr	r3, [pc, #32]	; (8005560 <MX_USART2_UART_Init+0x58>)
 8005540:	2200      	movs	r2, #0
 8005542:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005544:	4b06      	ldr	r3, [pc, #24]	; (8005560 <MX_USART2_UART_Init+0x58>)
 8005546:	2200      	movs	r2, #0
 8005548:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800554a:	4b05      	ldr	r3, [pc, #20]	; (8005560 <MX_USART2_UART_Init+0x58>)
 800554c:	0018      	movs	r0, r3
 800554e:	f005 f8f7 	bl	800a740 <HAL_UART_Init>
 8005552:	1e03      	subs	r3, r0, #0
 8005554:	d001      	beq.n	800555a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005556:	f000 f895 	bl	8005684 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800555a:	46c0      	nop			; (mov r8, r8)
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20000200 	.word	0x20000200
 8005564:	40004400 	.word	0x40004400

08005568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005568:	b590      	push	{r4, r7, lr}
 800556a:	b089      	sub	sp, #36	; 0x24
 800556c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800556e:	240c      	movs	r4, #12
 8005570:	193b      	adds	r3, r7, r4
 8005572:	0018      	movs	r0, r3
 8005574:	2314      	movs	r3, #20
 8005576:	001a      	movs	r2, r3
 8005578:	2100      	movs	r1, #0
 800557a:	f006 f82e 	bl	800b5da <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800557e:	4b3c      	ldr	r3, [pc, #240]	; (8005670 <MX_GPIO_Init+0x108>)
 8005580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005582:	4b3b      	ldr	r3, [pc, #236]	; (8005670 <MX_GPIO_Init+0x108>)
 8005584:	2104      	movs	r1, #4
 8005586:	430a      	orrs	r2, r1
 8005588:	62da      	str	r2, [r3, #44]	; 0x2c
 800558a:	4b39      	ldr	r3, [pc, #228]	; (8005670 <MX_GPIO_Init+0x108>)
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	2204      	movs	r2, #4
 8005590:	4013      	ands	r3, r2
 8005592:	60bb      	str	r3, [r7, #8]
 8005594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005596:	4b36      	ldr	r3, [pc, #216]	; (8005670 <MX_GPIO_Init+0x108>)
 8005598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559a:	4b35      	ldr	r3, [pc, #212]	; (8005670 <MX_GPIO_Init+0x108>)
 800559c:	2101      	movs	r1, #1
 800559e:	430a      	orrs	r2, r1
 80055a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80055a2:	4b33      	ldr	r3, [pc, #204]	; (8005670 <MX_GPIO_Init+0x108>)
 80055a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a6:	2201      	movs	r2, #1
 80055a8:	4013      	ands	r3, r2
 80055aa:	607b      	str	r3, [r7, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80055ae:	4b30      	ldr	r3, [pc, #192]	; (8005670 <MX_GPIO_Init+0x108>)
 80055b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b2:	4b2f      	ldr	r3, [pc, #188]	; (8005670 <MX_GPIO_Init+0x108>)
 80055b4:	2102      	movs	r1, #2
 80055b6:	430a      	orrs	r2, r1
 80055b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80055ba:	4b2d      	ldr	r3, [pc, #180]	; (8005670 <MX_GPIO_Init+0x108>)
 80055bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055be:	2202      	movs	r2, #2
 80055c0:	4013      	ands	r3, r2
 80055c2:	603b      	str	r3, [r7, #0]
 80055c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80055c6:	4b2b      	ldr	r3, [pc, #172]	; (8005674 <MX_GPIO_Init+0x10c>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	2101      	movs	r1, #1
 80055cc:	0018      	movs	r0, r3
 80055ce:	f001 fcd9 	bl	8006f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|NSS_Pin, GPIO_PIN_RESET);
 80055d2:	4929      	ldr	r1, [pc, #164]	; (8005678 <MX_GPIO_Init+0x110>)
 80055d4:	23a0      	movs	r3, #160	; 0xa0
 80055d6:	05db      	lsls	r3, r3, #23
 80055d8:	2200      	movs	r2, #0
 80055da:	0018      	movs	r0, r3
 80055dc:	f001 fcd2 	bl	8006f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 80055e0:	193b      	adds	r3, r7, r4
 80055e2:	2201      	movs	r2, #1
 80055e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055e6:	193b      	adds	r3, r7, r4
 80055e8:	2201      	movs	r2, #1
 80055ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ec:	193b      	adds	r3, r7, r4
 80055ee:	2200      	movs	r2, #0
 80055f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055f2:	193b      	adds	r3, r7, r4
 80055f4:	2200      	movs	r2, #0
 80055f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80055f8:	193b      	adds	r3, r7, r4
 80055fa:	4a1e      	ldr	r2, [pc, #120]	; (8005674 <MX_GPIO_Init+0x10c>)
 80055fc:	0019      	movs	r1, r3
 80055fe:	0010      	movs	r0, r2
 8005600:	f001 fa30 	bl	8006a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin NSS_Pin */
  GPIO_InitStruct.Pin = LED_Pin|NSS_Pin;
 8005604:	193b      	adds	r3, r7, r4
 8005606:	4a1c      	ldr	r2, [pc, #112]	; (8005678 <MX_GPIO_Init+0x110>)
 8005608:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800560a:	193b      	adds	r3, r7, r4
 800560c:	2201      	movs	r2, #1
 800560e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005610:	193b      	adds	r3, r7, r4
 8005612:	2200      	movs	r2, #0
 8005614:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005616:	193b      	adds	r3, r7, r4
 8005618:	2200      	movs	r2, #0
 800561a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800561c:	193a      	adds	r2, r7, r4
 800561e:	23a0      	movs	r3, #160	; 0xa0
 8005620:	05db      	lsls	r3, r3, #23
 8005622:	0011      	movs	r1, r2
 8005624:	0018      	movs	r0, r3
 8005626:	f001 fa1d 	bl	8006a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO2_Pin DIO1_Pin DIO0_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin|DIO1_Pin|DIO0_Pin;
 800562a:	193b      	adds	r3, r7, r4
 800562c:	2213      	movs	r2, #19
 800562e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005630:	193b      	adds	r3, r7, r4
 8005632:	4a12      	ldr	r2, [pc, #72]	; (800567c <MX_GPIO_Init+0x114>)
 8005634:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005636:	193b      	adds	r3, r7, r4
 8005638:	2200      	movs	r2, #0
 800563a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800563c:	193b      	adds	r3, r7, r4
 800563e:	4a10      	ldr	r2, [pc, #64]	; (8005680 <MX_GPIO_Init+0x118>)
 8005640:	0019      	movs	r1, r3
 8005642:	0010      	movs	r0, r2
 8005644:	f001 fa0e 	bl	8006a64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8005648:	2200      	movs	r2, #0
 800564a:	2100      	movs	r1, #0
 800564c:	2005      	movs	r0, #5
 800564e:	f001 f9bf 	bl	80069d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8005652:	2005      	movs	r0, #5
 8005654:	f001 f9dc 	bl	8006a10 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8005658:	2200      	movs	r2, #0
 800565a:	2100      	movs	r1, #0
 800565c:	2007      	movs	r0, #7
 800565e:	f001 f9b7 	bl	80069d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8005662:	2007      	movs	r0, #7
 8005664:	f001 f9d4 	bl	8006a10 <HAL_NVIC_EnableIRQ>

}
 8005668:	46c0      	nop			; (mov r8, r8)
 800566a:	46bd      	mov	sp, r7
 800566c:	b009      	add	sp, #36	; 0x24
 800566e:	bd90      	pop	{r4, r7, pc}
 8005670:	40021000 	.word	0x40021000
 8005674:	50000800 	.word	0x50000800
 8005678:	00008020 	.word	0x00008020
 800567c:	10110000 	.word	0x10110000
 8005680:	50000400 	.word	0x50000400

08005684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005688:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800568a:	e7fe      	b.n	800568a <Error_Handler+0x6>

0800568c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	46bd      	mov	sp, r7
 800569a:	b002      	add	sp, #8
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <os_init>:
static struct {
    osjob_t* scheduledjobs;
    osjob_t* runnablejobs;
} OS;

void os_init () {
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
    memset(&OS, 0x00, sizeof(OS));
 80056a4:	4b07      	ldr	r3, [pc, #28]	; (80056c4 <os_init+0x24>)
 80056a6:	2208      	movs	r2, #8
 80056a8:	2100      	movs	r1, #0
 80056aa:	0018      	movs	r0, r3
 80056ac:	f005 ff95 	bl	800b5da <memset>
    hal_init();
 80056b0:	f7fc f8ae 	bl	8001810 <hal_init>
    radio_init();
 80056b4:	f000 fd24 	bl	8006100 <radio_init>
    LMIC_init();
 80056b8:	f7ff fbd4 	bl	8004e64 <LMIC_init>
}
 80056bc:	46c0      	nop			; (mov r8, r8)
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	46c0      	nop			; (mov r8, r8)
 80056c4:	20000084 	.word	0x20000084

080056c8 <os_getTime>:

ostime_t os_getTime () {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
    return hal_ticks();
 80056cc:	f7fb ffbe 	bl	800164c <hal_ticks>
 80056d0:	0003      	movs	r3, r0
}
 80056d2:	0018      	movs	r0, r3
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <unlinkjob>:

// unlink job from queue, return if removed
static int unlinkjob (osjob_t** pnext, osjob_t* job) {
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
    for( ; *pnext; pnext = &((*pnext)->next)) {
 80056e2:	e00d      	b.n	8005700 <unlinkjob+0x28>
        if(*pnext == job) { // unlink
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d105      	bne.n	80056fa <unlinkjob+0x22>
            *pnext = job->next;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	601a      	str	r2, [r3, #0]
            return 1;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e007      	b.n	800570a <unlinkjob+0x32>
    for( ; *pnext; pnext = &((*pnext)->next)) {
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	607b      	str	r3, [r7, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1ed      	bne.n	80056e4 <unlinkjob+0xc>
        }
    }
    return 0;
 8005708:	2300      	movs	r3, #0
}
 800570a:	0018      	movs	r0, r3
 800570c:	46bd      	mov	sp, r7
 800570e:	b002      	add	sp, #8
 8005710:	bd80      	pop	{r7, pc}
	...

08005714 <os_clearCallback>:

// clear scheduled job
void os_clearCallback (osjob_t* job) {
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
    hal_disableIRQs();
 800571c:	f7fc f852 	bl	80017c4 <hal_disableIRQs>
    unlinkjob(&OS.scheduledjobs, job) || unlinkjob(&OS.runnablejobs, job);
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	4b0a      	ldr	r3, [pc, #40]	; (800574c <os_clearCallback+0x38>)
 8005724:	0011      	movs	r1, r2
 8005726:	0018      	movs	r0, r3
 8005728:	f7ff ffd6 	bl	80056d8 <unlinkjob>
 800572c:	1e03      	subs	r3, r0, #0
 800572e:	d105      	bne.n	800573c <os_clearCallback+0x28>
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	4b07      	ldr	r3, [pc, #28]	; (8005750 <os_clearCallback+0x3c>)
 8005734:	0011      	movs	r1, r2
 8005736:	0018      	movs	r0, r3
 8005738:	f7ff ffce 	bl	80056d8 <unlinkjob>
 800573c:	46c0      	nop			; (mov r8, r8)
    hal_enableIRQs();
 800573e:	f7fc f84f 	bl	80017e0 <hal_enableIRQs>
}
 8005742:	46c0      	nop			; (mov r8, r8)
 8005744:	46bd      	mov	sp, r7
 8005746:	b002      	add	sp, #8
 8005748:	bd80      	pop	{r7, pc}
 800574a:	46c0      	nop			; (mov r8, r8)
 800574c:	20000084 	.word	0x20000084
 8005750:	20000088 	.word	0x20000088

08005754 <os_setCallback>:

// schedule immediately runnable job
void os_setCallback (osjob_t* job, osjobcb_t cb) {
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
    osjob_t** pnext;
    hal_disableIRQs();
 800575e:	f7fc f831 	bl	80017c4 <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.runnablejobs, job);
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	4b0e      	ldr	r3, [pc, #56]	; (80057a0 <os_setCallback+0x4c>)
 8005766:	0011      	movs	r1, r2
 8005768:	0018      	movs	r0, r3
 800576a:	f7ff ffb5 	bl	80056d8 <unlinkjob>
    // fill-in job
    job->func = cb;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	601a      	str	r2, [r3, #0]
    // add to end of run queue
    for(pnext=&OS.runnablejobs; *pnext; pnext=&((*pnext)->next));
 800577a:	4b09      	ldr	r3, [pc, #36]	; (80057a0 <os_setCallback+0x4c>)
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	e002      	b.n	8005786 <os_setCallback+0x32>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1f8      	bne.n	8005780 <os_setCallback+0x2c>
    *pnext = job;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 8005794:	f7fc f824 	bl	80017e0 <hal_enableIRQs>
}
 8005798:	46c0      	nop			; (mov r8, r8)
 800579a:	46bd      	mov	sp, r7
 800579c:	b004      	add	sp, #16
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	20000088 	.word	0x20000088

080057a4 <os_setTimedCallback>:

// schedule timed job
void os_setTimedCallback (osjob_t* job, ostime_t time, osjobcb_t cb) {
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
    osjob_t** pnext;
    hal_disableIRQs();
 80057b0:	f7fc f808 	bl	80017c4 <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.scheduledjobs, job);
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4b16      	ldr	r3, [pc, #88]	; (8005810 <os_setTimedCallback+0x6c>)
 80057b8:	0011      	movs	r1, r2
 80057ba:	0018      	movs	r0, r3
 80057bc:	f7ff ff8c 	bl	80056d8 <unlinkjob>
    // fill-in job
    job->deadline = time;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	605a      	str	r2, [r3, #4]
    job->func = cb;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]
    // insert into schedule
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 80057d2:	4b0f      	ldr	r3, [pc, #60]	; (8005810 <os_setTimedCallback+0x6c>)
 80057d4:	617b      	str	r3, [r7, #20]
 80057d6:	e00e      	b.n	80057f6 <os_setTimedCallback+0x52>
        if((*pnext)->deadline - time > 0) { // (cmp diff, not abs!)
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	dd04      	ble.n	80057f0 <os_setTimedCallback+0x4c>
            // enqueue before next element and stop
            job->next = *pnext;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	601a      	str	r2, [r3, #0]
            break;
 80057ee:	e006      	b.n	80057fe <os_setTimedCallback+0x5a>
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1ec      	bne.n	80057d8 <os_setTimedCallback+0x34>
        }
    }
    *pnext = job;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 8005804:	f7fb ffec 	bl	80017e0 <hal_enableIRQs>
}
 8005808:	46c0      	nop			; (mov r8, r8)
 800580a:	46bd      	mov	sp, r7
 800580c:	b006      	add	sp, #24
 800580e:	bd80      	pop	{r7, pc}
 8005810:	20000084 	.word	0x20000084

08005814 <os_runloop>:

// execute jobs from timer and from run queue
void os_runloop () {
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
    while(1) {
        osjob_t* j = NULL;
 800581a:	2300      	movs	r3, #0
 800581c:	607b      	str	r3, [r7, #4]
        hal_disableIRQs();
 800581e:	f7fb ffd1 	bl	80017c4 <hal_disableIRQs>
        // check for runnable jobs
        if(OS.runnablejobs) {
 8005822:	4b16      	ldr	r3, [pc, #88]	; (800587c <os_runloop+0x68>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d007      	beq.n	800583a <os_runloop+0x26>
            j = OS.runnablejobs;
 800582a:	4b14      	ldr	r3, [pc, #80]	; (800587c <os_runloop+0x68>)
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	607b      	str	r3, [r7, #4]
            OS.runnablejobs = j->next;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	4b11      	ldr	r3, [pc, #68]	; (800587c <os_runloop+0x68>)
 8005836:	605a      	str	r2, [r3, #4]
 8005838:	e015      	b.n	8005866 <os_runloop+0x52>
        } else if(OS.scheduledjobs && hal_checkTimer(OS.scheduledjobs->deadline)) { // check for expired timed jobs
 800583a:	4b10      	ldr	r3, [pc, #64]	; (800587c <os_runloop+0x68>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00f      	beq.n	8005862 <os_runloop+0x4e>
 8005842:	4b0e      	ldr	r3, [pc, #56]	; (800587c <os_runloop+0x68>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	0018      	movs	r0, r3
 800584a:	f7fb ff5f 	bl	800170c <hal_checkTimer>
 800584e:	1e03      	subs	r3, r0, #0
 8005850:	d007      	beq.n	8005862 <os_runloop+0x4e>
            j = OS.scheduledjobs;
 8005852:	4b0a      	ldr	r3, [pc, #40]	; (800587c <os_runloop+0x68>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	607b      	str	r3, [r7, #4]
            OS.scheduledjobs = j->next;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	4b07      	ldr	r3, [pc, #28]	; (800587c <os_runloop+0x68>)
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	e001      	b.n	8005866 <os_runloop+0x52>
        } else { // nothing pending
            hal_sleep(); // wake by irq (timer already restarted)
 8005862:	f7fb ffcf 	bl	8001804 <hal_sleep>
        }
        hal_enableIRQs();
 8005866:	f7fb ffbb 	bl	80017e0 <hal_enableIRQs>
        if(j) { // run job callback
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d0d4      	beq.n	800581a <os_runloop+0x6>
            j->func(j);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	0010      	movs	r0, r2
 8005878:	4798      	blx	r3
    while(1) {
 800587a:	e7ce      	b.n	800581a <os_runloop+0x6>
 800587c:	20000084 	.word	0x20000084

08005880 <writeReg>:
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif


static void writeReg (u1_t addr, u1_t data ) {
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	0002      	movs	r2, r0
 8005888:	1dfb      	adds	r3, r7, #7
 800588a:	701a      	strb	r2, [r3, #0]
 800588c:	1dbb      	adds	r3, r7, #6
 800588e:	1c0a      	adds	r2, r1, #0
 8005890:	701a      	strb	r2, [r3, #0]
    hal_pin_nss(0);
 8005892:	2000      	movs	r0, #0
 8005894:	f7fb fe37 	bl	8001506 <hal_pin_nss>
    hal_spi(addr | 0x80);
 8005898:	1dfb      	adds	r3, r7, #7
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2280      	movs	r2, #128	; 0x80
 800589e:	4252      	negs	r2, r2
 80058a0:	4313      	orrs	r3, r2
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	0018      	movs	r0, r3
 80058a6:	f7fb fea1 	bl	80015ec <hal_spi>
    hal_spi(data);
 80058aa:	1dbb      	adds	r3, r7, #6
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	0018      	movs	r0, r3
 80058b0:	f7fb fe9c 	bl	80015ec <hal_spi>
    hal_pin_nss(1);
 80058b4:	2001      	movs	r0, #1
 80058b6:	f7fb fe26 	bl	8001506 <hal_pin_nss>
}
 80058ba:	46c0      	nop			; (mov r8, r8)
 80058bc:	46bd      	mov	sp, r7
 80058be:	b002      	add	sp, #8
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <readReg>:

static u1_t readReg (u1_t addr) {
 80058c2:	b5b0      	push	{r4, r5, r7, lr}
 80058c4:	b084      	sub	sp, #16
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	0002      	movs	r2, r0
 80058ca:	1dfb      	adds	r3, r7, #7
 80058cc:	701a      	strb	r2, [r3, #0]
    hal_pin_nss(0);
 80058ce:	2000      	movs	r0, #0
 80058d0:	f7fb fe19 	bl	8001506 <hal_pin_nss>
    hal_spi(addr & 0x7F);
 80058d4:	1dfb      	adds	r3, r7, #7
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	227f      	movs	r2, #127	; 0x7f
 80058da:	4013      	ands	r3, r2
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	0018      	movs	r0, r3
 80058e0:	f7fb fe84 	bl	80015ec <hal_spi>
    u1_t val = hal_spi(0x00);
 80058e4:	250f      	movs	r5, #15
 80058e6:	197c      	adds	r4, r7, r5
 80058e8:	2000      	movs	r0, #0
 80058ea:	f7fb fe7f 	bl	80015ec <hal_spi>
 80058ee:	0003      	movs	r3, r0
 80058f0:	7023      	strb	r3, [r4, #0]
    hal_pin_nss(1);
 80058f2:	2001      	movs	r0, #1
 80058f4:	f7fb fe07 	bl	8001506 <hal_pin_nss>
    return val;
 80058f8:	197b      	adds	r3, r7, r5
 80058fa:	781b      	ldrb	r3, [r3, #0]
}
 80058fc:	0018      	movs	r0, r3
 80058fe:	46bd      	mov	sp, r7
 8005900:	b004      	add	sp, #16
 8005902:	bdb0      	pop	{r4, r5, r7, pc}

08005904 <writeBuf>:

static void writeBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 8005904:	b590      	push	{r4, r7, lr}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6039      	str	r1, [r7, #0]
 800590c:	0011      	movs	r1, r2
 800590e:	1dfb      	adds	r3, r7, #7
 8005910:	1c02      	adds	r2, r0, #0
 8005912:	701a      	strb	r2, [r3, #0]
 8005914:	1dbb      	adds	r3, r7, #6
 8005916:	1c0a      	adds	r2, r1, #0
 8005918:	701a      	strb	r2, [r3, #0]
    hal_pin_nss(0);
 800591a:	2000      	movs	r0, #0
 800591c:	f7fb fdf3 	bl	8001506 <hal_pin_nss>
    hal_spi(addr | 0x80);
 8005920:	1dfb      	adds	r3, r7, #7
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	2280      	movs	r2, #128	; 0x80
 8005926:	4252      	negs	r2, r2
 8005928:	4313      	orrs	r3, r2
 800592a:	b2db      	uxtb	r3, r3
 800592c:	0018      	movs	r0, r3
 800592e:	f7fb fe5d 	bl	80015ec <hal_spi>
    for (u1_t i=0; i<len; i++) {
 8005932:	230f      	movs	r3, #15
 8005934:	18fb      	adds	r3, r7, r3
 8005936:	2200      	movs	r2, #0
 8005938:	701a      	strb	r2, [r3, #0]
 800593a:	e00d      	b.n	8005958 <writeBuf+0x54>
        hal_spi(buf[i]);
 800593c:	240f      	movs	r4, #15
 800593e:	193b      	adds	r3, r7, r4
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	18d3      	adds	r3, r2, r3
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	0018      	movs	r0, r3
 800594a:	f7fb fe4f 	bl	80015ec <hal_spi>
    for (u1_t i=0; i<len; i++) {
 800594e:	193b      	adds	r3, r7, r4
 8005950:	781a      	ldrb	r2, [r3, #0]
 8005952:	193b      	adds	r3, r7, r4
 8005954:	3201      	adds	r2, #1
 8005956:	701a      	strb	r2, [r3, #0]
 8005958:	230f      	movs	r3, #15
 800595a:	18fa      	adds	r2, r7, r3
 800595c:	1dbb      	adds	r3, r7, #6
 800595e:	7812      	ldrb	r2, [r2, #0]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	429a      	cmp	r2, r3
 8005964:	d3ea      	bcc.n	800593c <writeBuf+0x38>
    }
    hal_pin_nss(1);
 8005966:	2001      	movs	r0, #1
 8005968:	f7fb fdcd 	bl	8001506 <hal_pin_nss>
}
 800596c:	46c0      	nop			; (mov r8, r8)
 800596e:	46bd      	mov	sp, r7
 8005970:	b005      	add	sp, #20
 8005972:	bd90      	pop	{r4, r7, pc}

08005974 <readBuf>:

static void readBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 8005974:	b5b0      	push	{r4, r5, r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6039      	str	r1, [r7, #0]
 800597c:	0011      	movs	r1, r2
 800597e:	1dfb      	adds	r3, r7, #7
 8005980:	1c02      	adds	r2, r0, #0
 8005982:	701a      	strb	r2, [r3, #0]
 8005984:	1dbb      	adds	r3, r7, #6
 8005986:	1c0a      	adds	r2, r1, #0
 8005988:	701a      	strb	r2, [r3, #0]
    hal_pin_nss(0);
 800598a:	2000      	movs	r0, #0
 800598c:	f7fb fdbb 	bl	8001506 <hal_pin_nss>
    hal_spi(addr & 0x7F);
 8005990:	1dfb      	adds	r3, r7, #7
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	227f      	movs	r2, #127	; 0x7f
 8005996:	4013      	ands	r3, r2
 8005998:	b2db      	uxtb	r3, r3
 800599a:	0018      	movs	r0, r3
 800599c:	f7fb fe26 	bl	80015ec <hal_spi>
    for (u1_t i=0; i<len; i++) {
 80059a0:	230f      	movs	r3, #15
 80059a2:	18fb      	adds	r3, r7, r3
 80059a4:	2200      	movs	r2, #0
 80059a6:	701a      	strb	r2, [r3, #0]
 80059a8:	e00e      	b.n	80059c8 <readBuf+0x54>
        buf[i] = hal_spi(0x00);
 80059aa:	250f      	movs	r5, #15
 80059ac:	197b      	adds	r3, r7, r5
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	18d4      	adds	r4, r2, r3
 80059b4:	2000      	movs	r0, #0
 80059b6:	f7fb fe19 	bl	80015ec <hal_spi>
 80059ba:	0003      	movs	r3, r0
 80059bc:	7023      	strb	r3, [r4, #0]
    for (u1_t i=0; i<len; i++) {
 80059be:	197b      	adds	r3, r7, r5
 80059c0:	781a      	ldrb	r2, [r3, #0]
 80059c2:	197b      	adds	r3, r7, r5
 80059c4:	3201      	adds	r2, #1
 80059c6:	701a      	strb	r2, [r3, #0]
 80059c8:	230f      	movs	r3, #15
 80059ca:	18fa      	adds	r2, r7, r3
 80059cc:	1dbb      	adds	r3, r7, #6
 80059ce:	7812      	ldrb	r2, [r2, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d3e9      	bcc.n	80059aa <readBuf+0x36>
    }
    hal_pin_nss(1);
 80059d6:	2001      	movs	r0, #1
 80059d8:	f7fb fd95 	bl	8001506 <hal_pin_nss>
}
 80059dc:	46c0      	nop			; (mov r8, r8)
 80059de:	46bd      	mov	sp, r7
 80059e0:	b004      	add	sp, #16
 80059e2:	bdb0      	pop	{r4, r5, r7, pc}

080059e4 <opmode>:

static void opmode (u1_t mode) {
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	0002      	movs	r2, r0
 80059ec:	1dfb      	adds	r3, r7, #7
 80059ee:	701a      	strb	r2, [r3, #0]
    writeReg(RegOpMode, (readReg(RegOpMode) & ~OPMODE_MASK) | mode);
 80059f0:	2001      	movs	r0, #1
 80059f2:	f7ff ff66 	bl	80058c2 <readReg>
 80059f6:	0003      	movs	r3, r0
 80059f8:	b25b      	sxtb	r3, r3
 80059fa:	2207      	movs	r2, #7
 80059fc:	4393      	bics	r3, r2
 80059fe:	b25a      	sxtb	r2, r3
 8005a00:	1dfb      	adds	r3, r7, #7
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	b25b      	sxtb	r3, r3
 8005a06:	4313      	orrs	r3, r2
 8005a08:	b25b      	sxtb	r3, r3
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	0019      	movs	r1, r3
 8005a0e:	2001      	movs	r0, #1
 8005a10:	f7ff ff36 	bl	8005880 <writeReg>
}
 8005a14:	46c0      	nop			; (mov r8, r8)
 8005a16:	46bd      	mov	sp, r7
 8005a18:	b002      	add	sp, #8
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <opmodeLora>:

static void opmodeLora() {
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
    u1_t u = OPMODE_LORA;
 8005a22:	1dfb      	adds	r3, r7, #7
 8005a24:	2280      	movs	r2, #128	; 0x80
 8005a26:	701a      	strb	r2, [r3, #0]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 8005a28:	1dfb      	adds	r3, r7, #7
 8005a2a:	1dfa      	adds	r2, r7, #7
 8005a2c:	7812      	ldrb	r2, [r2, #0]
 8005a2e:	2108      	movs	r1, #8
 8005a30:	430a      	orrs	r2, r1
 8005a32:	701a      	strb	r2, [r3, #0]
#endif
    writeReg(RegOpMode, u);
 8005a34:	1dfb      	adds	r3, r7, #7
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	0019      	movs	r1, r3
 8005a3a:	2001      	movs	r0, #1
 8005a3c:	f7ff ff20 	bl	8005880 <writeReg>
}
 8005a40:	46c0      	nop			; (mov r8, r8)
 8005a42:	46bd      	mov	sp, r7
 8005a44:	b002      	add	sp, #8
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <opmodeFSK>:

static void opmodeFSK() {
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
    u1_t u = 0;
 8005a4e:	1dfb      	adds	r3, r7, #7
 8005a50:	2200      	movs	r2, #0
 8005a52:	701a      	strb	r2, [r3, #0]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 8005a54:	1dfb      	adds	r3, r7, #7
 8005a56:	1dfa      	adds	r2, r7, #7
 8005a58:	7812      	ldrb	r2, [r2, #0]
 8005a5a:	2108      	movs	r1, #8
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	701a      	strb	r2, [r3, #0]
#endif
    writeReg(RegOpMode, u);
 8005a60:	1dfb      	adds	r3, r7, #7
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	0019      	movs	r1, r3
 8005a66:	2001      	movs	r0, #1
 8005a68:	f7ff ff0a 	bl	8005880 <writeReg>
}
 8005a6c:	46c0      	nop			; (mov r8, r8)
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	b002      	add	sp, #8
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <configLoraModem>:

// configure LoRa modem (cfg1, cfg2)
static void configLoraModem () {
 8005a74:	b590      	push	{r4, r7, lr}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
    sf_t sf = getSf(LMIC.rps);
 8005a7a:	4b60      	ldr	r3, [pc, #384]	; (8005bfc <configLoraModem+0x188>)
 8005a7c:	89db      	ldrh	r3, [r3, #14]
 8005a7e:	1d3c      	adds	r4, r7, #4
 8005a80:	0018      	movs	r0, r3
 8005a82:	f7fb fee4 	bl	800184e <getSf>
 8005a86:	0003      	movs	r3, r0
 8005a88:	7023      	strb	r3, [r4, #0]

#ifdef CFG_sx1276_radio
        u1_t mc1 = 0, mc2 = 0, mc3 = 0;
 8005a8a:	1dfb      	adds	r3, r7, #7
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	701a      	strb	r2, [r3, #0]
 8005a90:	1dbb      	adds	r3, r7, #6
 8005a92:	2200      	movs	r2, #0
 8005a94:	701a      	strb	r2, [r3, #0]
 8005a96:	1d7b      	adds	r3, r7, #5
 8005a98:	2200      	movs	r2, #0
 8005a9a:	701a      	strb	r2, [r3, #0]

        switch (getBw(LMIC.rps)) {
 8005a9c:	4b57      	ldr	r3, [pc, #348]	; (8005bfc <configLoraModem+0x188>)
 8005a9e:	89db      	ldrh	r3, [r3, #14]
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	f7fb fee4 	bl	800186e <getBw>
 8005aa6:	0003      	movs	r3, r0
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d00a      	beq.n	8005ac2 <configLoraModem+0x4e>
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d010      	beq.n	8005ad2 <configLoraModem+0x5e>
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d116      	bne.n	8005ae2 <configLoraModem+0x6e>
        case BW125: mc1 |= SX1276_MC1_BW_125; break;
 8005ab4:	1dfb      	adds	r3, r7, #7
 8005ab6:	1dfa      	adds	r2, r7, #7
 8005ab8:	7812      	ldrb	r2, [r2, #0]
 8005aba:	2170      	movs	r1, #112	; 0x70
 8005abc:	430a      	orrs	r2, r1
 8005abe:	701a      	strb	r2, [r3, #0]
 8005ac0:	e011      	b.n	8005ae6 <configLoraModem+0x72>
        case BW250: mc1 |= SX1276_MC1_BW_250; break;
 8005ac2:	1dfb      	adds	r3, r7, #7
 8005ac4:	1dfa      	adds	r2, r7, #7
 8005ac6:	7812      	ldrb	r2, [r2, #0]
 8005ac8:	2180      	movs	r1, #128	; 0x80
 8005aca:	4249      	negs	r1, r1
 8005acc:	430a      	orrs	r2, r1
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	e009      	b.n	8005ae6 <configLoraModem+0x72>
        case BW500: mc1 |= SX1276_MC1_BW_500; break;
 8005ad2:	1dfb      	adds	r3, r7, #7
 8005ad4:	1dfa      	adds	r2, r7, #7
 8005ad6:	7812      	ldrb	r2, [r2, #0]
 8005ad8:	2170      	movs	r1, #112	; 0x70
 8005ada:	4249      	negs	r1, r1
 8005adc:	430a      	orrs	r2, r1
 8005ade:	701a      	strb	r2, [r3, #0]
 8005ae0:	e001      	b.n	8005ae6 <configLoraModem+0x72>
        default:
            ASSERT(0);
 8005ae2:	f7fb fead 	bl	8001840 <hal_failed>
        }
        switch( getCr(LMIC.rps) ) {
 8005ae6:	4b45      	ldr	r3, [pc, #276]	; (8005bfc <configLoraModem+0x188>)
 8005ae8:	89db      	ldrh	r3, [r3, #14]
 8005aea:	0018      	movs	r0, r3
 8005aec:	f7fb fed1 	bl	8001892 <getCr>
 8005af0:	0003      	movs	r3, r0
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d00f      	beq.n	8005b16 <configLoraModem+0xa2>
 8005af6:	dc02      	bgt.n	8005afe <configLoraModem+0x8a>
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d005      	beq.n	8005b08 <configLoraModem+0x94>
 8005afc:	e020      	b.n	8005b40 <configLoraModem+0xcc>
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d010      	beq.n	8005b24 <configLoraModem+0xb0>
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d015      	beq.n	8005b32 <configLoraModem+0xbe>
 8005b06:	e01b      	b.n	8005b40 <configLoraModem+0xcc>
        case CR_4_5: mc1 |= SX1276_MC1_CR_4_5; break;
 8005b08:	1dfb      	adds	r3, r7, #7
 8005b0a:	1dfa      	adds	r2, r7, #7
 8005b0c:	7812      	ldrb	r2, [r2, #0]
 8005b0e:	2102      	movs	r1, #2
 8005b10:	430a      	orrs	r2, r1
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	e016      	b.n	8005b44 <configLoraModem+0xd0>
        case CR_4_6: mc1 |= SX1276_MC1_CR_4_6; break;
 8005b16:	1dfb      	adds	r3, r7, #7
 8005b18:	1dfa      	adds	r2, r7, #7
 8005b1a:	7812      	ldrb	r2, [r2, #0]
 8005b1c:	2104      	movs	r1, #4
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	701a      	strb	r2, [r3, #0]
 8005b22:	e00f      	b.n	8005b44 <configLoraModem+0xd0>
        case CR_4_7: mc1 |= SX1276_MC1_CR_4_7; break;
 8005b24:	1dfb      	adds	r3, r7, #7
 8005b26:	1dfa      	adds	r2, r7, #7
 8005b28:	7812      	ldrb	r2, [r2, #0]
 8005b2a:	2106      	movs	r1, #6
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	701a      	strb	r2, [r3, #0]
 8005b30:	e008      	b.n	8005b44 <configLoraModem+0xd0>
        case CR_4_8: mc1 |= SX1276_MC1_CR_4_8; break;
 8005b32:	1dfb      	adds	r3, r7, #7
 8005b34:	1dfa      	adds	r2, r7, #7
 8005b36:	7812      	ldrb	r2, [r2, #0]
 8005b38:	2108      	movs	r1, #8
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	701a      	strb	r2, [r3, #0]
 8005b3e:	e001      	b.n	8005b44 <configLoraModem+0xd0>
        default:
            ASSERT(0);
 8005b40:	f7fb fe7e 	bl	8001840 <hal_failed>
        }

        if (getIh(LMIC.rps)) {
 8005b44:	4b2d      	ldr	r3, [pc, #180]	; (8005bfc <configLoraModem+0x188>)
 8005b46:	89db      	ldrh	r3, [r3, #14]
 8005b48:	0018      	movs	r0, r3
 8005b4a:	f7fb fef6 	bl	800193a <getIh>
 8005b4e:	1e03      	subs	r3, r0, #0
 8005b50:	d010      	beq.n	8005b74 <configLoraModem+0x100>
            mc1 |= SX1276_MC1_IMPLICIT_HEADER_MODE_ON;
 8005b52:	1dfb      	adds	r3, r7, #7
 8005b54:	1dfa      	adds	r2, r7, #7
 8005b56:	7812      	ldrb	r2, [r2, #0]
 8005b58:	2101      	movs	r1, #1
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	701a      	strb	r2, [r3, #0]
            writeReg(LORARegPayloadLength, getIh(LMIC.rps)); // required length
 8005b5e:	4b27      	ldr	r3, [pc, #156]	; (8005bfc <configLoraModem+0x188>)
 8005b60:	89db      	ldrh	r3, [r3, #14]
 8005b62:	0018      	movs	r0, r3
 8005b64:	f7fb fee9 	bl	800193a <getIh>
 8005b68:	0003      	movs	r3, r0
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	0019      	movs	r1, r3
 8005b6e:	2022      	movs	r0, #34	; 0x22
 8005b70:	f7ff fe86 	bl	8005880 <writeReg>
        }
        // set ModemConfig1
        writeReg(LORARegModemConfig1, mc1);
 8005b74:	1dfb      	adds	r3, r7, #7
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	0019      	movs	r1, r3
 8005b7a:	201d      	movs	r0, #29
 8005b7c:	f7ff fe80 	bl	8005880 <writeReg>

        mc2 = (SX1272_MC2_SF7 + ((sf-1)<<4));
 8005b80:	1d3b      	adds	r3, r7, #4
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	3b01      	subs	r3, #1
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	011b      	lsls	r3, r3, #4
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	1dbb      	adds	r3, r7, #6
 8005b8e:	3270      	adds	r2, #112	; 0x70
 8005b90:	701a      	strb	r2, [r3, #0]
        if (getNocrc(LMIC.rps) == 0) {
 8005b92:	4b1a      	ldr	r3, [pc, #104]	; (8005bfc <configLoraModem+0x188>)
 8005b94:	89db      	ldrh	r3, [r3, #14]
 8005b96:	0018      	movs	r0, r3
 8005b98:	f7fb fea7 	bl	80018ea <getNocrc>
 8005b9c:	1e03      	subs	r3, r0, #0
 8005b9e:	d105      	bne.n	8005bac <configLoraModem+0x138>
            mc2 |= SX1276_MC2_RX_PAYLOAD_CRCON;
 8005ba0:	1dbb      	adds	r3, r7, #6
 8005ba2:	1dba      	adds	r2, r7, #6
 8005ba4:	7812      	ldrb	r2, [r2, #0]
 8005ba6:	2104      	movs	r1, #4
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	701a      	strb	r2, [r3, #0]
        }
        writeReg(LORARegModemConfig2, mc2);
 8005bac:	1dbb      	adds	r3, r7, #6
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	0019      	movs	r1, r3
 8005bb2:	201e      	movs	r0, #30
 8005bb4:	f7ff fe64 	bl	8005880 <writeReg>
        
        mc3 = SX1276_MC3_AGCAUTO;
 8005bb8:	1d7b      	adds	r3, r7, #5
 8005bba:	2204      	movs	r2, #4
 8005bbc:	701a      	strb	r2, [r3, #0]
        if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
 8005bbe:	1d3b      	adds	r3, r7, #4
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	2b05      	cmp	r3, #5
 8005bc4:	d003      	beq.n	8005bce <configLoraModem+0x15a>
 8005bc6:	1d3b      	adds	r3, r7, #4
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	2b06      	cmp	r3, #6
 8005bcc:	d10c      	bne.n	8005be8 <configLoraModem+0x174>
 8005bce:	4b0b      	ldr	r3, [pc, #44]	; (8005bfc <configLoraModem+0x188>)
 8005bd0:	89db      	ldrh	r3, [r3, #14]
 8005bd2:	0018      	movs	r0, r3
 8005bd4:	f7fb fe4b 	bl	800186e <getBw>
 8005bd8:	1e03      	subs	r3, r0, #0
 8005bda:	d105      	bne.n	8005be8 <configLoraModem+0x174>
            mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
 8005bdc:	1d7b      	adds	r3, r7, #5
 8005bde:	1d7a      	adds	r2, r7, #5
 8005be0:	7812      	ldrb	r2, [r2, #0]
 8005be2:	2108      	movs	r1, #8
 8005be4:	430a      	orrs	r2, r1
 8005be6:	701a      	strb	r2, [r3, #0]
        }
        writeReg(LORARegModemConfig3, mc3);
 8005be8:	1d7b      	adds	r3, r7, #5
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	0019      	movs	r1, r3
 8005bee:	2026      	movs	r0, #38	; 0x26
 8005bf0:	f7ff fe46 	bl	8005880 <writeReg>
#endif

#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 8005bf4:	46c0      	nop			; (mov r8, r8)
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	b003      	add	sp, #12
 8005bfa:	bd90      	pop	{r4, r7, pc}
 8005bfc:	200002c4 	.word	0x200002c4

08005c00 <configChannel>:

static void configChannel () {
 8005c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
    // set frequency: FQ = (FRF * 32 Mhz) / (2 ^ 19)
    u8_t frf = ((u8_t)LMIC.freq << 19) / 32000000;
 8005c06:	4e1b      	ldr	r6, [pc, #108]	; (8005c74 <configChannel+0x74>)
 8005c08:	68b6      	ldr	r6, [r6, #8]
 8005c0a:	0032      	movs	r2, r6
 8005c0c:	2600      	movs	r6, #0
 8005c0e:	0033      	movs	r3, r6
 8005c10:	0b51      	lsrs	r1, r2, #13
 8005c12:	04d0      	lsls	r0, r2, #19
 8005c14:	4a18      	ldr	r2, [pc, #96]	; (8005c78 <configChannel+0x78>)
 8005c16:	2300      	movs	r3, #0
 8005c18:	f7fa fc10 	bl	800043c <__aeabi_uldivmod>
 8005c1c:	0002      	movs	r2, r0
 8005c1e:	000b      	movs	r3, r1
 8005c20:	60ba      	str	r2, [r7, #8]
 8005c22:	60fb      	str	r3, [r7, #12]
    writeReg(RegFrfMsb, (u1_t)(frf>>16));
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	041b      	lsls	r3, r3, #16
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	0c12      	lsrs	r2, r2, #16
 8005c2c:	603a      	str	r2, [r7, #0]
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	431a      	orrs	r2, r3
 8005c32:	603a      	str	r2, [r7, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	0c1b      	lsrs	r3, r3, #16
 8005c38:	607b      	str	r3, [r7, #4]
 8005c3a:	783b      	ldrb	r3, [r7, #0]
 8005c3c:	0019      	movs	r1, r3
 8005c3e:	2006      	movs	r0, #6
 8005c40:	f7ff fe1e 	bl	8005880 <writeReg>
    writeReg(RegFrfMid, (u1_t)(frf>> 8));
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	061b      	lsls	r3, r3, #24
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	0a14      	lsrs	r4, r2, #8
 8005c4c:	431c      	orrs	r4, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	0a1d      	lsrs	r5, r3, #8
 8005c52:	b2e3      	uxtb	r3, r4
 8005c54:	0019      	movs	r1, r3
 8005c56:	2007      	movs	r0, #7
 8005c58:	f7ff fe12 	bl	8005880 <writeReg>
    writeReg(RegFrfLsb, (u1_t)(frf>> 0));
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	68fc      	ldr	r4, [r7, #12]
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	0019      	movs	r1, r3
 8005c64:	2008      	movs	r0, #8
 8005c66:	f7ff fe0b 	bl	8005880 <writeReg>
}
 8005c6a:	46c0      	nop			; (mov r8, r8)
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	b005      	add	sp, #20
 8005c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c72:	46c0      	nop			; (mov r8, r8)
 8005c74:	200002c4 	.word	0x200002c4
 8005c78:	01e84800 	.word	0x01e84800

08005c7c <configPower>:



static void configPower () {
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
#ifdef CFG_sx1276_radio
    // no boost used for now
    s1_t pw = (s1_t)LMIC.txpow;
 8005c82:	1dfb      	adds	r3, r7, #7
 8005c84:	4a18      	ldr	r2, [pc, #96]	; (8005ce8 <configPower+0x6c>)
 8005c86:	7c92      	ldrb	r2, [r2, #18]
 8005c88:	701a      	strb	r2, [r3, #0]
    if(pw >= 17) {
 8005c8a:	1dfb      	adds	r3, r7, #7
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	b25b      	sxtb	r3, r3
 8005c90:	2b10      	cmp	r3, #16
 8005c92:	dd03      	ble.n	8005c9c <configPower+0x20>
        pw = 15;
 8005c94:	1dfb      	adds	r3, r7, #7
 8005c96:	220f      	movs	r2, #15
 8005c98:	701a      	strb	r2, [r3, #0]
 8005c9a:	e007      	b.n	8005cac <configPower+0x30>
    } else if(pw < 2) {
 8005c9c:	1dfb      	adds	r3, r7, #7
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	b25b      	sxtb	r3, r3
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	dc02      	bgt.n	8005cac <configPower+0x30>
        pw = 2;
 8005ca6:	1dfb      	adds	r3, r7, #7
 8005ca8:	2202      	movs	r2, #2
 8005caa:	701a      	strb	r2, [r3, #0]
    }
    // check board type for BOOST pin
    writeReg(RegPaConfig, (u1_t)(0x80|(pw&0xf)));
 8005cac:	1dfb      	adds	r3, r7, #7
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	220f      	movs	r2, #15
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	b25b      	sxtb	r3, r3
 8005cb6:	2280      	movs	r2, #128	; 0x80
 8005cb8:	4252      	negs	r2, r2
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	b25b      	sxtb	r3, r3
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	0019      	movs	r1, r3
 8005cc2:	2009      	movs	r0, #9
 8005cc4:	f7ff fddc 	bl	8005880 <writeReg>
    writeReg(RegPaDac, readReg(RegPaDac)|0x4);
 8005cc8:	205a      	movs	r0, #90	; 0x5a
 8005cca:	f7ff fdfa 	bl	80058c2 <readReg>
 8005cce:	0003      	movs	r3, r0
 8005cd0:	001a      	movs	r2, r3
 8005cd2:	2304      	movs	r3, #4
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	0019      	movs	r1, r3
 8005cda:	205a      	movs	r0, #90	; 0x5a
 8005cdc:	f7ff fdd0 	bl	8005880 <writeReg>
    }
    writeReg(RegPaConfig, (u1_t)(0x80|(pw-2)));
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 8005ce0:	46c0      	nop			; (mov r8, r8)
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	b002      	add	sp, #8
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	200002c4 	.word	0x200002c4

08005cec <txfsk>:

static void txfsk () {
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
    // select FSK modem (from sleep mode)
    writeReg(RegOpMode, 0x10); // FSK, BT=0.5
 8005cf0:	2110      	movs	r1, #16
 8005cf2:	2001      	movs	r0, #1
 8005cf4:	f7ff fdc4 	bl	8005880 <writeReg>
    ASSERT(readReg(RegOpMode) == 0x10);
 8005cf8:	2001      	movs	r0, #1
 8005cfa:	f7ff fde2 	bl	80058c2 <readReg>
 8005cfe:	0003      	movs	r3, r0
 8005d00:	2b10      	cmp	r3, #16
 8005d02:	d001      	beq.n	8005d08 <txfsk+0x1c>
 8005d04:	f7fb fd9c 	bl	8001840 <hal_failed>
    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 8005d08:	2001      	movs	r0, #1
 8005d0a:	f7ff fe6b 	bl	80059e4 <opmode>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8005d0e:	2102      	movs	r1, #2
 8005d10:	2002      	movs	r0, #2
 8005d12:	f7ff fdb5 	bl	8005880 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 8005d16:	2180      	movs	r1, #128	; 0x80
 8005d18:	2003      	movs	r0, #3
 8005d1a:	f7ff fdb1 	bl	8005880 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8005d1e:	2101      	movs	r1, #1
 8005d20:	2004      	movs	r0, #4
 8005d22:	f7ff fdad 	bl	8005880 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 8005d26:	2199      	movs	r1, #153	; 0x99
 8005d28:	2005      	movs	r0, #5
 8005d2a:	f7ff fda9 	bl	8005880 <writeReg>
    // frame and packet handler settings
    writeReg(FSKRegPreambleMsb, 0x00);
 8005d2e:	2100      	movs	r1, #0
 8005d30:	2025      	movs	r0, #37	; 0x25
 8005d32:	f7ff fda5 	bl	8005880 <writeReg>
    writeReg(FSKRegPreambleLsb, 0x05);
 8005d36:	2105      	movs	r1, #5
 8005d38:	2026      	movs	r0, #38	; 0x26
 8005d3a:	f7ff fda1 	bl	8005880 <writeReg>
    writeReg(FSKRegSyncConfig, 0x12);
 8005d3e:	2112      	movs	r1, #18
 8005d40:	2027      	movs	r0, #39	; 0x27
 8005d42:	f7ff fd9d 	bl	8005880 <writeReg>
    writeReg(FSKRegPacketConfig1, 0xD0);
 8005d46:	21d0      	movs	r1, #208	; 0xd0
 8005d48:	2030      	movs	r0, #48	; 0x30
 8005d4a:	f7ff fd99 	bl	8005880 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40);
 8005d4e:	2140      	movs	r1, #64	; 0x40
 8005d50:	2031      	movs	r0, #49	; 0x31
 8005d52:	f7ff fd95 	bl	8005880 <writeReg>
    writeReg(FSKRegSyncValue1, 0xC1);
 8005d56:	21c1      	movs	r1, #193	; 0xc1
 8005d58:	2028      	movs	r0, #40	; 0x28
 8005d5a:	f7ff fd91 	bl	8005880 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 8005d5e:	2194      	movs	r1, #148	; 0x94
 8005d60:	2029      	movs	r0, #41	; 0x29
 8005d62:	f7ff fd8d 	bl	8005880 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 8005d66:	21c1      	movs	r1, #193	; 0xc1
 8005d68:	202a      	movs	r0, #42	; 0x2a
 8005d6a:	f7ff fd89 	bl	8005880 <writeReg>
    // configure frequency
    configChannel();
 8005d6e:	f7ff ff47 	bl	8005c00 <configChannel>
    // configure output power
    configPower();
 8005d72:	f7ff ff83 	bl	8005c7c <configPower>

    // set the IRQ mapping DIO0=PacketSent DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TXNOP);
 8005d76:	2134      	movs	r1, #52	; 0x34
 8005d78:	2040      	movs	r0, #64	; 0x40
 8005d7a:	f7ff fd81 	bl	8005880 <writeReg>

    // initialize the payload size and address pointers    
    writeReg(FSKRegPayloadLength, LMIC.dataLen+1); // (insert length byte into payload))
 8005d7e:	4a12      	ldr	r2, [pc, #72]	; (8005dc8 <txfsk+0xdc>)
 8005d80:	2348      	movs	r3, #72	; 0x48
 8005d82:	33ff      	adds	r3, #255	; 0xff
 8005d84:	5cd3      	ldrb	r3, [r2, r3]
 8005d86:	3301      	adds	r3, #1
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	0019      	movs	r1, r3
 8005d8c:	2032      	movs	r0, #50	; 0x32
 8005d8e:	f7ff fd77 	bl	8005880 <writeReg>

    // download length byte and buffer to the radio FIFO
    writeReg(RegFifo, LMIC.dataLen);
 8005d92:	4a0d      	ldr	r2, [pc, #52]	; (8005dc8 <txfsk+0xdc>)
 8005d94:	2348      	movs	r3, #72	; 0x48
 8005d96:	33ff      	adds	r3, #255	; 0xff
 8005d98:	5cd3      	ldrb	r3, [r2, r3]
 8005d9a:	0019      	movs	r1, r3
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	f7ff fd6f 	bl	8005880 <writeReg>
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8005da2:	4a09      	ldr	r2, [pc, #36]	; (8005dc8 <txfsk+0xdc>)
 8005da4:	2348      	movs	r3, #72	; 0x48
 8005da6:	33ff      	adds	r3, #255	; 0xff
 8005da8:	5cd2      	ldrb	r2, [r2, r3]
 8005daa:	4b08      	ldr	r3, [pc, #32]	; (8005dcc <txfsk+0xe0>)
 8005dac:	0019      	movs	r1, r3
 8005dae:	2000      	movs	r0, #0
 8005db0:	f7ff fda8 	bl	8005904 <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 8005db4:	2001      	movs	r0, #1
 8005db6:	f7fb fb9c 	bl	80014f2 <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
 8005dba:	2003      	movs	r0, #3
 8005dbc:	f7ff fe12 	bl	80059e4 <opmode>
}
 8005dc0:	46c0      	nop			; (mov r8, r8)
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	46c0      	nop			; (mov r8, r8)
 8005dc8:	200002c4 	.word	0x200002c4
 8005dcc:	2000040c 	.word	0x2000040c

08005dd0 <txlora>:

static void txlora () {
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	af00      	add	r7, sp, #0
    // select LoRa modem (from sleep mode)
    //writeReg(RegOpMode, OPMODE_LORA);
    opmodeLora();
 8005dd4:	f7ff fe22 	bl	8005a1c <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 8005dd8:	2001      	movs	r0, #1
 8005dda:	f7ff fd72 	bl	80058c2 <readReg>
 8005dde:	0003      	movs	r3, r0
 8005de0:	b25b      	sxtb	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	db01      	blt.n	8005dea <txlora+0x1a>
 8005de6:	f7fb fd2b 	bl	8001840 <hal_failed>

    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 8005dea:	2001      	movs	r0, #1
 8005dec:	f7ff fdfa 	bl	80059e4 <opmode>
    // configure LoRa modem (cfg1, cfg2)
    configLoraModem();
 8005df0:	f7ff fe40 	bl	8005a74 <configLoraModem>
    // configure frequency
    configChannel();
 8005df4:	f7ff ff04 	bl	8005c00 <configChannel>
    // configure output power
    writeReg(RegPaRamp, (readReg(RegPaRamp) & 0xF0) | 0x08); // set PA ramp-up time 50 uSec
 8005df8:	200a      	movs	r0, #10
 8005dfa:	f7ff fd62 	bl	80058c2 <readReg>
 8005dfe:	0003      	movs	r3, r0
 8005e00:	b25b      	sxtb	r3, r3
 8005e02:	220f      	movs	r2, #15
 8005e04:	4393      	bics	r3, r2
 8005e06:	b25b      	sxtb	r3, r3
 8005e08:	2208      	movs	r2, #8
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	b25b      	sxtb	r3, r3
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	0019      	movs	r1, r3
 8005e12:	200a      	movs	r0, #10
 8005e14:	f7ff fd34 	bl	8005880 <writeReg>
    configPower();
 8005e18:	f7ff ff30 	bl	8005c7c <configPower>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8005e1c:	2134      	movs	r1, #52	; 0x34
 8005e1e:	2039      	movs	r0, #57	; 0x39
 8005e20:	f7ff fd2e 	bl	8005880 <writeReg>
    
    // set the IRQ mapping DIO0=TxDone DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_TXDONE|MAP_DIO1_LORA_NOP|MAP_DIO2_LORA_NOP);
 8005e24:	21f0      	movs	r1, #240	; 0xf0
 8005e26:	2040      	movs	r0, #64	; 0x40
 8005e28:	f7ff fd2a 	bl	8005880 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 8005e2c:	21ff      	movs	r1, #255	; 0xff
 8005e2e:	2012      	movs	r0, #18
 8005e30:	f7ff fd26 	bl	8005880 <writeReg>
    // mask all IRQs but TxDone
    writeReg(LORARegIrqFlagsMask, ~IRQ_LORA_TXDONE_MASK);
 8005e34:	21f7      	movs	r1, #247	; 0xf7
 8005e36:	2011      	movs	r0, #17
 8005e38:	f7ff fd22 	bl	8005880 <writeReg>

    // initialize the payload size and address pointers    
    writeReg(LORARegFifoTxBaseAddr, 0x00);
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	200e      	movs	r0, #14
 8005e40:	f7ff fd1e 	bl	8005880 <writeReg>
    writeReg(LORARegFifoAddrPtr, 0x00);
 8005e44:	2100      	movs	r1, #0
 8005e46:	200d      	movs	r0, #13
 8005e48:	f7ff fd1a 	bl	8005880 <writeReg>
    writeReg(LORARegPayloadLength, LMIC.dataLen);
 8005e4c:	4a0c      	ldr	r2, [pc, #48]	; (8005e80 <txlora+0xb0>)
 8005e4e:	2348      	movs	r3, #72	; 0x48
 8005e50:	33ff      	adds	r3, #255	; 0xff
 8005e52:	5cd3      	ldrb	r3, [r2, r3]
 8005e54:	0019      	movs	r1, r3
 8005e56:	2022      	movs	r0, #34	; 0x22
 8005e58:	f7ff fd12 	bl	8005880 <writeReg>
       
    // download buffer to the radio FIFO
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8005e5c:	4a08      	ldr	r2, [pc, #32]	; (8005e80 <txlora+0xb0>)
 8005e5e:	2348      	movs	r3, #72	; 0x48
 8005e60:	33ff      	adds	r3, #255	; 0xff
 8005e62:	5cd2      	ldrb	r2, [r2, r3]
 8005e64:	4b07      	ldr	r3, [pc, #28]	; (8005e84 <txlora+0xb4>)
 8005e66:	0019      	movs	r1, r3
 8005e68:	2000      	movs	r0, #0
 8005e6a:	f7ff fd4b 	bl	8005904 <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 8005e6e:	2001      	movs	r0, #1
 8005e70:	f7fb fb3f 	bl	80014f2 <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
 8005e74:	2003      	movs	r0, #3
 8005e76:	f7ff fdb5 	bl	80059e4 <opmode>
}
 8005e7a:	46c0      	nop			; (mov r8, r8)
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	200002c4 	.word	0x200002c4
 8005e84:	2000040c 	.word	0x2000040c

08005e88 <starttx>:

// start transmitter (buf=LMIC.frame, len=LMIC.dataLen)
static void starttx () {
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	af00      	add	r7, sp, #0
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 8005e8c:	2001      	movs	r0, #1
 8005e8e:	f7ff fd18 	bl	80058c2 <readReg>
 8005e92:	0003      	movs	r3, r0
 8005e94:	001a      	movs	r2, r3
 8005e96:	2307      	movs	r3, #7
 8005e98:	4013      	ands	r3, r2
 8005e9a:	d001      	beq.n	8005ea0 <starttx+0x18>
 8005e9c:	f7fb fcd0 	bl	8001840 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 8005ea0:	4b07      	ldr	r3, [pc, #28]	; (8005ec0 <starttx+0x38>)
 8005ea2:	89db      	ldrh	r3, [r3, #14]
 8005ea4:	0018      	movs	r0, r3
 8005ea6:	f7fb fcd2 	bl	800184e <getSf>
 8005eaa:	1e03      	subs	r3, r0, #0
 8005eac:	d102      	bne.n	8005eb4 <starttx+0x2c>
        txfsk();
 8005eae:	f7ff ff1d 	bl	8005cec <txfsk>
    } else { // LoRa modem
        txlora();
    }
    // the radio will go back to STANDBY mode as soon as the TX is finished
    // the corresponding IRQ will inform us about completion.
}
 8005eb2:	e001      	b.n	8005eb8 <starttx+0x30>
        txlora();
 8005eb4:	f7ff ff8c 	bl	8005dd0 <txlora>
}
 8005eb8:	46c0      	nop			; (mov r8, r8)
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	46c0      	nop			; (mov r8, r8)
 8005ec0:	200002c4 	.word	0x200002c4

08005ec4 <rxlora>:
    [RXMODE_SCAN]   = IRQ_LORA_RXDONE_MASK,
    [RXMODE_RSSI]   = 0x00,
};

// start LoRa receiver (time=LMIC.rxtime, timeout=LMIC.rxsyms, result=LMIC.frame[LMIC.dataLen])
static void rxlora (u1_t rxmode) {
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	0002      	movs	r2, r0
 8005ecc:	1dfb      	adds	r3, r7, #7
 8005ece:	701a      	strb	r2, [r3, #0]
    // select LoRa modem (from sleep mode)
    opmodeLora();
 8005ed0:	f7ff fda4 	bl	8005a1c <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 8005ed4:	2001      	movs	r0, #1
 8005ed6:	f7ff fcf4 	bl	80058c2 <readReg>
 8005eda:	0003      	movs	r3, r0
 8005edc:	b25b      	sxtb	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	db01      	blt.n	8005ee6 <rxlora+0x22>
 8005ee2:	f7fb fcad 	bl	8001840 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 8005ee6:	2001      	movs	r0, #1
 8005ee8:	f7ff fd7c 	bl	80059e4 <opmode>
    // don't use MAC settings at startup
    if(rxmode == RXMODE_RSSI) { // use fixed settings for rssi scan
 8005eec:	1dfb      	adds	r3, r7, #7
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d108      	bne.n	8005f06 <rxlora+0x42>
        writeReg(LORARegModemConfig1, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG1);
 8005ef4:	210a      	movs	r1, #10
 8005ef6:	201d      	movs	r0, #29
 8005ef8:	f7ff fcc2 	bl	8005880 <writeReg>
        writeReg(LORARegModemConfig2, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG2);
 8005efc:	2170      	movs	r1, #112	; 0x70
 8005efe:	201e      	movs	r0, #30
 8005f00:	f7ff fcbe 	bl	8005880 <writeReg>
 8005f04:	e003      	b.n	8005f0e <rxlora+0x4a>
    } else { // single or continuous rx mode
        // configure LoRa modem (cfg1, cfg2)
        configLoraModem();
 8005f06:	f7ff fdb5 	bl	8005a74 <configLoraModem>
        // configure frequency
        configChannel();
 8005f0a:	f7ff fe79 	bl	8005c00 <configChannel>
    }
    // set LNA gain
    writeReg(RegLna, LNA_RX_GAIN); 
 8005f0e:	2121      	movs	r1, #33	; 0x21
 8005f10:	200c      	movs	r0, #12
 8005f12:	f7ff fcb5 	bl	8005880 <writeReg>
    // set max payload size
    writeReg(LORARegPayloadMaxLength, 64);
 8005f16:	2140      	movs	r1, #64	; 0x40
 8005f18:	2023      	movs	r0, #35	; 0x23
 8005f1a:	f7ff fcb1 	bl	8005880 <writeReg>
    // use inverted I/Q signal (prevent mote-to-mote communication)

    // XXX: use flag to switch on/off inversion
    if (LMIC.noRXIQinversion) {
 8005f1e:	4a29      	ldr	r2, [pc, #164]	; (8005fc4 <rxlora+0x100>)
 8005f20:	23d4      	movs	r3, #212	; 0xd4
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	5cd3      	ldrb	r3, [r2, r3]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00d      	beq.n	8005f46 <rxlora+0x82>
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) & ~(1<<6));
 8005f2a:	2033      	movs	r0, #51	; 0x33
 8005f2c:	f7ff fcc9 	bl	80058c2 <readReg>
 8005f30:	0003      	movs	r3, r0
 8005f32:	001a      	movs	r2, r3
 8005f34:	2340      	movs	r3, #64	; 0x40
 8005f36:	439a      	bics	r2, r3
 8005f38:	0013      	movs	r3, r2
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	0019      	movs	r1, r3
 8005f3e:	2033      	movs	r0, #51	; 0x33
 8005f40:	f7ff fc9e 	bl	8005880 <writeReg>
 8005f44:	e00b      	b.n	8005f5e <rxlora+0x9a>
    } else {
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ)|(1<<6));
 8005f46:	2033      	movs	r0, #51	; 0x33
 8005f48:	f7ff fcbb 	bl	80058c2 <readReg>
 8005f4c:	0003      	movs	r3, r0
 8005f4e:	001a      	movs	r2, r3
 8005f50:	2340      	movs	r3, #64	; 0x40
 8005f52:	4313      	orrs	r3, r2
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	0019      	movs	r1, r3
 8005f58:	2033      	movs	r0, #51	; 0x33
 8005f5a:	f7ff fc91 	bl	8005880 <writeReg>
    }

    // set symbol timeout (for single rx)
    writeReg(LORARegSymbTimeoutLsb, LMIC.rxsyms);
 8005f5e:	4b19      	ldr	r3, [pc, #100]	; (8005fc4 <rxlora+0x100>)
 8005f60:	7c1b      	ldrb	r3, [r3, #16]
 8005f62:	0019      	movs	r1, r3
 8005f64:	201f      	movs	r0, #31
 8005f66:	f7ff fc8b 	bl	8005880 <writeReg>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8005f6a:	2134      	movs	r1, #52	; 0x34
 8005f6c:	2039      	movs	r0, #57	; 0x39
 8005f6e:	f7ff fc87 	bl	8005880 <writeReg>
    
    // configure DIO mapping DIO0=RxDone DIO1=RxTout DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_RXDONE|MAP_DIO1_LORA_RXTOUT|MAP_DIO2_LORA_NOP);
 8005f72:	21c0      	movs	r1, #192	; 0xc0
 8005f74:	2040      	movs	r0, #64	; 0x40
 8005f76:	f7ff fc83 	bl	8005880 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 8005f7a:	21ff      	movs	r1, #255	; 0xff
 8005f7c:	2012      	movs	r0, #18
 8005f7e:	f7ff fc7f 	bl	8005880 <writeReg>
    // enable required radio IRQs
    writeReg(LORARegIrqFlagsMask, ~rxlorairqmask[rxmode]);
 8005f82:	1dfb      	adds	r3, r7, #7
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	4a10      	ldr	r2, [pc, #64]	; (8005fc8 <rxlora+0x104>)
 8005f88:	5cd3      	ldrb	r3, [r2, r3]
 8005f8a:	43db      	mvns	r3, r3
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	0019      	movs	r1, r3
 8005f90:	2011      	movs	r0, #17
 8005f92:	f7ff fc75 	bl	8005880 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 8005f96:	2000      	movs	r0, #0
 8005f98:	f7fb faab 	bl	80014f2 <hal_pin_rxtx>

    // now instruct the radio to receive
    if (rxmode == RXMODE_SINGLE) { // single rx
 8005f9c:	1dfb      	adds	r3, r7, #7
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d108      	bne.n	8005fb6 <rxlora+0xf2>
        hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8005fa4:	4b07      	ldr	r3, [pc, #28]	; (8005fc4 <rxlora+0x100>)
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	0018      	movs	r0, r3
 8005faa:	f7fb fb9f 	bl	80016ec <hal_waitUntil>
        opmode(OPMODE_RX_SINGLE);
 8005fae:	2006      	movs	r0, #6
 8005fb0:	f7ff fd18 	bl	80059e4 <opmode>
    } else { // continous rx (scan or rssi)
        opmode(OPMODE_RX); 
    }
}
 8005fb4:	e002      	b.n	8005fbc <rxlora+0xf8>
        opmode(OPMODE_RX); 
 8005fb6:	2005      	movs	r0, #5
 8005fb8:	f7ff fd14 	bl	80059e4 <opmode>
}
 8005fbc:	46c0      	nop			; (mov r8, r8)
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	b002      	add	sp, #8
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	200002c4 	.word	0x200002c4
 8005fc8:	0800cd30 	.word	0x0800cd30

08005fcc <rxfsk>:

static void rxfsk (u1_t rxmode) {
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	0002      	movs	r2, r0
 8005fd4:	1dfb      	adds	r3, r7, #7
 8005fd6:	701a      	strb	r2, [r3, #0]
    // only single rx (no continuous scanning, no noise sampling)
    ASSERT( rxmode == RXMODE_SINGLE );
 8005fd8:	1dfb      	adds	r3, r7, #7
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <rxfsk+0x18>
 8005fe0:	f7fb fc2e 	bl	8001840 <hal_failed>
    // select FSK modem (from sleep mode)
    //writeReg(RegOpMode, 0x00); // (not LoRa)
    opmodeFSK();
 8005fe4:	f7ff fd30 	bl	8005a48 <opmodeFSK>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) == 0);
 8005fe8:	2001      	movs	r0, #1
 8005fea:	f7ff fc6a 	bl	80058c2 <readReg>
 8005fee:	0003      	movs	r3, r0
 8005ff0:	b25b      	sxtb	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	da01      	bge.n	8005ffa <rxfsk+0x2e>
 8005ff6:	f7fb fc23 	bl	8001840 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 8005ffa:	2001      	movs	r0, #1
 8005ffc:	f7ff fcf2 	bl	80059e4 <opmode>
    // configure frequency
    configChannel();
 8006000:	f7ff fdfe 	bl	8005c00 <configChannel>
    // set LNA gain
    //writeReg(RegLna, 0x20|0x03); // max gain, boost enable
    writeReg(RegLna, LNA_RX_GAIN);
 8006004:	2121      	movs	r1, #33	; 0x21
 8006006:	200c      	movs	r0, #12
 8006008:	f7ff fc3a 	bl	8005880 <writeReg>
    // configure receiver
    writeReg(FSKRegRxConfig, 0x1E); // AFC auto, AGC, trigger on preamble?!?
 800600c:	211e      	movs	r1, #30
 800600e:	200d      	movs	r0, #13
 8006010:	f7ff fc36 	bl	8005880 <writeReg>
    // set receiver bandwidth
    writeReg(FSKRegRxBw, 0x0B); // 50kHz SSb
 8006014:	210b      	movs	r1, #11
 8006016:	2012      	movs	r0, #18
 8006018:	f7ff fc32 	bl	8005880 <writeReg>
    // set AFC bandwidth
    writeReg(FSKRegAfcBw, 0x12); // 83.3kHz SSB
 800601c:	2112      	movs	r1, #18
 800601e:	2013      	movs	r0, #19
 8006020:	f7ff fc2e 	bl	8005880 <writeReg>
    // set preamble detection
    writeReg(FSKRegPreambleDetect, 0xAA); // enable, 2 bytes, 10 chip errors
 8006024:	21aa      	movs	r1, #170	; 0xaa
 8006026:	201f      	movs	r0, #31
 8006028:	f7ff fc2a 	bl	8005880 <writeReg>
    // set sync config
    writeReg(FSKRegSyncConfig, 0x12); // no auto restart, preamble 0xAA, enable, fill FIFO, 3 bytes sync
 800602c:	2112      	movs	r1, #18
 800602e:	2027      	movs	r0, #39	; 0x27
 8006030:	f7ff fc26 	bl	8005880 <writeReg>
    // set packet config
    writeReg(FSKRegPacketConfig1, 0xD8); // var-length, whitening, crc, no auto-clear, no adr filter
 8006034:	21d8      	movs	r1, #216	; 0xd8
 8006036:	2030      	movs	r0, #48	; 0x30
 8006038:	f7ff fc22 	bl	8005880 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40); // packet mode
 800603c:	2140      	movs	r1, #64	; 0x40
 800603e:	2031      	movs	r0, #49	; 0x31
 8006040:	f7ff fc1e 	bl	8005880 <writeReg>
    // set sync value
    writeReg(FSKRegSyncValue1, 0xC1);
 8006044:	21c1      	movs	r1, #193	; 0xc1
 8006046:	2028      	movs	r0, #40	; 0x28
 8006048:	f7ff fc1a 	bl	8005880 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 800604c:	2194      	movs	r1, #148	; 0x94
 800604e:	2029      	movs	r0, #41	; 0x29
 8006050:	f7ff fc16 	bl	8005880 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 8006054:	21c1      	movs	r1, #193	; 0xc1
 8006056:	202a      	movs	r0, #42	; 0x2a
 8006058:	f7ff fc12 	bl	8005880 <writeReg>
    // set preamble timeout
    writeReg(FSKRegRxTimeout2, 0xFF);//(LMIC.rxsyms+1)/2);
 800605c:	21ff      	movs	r1, #255	; 0xff
 800605e:	2021      	movs	r0, #33	; 0x21
 8006060:	f7ff fc0e 	bl	8005880 <writeReg>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8006064:	2102      	movs	r1, #2
 8006066:	2002      	movs	r0, #2
 8006068:	f7ff fc0a 	bl	8005880 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 800606c:	2180      	movs	r1, #128	; 0x80
 800606e:	2003      	movs	r0, #3
 8006070:	f7ff fc06 	bl	8005880 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8006074:	2101      	movs	r1, #1
 8006076:	2004      	movs	r0, #4
 8006078:	f7ff fc02 	bl	8005880 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 800607c:	2199      	movs	r1, #153	; 0x99
 800607e:	2005      	movs	r0, #5
 8006080:	f7ff fbfe 	bl	8005880 <writeReg>
    
    // configure DIO mapping DIO0=PayloadReady DIO1=NOP DIO2=TimeOut
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TIMEOUT);
 8006084:	2138      	movs	r1, #56	; 0x38
 8006086:	2040      	movs	r0, #64	; 0x40
 8006088:	f7ff fbfa 	bl	8005880 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 800608c:	2000      	movs	r0, #0
 800608e:	f7fb fa30 	bl	80014f2 <hal_pin_rxtx>
    
    // now instruct the radio to receive
    hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8006092:	4b06      	ldr	r3, [pc, #24]	; (80060ac <rxfsk+0xe0>)
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	0018      	movs	r0, r3
 8006098:	f7fb fb28 	bl	80016ec <hal_waitUntil>
    opmode(OPMODE_RX); // no single rx mode available in FSK
 800609c:	2005      	movs	r0, #5
 800609e:	f7ff fca1 	bl	80059e4 <opmode>
}
 80060a2:	46c0      	nop			; (mov r8, r8)
 80060a4:	46bd      	mov	sp, r7
 80060a6:	b002      	add	sp, #8
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	46c0      	nop			; (mov r8, r8)
 80060ac:	200002c4 	.word	0x200002c4

080060b0 <startrx>:

static void startrx (u1_t rxmode) {
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	0002      	movs	r2, r0
 80060b8:	1dfb      	adds	r3, r7, #7
 80060ba:	701a      	strb	r2, [r3, #0]
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 80060bc:	2001      	movs	r0, #1
 80060be:	f7ff fc00 	bl	80058c2 <readReg>
 80060c2:	0003      	movs	r3, r0
 80060c4:	001a      	movs	r2, r3
 80060c6:	2307      	movs	r3, #7
 80060c8:	4013      	ands	r3, r2
 80060ca:	d001      	beq.n	80060d0 <startrx+0x20>
 80060cc:	f7fb fbb8 	bl	8001840 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 80060d0:	4b0a      	ldr	r3, [pc, #40]	; (80060fc <startrx+0x4c>)
 80060d2:	89db      	ldrh	r3, [r3, #14]
 80060d4:	0018      	movs	r0, r3
 80060d6:	f7fb fbba 	bl	800184e <getSf>
 80060da:	1e03      	subs	r3, r0, #0
 80060dc:	d105      	bne.n	80060ea <startrx+0x3a>
        rxfsk(rxmode);
 80060de:	1dfb      	adds	r3, r7, #7
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	0018      	movs	r0, r3
 80060e4:	f7ff ff72 	bl	8005fcc <rxfsk>
    } else { // LoRa modem
        rxlora(rxmode);
    }
    // the radio will go back to STANDBY mode as soon as the RX is finished
    // or timed out, and the corresponding IRQ will inform us about completion.
}
 80060e8:	e004      	b.n	80060f4 <startrx+0x44>
        rxlora(rxmode);
 80060ea:	1dfb      	adds	r3, r7, #7
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	0018      	movs	r0, r3
 80060f0:	f7ff fee8 	bl	8005ec4 <rxlora>
}
 80060f4:	46c0      	nop			; (mov r8, r8)
 80060f6:	46bd      	mov	sp, r7
 80060f8:	b002      	add	sp, #8
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	200002c4 	.word	0x200002c4

08006100 <radio_init>:

// get random seed from wideband noise rssi
void radio_init () {
 8006100:	b590      	push	{r4, r7, lr}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 8006106:	f7fb fb5d 	bl	80017c4 <hal_disableIRQs>

    // manually reset radio
#ifdef CFG_sx1276_radio
    hal_pin_rst(0); // drive RST pin low
 800610a:	2000      	movs	r0, #0
 800610c:	f7fb fa0e 	bl	800152c <hal_pin_rst>
#else
    hal_pin_rst(1); // drive RST pin high
#endif
    hal_waitUntil(os_getTime()+ms2osticks(1)); // wait >100us
 8006110:	f7ff fada 	bl	80056c8 <os_getTime>
 8006114:	0003      	movs	r3, r0
 8006116:	3320      	adds	r3, #32
 8006118:	0018      	movs	r0, r3
 800611a:	f7fb fae7 	bl	80016ec <hal_waitUntil>
    hal_pin_rst(2); // configure RST pin floating!
 800611e:	2002      	movs	r0, #2
 8006120:	f7fb fa04 	bl	800152c <hal_pin_rst>
    hal_waitUntil(os_getTime()+ms2osticks(5)); // wait 5ms
 8006124:	f7ff fad0 	bl	80056c8 <os_getTime>
 8006128:	0003      	movs	r3, r0
 800612a:	33a0      	adds	r3, #160	; 0xa0
 800612c:	0018      	movs	r0, r3
 800612e:	f7fb fadd 	bl	80016ec <hal_waitUntil>

    opmode(OPMODE_SLEEP);
 8006132:	2000      	movs	r0, #0
 8006134:	f7ff fc56 	bl	80059e4 <opmode>

    // some sanity checks, e.g., read version number
    u1_t v = readReg(RegVersion);
 8006138:	1dfc      	adds	r4, r7, #7
 800613a:	2042      	movs	r0, #66	; 0x42
 800613c:	f7ff fbc1 	bl	80058c2 <readReg>
 8006140:	0003      	movs	r3, r0
 8006142:	7023      	strb	r3, [r4, #0]
#ifdef CFG_sx1276_radio
    ASSERT(v == 0x12 ); 
 8006144:	1dfb      	adds	r3, r7, #7
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	2b12      	cmp	r3, #18
 800614a:	d001      	beq.n	8006150 <radio_init+0x50>
 800614c:	f7fb fb78 	bl	8001840 <hal_failed>
    ASSERT(v == 0x22);
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif
    // seed 15-byte randomness via noise rssi
    rxlora(RXMODE_RSSI);
 8006150:	2002      	movs	r0, #2
 8006152:	f7ff feb7 	bl	8005ec4 <rxlora>
    while( (readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX ); // continuous rx
 8006156:	46c0      	nop			; (mov r8, r8)
 8006158:	2001      	movs	r0, #1
 800615a:	f7ff fbb2 	bl	80058c2 <readReg>
 800615e:	0003      	movs	r3, r0
 8006160:	001a      	movs	r2, r3
 8006162:	2307      	movs	r3, #7
 8006164:	4013      	ands	r3, r2
 8006166:	2b05      	cmp	r3, #5
 8006168:	d1f6      	bne.n	8006158 <radio_init+0x58>
    for(int i=1; i<16; i++) {
 800616a:	2301      	movs	r3, #1
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	e031      	b.n	80061d4 <radio_init+0xd4>
        for(int j=0; j<8; j++) {
 8006170:	2300      	movs	r3, #0
 8006172:	60bb      	str	r3, [r7, #8]
 8006174:	e028      	b.n	80061c8 <radio_init+0xc8>
            u1_t b; // wait for two non-identical subsequent least-significant bits
            while( (b = readReg(LORARegRssiWideband) & 0x01) == (readReg(LORARegRssiWideband) & 0x01) );
 8006176:	46c0      	nop			; (mov r8, r8)
 8006178:	202c      	movs	r0, #44	; 0x2c
 800617a:	f7ff fba2 	bl	80058c2 <readReg>
 800617e:	0003      	movs	r3, r0
 8006180:	0019      	movs	r1, r3
 8006182:	1dbb      	adds	r3, r7, #6
 8006184:	2201      	movs	r2, #1
 8006186:	400a      	ands	r2, r1
 8006188:	701a      	strb	r2, [r3, #0]
 800618a:	1dbb      	adds	r3, r7, #6
 800618c:	781c      	ldrb	r4, [r3, #0]
 800618e:	202c      	movs	r0, #44	; 0x2c
 8006190:	f7ff fb97 	bl	80058c2 <readReg>
 8006194:	0003      	movs	r3, r0
 8006196:	001a      	movs	r2, r3
 8006198:	2301      	movs	r3, #1
 800619a:	4013      	ands	r3, r2
 800619c:	429c      	cmp	r4, r3
 800619e:	d0eb      	beq.n	8006178 <radio_init+0x78>
            randbuf[i] = (randbuf[i] << 1) | b;
 80061a0:	4a14      	ldr	r2, [pc, #80]	; (80061f4 <radio_init+0xf4>)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	18d3      	adds	r3, r2, r3
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	005b      	lsls	r3, r3, #1
 80061aa:	b25a      	sxtb	r2, r3
 80061ac:	1dbb      	adds	r3, r7, #6
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	b25b      	sxtb	r3, r3
 80061b2:	4313      	orrs	r3, r2
 80061b4:	b25b      	sxtb	r3, r3
 80061b6:	b2d9      	uxtb	r1, r3
 80061b8:	4a0e      	ldr	r2, [pc, #56]	; (80061f4 <radio_init+0xf4>)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	18d3      	adds	r3, r2, r3
 80061be:	1c0a      	adds	r2, r1, #0
 80061c0:	701a      	strb	r2, [r3, #0]
        for(int j=0; j<8; j++) {
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	3301      	adds	r3, #1
 80061c6:	60bb      	str	r3, [r7, #8]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	2b07      	cmp	r3, #7
 80061cc:	ddd3      	ble.n	8006176 <radio_init+0x76>
    for(int i=1; i<16; i++) {
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3301      	adds	r3, #1
 80061d2:	60fb      	str	r3, [r7, #12]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2b0f      	cmp	r3, #15
 80061d8:	ddca      	ble.n	8006170 <radio_init+0x70>
        }
    }
    randbuf[0] = 16; // set initial index
 80061da:	4b06      	ldr	r3, [pc, #24]	; (80061f4 <radio_init+0xf4>)
 80061dc:	2210      	movs	r2, #16
 80061de:	701a      	strb	r2, [r3, #0]
    // Launch Rx chain calibration for HF band 
    writeReg(FSKRegImageCal, (readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_MASK)|RF_IMAGECAL_IMAGECAL_START);
    while((readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING) { ; }
#endif /* CFG_sx1276mb1_board */

    opmode(OPMODE_SLEEP);
 80061e0:	2000      	movs	r0, #0
 80061e2:	f7ff fbff 	bl	80059e4 <opmode>

    hal_enableIRQs();
 80061e6:	f7fb fafb 	bl	80017e0 <hal_enableIRQs>
}
 80061ea:	46c0      	nop			; (mov r8, r8)
 80061ec:	46bd      	mov	sp, r7
 80061ee:	b005      	add	sp, #20
 80061f0:	bd90      	pop	{r4, r7, pc}
 80061f2:	46c0      	nop			; (mov r8, r8)
 80061f4:	2000008c 	.word	0x2000008c

080061f8 <radio_rand1>:

// return next random byte derived from seed buffer
// (buf[0] holds index of next byte to be returned)
u1_t radio_rand1 () {
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
    u1_t i = randbuf[0];
 80061fe:	1dfb      	adds	r3, r7, #7
 8006200:	4a14      	ldr	r2, [pc, #80]	; (8006254 <radio_rand1+0x5c>)
 8006202:	7812      	ldrb	r2, [r2, #0]
 8006204:	701a      	strb	r2, [r3, #0]
    ASSERT( i != 0 );
 8006206:	1dfb      	adds	r3, r7, #7
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <radio_rand1+0x1a>
 800620e:	f7fb fb17 	bl	8001840 <hal_failed>
    if( i==16 ) {
 8006212:	1dfb      	adds	r3, r7, #7
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	2b10      	cmp	r3, #16
 8006218:	d108      	bne.n	800622c <radio_rand1+0x34>
        os_aes(AES_ENC, randbuf, 16); // encrypt seed with any key
 800621a:	4b0e      	ldr	r3, [pc, #56]	; (8006254 <radio_rand1+0x5c>)
 800621c:	2210      	movs	r2, #16
 800621e:	0019      	movs	r1, r3
 8006220:	2000      	movs	r0, #0
 8006222:	f7fa fbb1 	bl	8000988 <os_aes>
        i = 0;
 8006226:	1dfb      	adds	r3, r7, #7
 8006228:	2200      	movs	r2, #0
 800622a:	701a      	strb	r2, [r3, #0]
    }
    u1_t v = randbuf[i++];
 800622c:	1dfb      	adds	r3, r7, #7
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	1dfa      	adds	r2, r7, #7
 8006232:	1c59      	adds	r1, r3, #1
 8006234:	7011      	strb	r1, [r2, #0]
 8006236:	0019      	movs	r1, r3
 8006238:	1dbb      	adds	r3, r7, #6
 800623a:	4a06      	ldr	r2, [pc, #24]	; (8006254 <radio_rand1+0x5c>)
 800623c:	5c52      	ldrb	r2, [r2, r1]
 800623e:	701a      	strb	r2, [r3, #0]
    randbuf[0] = i;
 8006240:	4b04      	ldr	r3, [pc, #16]	; (8006254 <radio_rand1+0x5c>)
 8006242:	1dfa      	adds	r2, r7, #7
 8006244:	7812      	ldrb	r2, [r2, #0]
 8006246:	701a      	strb	r2, [r3, #0]
    return v;
 8006248:	1dbb      	adds	r3, r7, #6
 800624a:	781b      	ldrb	r3, [r3, #0]
}
 800624c:	0018      	movs	r0, r3
 800624e:	46bd      	mov	sp, r7
 8006250:	b002      	add	sp, #8
 8006252:	bd80      	pop	{r7, pc}
 8006254:	2000008c 	.word	0x2000008c

08006258 <radio_irq_handler>:
    [SF12] = us2osticks(31189), // (1022 ticks)
};

// called by hal ext IRQ handler
// (radio goes to stanby mode after tx/rx operations)
void radio_irq_handler (u1_t dio) {
 8006258:	b5b0      	push	{r4, r5, r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	0002      	movs	r2, r0
 8006260:	1dfb      	adds	r3, r7, #7
 8006262:	701a      	strb	r2, [r3, #0]
    u1_t s = readReg(RegOpMode);
    u1_t c = readReg(LORARegModemConfig2);
    opmode(OPMODE_TX);
    return;
#else /* ! CFG_TxContinuousMode */
    ostime_t now = os_getTime();
 8006264:	f7ff fa30 	bl	80056c8 <os_getTime>
 8006268:	0003      	movs	r3, r0
 800626a:	60fb      	str	r3, [r7, #12]
    if( (readReg(RegOpMode) & OPMODE_LORA) != 0) { // LORA modem
 800626c:	2001      	movs	r0, #1
 800626e:	f7ff fb28 	bl	80058c2 <readReg>
 8006272:	0003      	movs	r3, r0
 8006274:	b25b      	sxtb	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	db00      	blt.n	800627c <radio_irq_handler+0x24>
 800627a:	e07b      	b.n	8006374 <radio_irq_handler+0x11c>
        u1_t flags = readReg(LORARegIrqFlags);
 800627c:	2509      	movs	r5, #9
 800627e:	197c      	adds	r4, r7, r5
 8006280:	2012      	movs	r0, #18
 8006282:	f7ff fb1e 	bl	80058c2 <readReg>
 8006286:	0003      	movs	r3, r0
 8006288:	7023      	strb	r3, [r4, #0]
        if( flags & IRQ_LORA_TXDONE_MASK ) {
 800628a:	197b      	adds	r3, r7, r5
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	2208      	movs	r2, #8
 8006290:	4013      	ands	r3, r2
 8006292:	d004      	beq.n	800629e <radio_irq_handler+0x46>
            // save exact tx time
            LMIC.txend = now - us2osticks(43); // TXDONE FIXUP
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	1e5a      	subs	r2, r3, #1
 8006298:	4b60      	ldr	r3, [pc, #384]	; (800641c <radio_irq_handler+0x1c4>)
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	e061      	b.n	8006362 <radio_irq_handler+0x10a>
        } else if( flags & IRQ_LORA_RXDONE_MASK ) {
 800629e:	2309      	movs	r3, #9
 80062a0:	18fb      	adds	r3, r7, r3
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2240      	movs	r2, #64	; 0x40
 80062a6:	4013      	ands	r3, r2
 80062a8:	d050      	beq.n	800634c <radio_irq_handler+0xf4>
            // save exact rx time
            if(getBw(LMIC.rps) == BW125) {
 80062aa:	4b5c      	ldr	r3, [pc, #368]	; (800641c <radio_irq_handler+0x1c4>)
 80062ac:	89db      	ldrh	r3, [r3, #14]
 80062ae:	0018      	movs	r0, r3
 80062b0:	f7fb fadd 	bl	800186e <getBw>
 80062b4:	1e03      	subs	r3, r0, #0
 80062b6:	d10d      	bne.n	80062d4 <radio_irq_handler+0x7c>
                now -= LORA_RXDONE_FIXUP[getSf(LMIC.rps)];
 80062b8:	4b58      	ldr	r3, [pc, #352]	; (800641c <radio_irq_handler+0x1c4>)
 80062ba:	89db      	ldrh	r3, [r3, #14]
 80062bc:	0018      	movs	r0, r3
 80062be:	f7fb fac6 	bl	800184e <getSf>
 80062c2:	0003      	movs	r3, r0
 80062c4:	001a      	movs	r2, r3
 80062c6:	4b56      	ldr	r3, [pc, #344]	; (8006420 <radio_irq_handler+0x1c8>)
 80062c8:	0052      	lsls	r2, r2, #1
 80062ca:	5ad3      	ldrh	r3, [r2, r3]
 80062cc:	001a      	movs	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	1a9b      	subs	r3, r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]
            }
            LMIC.rxtime = now;
 80062d4:	4b51      	ldr	r3, [pc, #324]	; (800641c <radio_irq_handler+0x1c4>)
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	605a      	str	r2, [r3, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 80062da:	201d      	movs	r0, #29
 80062dc:	f7ff faf1 	bl	80058c2 <readReg>
 80062e0:	0003      	movs	r3, r0
 80062e2:	001a      	movs	r2, r3
 80062e4:	2304      	movs	r3, #4
 80062e6:	4013      	ands	r3, r2
 80062e8:	d005      	beq.n	80062f6 <radio_irq_handler+0x9e>
 80062ea:	2022      	movs	r0, #34	; 0x22
 80062ec:	f7ff fae9 	bl	80058c2 <readReg>
 80062f0:	0003      	movs	r3, r0
 80062f2:	0019      	movs	r1, r3
 80062f4:	e004      	b.n	8006300 <radio_irq_handler+0xa8>
 80062f6:	2013      	movs	r0, #19
 80062f8:	f7ff fae3 	bl	80058c2 <readReg>
 80062fc:	0003      	movs	r3, r0
 80062fe:	0019      	movs	r1, r3
 8006300:	4a46      	ldr	r2, [pc, #280]	; (800641c <radio_irq_handler+0x1c4>)
 8006302:	2348      	movs	r3, #72	; 0x48
 8006304:	33ff      	adds	r3, #255	; 0xff
 8006306:	54d1      	strb	r1, [r2, r3]
                readReg(LORARegPayloadLength) : readReg(LORARegRxNbBytes);
            // set FIFO read address pointer
            writeReg(LORARegFifoAddrPtr, readReg(LORARegFifoRxCurrentAddr)); 
 8006308:	2010      	movs	r0, #16
 800630a:	f7ff fada 	bl	80058c2 <readReg>
 800630e:	0003      	movs	r3, r0
 8006310:	0019      	movs	r1, r3
 8006312:	200d      	movs	r0, #13
 8006314:	f7ff fab4 	bl	8005880 <writeReg>
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8006318:	4a40      	ldr	r2, [pc, #256]	; (800641c <radio_irq_handler+0x1c4>)
 800631a:	2348      	movs	r3, #72	; 0x48
 800631c:	33ff      	adds	r3, #255	; 0xff
 800631e:	5cd2      	ldrb	r2, [r2, r3]
 8006320:	4b40      	ldr	r3, [pc, #256]	; (8006424 <radio_irq_handler+0x1cc>)
 8006322:	0019      	movs	r1, r3
 8006324:	2000      	movs	r0, #0
 8006326:	f7ff fb25 	bl	8005974 <readBuf>
            // read rx quality parameters
            LMIC.snr  = readReg(LORARegPktSnrValue); // SNR [dB] * 4
 800632a:	2019      	movs	r0, #25
 800632c:	f7ff fac9 	bl	80058c2 <readReg>
 8006330:	0003      	movs	r3, r0
 8006332:	b25a      	sxtb	r2, r3
 8006334:	4b39      	ldr	r3, [pc, #228]	; (800641c <radio_irq_handler+0x1c4>)
 8006336:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = readReg(LORARegPktRssiValue) - 125 + 64; // RSSI [dBm] (-196...+63)
 8006338:	201a      	movs	r0, #26
 800633a:	f7ff fac2 	bl	80058c2 <readReg>
 800633e:	0003      	movs	r3, r0
 8006340:	3b3d      	subs	r3, #61	; 0x3d
 8006342:	b2db      	uxtb	r3, r3
 8006344:	b25a      	sxtb	r2, r3
 8006346:	4b35      	ldr	r3, [pc, #212]	; (800641c <radio_irq_handler+0x1c4>)
 8006348:	731a      	strb	r2, [r3, #12]
 800634a:	e00a      	b.n	8006362 <radio_irq_handler+0x10a>
        } else if( flags & IRQ_LORA_RXTOUT_MASK ) {
 800634c:	2309      	movs	r3, #9
 800634e:	18fb      	adds	r3, r7, r3
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	b25b      	sxtb	r3, r3
 8006354:	2b00      	cmp	r3, #0
 8006356:	da04      	bge.n	8006362 <radio_irq_handler+0x10a>
            // indicate timeout
            LMIC.dataLen = 0;
 8006358:	4a30      	ldr	r2, [pc, #192]	; (800641c <radio_irq_handler+0x1c4>)
 800635a:	2348      	movs	r3, #72	; 0x48
 800635c:	33ff      	adds	r3, #255	; 0xff
 800635e:	2100      	movs	r1, #0
 8006360:	54d1      	strb	r1, [r2, r3]
        }
        // mask all radio IRQs
        writeReg(LORARegIrqFlagsMask, 0xFF);
 8006362:	21ff      	movs	r1, #255	; 0xff
 8006364:	2011      	movs	r0, #17
 8006366:	f7ff fa8b 	bl	8005880 <writeReg>
        // clear radio IRQ flags
        writeReg(LORARegIrqFlags, 0xFF);
 800636a:	21ff      	movs	r1, #255	; 0xff
 800636c:	2012      	movs	r0, #18
 800636e:	f7ff fa87 	bl	8005880 <writeReg>
 8006372:	e045      	b.n	8006400 <radio_irq_handler+0x1a8>
    } else { // FSK modem
        u1_t flags1 = readReg(FSKRegIrqFlags1);
 8006374:	230b      	movs	r3, #11
 8006376:	18fc      	adds	r4, r7, r3
 8006378:	203e      	movs	r0, #62	; 0x3e
 800637a:	f7ff faa2 	bl	80058c2 <readReg>
 800637e:	0003      	movs	r3, r0
 8006380:	7023      	strb	r3, [r4, #0]
        u1_t flags2 = readReg(FSKRegIrqFlags2);
 8006382:	250a      	movs	r5, #10
 8006384:	197c      	adds	r4, r7, r5
 8006386:	203f      	movs	r0, #63	; 0x3f
 8006388:	f7ff fa9b 	bl	80058c2 <readReg>
 800638c:	0003      	movs	r3, r0
 800638e:	7023      	strb	r3, [r4, #0]
        if( flags2 & IRQ_FSK2_PACKETSENT_MASK ) {
 8006390:	197b      	adds	r3, r7, r5
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	2208      	movs	r2, #8
 8006396:	4013      	ands	r3, r2
 8006398:	d003      	beq.n	80063a2 <radio_irq_handler+0x14a>
            // save exact tx time
            LMIC.txend = now;
 800639a:	4b20      	ldr	r3, [pc, #128]	; (800641c <radio_irq_handler+0x1c4>)
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	e02e      	b.n	8006400 <radio_irq_handler+0x1a8>
        } else if( flags2 & IRQ_FSK2_PAYLOADREADY_MASK ) {
 80063a2:	230a      	movs	r3, #10
 80063a4:	18fb      	adds	r3, r7, r3
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2204      	movs	r2, #4
 80063aa:	4013      	ands	r3, r2
 80063ac:	d01b      	beq.n	80063e6 <radio_irq_handler+0x18e>
            // save exact rx time
            LMIC.rxtime = now;
 80063ae:	4b1b      	ldr	r3, [pc, #108]	; (800641c <radio_irq_handler+0x1c4>)
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	605a      	str	r2, [r3, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = readReg(FSKRegPayloadLength);
 80063b4:	2032      	movs	r0, #50	; 0x32
 80063b6:	f7ff fa84 	bl	80058c2 <readReg>
 80063ba:	0003      	movs	r3, r0
 80063bc:	0019      	movs	r1, r3
 80063be:	4a17      	ldr	r2, [pc, #92]	; (800641c <radio_irq_handler+0x1c4>)
 80063c0:	2348      	movs	r3, #72	; 0x48
 80063c2:	33ff      	adds	r3, #255	; 0xff
 80063c4:	54d1      	strb	r1, [r2, r3]
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 80063c6:	4a15      	ldr	r2, [pc, #84]	; (800641c <radio_irq_handler+0x1c4>)
 80063c8:	2348      	movs	r3, #72	; 0x48
 80063ca:	33ff      	adds	r3, #255	; 0xff
 80063cc:	5cd2      	ldrb	r2, [r2, r3]
 80063ce:	4b15      	ldr	r3, [pc, #84]	; (8006424 <radio_irq_handler+0x1cc>)
 80063d0:	0019      	movs	r1, r3
 80063d2:	2000      	movs	r0, #0
 80063d4:	f7ff face 	bl	8005974 <readBuf>
            // read rx quality parameters
            LMIC.snr  = 0; // determine snr
 80063d8:	4b10      	ldr	r3, [pc, #64]	; (800641c <radio_irq_handler+0x1c4>)
 80063da:	2200      	movs	r2, #0
 80063dc:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = 0; // determine rssi
 80063de:	4b0f      	ldr	r3, [pc, #60]	; (800641c <radio_irq_handler+0x1c4>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	731a      	strb	r2, [r3, #12]
 80063e4:	e00c      	b.n	8006400 <radio_irq_handler+0x1a8>
        } else if( flags1 & IRQ_FSK1_TIMEOUT_MASK ) {
 80063e6:	230b      	movs	r3, #11
 80063e8:	18fb      	adds	r3, r7, r3
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	2204      	movs	r2, #4
 80063ee:	4013      	ands	r3, r2
 80063f0:	d005      	beq.n	80063fe <radio_irq_handler+0x1a6>
            // indicate timeout
            LMIC.dataLen = 0;
 80063f2:	4a0a      	ldr	r2, [pc, #40]	; (800641c <radio_irq_handler+0x1c4>)
 80063f4:	2348      	movs	r3, #72	; 0x48
 80063f6:	33ff      	adds	r3, #255	; 0xff
 80063f8:	2100      	movs	r1, #0
 80063fa:	54d1      	strb	r1, [r2, r3]
 80063fc:	e000      	b.n	8006400 <radio_irq_handler+0x1a8>
        } else {
            while(1);
 80063fe:	e7fe      	b.n	80063fe <radio_irq_handler+0x1a6>
        }
    }
    // go from stanby to sleep
    opmode(OPMODE_SLEEP);
 8006400:	2000      	movs	r0, #0
 8006402:	f7ff faef 	bl	80059e4 <opmode>
    // run os job (use preset func ptr)
    os_setCallback(&LMIC.osjob, LMIC.osjob.func);
 8006406:	4b05      	ldr	r3, [pc, #20]	; (800641c <radio_irq_handler+0x1c4>)
 8006408:	69da      	ldr	r2, [r3, #28]
 800640a:	4b07      	ldr	r3, [pc, #28]	; (8006428 <radio_irq_handler+0x1d0>)
 800640c:	0011      	movs	r1, r2
 800640e:	0018      	movs	r0, r3
 8006410:	f7ff f9a0 	bl	8005754 <os_setCallback>
#endif /* ! CFG_TxContinuousMode */
}
 8006414:	46c0      	nop			; (mov r8, r8)
 8006416:	46bd      	mov	sp, r7
 8006418:	b004      	add	sp, #16
 800641a:	bdb0      	pop	{r4, r5, r7, pc}
 800641c:	200002c4 	.word	0x200002c4
 8006420:	0800cd34 	.word	0x0800cd34
 8006424:	2000040c 	.word	0x2000040c
 8006428:	200002d8 	.word	0x200002d8

0800642c <os_radio>:

void os_radio (u1_t mode) {
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	0002      	movs	r2, r0
 8006434:	1dfb      	adds	r3, r7, #7
 8006436:	701a      	strb	r2, [r3, #0]
    hal_disableIRQs();
 8006438:	f7fb f9c4 	bl	80017c4 <hal_disableIRQs>
    switch (mode) {
 800643c:	1dfb      	adds	r3, r7, #7
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d00c      	beq.n	800645e <os_radio+0x32>
 8006444:	dc02      	bgt.n	800644c <os_radio+0x20>
 8006446:	2b00      	cmp	r3, #0
 8006448:	d005      	beq.n	8006456 <os_radio+0x2a>
 800644a:	e013      	b.n	8006474 <os_radio+0x48>
 800644c:	2b02      	cmp	r3, #2
 800644e:	d009      	beq.n	8006464 <os_radio+0x38>
 8006450:	2b03      	cmp	r3, #3
 8006452:	d00b      	beq.n	800646c <os_radio+0x40>
 8006454:	e00e      	b.n	8006474 <os_radio+0x48>
      case RADIO_RST:
        // put radio to sleep
        opmode(OPMODE_SLEEP);
 8006456:	2000      	movs	r0, #0
 8006458:	f7ff fac4 	bl	80059e4 <opmode>
        break;
 800645c:	e00a      	b.n	8006474 <os_radio+0x48>

      case RADIO_TX:
        // transmit frame now
        starttx(); // buf=LMIC.frame, len=LMIC.dataLen
 800645e:	f7ff fd13 	bl	8005e88 <starttx>
        break;
 8006462:	e007      	b.n	8006474 <os_radio+0x48>
      
      case RADIO_RX:
        // receive frame now (exactly at rxtime)
        startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
 8006464:	2000      	movs	r0, #0
 8006466:	f7ff fe23 	bl	80060b0 <startrx>
        break;
 800646a:	e003      	b.n	8006474 <os_radio+0x48>

      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
 800646c:	2001      	movs	r0, #1
 800646e:	f7ff fe1f 	bl	80060b0 <startrx>
        break;
 8006472:	46c0      	nop			; (mov r8, r8)
    }
    hal_enableIRQs();
 8006474:	f7fb f9b4 	bl	80017e0 <hal_enableIRQs>
}
 8006478:	46c0      	nop			; (mov r8, r8)
 800647a:	46bd      	mov	sp, r7
 800647c:	b002      	add	sp, #8
 800647e:	bd80      	pop	{r7, pc}

08006480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006484:	4b07      	ldr	r3, [pc, #28]	; (80064a4 <HAL_MspInit+0x24>)
 8006486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006488:	4b06      	ldr	r3, [pc, #24]	; (80064a4 <HAL_MspInit+0x24>)
 800648a:	2101      	movs	r1, #1
 800648c:	430a      	orrs	r2, r1
 800648e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8006490:	4b04      	ldr	r3, [pc, #16]	; (80064a4 <HAL_MspInit+0x24>)
 8006492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006494:	4b03      	ldr	r3, [pc, #12]	; (80064a4 <HAL_MspInit+0x24>)
 8006496:	2180      	movs	r1, #128	; 0x80
 8006498:	0549      	lsls	r1, r1, #21
 800649a:	430a      	orrs	r2, r1
 800649c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800649e:	46c0      	nop			; (mov r8, r8)
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	40021000 	.word	0x40021000

080064a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064b0:	230c      	movs	r3, #12
 80064b2:	18fb      	adds	r3, r7, r3
 80064b4:	0018      	movs	r0, r3
 80064b6:	2314      	movs	r3, #20
 80064b8:	001a      	movs	r2, r3
 80064ba:	2100      	movs	r1, #0
 80064bc:	f005 f88d 	bl	800b5da <memset>
  if(hi2c->Instance==I2C1)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a18      	ldr	r2, [pc, #96]	; (8006528 <HAL_I2C_MspInit+0x80>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d129      	bne.n	800651e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064ca:	4b18      	ldr	r3, [pc, #96]	; (800652c <HAL_I2C_MspInit+0x84>)
 80064cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ce:	4b17      	ldr	r3, [pc, #92]	; (800652c <HAL_I2C_MspInit+0x84>)
 80064d0:	2102      	movs	r1, #2
 80064d2:	430a      	orrs	r2, r1
 80064d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80064d6:	4b15      	ldr	r3, [pc, #84]	; (800652c <HAL_I2C_MspInit+0x84>)
 80064d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064da:	2202      	movs	r2, #2
 80064dc:	4013      	ands	r3, r2
 80064de:	60bb      	str	r3, [r7, #8]
 80064e0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80064e2:	210c      	movs	r1, #12
 80064e4:	187b      	adds	r3, r7, r1
 80064e6:	22c0      	movs	r2, #192	; 0xc0
 80064e8:	0092      	lsls	r2, r2, #2
 80064ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80064ec:	187b      	adds	r3, r7, r1
 80064ee:	2212      	movs	r2, #18
 80064f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80064f2:	187b      	adds	r3, r7, r1
 80064f4:	2201      	movs	r2, #1
 80064f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064f8:	187b      	adds	r3, r7, r1
 80064fa:	2203      	movs	r2, #3
 80064fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80064fe:	187b      	adds	r3, r7, r1
 8006500:	2204      	movs	r2, #4
 8006502:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006504:	187b      	adds	r3, r7, r1
 8006506:	4a0a      	ldr	r2, [pc, #40]	; (8006530 <HAL_I2C_MspInit+0x88>)
 8006508:	0019      	movs	r1, r3
 800650a:	0010      	movs	r0, r2
 800650c:	f000 faaa 	bl	8006a64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006510:	4b06      	ldr	r3, [pc, #24]	; (800652c <HAL_I2C_MspInit+0x84>)
 8006512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006514:	4b05      	ldr	r3, [pc, #20]	; (800652c <HAL_I2C_MspInit+0x84>)
 8006516:	2180      	movs	r1, #128	; 0x80
 8006518:	0389      	lsls	r1, r1, #14
 800651a:	430a      	orrs	r2, r1
 800651c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800651e:	46c0      	nop			; (mov r8, r8)
 8006520:	46bd      	mov	sp, r7
 8006522:	b008      	add	sp, #32
 8006524:	bd80      	pop	{r7, pc}
 8006526:	46c0      	nop			; (mov r8, r8)
 8006528:	40005400 	.word	0x40005400
 800652c:	40021000 	.word	0x40021000
 8006530:	50000400 	.word	0x50000400

08006534 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006534:	b590      	push	{r4, r7, lr}
 8006536:	b08b      	sub	sp, #44	; 0x2c
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800653c:	2314      	movs	r3, #20
 800653e:	18fb      	adds	r3, r7, r3
 8006540:	0018      	movs	r0, r3
 8006542:	2314      	movs	r3, #20
 8006544:	001a      	movs	r2, r3
 8006546:	2100      	movs	r1, #0
 8006548:	f005 f847 	bl	800b5da <memset>
  if(hspi->Instance==SPI1)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a29      	ldr	r2, [pc, #164]	; (80065f8 <HAL_SPI_MspInit+0xc4>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d14b      	bne.n	80065ee <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006556:	4b29      	ldr	r3, [pc, #164]	; (80065fc <HAL_SPI_MspInit+0xc8>)
 8006558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800655a:	4b28      	ldr	r3, [pc, #160]	; (80065fc <HAL_SPI_MspInit+0xc8>)
 800655c:	2180      	movs	r1, #128	; 0x80
 800655e:	0149      	lsls	r1, r1, #5
 8006560:	430a      	orrs	r2, r1
 8006562:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006564:	4b25      	ldr	r3, [pc, #148]	; (80065fc <HAL_SPI_MspInit+0xc8>)
 8006566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006568:	4b24      	ldr	r3, [pc, #144]	; (80065fc <HAL_SPI_MspInit+0xc8>)
 800656a:	2101      	movs	r1, #1
 800656c:	430a      	orrs	r2, r1
 800656e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006570:	4b22      	ldr	r3, [pc, #136]	; (80065fc <HAL_SPI_MspInit+0xc8>)
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	2201      	movs	r2, #1
 8006576:	4013      	ands	r3, r2
 8006578:	613b      	str	r3, [r7, #16]
 800657a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800657c:	4b1f      	ldr	r3, [pc, #124]	; (80065fc <HAL_SPI_MspInit+0xc8>)
 800657e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006580:	4b1e      	ldr	r3, [pc, #120]	; (80065fc <HAL_SPI_MspInit+0xc8>)
 8006582:	2102      	movs	r1, #2
 8006584:	430a      	orrs	r2, r1
 8006586:	62da      	str	r2, [r3, #44]	; 0x2c
 8006588:	4b1c      	ldr	r3, [pc, #112]	; (80065fc <HAL_SPI_MspInit+0xc8>)
 800658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658c:	2202      	movs	r2, #2
 800658e:	4013      	ands	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]
 8006592:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006594:	2414      	movs	r4, #20
 8006596:	193b      	adds	r3, r7, r4
 8006598:	22c0      	movs	r2, #192	; 0xc0
 800659a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800659c:	193b      	adds	r3, r7, r4
 800659e:	2202      	movs	r2, #2
 80065a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065a2:	193b      	adds	r3, r7, r4
 80065a4:	2200      	movs	r2, #0
 80065a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065a8:	193b      	adds	r3, r7, r4
 80065aa:	2203      	movs	r2, #3
 80065ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80065ae:	193b      	adds	r3, r7, r4
 80065b0:	2200      	movs	r2, #0
 80065b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065b4:	193a      	adds	r2, r7, r4
 80065b6:	23a0      	movs	r3, #160	; 0xa0
 80065b8:	05db      	lsls	r3, r3, #23
 80065ba:	0011      	movs	r1, r2
 80065bc:	0018      	movs	r0, r3
 80065be:	f000 fa51 	bl	8006a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80065c2:	0021      	movs	r1, r4
 80065c4:	187b      	adds	r3, r7, r1
 80065c6:	2208      	movs	r2, #8
 80065c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065ca:	187b      	adds	r3, r7, r1
 80065cc:	2202      	movs	r2, #2
 80065ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065d0:	187b      	adds	r3, r7, r1
 80065d2:	2200      	movs	r2, #0
 80065d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065d6:	187b      	adds	r3, r7, r1
 80065d8:	2203      	movs	r2, #3
 80065da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80065dc:	187b      	adds	r3, r7, r1
 80065de:	2200      	movs	r2, #0
 80065e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065e2:	187b      	adds	r3, r7, r1
 80065e4:	4a06      	ldr	r2, [pc, #24]	; (8006600 <HAL_SPI_MspInit+0xcc>)
 80065e6:	0019      	movs	r1, r3
 80065e8:	0010      	movs	r0, r2
 80065ea:	f000 fa3b 	bl	8006a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80065ee:	46c0      	nop			; (mov r8, r8)
 80065f0:	46bd      	mov	sp, r7
 80065f2:	b00b      	add	sp, #44	; 0x2c
 80065f4:	bd90      	pop	{r4, r7, pc}
 80065f6:	46c0      	nop			; (mov r8, r8)
 80065f8:	40013000 	.word	0x40013000
 80065fc:	40021000 	.word	0x40021000
 8006600:	50000400 	.word	0x50000400

08006604 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM21)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a0a      	ldr	r2, [pc, #40]	; (800663c <HAL_TIM_Base_MspInit+0x38>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d10d      	bne.n	8006632 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 8006616:	4b0a      	ldr	r3, [pc, #40]	; (8006640 <HAL_TIM_Base_MspInit+0x3c>)
 8006618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800661a:	4b09      	ldr	r3, [pc, #36]	; (8006640 <HAL_TIM_Base_MspInit+0x3c>)
 800661c:	2104      	movs	r1, #4
 800661e:	430a      	orrs	r2, r1
 8006620:	635a      	str	r2, [r3, #52]	; 0x34
    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8006622:	2200      	movs	r2, #0
 8006624:	2100      	movs	r1, #0
 8006626:	2014      	movs	r0, #20
 8006628:	f000 f9d2 	bl	80069d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 800662c:	2014      	movs	r0, #20
 800662e:	f000 f9ef 	bl	8006a10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8006632:	46c0      	nop			; (mov r8, r8)
 8006634:	46bd      	mov	sp, r7
 8006636:	b002      	add	sp, #8
 8006638:	bd80      	pop	{r7, pc}
 800663a:	46c0      	nop			; (mov r8, r8)
 800663c:	40010800 	.word	0x40010800
 8006640:	40021000 	.word	0x40021000

08006644 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b088      	sub	sp, #32
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800664c:	230c      	movs	r3, #12
 800664e:	18fb      	adds	r3, r7, r3
 8006650:	0018      	movs	r0, r3
 8006652:	2314      	movs	r3, #20
 8006654:	001a      	movs	r2, r3
 8006656:	2100      	movs	r1, #0
 8006658:	f004 ffbf 	bl	800b5da <memset>
  if(huart->Instance==USART2)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a18      	ldr	r2, [pc, #96]	; (80066c4 <HAL_UART_MspInit+0x80>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d129      	bne.n	80066ba <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006666:	4b18      	ldr	r3, [pc, #96]	; (80066c8 <HAL_UART_MspInit+0x84>)
 8006668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800666a:	4b17      	ldr	r3, [pc, #92]	; (80066c8 <HAL_UART_MspInit+0x84>)
 800666c:	2180      	movs	r1, #128	; 0x80
 800666e:	0289      	lsls	r1, r1, #10
 8006670:	430a      	orrs	r2, r1
 8006672:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006674:	4b14      	ldr	r3, [pc, #80]	; (80066c8 <HAL_UART_MspInit+0x84>)
 8006676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006678:	4b13      	ldr	r3, [pc, #76]	; (80066c8 <HAL_UART_MspInit+0x84>)
 800667a:	2101      	movs	r1, #1
 800667c:	430a      	orrs	r2, r1
 800667e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006680:	4b11      	ldr	r3, [pc, #68]	; (80066c8 <HAL_UART_MspInit+0x84>)
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006684:	2201      	movs	r2, #1
 8006686:	4013      	ands	r3, r2
 8006688:	60bb      	str	r3, [r7, #8]
 800668a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800668c:	210c      	movs	r1, #12
 800668e:	187b      	adds	r3, r7, r1
 8006690:	220c      	movs	r2, #12
 8006692:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006694:	187b      	adds	r3, r7, r1
 8006696:	2202      	movs	r2, #2
 8006698:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800669a:	187b      	adds	r3, r7, r1
 800669c:	2200      	movs	r2, #0
 800669e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066a0:	187b      	adds	r3, r7, r1
 80066a2:	2203      	movs	r2, #3
 80066a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80066a6:	187b      	adds	r3, r7, r1
 80066a8:	2204      	movs	r2, #4
 80066aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066ac:	187a      	adds	r2, r7, r1
 80066ae:	23a0      	movs	r3, #160	; 0xa0
 80066b0:	05db      	lsls	r3, r3, #23
 80066b2:	0011      	movs	r1, r2
 80066b4:	0018      	movs	r0, r3
 80066b6:	f000 f9d5 	bl	8006a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80066ba:	46c0      	nop			; (mov r8, r8)
 80066bc:	46bd      	mov	sp, r7
 80066be:	b008      	add	sp, #32
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	46c0      	nop			; (mov r8, r8)
 80066c4:	40004400 	.word	0x40004400
 80066c8:	40021000 	.word	0x40021000

080066cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80066d0:	e7fe      	b.n	80066d0 <NMI_Handler+0x4>

080066d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80066d6:	e7fe      	b.n	80066d6 <HardFault_Handler+0x4>

080066d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80066dc:	46c0      	nop			; (mov r8, r8)
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80066e6:	46c0      	nop			; (mov r8, r8)
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80066f0:	f000 f8a6 	bl	8006840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80066f4:	46c0      	nop			; (mov r8, r8)
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80066fe:	2001      	movs	r0, #1
 8006700:	f000 fcbc 	bl	800707c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8006704:	2002      	movs	r0, #2
 8006706:	f000 fcb9 	bl	800707c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800670a:	46c0      	nop			; (mov r8, r8)
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8006714:	2010      	movs	r0, #16
 8006716:	f000 fcb1 	bl	800707c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800671a:	46c0      	nop			; (mov r8, r8)
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8006724:	4b03      	ldr	r3, [pc, #12]	; (8006734 <TIM21_IRQHandler+0x14>)
 8006726:	0018      	movs	r0, r3
 8006728:	f003 f878 	bl	800981c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 800672c:	46c0      	nop			; (mov r8, r8)
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	46c0      	nop			; (mov r8, r8)
 8006734:	20000284 	.word	0x20000284

08006738 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800673c:	46c0      	nop			; (mov r8, r8)
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
	...

08006744 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8006744:	480d      	ldr	r0, [pc, #52]	; (800677c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8006746:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006748:	480d      	ldr	r0, [pc, #52]	; (8006780 <LoopForever+0x6>)
  ldr r1, =_edata
 800674a:	490e      	ldr	r1, [pc, #56]	; (8006784 <LoopForever+0xa>)
  ldr r2, =_sidata
 800674c:	4a0e      	ldr	r2, [pc, #56]	; (8006788 <LoopForever+0xe>)
  movs r3, #0
 800674e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006750:	e002      	b.n	8006758 <LoopCopyDataInit>

08006752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006756:	3304      	adds	r3, #4

08006758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800675a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800675c:	d3f9      	bcc.n	8006752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800675e:	4a0b      	ldr	r2, [pc, #44]	; (800678c <LoopForever+0x12>)
  ldr r4, =_ebss
 8006760:	4c0b      	ldr	r4, [pc, #44]	; (8006790 <LoopForever+0x16>)
  movs r3, #0
 8006762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006764:	e001      	b.n	800676a <LoopFillZerobss>

08006766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006768:	3204      	adds	r2, #4

0800676a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800676a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800676c:	d3fb      	bcc.n	8006766 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800676e:	f7ff ffe3 	bl	8006738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006772:	f004 ff05 	bl	800b580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006776:	f7fe fd27 	bl	80051c8 <main>

0800677a <LoopForever>:

LoopForever:
    b LoopForever
 800677a:	e7fe      	b.n	800677a <LoopForever>
   ldr   r0, =_estack
 800677c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8006780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006784:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8006788:	0800cdc0 	.word	0x0800cdc0
  ldr r2, =_sbss
 800678c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8006790:	20000474 	.word	0x20000474

08006794 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006794:	e7fe      	b.n	8006794 <ADC1_COMP_IRQHandler>
	...

08006798 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800679e:	1dfb      	adds	r3, r7, #7
 80067a0:	2200      	movs	r2, #0
 80067a2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80067a4:	4b0b      	ldr	r3, [pc, #44]	; (80067d4 <HAL_Init+0x3c>)
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	4b0a      	ldr	r3, [pc, #40]	; (80067d4 <HAL_Init+0x3c>)
 80067aa:	2140      	movs	r1, #64	; 0x40
 80067ac:	430a      	orrs	r2, r1
 80067ae:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80067b0:	2000      	movs	r0, #0
 80067b2:	f000 f811 	bl	80067d8 <HAL_InitTick>
 80067b6:	1e03      	subs	r3, r0, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80067ba:	1dfb      	adds	r3, r7, #7
 80067bc:	2201      	movs	r2, #1
 80067be:	701a      	strb	r2, [r3, #0]
 80067c0:	e001      	b.n	80067c6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80067c2:	f7ff fe5d 	bl	8006480 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80067c6:	1dfb      	adds	r3, r7, #7
 80067c8:	781b      	ldrb	r3, [r3, #0]
}
 80067ca:	0018      	movs	r0, r3
 80067cc:	46bd      	mov	sp, r7
 80067ce:	b002      	add	sp, #8
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	46c0      	nop			; (mov r8, r8)
 80067d4:	40022000 	.word	0x40022000

080067d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80067d8:	b590      	push	{r4, r7, lr}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80067e0:	4b14      	ldr	r3, [pc, #80]	; (8006834 <HAL_InitTick+0x5c>)
 80067e2:	681c      	ldr	r4, [r3, #0]
 80067e4:	4b14      	ldr	r3, [pc, #80]	; (8006838 <HAL_InitTick+0x60>)
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	0019      	movs	r1, r3
 80067ea:	23fa      	movs	r3, #250	; 0xfa
 80067ec:	0098      	lsls	r0, r3, #2
 80067ee:	f7f9 fc8b 	bl	8000108 <__udivsi3>
 80067f2:	0003      	movs	r3, r0
 80067f4:	0019      	movs	r1, r3
 80067f6:	0020      	movs	r0, r4
 80067f8:	f7f9 fc86 	bl	8000108 <__udivsi3>
 80067fc:	0003      	movs	r3, r0
 80067fe:	0018      	movs	r0, r3
 8006800:	f000 f922 	bl	8006a48 <HAL_SYSTICK_Config>
 8006804:	1e03      	subs	r3, r0, #0
 8006806:	d001      	beq.n	800680c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e00f      	b.n	800682c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b03      	cmp	r3, #3
 8006810:	d80b      	bhi.n	800682a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006812:	6879      	ldr	r1, [r7, #4]
 8006814:	2301      	movs	r3, #1
 8006816:	425b      	negs	r3, r3
 8006818:	2200      	movs	r2, #0
 800681a:	0018      	movs	r0, r3
 800681c:	f000 f8d8 	bl	80069d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006820:	4b06      	ldr	r3, [pc, #24]	; (800683c <HAL_InitTick+0x64>)
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006826:	2300      	movs	r3, #0
 8006828:	e000      	b.n	800682c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
}
 800682c:	0018      	movs	r0, r3
 800682e:	46bd      	mov	sp, r7
 8006830:	b003      	add	sp, #12
 8006832:	bd90      	pop	{r4, r7, pc}
 8006834:	20000048 	.word	0x20000048
 8006838:	20000050 	.word	0x20000050
 800683c:	2000004c 	.word	0x2000004c

08006840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006844:	4b05      	ldr	r3, [pc, #20]	; (800685c <HAL_IncTick+0x1c>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	001a      	movs	r2, r3
 800684a:	4b05      	ldr	r3, [pc, #20]	; (8006860 <HAL_IncTick+0x20>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	18d2      	adds	r2, r2, r3
 8006850:	4b03      	ldr	r3, [pc, #12]	; (8006860 <HAL_IncTick+0x20>)
 8006852:	601a      	str	r2, [r3, #0]
}
 8006854:	46c0      	nop			; (mov r8, r8)
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	46c0      	nop			; (mov r8, r8)
 800685c:	20000050 	.word	0x20000050
 8006860:	20000470 	.word	0x20000470

08006864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	af00      	add	r7, sp, #0
  return uwTick;
 8006868:	4b02      	ldr	r3, [pc, #8]	; (8006874 <HAL_GetTick+0x10>)
 800686a:	681b      	ldr	r3, [r3, #0]
}
 800686c:	0018      	movs	r0, r3
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	46c0      	nop			; (mov r8, r8)
 8006874:	20000470 	.word	0x20000470

08006878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	0002      	movs	r2, r0
 8006880:	1dfb      	adds	r3, r7, #7
 8006882:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006884:	1dfb      	adds	r3, r7, #7
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b7f      	cmp	r3, #127	; 0x7f
 800688a:	d809      	bhi.n	80068a0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800688c:	1dfb      	adds	r3, r7, #7
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	001a      	movs	r2, r3
 8006892:	231f      	movs	r3, #31
 8006894:	401a      	ands	r2, r3
 8006896:	4b04      	ldr	r3, [pc, #16]	; (80068a8 <__NVIC_EnableIRQ+0x30>)
 8006898:	2101      	movs	r1, #1
 800689a:	4091      	lsls	r1, r2
 800689c:	000a      	movs	r2, r1
 800689e:	601a      	str	r2, [r3, #0]
  }
}
 80068a0:	46c0      	nop			; (mov r8, r8)
 80068a2:	46bd      	mov	sp, r7
 80068a4:	b002      	add	sp, #8
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	e000e100 	.word	0xe000e100

080068ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80068ac:	b590      	push	{r4, r7, lr}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	0002      	movs	r2, r0
 80068b4:	6039      	str	r1, [r7, #0]
 80068b6:	1dfb      	adds	r3, r7, #7
 80068b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80068ba:	1dfb      	adds	r3, r7, #7
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	2b7f      	cmp	r3, #127	; 0x7f
 80068c0:	d828      	bhi.n	8006914 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80068c2:	4a2f      	ldr	r2, [pc, #188]	; (8006980 <__NVIC_SetPriority+0xd4>)
 80068c4:	1dfb      	adds	r3, r7, #7
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	b25b      	sxtb	r3, r3
 80068ca:	089b      	lsrs	r3, r3, #2
 80068cc:	33c0      	adds	r3, #192	; 0xc0
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	589b      	ldr	r3, [r3, r2]
 80068d2:	1dfa      	adds	r2, r7, #7
 80068d4:	7812      	ldrb	r2, [r2, #0]
 80068d6:	0011      	movs	r1, r2
 80068d8:	2203      	movs	r2, #3
 80068da:	400a      	ands	r2, r1
 80068dc:	00d2      	lsls	r2, r2, #3
 80068de:	21ff      	movs	r1, #255	; 0xff
 80068e0:	4091      	lsls	r1, r2
 80068e2:	000a      	movs	r2, r1
 80068e4:	43d2      	mvns	r2, r2
 80068e6:	401a      	ands	r2, r3
 80068e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	019b      	lsls	r3, r3, #6
 80068ee:	22ff      	movs	r2, #255	; 0xff
 80068f0:	401a      	ands	r2, r3
 80068f2:	1dfb      	adds	r3, r7, #7
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	0018      	movs	r0, r3
 80068f8:	2303      	movs	r3, #3
 80068fa:	4003      	ands	r3, r0
 80068fc:	00db      	lsls	r3, r3, #3
 80068fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006900:	481f      	ldr	r0, [pc, #124]	; (8006980 <__NVIC_SetPriority+0xd4>)
 8006902:	1dfb      	adds	r3, r7, #7
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	b25b      	sxtb	r3, r3
 8006908:	089b      	lsrs	r3, r3, #2
 800690a:	430a      	orrs	r2, r1
 800690c:	33c0      	adds	r3, #192	; 0xc0
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006912:	e031      	b.n	8006978 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006914:	4a1b      	ldr	r2, [pc, #108]	; (8006984 <__NVIC_SetPriority+0xd8>)
 8006916:	1dfb      	adds	r3, r7, #7
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	0019      	movs	r1, r3
 800691c:	230f      	movs	r3, #15
 800691e:	400b      	ands	r3, r1
 8006920:	3b08      	subs	r3, #8
 8006922:	089b      	lsrs	r3, r3, #2
 8006924:	3306      	adds	r3, #6
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	18d3      	adds	r3, r2, r3
 800692a:	3304      	adds	r3, #4
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	1dfa      	adds	r2, r7, #7
 8006930:	7812      	ldrb	r2, [r2, #0]
 8006932:	0011      	movs	r1, r2
 8006934:	2203      	movs	r2, #3
 8006936:	400a      	ands	r2, r1
 8006938:	00d2      	lsls	r2, r2, #3
 800693a:	21ff      	movs	r1, #255	; 0xff
 800693c:	4091      	lsls	r1, r2
 800693e:	000a      	movs	r2, r1
 8006940:	43d2      	mvns	r2, r2
 8006942:	401a      	ands	r2, r3
 8006944:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	019b      	lsls	r3, r3, #6
 800694a:	22ff      	movs	r2, #255	; 0xff
 800694c:	401a      	ands	r2, r3
 800694e:	1dfb      	adds	r3, r7, #7
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	0018      	movs	r0, r3
 8006954:	2303      	movs	r3, #3
 8006956:	4003      	ands	r3, r0
 8006958:	00db      	lsls	r3, r3, #3
 800695a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800695c:	4809      	ldr	r0, [pc, #36]	; (8006984 <__NVIC_SetPriority+0xd8>)
 800695e:	1dfb      	adds	r3, r7, #7
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	001c      	movs	r4, r3
 8006964:	230f      	movs	r3, #15
 8006966:	4023      	ands	r3, r4
 8006968:	3b08      	subs	r3, #8
 800696a:	089b      	lsrs	r3, r3, #2
 800696c:	430a      	orrs	r2, r1
 800696e:	3306      	adds	r3, #6
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	18c3      	adds	r3, r0, r3
 8006974:	3304      	adds	r3, #4
 8006976:	601a      	str	r2, [r3, #0]
}
 8006978:	46c0      	nop			; (mov r8, r8)
 800697a:	46bd      	mov	sp, r7
 800697c:	b003      	add	sp, #12
 800697e:	bd90      	pop	{r4, r7, pc}
 8006980:	e000e100 	.word	0xe000e100
 8006984:	e000ed00 	.word	0xe000ed00

08006988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	3b01      	subs	r3, #1
 8006994:	4a0c      	ldr	r2, [pc, #48]	; (80069c8 <SysTick_Config+0x40>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d901      	bls.n	800699e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800699a:	2301      	movs	r3, #1
 800699c:	e010      	b.n	80069c0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800699e:	4b0b      	ldr	r3, [pc, #44]	; (80069cc <SysTick_Config+0x44>)
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	3a01      	subs	r2, #1
 80069a4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80069a6:	2301      	movs	r3, #1
 80069a8:	425b      	negs	r3, r3
 80069aa:	2103      	movs	r1, #3
 80069ac:	0018      	movs	r0, r3
 80069ae:	f7ff ff7d 	bl	80068ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80069b2:	4b06      	ldr	r3, [pc, #24]	; (80069cc <SysTick_Config+0x44>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80069b8:	4b04      	ldr	r3, [pc, #16]	; (80069cc <SysTick_Config+0x44>)
 80069ba:	2207      	movs	r2, #7
 80069bc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80069be:	2300      	movs	r3, #0
}
 80069c0:	0018      	movs	r0, r3
 80069c2:	46bd      	mov	sp, r7
 80069c4:	b002      	add	sp, #8
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	00ffffff 	.word	0x00ffffff
 80069cc:	e000e010 	.word	0xe000e010

080069d0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60b9      	str	r1, [r7, #8]
 80069d8:	607a      	str	r2, [r7, #4]
 80069da:	230f      	movs	r3, #15
 80069dc:	18fb      	adds	r3, r7, r3
 80069de:	1c02      	adds	r2, r0, #0
 80069e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	2b0f      	cmp	r3, #15
 80069e6:	d904      	bls.n	80069f2 <HAL_NVIC_SetPriority+0x22>
 80069e8:	4b08      	ldr	r3, [pc, #32]	; (8006a0c <HAL_NVIC_SetPriority+0x3c>)
 80069ea:	2187      	movs	r1, #135	; 0x87
 80069ec:	0018      	movs	r0, r3
 80069ee:	f7fe fe4d 	bl	800568c <assert_failed>
  NVIC_SetPriority(IRQn,PreemptPriority);
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	230f      	movs	r3, #15
 80069f6:	18fb      	adds	r3, r7, r3
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	b25b      	sxtb	r3, r3
 80069fc:	0011      	movs	r1, r2
 80069fe:	0018      	movs	r0, r3
 8006a00:	f7ff ff54 	bl	80068ac <__NVIC_SetPriority>
}
 8006a04:	46c0      	nop			; (mov r8, r8)
 8006a06:	46bd      	mov	sp, r7
 8006a08:	b004      	add	sp, #16
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	0800b884 	.word	0x0800b884

08006a10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	0002      	movs	r2, r0
 8006a18:	1dfb      	adds	r3, r7, #7
 8006a1a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8006a1c:	1dfb      	adds	r3, r7, #7
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b7f      	cmp	r3, #127	; 0x7f
 8006a22:	d904      	bls.n	8006a2e <HAL_NVIC_EnableIRQ+0x1e>
 8006a24:	4b07      	ldr	r3, [pc, #28]	; (8006a44 <HAL_NVIC_EnableIRQ+0x34>)
 8006a26:	2197      	movs	r1, #151	; 0x97
 8006a28:	0018      	movs	r0, r3
 8006a2a:	f7fe fe2f 	bl	800568c <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a2e:	1dfb      	adds	r3, r7, #7
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	b25b      	sxtb	r3, r3
 8006a34:	0018      	movs	r0, r3
 8006a36:	f7ff ff1f 	bl	8006878 <__NVIC_EnableIRQ>
}
 8006a3a:	46c0      	nop			; (mov r8, r8)
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	b002      	add	sp, #8
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	46c0      	nop			; (mov r8, r8)
 8006a44:	0800b884 	.word	0x0800b884

08006a48 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	0018      	movs	r0, r3
 8006a54:	f7ff ff98 	bl	8006988 <SysTick_Config>
 8006a58:	0003      	movs	r3, r0
}
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	b002      	add	sp, #8
 8006a60:	bd80      	pop	{r7, pc}
	...

08006a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006a72:	2300      	movs	r3, #0
 8006a74:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d036      	beq.n	8006af0 <HAL_GPIO_Init+0x8c>
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d032      	beq.n	8006af0 <HAL_GPIO_Init+0x8c>
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	2b11      	cmp	r3, #17
 8006a90:	d02e      	beq.n	8006af0 <HAL_GPIO_Init+0x8c>
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d02a      	beq.n	8006af0 <HAL_GPIO_Init+0x8c>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	2b12      	cmp	r3, #18
 8006aa0:	d026      	beq.n	8006af0 <HAL_GPIO_Init+0x8c>
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	4a51      	ldr	r2, [pc, #324]	; (8006bec <HAL_GPIO_Init+0x188>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d021      	beq.n	8006af0 <HAL_GPIO_Init+0x8c>
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	4a4f      	ldr	r2, [pc, #316]	; (8006bf0 <HAL_GPIO_Init+0x18c>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d01c      	beq.n	8006af0 <HAL_GPIO_Init+0x8c>
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	4a4e      	ldr	r2, [pc, #312]	; (8006bf4 <HAL_GPIO_Init+0x190>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d017      	beq.n	8006af0 <HAL_GPIO_Init+0x8c>
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	4a4c      	ldr	r2, [pc, #304]	; (8006bf8 <HAL_GPIO_Init+0x194>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d012      	beq.n	8006af0 <HAL_GPIO_Init+0x8c>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	4a4b      	ldr	r2, [pc, #300]	; (8006bfc <HAL_GPIO_Init+0x198>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d00d      	beq.n	8006af0 <HAL_GPIO_Init+0x8c>
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	4a49      	ldr	r2, [pc, #292]	; (8006c00 <HAL_GPIO_Init+0x19c>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d008      	beq.n	8006af0 <HAL_GPIO_Init+0x8c>
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	2b03      	cmp	r3, #3
 8006ae4:	d004      	beq.n	8006af0 <HAL_GPIO_Init+0x8c>
 8006ae6:	4b47      	ldr	r3, [pc, #284]	; (8006c04 <HAL_GPIO_Init+0x1a0>)
 8006ae8:	21ae      	movs	r1, #174	; 0xae
 8006aea:	0018      	movs	r0, r3
 8006aec:	f7fe fdce 	bl	800568c <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00c      	beq.n	8006b12 <HAL_GPIO_Init+0xae>
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d008      	beq.n	8006b12 <HAL_GPIO_Init+0xae>
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d004      	beq.n	8006b12 <HAL_GPIO_Init+0xae>
 8006b08:	4b3e      	ldr	r3, [pc, #248]	; (8006c04 <HAL_GPIO_Init+0x1a0>)
 8006b0a:	21af      	movs	r1, #175	; 0xaf
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	f7fe fdbd 	bl	800568c <assert_failed>
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	23a0      	movs	r3, #160	; 0xa0
 8006b16:	05db      	lsls	r3, r3, #23
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d10c      	bne.n	8006b36 <HAL_GPIO_Init+0xd2>
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	041b      	lsls	r3, r3, #16
 8006b22:	0c1b      	lsrs	r3, r3, #16
 8006b24:	d007      	beq.n	8006b36 <HAL_GPIO_Init+0xd2>
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a37      	ldr	r2, [pc, #220]	; (8006c08 <HAL_GPIO_Init+0x1a4>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	4a36      	ldr	r2, [pc, #216]	; (8006c08 <HAL_GPIO_Init+0x1a4>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d100      	bne.n	8006b36 <HAL_GPIO_Init+0xd2>
 8006b34:	e208      	b.n	8006f48 <HAL_GPIO_Init+0x4e4>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a34      	ldr	r2, [pc, #208]	; (8006c0c <HAL_GPIO_Init+0x1a8>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d10c      	bne.n	8006b58 <HAL_GPIO_Init+0xf4>
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	041b      	lsls	r3, r3, #16
 8006b44:	0c1b      	lsrs	r3, r3, #16
 8006b46:	d007      	beq.n	8006b58 <HAL_GPIO_Init+0xf4>
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a2e      	ldr	r2, [pc, #184]	; (8006c08 <HAL_GPIO_Init+0x1a4>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	4a2d      	ldr	r2, [pc, #180]	; (8006c08 <HAL_GPIO_Init+0x1a4>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d100      	bne.n	8006b58 <HAL_GPIO_Init+0xf4>
 8006b56:	e1f7      	b.n	8006f48 <HAL_GPIO_Init+0x4e4>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a2d      	ldr	r2, [pc, #180]	; (8006c10 <HAL_GPIO_Init+0x1ac>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d10c      	bne.n	8006b7a <HAL_GPIO_Init+0x116>
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	041b      	lsls	r3, r3, #16
 8006b66:	0c1b      	lsrs	r3, r3, #16
 8006b68:	d007      	beq.n	8006b7a <HAL_GPIO_Init+0x116>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a26      	ldr	r2, [pc, #152]	; (8006c08 <HAL_GPIO_Init+0x1a4>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	4a25      	ldr	r2, [pc, #148]	; (8006c08 <HAL_GPIO_Init+0x1a4>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d100      	bne.n	8006b7a <HAL_GPIO_Init+0x116>
 8006b78:	e1e6      	b.n	8006f48 <HAL_GPIO_Init+0x4e4>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a25      	ldr	r2, [pc, #148]	; (8006c14 <HAL_GPIO_Init+0x1b0>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d10c      	bne.n	8006b9c <HAL_GPIO_Init+0x138>
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	041b      	lsls	r3, r3, #16
 8006b88:	0c1b      	lsrs	r3, r3, #16
 8006b8a:	d007      	beq.n	8006b9c <HAL_GPIO_Init+0x138>
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a1d      	ldr	r2, [pc, #116]	; (8006c08 <HAL_GPIO_Init+0x1a4>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	4a1c      	ldr	r2, [pc, #112]	; (8006c08 <HAL_GPIO_Init+0x1a4>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d100      	bne.n	8006b9c <HAL_GPIO_Init+0x138>
 8006b9a:	e1d5      	b.n	8006f48 <HAL_GPIO_Init+0x4e4>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a1e      	ldr	r2, [pc, #120]	; (8006c18 <HAL_GPIO_Init+0x1b4>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d10c      	bne.n	8006bbe <HAL_GPIO_Init+0x15a>
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	041b      	lsls	r3, r3, #16
 8006baa:	0c1b      	lsrs	r3, r3, #16
 8006bac:	d007      	beq.n	8006bbe <HAL_GPIO_Init+0x15a>
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a15      	ldr	r2, [pc, #84]	; (8006c08 <HAL_GPIO_Init+0x1a4>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	4a14      	ldr	r2, [pc, #80]	; (8006c08 <HAL_GPIO_Init+0x1a4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d100      	bne.n	8006bbe <HAL_GPIO_Init+0x15a>
 8006bbc:	e1c4      	b.n	8006f48 <HAL_GPIO_Init+0x4e4>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a16      	ldr	r2, [pc, #88]	; (8006c1c <HAL_GPIO_Init+0x1b8>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d10c      	bne.n	8006be0 <HAL_GPIO_Init+0x17c>
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a15      	ldr	r2, [pc, #84]	; (8006c20 <HAL_GPIO_Init+0x1bc>)
 8006bcc:	4013      	ands	r3, r2
 8006bce:	d007      	beq.n	8006be0 <HAL_GPIO_Init+0x17c>
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a12      	ldr	r2, [pc, #72]	; (8006c20 <HAL_GPIO_Init+0x1bc>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	4a11      	ldr	r2, [pc, #68]	; (8006c20 <HAL_GPIO_Init+0x1bc>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d100      	bne.n	8006be0 <HAL_GPIO_Init+0x17c>
 8006bde:	e1b3      	b.n	8006f48 <HAL_GPIO_Init+0x4e4>
 8006be0:	4b08      	ldr	r3, [pc, #32]	; (8006c04 <HAL_GPIO_Init+0x1a0>)
 8006be2:	21b0      	movs	r1, #176	; 0xb0
 8006be4:	0018      	movs	r0, r3
 8006be6:	f7fe fd51 	bl	800568c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8006bea:	e1ad      	b.n	8006f48 <HAL_GPIO_Init+0x4e4>
 8006bec:	10110000 	.word	0x10110000
 8006bf0:	10210000 	.word	0x10210000
 8006bf4:	10310000 	.word	0x10310000
 8006bf8:	10120000 	.word	0x10120000
 8006bfc:	10220000 	.word	0x10220000
 8006c00:	10320000 	.word	0x10320000
 8006c04:	0800b8c0 	.word	0x0800b8c0
 8006c08:	0000ffff 	.word	0x0000ffff
 8006c0c:	50000400 	.word	0x50000400
 8006c10:	50000800 	.word	0x50000800
 8006c14:	50000c00 	.word	0x50000c00
 8006c18:	50001000 	.word	0x50001000
 8006c1c:	50001c00 	.word	0x50001c00
 8006c20:	00000603 	.word	0x00000603
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2101      	movs	r1, #1
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	4091      	lsls	r1, r2
 8006c2e:	000a      	movs	r2, r1
 8006c30:	4013      	ands	r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d100      	bne.n	8006c3c <HAL_GPIO_Init+0x1d8>
 8006c3a:	e182      	b.n	8006f42 <HAL_GPIO_Init+0x4de>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d00b      	beq.n	8006c5c <HAL_GPIO_Init+0x1f8>
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d007      	beq.n	8006c5c <HAL_GPIO_Init+0x1f8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006c50:	2b11      	cmp	r3, #17
 8006c52:	d003      	beq.n	8006c5c <HAL_GPIO_Init+0x1f8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	2b12      	cmp	r3, #18
 8006c5a:	d145      	bne.n	8006ce8 <HAL_GPIO_Init+0x284>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d010      	beq.n	8006c86 <HAL_GPIO_Init+0x222>
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d00c      	beq.n	8006c86 <HAL_GPIO_Init+0x222>
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d008      	beq.n	8006c86 <HAL_GPIO_Init+0x222>
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	2b03      	cmp	r3, #3
 8006c7a:	d004      	beq.n	8006c86 <HAL_GPIO_Init+0x222>
 8006c7c:	4bb8      	ldr	r3, [pc, #736]	; (8006f60 <HAL_GPIO_Init+0x4fc>)
 8006c7e:	21c0      	movs	r1, #192	; 0xc0
 8006c80:	0018      	movs	r0, r3
 8006c82:	f7fe fd03 	bl	800568c <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	005b      	lsls	r3, r3, #1
 8006c90:	2203      	movs	r2, #3
 8006c92:	409a      	lsls	r2, r3
 8006c94:	0013      	movs	r3, r2
 8006c96:	43da      	mvns	r2, r3
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	68da      	ldr	r2, [r3, #12]
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	005b      	lsls	r3, r3, #1
 8006ca6:	409a      	lsls	r2, r3
 8006ca8:	0013      	movs	r3, r2
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	409a      	lsls	r2, r3
 8006cc2:	0013      	movs	r3, r2
 8006cc4:	43da      	mvns	r2, r3
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	4013      	ands	r3, r2
 8006cca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	091b      	lsrs	r3, r3, #4
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	401a      	ands	r2, r3
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	409a      	lsls	r2, r3
 8006cda:	0013      	movs	r3, r2
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	005b      	lsls	r3, r3, #1
 8006cf2:	2203      	movs	r2, #3
 8006cf4:	409a      	lsls	r2, r3
 8006cf6:	0013      	movs	r3, r2
 8006cf8:	43da      	mvns	r2, r3
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	005b      	lsls	r3, r3, #1
 8006d08:	409a      	lsls	r2, r3
 8006d0a:	0013      	movs	r3, r2
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d003      	beq.n	8006d28 <HAL_GPIO_Init+0x2c4>
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	2b12      	cmp	r3, #18
 8006d26:	d14a      	bne.n	8006dbe <HAL_GPIO_Init+0x35a>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	23a0      	movs	r3, #160	; 0xa0
 8006d2c:	05db      	lsls	r3, r3, #23
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d018      	beq.n	8006d64 <HAL_GPIO_Init+0x300>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a8b      	ldr	r2, [pc, #556]	; (8006f64 <HAL_GPIO_Init+0x500>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d014      	beq.n	8006d64 <HAL_GPIO_Init+0x300>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a8a      	ldr	r2, [pc, #552]	; (8006f68 <HAL_GPIO_Init+0x504>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d010      	beq.n	8006d64 <HAL_GPIO_Init+0x300>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a89      	ldr	r2, [pc, #548]	; (8006f6c <HAL_GPIO_Init+0x508>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d00c      	beq.n	8006d64 <HAL_GPIO_Init+0x300>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a88      	ldr	r2, [pc, #544]	; (8006f70 <HAL_GPIO_Init+0x50c>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d008      	beq.n	8006d64 <HAL_GPIO_Init+0x300>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a87      	ldr	r2, [pc, #540]	; (8006f74 <HAL_GPIO_Init+0x510>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d004      	beq.n	8006d64 <HAL_GPIO_Init+0x300>
 8006d5a:	4b81      	ldr	r3, [pc, #516]	; (8006f60 <HAL_GPIO_Init+0x4fc>)
 8006d5c:	21d8      	movs	r1, #216	; 0xd8
 8006d5e:	0018      	movs	r0, r3
 8006d60:	f7fe fc94 	bl	800568c <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	2b07      	cmp	r3, #7
 8006d6a:	d904      	bls.n	8006d76 <HAL_GPIO_Init+0x312>
 8006d6c:	4b7c      	ldr	r3, [pc, #496]	; (8006f60 <HAL_GPIO_Init+0x4fc>)
 8006d6e:	21d9      	movs	r1, #217	; 0xd9
 8006d70:	0018      	movs	r0, r3
 8006d72:	f7fe fc8b 	bl	800568c <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	08da      	lsrs	r2, r3, #3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	3208      	adds	r2, #8
 8006d7e:	0092      	lsls	r2, r2, #2
 8006d80:	58d3      	ldr	r3, [r2, r3]
 8006d82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	2207      	movs	r2, #7
 8006d88:	4013      	ands	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	220f      	movs	r2, #15
 8006d8e:	409a      	lsls	r2, r3
 8006d90:	0013      	movs	r3, r2
 8006d92:	43da      	mvns	r2, r3
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	4013      	ands	r3, r2
 8006d98:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	691a      	ldr	r2, [r3, #16]
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2107      	movs	r1, #7
 8006da2:	400b      	ands	r3, r1
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	409a      	lsls	r2, r3
 8006da8:	0013      	movs	r3, r2
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	08da      	lsrs	r2, r3, #3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	3208      	adds	r2, #8
 8006db8:	0092      	lsls	r2, r2, #2
 8006dba:	6939      	ldr	r1, [r7, #16]
 8006dbc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	005b      	lsls	r3, r3, #1
 8006dc8:	2203      	movs	r2, #3
 8006dca:	409a      	lsls	r2, r3
 8006dcc:	0013      	movs	r3, r2
 8006dce:	43da      	mvns	r2, r3
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	2203      	movs	r2, #3
 8006ddc:	401a      	ands	r2, r3
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	409a      	lsls	r2, r3
 8006de4:	0013      	movs	r3, r2
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	685a      	ldr	r2, [r3, #4]
 8006df6:	2380      	movs	r3, #128	; 0x80
 8006df8:	055b      	lsls	r3, r3, #21
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	d100      	bne.n	8006e00 <HAL_GPIO_Init+0x39c>
 8006dfe:	e0a0      	b.n	8006f42 <HAL_GPIO_Init+0x4de>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e00:	4b5d      	ldr	r3, [pc, #372]	; (8006f78 <HAL_GPIO_Init+0x514>)
 8006e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e04:	4b5c      	ldr	r3, [pc, #368]	; (8006f78 <HAL_GPIO_Init+0x514>)
 8006e06:	2101      	movs	r1, #1
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e0c:	4a5b      	ldr	r2, [pc, #364]	; (8006f7c <HAL_GPIO_Init+0x518>)
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	089b      	lsrs	r3, r3, #2
 8006e12:	3302      	adds	r3, #2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	589b      	ldr	r3, [r3, r2]
 8006e18:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	2203      	movs	r2, #3
 8006e1e:	4013      	ands	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	220f      	movs	r2, #15
 8006e24:	409a      	lsls	r2, r3
 8006e26:	0013      	movs	r3, r2
 8006e28:	43da      	mvns	r2, r3
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	23a0      	movs	r3, #160	; 0xa0
 8006e34:	05db      	lsls	r3, r3, #23
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d01f      	beq.n	8006e7a <HAL_GPIO_Init+0x416>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a49      	ldr	r2, [pc, #292]	; (8006f64 <HAL_GPIO_Init+0x500>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d019      	beq.n	8006e76 <HAL_GPIO_Init+0x412>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a48      	ldr	r2, [pc, #288]	; (8006f68 <HAL_GPIO_Init+0x504>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d013      	beq.n	8006e72 <HAL_GPIO_Init+0x40e>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a47      	ldr	r2, [pc, #284]	; (8006f6c <HAL_GPIO_Init+0x508>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d00d      	beq.n	8006e6e <HAL_GPIO_Init+0x40a>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a46      	ldr	r2, [pc, #280]	; (8006f70 <HAL_GPIO_Init+0x50c>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d007      	beq.n	8006e6a <HAL_GPIO_Init+0x406>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a45      	ldr	r2, [pc, #276]	; (8006f74 <HAL_GPIO_Init+0x510>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d101      	bne.n	8006e66 <HAL_GPIO_Init+0x402>
 8006e62:	2305      	movs	r3, #5
 8006e64:	e00a      	b.n	8006e7c <HAL_GPIO_Init+0x418>
 8006e66:	2306      	movs	r3, #6
 8006e68:	e008      	b.n	8006e7c <HAL_GPIO_Init+0x418>
 8006e6a:	2304      	movs	r3, #4
 8006e6c:	e006      	b.n	8006e7c <HAL_GPIO_Init+0x418>
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e004      	b.n	8006e7c <HAL_GPIO_Init+0x418>
 8006e72:	2302      	movs	r3, #2
 8006e74:	e002      	b.n	8006e7c <HAL_GPIO_Init+0x418>
 8006e76:	2301      	movs	r3, #1
 8006e78:	e000      	b.n	8006e7c <HAL_GPIO_Init+0x418>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	2103      	movs	r1, #3
 8006e80:	400a      	ands	r2, r1
 8006e82:	0092      	lsls	r2, r2, #2
 8006e84:	4093      	lsls	r3, r2
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e8c:	493b      	ldr	r1, [pc, #236]	; (8006f7c <HAL_GPIO_Init+0x518>)
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	089b      	lsrs	r3, r3, #2
 8006e92:	3302      	adds	r3, #2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006e9a:	4b39      	ldr	r3, [pc, #228]	; (8006f80 <HAL_GPIO_Init+0x51c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	43da      	mvns	r2, r3
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	2380      	movs	r3, #128	; 0x80
 8006eb0:	025b      	lsls	r3, r3, #9
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	d003      	beq.n	8006ebe <HAL_GPIO_Init+0x45a>
        {
          temp |= iocurrent;
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006ebe:	4b30      	ldr	r3, [pc, #192]	; (8006f80 <HAL_GPIO_Init+0x51c>)
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8006ec4:	4b2e      	ldr	r3, [pc, #184]	; (8006f80 <HAL_GPIO_Init+0x51c>)
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	43da      	mvns	r2, r3
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	2380      	movs	r3, #128	; 0x80
 8006eda:	029b      	lsls	r3, r3, #10
 8006edc:	4013      	ands	r3, r2
 8006ede:	d003      	beq.n	8006ee8 <HAL_GPIO_Init+0x484>
        {
          temp |= iocurrent;
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006ee8:	4b25      	ldr	r3, [pc, #148]	; (8006f80 <HAL_GPIO_Init+0x51c>)
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006eee:	4b24      	ldr	r3, [pc, #144]	; (8006f80 <HAL_GPIO_Init+0x51c>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	43da      	mvns	r2, r3
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	4013      	ands	r3, r2
 8006efc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	2380      	movs	r3, #128	; 0x80
 8006f04:	035b      	lsls	r3, r3, #13
 8006f06:	4013      	ands	r3, r2
 8006f08:	d003      	beq.n	8006f12 <HAL_GPIO_Init+0x4ae>
        {
          temp |= iocurrent;
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006f12:	4b1b      	ldr	r3, [pc, #108]	; (8006f80 <HAL_GPIO_Init+0x51c>)
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8006f18:	4b19      	ldr	r3, [pc, #100]	; (8006f80 <HAL_GPIO_Init+0x51c>)
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	43da      	mvns	r2, r3
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	4013      	ands	r3, r2
 8006f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	2380      	movs	r3, #128	; 0x80
 8006f2e:	039b      	lsls	r3, r3, #14
 8006f30:	4013      	ands	r3, r2
 8006f32:	d003      	beq.n	8006f3c <HAL_GPIO_Init+0x4d8>
        {
          temp |= iocurrent;
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006f3c:	4b10      	ldr	r3, [pc, #64]	; (8006f80 <HAL_GPIO_Init+0x51c>)
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	3301      	adds	r3, #1
 8006f46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	40da      	lsrs	r2, r3
 8006f50:	1e13      	subs	r3, r2, #0
 8006f52:	d000      	beq.n	8006f56 <HAL_GPIO_Init+0x4f2>
 8006f54:	e666      	b.n	8006c24 <HAL_GPIO_Init+0x1c0>
  }
}
 8006f56:	46c0      	nop			; (mov r8, r8)
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	b006      	add	sp, #24
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	46c0      	nop			; (mov r8, r8)
 8006f60:	0800b8c0 	.word	0x0800b8c0
 8006f64:	50000400 	.word	0x50000400
 8006f68:	50000800 	.word	0x50000800
 8006f6c:	50000c00 	.word	0x50000c00
 8006f70:	50001000 	.word	0x50001000
 8006f74:	50001c00 	.word	0x50001c00
 8006f78:	40021000 	.word	0x40021000
 8006f7c:	40010000 	.word	0x40010000
 8006f80:	40010400 	.word	0x40010400

08006f84 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	0008      	movs	r0, r1
 8006f8e:	0011      	movs	r1, r2
 8006f90:	1cbb      	adds	r3, r7, #2
 8006f92:	1c02      	adds	r2, r0, #0
 8006f94:	801a      	strh	r2, [r3, #0]
 8006f96:	1c7b      	adds	r3, r7, #1
 8006f98:	1c0a      	adds	r2, r1, #0
 8006f9a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	23a0      	movs	r3, #160	; 0xa0
 8006fa0:	05db      	lsls	r3, r3, #23
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d103      	bne.n	8006fae <HAL_GPIO_WritePin+0x2a>
 8006fa6:	1cbb      	adds	r3, r7, #2
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d137      	bne.n	800701e <HAL_GPIO_WritePin+0x9a>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a2b      	ldr	r2, [pc, #172]	; (8007060 <HAL_GPIO_WritePin+0xdc>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d103      	bne.n	8006fbe <HAL_GPIO_WritePin+0x3a>
 8006fb6:	1cbb      	adds	r3, r7, #2
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d12f      	bne.n	800701e <HAL_GPIO_WritePin+0x9a>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a28      	ldr	r2, [pc, #160]	; (8007064 <HAL_GPIO_WritePin+0xe0>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d103      	bne.n	8006fce <HAL_GPIO_WritePin+0x4a>
 8006fc6:	1cbb      	adds	r3, r7, #2
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d127      	bne.n	800701e <HAL_GPIO_WritePin+0x9a>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a25      	ldr	r2, [pc, #148]	; (8007068 <HAL_GPIO_WritePin+0xe4>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d103      	bne.n	8006fde <HAL_GPIO_WritePin+0x5a>
 8006fd6:	1cbb      	adds	r3, r7, #2
 8006fd8:	881b      	ldrh	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d11f      	bne.n	800701e <HAL_GPIO_WritePin+0x9a>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a22      	ldr	r2, [pc, #136]	; (800706c <HAL_GPIO_WritePin+0xe8>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d103      	bne.n	8006fee <HAL_GPIO_WritePin+0x6a>
 8006fe6:	1cbb      	adds	r3, r7, #2
 8006fe8:	881b      	ldrh	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d117      	bne.n	800701e <HAL_GPIO_WritePin+0x9a>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a1f      	ldr	r2, [pc, #124]	; (8007070 <HAL_GPIO_WritePin+0xec>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d10c      	bne.n	8007010 <HAL_GPIO_WritePin+0x8c>
 8006ff6:	1cbb      	adds	r3, r7, #2
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	4a1e      	ldr	r2, [pc, #120]	; (8007074 <HAL_GPIO_WritePin+0xf0>)
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	d007      	beq.n	8007010 <HAL_GPIO_WritePin+0x8c>
 8007000:	1cbb      	adds	r3, r7, #2
 8007002:	881b      	ldrh	r3, [r3, #0]
 8007004:	4a1b      	ldr	r2, [pc, #108]	; (8007074 <HAL_GPIO_WritePin+0xf0>)
 8007006:	4313      	orrs	r3, r2
 8007008:	b29b      	uxth	r3, r3
 800700a:	4a1a      	ldr	r2, [pc, #104]	; (8007074 <HAL_GPIO_WritePin+0xf0>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d006      	beq.n	800701e <HAL_GPIO_WritePin+0x9a>
 8007010:	23ce      	movs	r3, #206	; 0xce
 8007012:	005a      	lsls	r2, r3, #1
 8007014:	4b18      	ldr	r3, [pc, #96]	; (8007078 <HAL_GPIO_WritePin+0xf4>)
 8007016:	0011      	movs	r1, r2
 8007018:	0018      	movs	r0, r3
 800701a:	f7fe fb37 	bl	800568c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800701e:	1c7b      	adds	r3, r7, #1
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00b      	beq.n	800703e <HAL_GPIO_WritePin+0xba>
 8007026:	1c7b      	adds	r3, r7, #1
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d007      	beq.n	800703e <HAL_GPIO_WritePin+0xba>
 800702e:	239e      	movs	r3, #158	; 0x9e
 8007030:	33ff      	adds	r3, #255	; 0xff
 8007032:	001a      	movs	r2, r3
 8007034:	4b10      	ldr	r3, [pc, #64]	; (8007078 <HAL_GPIO_WritePin+0xf4>)
 8007036:	0011      	movs	r1, r2
 8007038:	0018      	movs	r0, r3
 800703a:	f7fe fb27 	bl	800568c <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800703e:	1c7b      	adds	r3, r7, #1
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d004      	beq.n	8007050 <HAL_GPIO_WritePin+0xcc>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007046:	1cbb      	adds	r3, r7, #2
 8007048:	881a      	ldrh	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800704e:	e003      	b.n	8007058 <HAL_GPIO_WritePin+0xd4>
    GPIOx->BRR = GPIO_Pin ;
 8007050:	1cbb      	adds	r3, r7, #2
 8007052:	881a      	ldrh	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007058:	46c0      	nop			; (mov r8, r8)
 800705a:	46bd      	mov	sp, r7
 800705c:	b002      	add	sp, #8
 800705e:	bd80      	pop	{r7, pc}
 8007060:	50000400 	.word	0x50000400
 8007064:	50000800 	.word	0x50000800
 8007068:	50000c00 	.word	0x50000c00
 800706c:	50001000 	.word	0x50001000
 8007070:	50001c00 	.word	0x50001c00
 8007074:	00000603 	.word	0x00000603
 8007078:	0800b8c0 	.word	0x0800b8c0

0800707c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	0002      	movs	r2, r0
 8007084:	1dbb      	adds	r3, r7, #6
 8007086:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007088:	4b09      	ldr	r3, [pc, #36]	; (80070b0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	1dba      	adds	r2, r7, #6
 800708e:	8812      	ldrh	r2, [r2, #0]
 8007090:	4013      	ands	r3, r2
 8007092:	d008      	beq.n	80070a6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007094:	4b06      	ldr	r3, [pc, #24]	; (80070b0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8007096:	1dba      	adds	r2, r7, #6
 8007098:	8812      	ldrh	r2, [r2, #0]
 800709a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800709c:	1dbb      	adds	r3, r7, #6
 800709e:	881b      	ldrh	r3, [r3, #0]
 80070a0:	0018      	movs	r0, r3
 80070a2:	f7fa fa7f 	bl	80015a4 <HAL_GPIO_EXTI_Callback>
  }
}
 80070a6:	46c0      	nop			; (mov r8, r8)
 80070a8:	46bd      	mov	sp, r7
 80070aa:	b002      	add	sp, #8
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	46c0      	nop			; (mov r8, r8)
 80070b0:	40010400 	.word	0x40010400

080070b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e11c      	b.n	8007300 <HAL_I2C_Init+0x24c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a8f      	ldr	r2, [pc, #572]	; (8007308 <HAL_I2C_Init+0x254>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d011      	beq.n	80070f4 <HAL_I2C_Init+0x40>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a8d      	ldr	r2, [pc, #564]	; (800730c <HAL_I2C_Init+0x258>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d00c      	beq.n	80070f4 <HAL_I2C_Init+0x40>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a8c      	ldr	r2, [pc, #560]	; (8007310 <HAL_I2C_Init+0x25c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d007      	beq.n	80070f4 <HAL_I2C_Init+0x40>
 80070e4:	23e6      	movs	r3, #230	; 0xe6
 80070e6:	33ff      	adds	r3, #255	; 0xff
 80070e8:	001a      	movs	r2, r3
 80070ea:	4b8a      	ldr	r3, [pc, #552]	; (8007314 <HAL_I2C_Init+0x260>)
 80070ec:	0011      	movs	r1, r2
 80070ee:	0018      	movs	r0, r3
 80070f0:	f7fe facc 	bl	800568c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	4a87      	ldr	r2, [pc, #540]	; (8007318 <HAL_I2C_Init+0x264>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d906      	bls.n	800710c <HAL_I2C_Init+0x58>
 80070fe:	23f3      	movs	r3, #243	; 0xf3
 8007100:	005a      	lsls	r2, r3, #1
 8007102:	4b84      	ldr	r3, [pc, #528]	; (8007314 <HAL_I2C_Init+0x260>)
 8007104:	0011      	movs	r1, r2
 8007106:	0018      	movs	r0, r3
 8007108:	f7fe fac0 	bl	800568c <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d00b      	beq.n	800712c <HAL_I2C_Init+0x78>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	2b02      	cmp	r3, #2
 800711a:	d007      	beq.n	800712c <HAL_I2C_Init+0x78>
 800711c:	23e8      	movs	r3, #232	; 0xe8
 800711e:	33ff      	adds	r3, #255	; 0xff
 8007120:	001a      	movs	r2, r3
 8007122:	4b7c      	ldr	r3, [pc, #496]	; (8007314 <HAL_I2C_Init+0x260>)
 8007124:	0011      	movs	r1, r2
 8007126:	0018      	movs	r0, r3
 8007128:	f7fe fab0 	bl	800568c <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00c      	beq.n	800714e <HAL_I2C_Init+0x9a>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	691a      	ldr	r2, [r3, #16]
 8007138:	2380      	movs	r3, #128	; 0x80
 800713a:	021b      	lsls	r3, r3, #8
 800713c:	429a      	cmp	r2, r3
 800713e:	d006      	beq.n	800714e <HAL_I2C_Init+0x9a>
 8007140:	23f4      	movs	r3, #244	; 0xf4
 8007142:	005a      	lsls	r2, r3, #1
 8007144:	4b73      	ldr	r3, [pc, #460]	; (8007314 <HAL_I2C_Init+0x260>)
 8007146:	0011      	movs	r1, r2
 8007148:	0018      	movs	r0, r3
 800714a:	f7fe fa9f 	bl	800568c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	2bff      	cmp	r3, #255	; 0xff
 8007154:	d907      	bls.n	8007166 <HAL_I2C_Init+0xb2>
 8007156:	23ea      	movs	r3, #234	; 0xea
 8007158:	33ff      	adds	r3, #255	; 0xff
 800715a:	001a      	movs	r2, r3
 800715c:	4b6d      	ldr	r3, [pc, #436]	; (8007314 <HAL_I2C_Init+0x260>)
 800715e:	0011      	movs	r1, r2
 8007160:	0018      	movs	r0, r3
 8007162:	f7fe fa93 	bl	800568c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d022      	beq.n	80071b4 <HAL_I2C_Init+0x100>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d01e      	beq.n	80071b4 <HAL_I2C_Init+0x100>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	2b02      	cmp	r3, #2
 800717c:	d01a      	beq.n	80071b4 <HAL_I2C_Init+0x100>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	2b03      	cmp	r3, #3
 8007184:	d016      	beq.n	80071b4 <HAL_I2C_Init+0x100>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	2b04      	cmp	r3, #4
 800718c:	d012      	beq.n	80071b4 <HAL_I2C_Init+0x100>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	2b05      	cmp	r3, #5
 8007194:	d00e      	beq.n	80071b4 <HAL_I2C_Init+0x100>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	2b06      	cmp	r3, #6
 800719c:	d00a      	beq.n	80071b4 <HAL_I2C_Init+0x100>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	2b07      	cmp	r3, #7
 80071a4:	d006      	beq.n	80071b4 <HAL_I2C_Init+0x100>
 80071a6:	23f5      	movs	r3, #245	; 0xf5
 80071a8:	005a      	lsls	r2, r3, #1
 80071aa:	4b5a      	ldr	r3, [pc, #360]	; (8007314 <HAL_I2C_Init+0x260>)
 80071ac:	0011      	movs	r1, r2
 80071ae:	0018      	movs	r0, r3
 80071b0:	f7fe fa6c 	bl	800568c <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00d      	beq.n	80071d8 <HAL_I2C_Init+0x124>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	69da      	ldr	r2, [r3, #28]
 80071c0:	2380      	movs	r3, #128	; 0x80
 80071c2:	031b      	lsls	r3, r3, #12
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d007      	beq.n	80071d8 <HAL_I2C_Init+0x124>
 80071c8:	23ec      	movs	r3, #236	; 0xec
 80071ca:	33ff      	adds	r3, #255	; 0xff
 80071cc:	001a      	movs	r2, r3
 80071ce:	4b51      	ldr	r3, [pc, #324]	; (8007314 <HAL_I2C_Init+0x260>)
 80071d0:	0011      	movs	r1, r2
 80071d2:	0018      	movs	r0, r3
 80071d4:	f7fe fa5a 	bl	800568c <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a1b      	ldr	r3, [r3, #32]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00c      	beq.n	80071fa <HAL_I2C_Init+0x146>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a1a      	ldr	r2, [r3, #32]
 80071e4:	2380      	movs	r3, #128	; 0x80
 80071e6:	029b      	lsls	r3, r3, #10
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d006      	beq.n	80071fa <HAL_I2C_Init+0x146>
 80071ec:	23f6      	movs	r3, #246	; 0xf6
 80071ee:	005a      	lsls	r2, r3, #1
 80071f0:	4b48      	ldr	r3, [pc, #288]	; (8007314 <HAL_I2C_Init+0x260>)
 80071f2:	0011      	movs	r1, r2
 80071f4:	0018      	movs	r0, r3
 80071f6:	f7fe fa49 	bl	800568c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2241      	movs	r2, #65	; 0x41
 80071fe:	5c9b      	ldrb	r3, [r3, r2]
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d107      	bne.n	8007216 <HAL_I2C_Init+0x162>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2240      	movs	r2, #64	; 0x40
 800720a:	2100      	movs	r1, #0
 800720c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	0018      	movs	r0, r3
 8007212:	f7ff f949 	bl	80064a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2241      	movs	r2, #65	; 0x41
 800721a:	2124      	movs	r1, #36	; 0x24
 800721c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2101      	movs	r1, #1
 800722a:	438a      	bics	r2, r1
 800722c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4939      	ldr	r1, [pc, #228]	; (800731c <HAL_I2C_Init+0x268>)
 8007238:	400a      	ands	r2, r1
 800723a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689a      	ldr	r2, [r3, #8]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4936      	ldr	r1, [pc, #216]	; (8007320 <HAL_I2C_Init+0x26c>)
 8007248:	400a      	ands	r2, r1
 800724a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d108      	bne.n	8007266 <HAL_I2C_Init+0x1b2>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689a      	ldr	r2, [r3, #8]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2180      	movs	r1, #128	; 0x80
 800725e:	0209      	lsls	r1, r1, #8
 8007260:	430a      	orrs	r2, r1
 8007262:	609a      	str	r2, [r3, #8]
 8007264:	e007      	b.n	8007276 <HAL_I2C_Init+0x1c2>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	689a      	ldr	r2, [r3, #8]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2184      	movs	r1, #132	; 0x84
 8007270:	0209      	lsls	r1, r1, #8
 8007272:	430a      	orrs	r2, r1
 8007274:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	2b02      	cmp	r3, #2
 800727c:	d104      	bne.n	8007288 <HAL_I2C_Init+0x1d4>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2280      	movs	r2, #128	; 0x80
 8007284:	0112      	lsls	r2, r2, #4
 8007286:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4924      	ldr	r1, [pc, #144]	; (8007324 <HAL_I2C_Init+0x270>)
 8007294:	430a      	orrs	r2, r1
 8007296:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68da      	ldr	r2, [r3, #12]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	491f      	ldr	r1, [pc, #124]	; (8007320 <HAL_I2C_Init+0x26c>)
 80072a4:	400a      	ands	r2, r1
 80072a6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	691a      	ldr	r2, [r3, #16]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	695b      	ldr	r3, [r3, #20]
 80072b0:	431a      	orrs	r2, r3
 80072b2:	0011      	movs	r1, r2
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	021a      	lsls	r2, r3, #8
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	69d9      	ldr	r1, [r3, #28]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a1a      	ldr	r2, [r3, #32]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	430a      	orrs	r2, r1
 80072d0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2101      	movs	r1, #1
 80072de:	430a      	orrs	r2, r1
 80072e0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2241      	movs	r2, #65	; 0x41
 80072ec:	2120      	movs	r1, #32
 80072ee:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2242      	movs	r2, #66	; 0x42
 80072fa:	2100      	movs	r1, #0
 80072fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	0018      	movs	r0, r3
 8007302:	46bd      	mov	sp, r7
 8007304:	b002      	add	sp, #8
 8007306:	bd80      	pop	{r7, pc}
 8007308:	40005400 	.word	0x40005400
 800730c:	40005800 	.word	0x40005800
 8007310:	40007800 	.word	0x40007800
 8007314:	0800b8fc 	.word	0x0800b8fc
 8007318:	000003ff 	.word	0x000003ff
 800731c:	f0ffffff 	.word	0xf0ffffff
 8007320:	ffff7fff 	.word	0xffff7fff
 8007324:	02008000 	.word	0x02008000

08007328 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a31      	ldr	r2, [pc, #196]	; (80073fc <HAL_I2CEx_ConfigAnalogFilter+0xd4>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d00e      	beq.n	800735a <HAL_I2CEx_ConfigAnalogFilter+0x32>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a2f      	ldr	r2, [pc, #188]	; (8007400 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d009      	beq.n	800735a <HAL_I2CEx_ConfigAnalogFilter+0x32>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a2e      	ldr	r2, [pc, #184]	; (8007404 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d004      	beq.n	800735a <HAL_I2CEx_ConfigAnalogFilter+0x32>
 8007350:	4b2d      	ldr	r3, [pc, #180]	; (8007408 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 8007352:	2164      	movs	r1, #100	; 0x64
 8007354:	0018      	movs	r0, r3
 8007356:	f7fe f999 	bl	800568c <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d009      	beq.n	8007374 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	2380      	movs	r3, #128	; 0x80
 8007364:	015b      	lsls	r3, r3, #5
 8007366:	429a      	cmp	r2, r3
 8007368:	d004      	beq.n	8007374 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
 800736a:	4b27      	ldr	r3, [pc, #156]	; (8007408 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 800736c:	2165      	movs	r1, #101	; 0x65
 800736e:	0018      	movs	r0, r3
 8007370:	f7fe f98c 	bl	800568c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2241      	movs	r2, #65	; 0x41
 8007378:	5c9b      	ldrb	r3, [r3, r2]
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b20      	cmp	r3, #32
 800737e:	d138      	bne.n	80073f2 <HAL_I2CEx_ConfigAnalogFilter+0xca>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2240      	movs	r2, #64	; 0x40
 8007384:	5c9b      	ldrb	r3, [r3, r2]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d101      	bne.n	800738e <HAL_I2CEx_ConfigAnalogFilter+0x66>
 800738a:	2302      	movs	r3, #2
 800738c:	e032      	b.n	80073f4 <HAL_I2CEx_ConfigAnalogFilter+0xcc>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2240      	movs	r2, #64	; 0x40
 8007392:	2101      	movs	r1, #1
 8007394:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2241      	movs	r2, #65	; 0x41
 800739a:	2124      	movs	r1, #36	; 0x24
 800739c:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2101      	movs	r1, #1
 80073aa:	438a      	bics	r2, r1
 80073ac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4914      	ldr	r1, [pc, #80]	; (800740c <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 80073ba:	400a      	ands	r2, r1
 80073bc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	6819      	ldr	r1, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	683a      	ldr	r2, [r7, #0]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2101      	movs	r1, #1
 80073da:	430a      	orrs	r2, r1
 80073dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2241      	movs	r2, #65	; 0x41
 80073e2:	2120      	movs	r1, #32
 80073e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2240      	movs	r2, #64	; 0x40
 80073ea:	2100      	movs	r1, #0
 80073ec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80073ee:	2300      	movs	r3, #0
 80073f0:	e000      	b.n	80073f4 <HAL_I2CEx_ConfigAnalogFilter+0xcc>
  }
  else
  {
    return HAL_BUSY;
 80073f2:	2302      	movs	r3, #2
  }
}
 80073f4:	0018      	movs	r0, r3
 80073f6:	46bd      	mov	sp, r7
 80073f8:	b002      	add	sp, #8
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	40005400 	.word	0x40005400
 8007400:	40005800 	.word	0x40005800
 8007404:	40007800 	.word	0x40007800
 8007408:	0800b934 	.word	0x0800b934
 800740c:	ffffefff 	.word	0xffffefff

08007410 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a2f      	ldr	r2, [pc, #188]	; (80074dc <HAL_I2CEx_ConfigDigitalFilter+0xcc>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d00e      	beq.n	8007442 <HAL_I2CEx_ConfigDigitalFilter+0x32>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a2d      	ldr	r2, [pc, #180]	; (80074e0 <HAL_I2CEx_ConfigDigitalFilter+0xd0>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d009      	beq.n	8007442 <HAL_I2CEx_ConfigDigitalFilter+0x32>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a2c      	ldr	r2, [pc, #176]	; (80074e4 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d004      	beq.n	8007442 <HAL_I2CEx_ConfigDigitalFilter+0x32>
 8007438:	4b2b      	ldr	r3, [pc, #172]	; (80074e8 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 800743a:	2192      	movs	r1, #146	; 0x92
 800743c:	0018      	movs	r0, r3
 800743e:	f7fe f925 	bl	800568c <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	2b0f      	cmp	r3, #15
 8007446:	d904      	bls.n	8007452 <HAL_I2CEx_ConfigDigitalFilter+0x42>
 8007448:	4b27      	ldr	r3, [pc, #156]	; (80074e8 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 800744a:	2193      	movs	r1, #147	; 0x93
 800744c:	0018      	movs	r0, r3
 800744e:	f7fe f91d 	bl	800568c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2241      	movs	r2, #65	; 0x41
 8007456:	5c9b      	ldrb	r3, [r3, r2]
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b20      	cmp	r3, #32
 800745c:	d139      	bne.n	80074d2 <HAL_I2CEx_ConfigDigitalFilter+0xc2>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2240      	movs	r2, #64	; 0x40
 8007462:	5c9b      	ldrb	r3, [r3, r2]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d101      	bne.n	800746c <HAL_I2CEx_ConfigDigitalFilter+0x5c>
 8007468:	2302      	movs	r3, #2
 800746a:	e033      	b.n	80074d4 <HAL_I2CEx_ConfigDigitalFilter+0xc4>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2240      	movs	r2, #64	; 0x40
 8007470:	2101      	movs	r1, #1
 8007472:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2241      	movs	r2, #65	; 0x41
 8007478:	2124      	movs	r1, #36	; 0x24
 800747a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2101      	movs	r1, #1
 8007488:	438a      	bics	r2, r1
 800748a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4a15      	ldr	r2, [pc, #84]	; (80074ec <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8007498:	4013      	ands	r3, r2
 800749a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	021b      	lsls	r3, r3, #8
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2101      	movs	r1, #1
 80074ba:	430a      	orrs	r2, r1
 80074bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2241      	movs	r2, #65	; 0x41
 80074c2:	2120      	movs	r1, #32
 80074c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2240      	movs	r2, #64	; 0x40
 80074ca:	2100      	movs	r1, #0
 80074cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	e000      	b.n	80074d4 <HAL_I2CEx_ConfigDigitalFilter+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80074d2:	2302      	movs	r3, #2
  }
}
 80074d4:	0018      	movs	r0, r3
 80074d6:	46bd      	mov	sp, r7
 80074d8:	b004      	add	sp, #16
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	40005400 	.word	0x40005400
 80074e0:	40005800 	.word	0x40005800
 80074e4:	40007800 	.word	0x40007800
 80074e8:	0800b934 	.word	0x0800b934
 80074ec:	fffff0ff 	.word	0xfffff0ff

080074f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074f0:	b5b0      	push	{r4, r5, r7, lr}
 80074f2:	b08a      	sub	sp, #40	; 0x28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d102      	bne.n	8007504 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	f000 fd83 	bl	800800a <HAL_RCC_OscConfig+0xb1a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d024      	beq.n	8007556 <HAL_RCC_OscConfig+0x66>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2201      	movs	r2, #1
 8007512:	4013      	ands	r3, r2
 8007514:	d11f      	bne.n	8007556 <HAL_RCC_OscConfig+0x66>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2202      	movs	r2, #2
 800751c:	4013      	ands	r3, r2
 800751e:	d11a      	bne.n	8007556 <HAL_RCC_OscConfig+0x66>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2220      	movs	r2, #32
 8007526:	4013      	ands	r3, r2
 8007528:	d115      	bne.n	8007556 <HAL_RCC_OscConfig+0x66>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2208      	movs	r2, #8
 8007530:	4013      	ands	r3, r2
 8007532:	d110      	bne.n	8007556 <HAL_RCC_OscConfig+0x66>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2204      	movs	r2, #4
 800753a:	4013      	ands	r3, r2
 800753c:	d10b      	bne.n	8007556 <HAL_RCC_OscConfig+0x66>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2210      	movs	r2, #16
 8007544:	4013      	ands	r3, r2
 8007546:	d106      	bne.n	8007556 <HAL_RCC_OscConfig+0x66>
 8007548:	23b0      	movs	r3, #176	; 0xb0
 800754a:	005a      	lsls	r2, r3, #1
 800754c:	4bca      	ldr	r3, [pc, #808]	; (8007878 <HAL_RCC_OscConfig+0x388>)
 800754e:	0011      	movs	r1, r2
 8007550:	0018      	movs	r0, r3
 8007552:	f7fe f89b 	bl	800568c <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007556:	4bc9      	ldr	r3, [pc, #804]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	220c      	movs	r2, #12
 800755c:	4013      	ands	r3, r2
 800755e:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007560:	4bc6      	ldr	r3, [pc, #792]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 8007562:	68da      	ldr	r2, [r3, #12]
 8007564:	2380      	movs	r3, #128	; 0x80
 8007566:	025b      	lsls	r3, r3, #9
 8007568:	4013      	ands	r3, r2
 800756a:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2201      	movs	r2, #1
 8007572:	4013      	ands	r3, r2
 8007574:	d100      	bne.n	8007578 <HAL_RCC_OscConfig+0x88>
 8007576:	e097      	b.n	80076a8 <HAL_RCC_OscConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d013      	beq.n	80075a8 <HAL_RCC_OscConfig+0xb8>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	2380      	movs	r3, #128	; 0x80
 8007586:	025b      	lsls	r3, r3, #9
 8007588:	429a      	cmp	r2, r3
 800758a:	d00d      	beq.n	80075a8 <HAL_RCC_OscConfig+0xb8>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	23a0      	movs	r3, #160	; 0xa0
 8007592:	02db      	lsls	r3, r3, #11
 8007594:	429a      	cmp	r2, r3
 8007596:	d007      	beq.n	80075a8 <HAL_RCC_OscConfig+0xb8>
 8007598:	236a      	movs	r3, #106	; 0x6a
 800759a:	33ff      	adds	r3, #255	; 0xff
 800759c:	001a      	movs	r2, r3
 800759e:	4bb6      	ldr	r3, [pc, #728]	; (8007878 <HAL_RCC_OscConfig+0x388>)
 80075a0:	0011      	movs	r1, r2
 80075a2:	0018      	movs	r0, r3
 80075a4:	f7fe f872 	bl	800568c <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	2b08      	cmp	r3, #8
 80075ac:	d007      	beq.n	80075be <HAL_RCC_OscConfig+0xce>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	2b0c      	cmp	r3, #12
 80075b2:	d112      	bne.n	80075da <HAL_RCC_OscConfig+0xea>
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	2380      	movs	r3, #128	; 0x80
 80075b8:	025b      	lsls	r3, r3, #9
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d10d      	bne.n	80075da <HAL_RCC_OscConfig+0xea>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075be:	4baf      	ldr	r3, [pc, #700]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	2380      	movs	r3, #128	; 0x80
 80075c4:	029b      	lsls	r3, r3, #10
 80075c6:	4013      	ands	r3, r2
 80075c8:	d100      	bne.n	80075cc <HAL_RCC_OscConfig+0xdc>
 80075ca:	e06c      	b.n	80076a6 <HAL_RCC_OscConfig+0x1b6>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d168      	bne.n	80076a6 <HAL_RCC_OscConfig+0x1b6>
      {
        return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	f000 fd18 	bl	800800a <HAL_RCC_OscConfig+0xb1a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685a      	ldr	r2, [r3, #4]
 80075de:	2380      	movs	r3, #128	; 0x80
 80075e0:	025b      	lsls	r3, r3, #9
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d107      	bne.n	80075f6 <HAL_RCC_OscConfig+0x106>
 80075e6:	4ba5      	ldr	r3, [pc, #660]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	4ba4      	ldr	r3, [pc, #656]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 80075ec:	2180      	movs	r1, #128	; 0x80
 80075ee:	0249      	lsls	r1, r1, #9
 80075f0:	430a      	orrs	r2, r1
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	e027      	b.n	8007646 <HAL_RCC_OscConfig+0x156>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685a      	ldr	r2, [r3, #4]
 80075fa:	23a0      	movs	r3, #160	; 0xa0
 80075fc:	02db      	lsls	r3, r3, #11
 80075fe:	429a      	cmp	r2, r3
 8007600:	d10e      	bne.n	8007620 <HAL_RCC_OscConfig+0x130>
 8007602:	4b9e      	ldr	r3, [pc, #632]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	4b9d      	ldr	r3, [pc, #628]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 8007608:	2180      	movs	r1, #128	; 0x80
 800760a:	02c9      	lsls	r1, r1, #11
 800760c:	430a      	orrs	r2, r1
 800760e:	601a      	str	r2, [r3, #0]
 8007610:	4b9a      	ldr	r3, [pc, #616]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	4b99      	ldr	r3, [pc, #612]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 8007616:	2180      	movs	r1, #128	; 0x80
 8007618:	0249      	lsls	r1, r1, #9
 800761a:	430a      	orrs	r2, r1
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	e012      	b.n	8007646 <HAL_RCC_OscConfig+0x156>
 8007620:	4b96      	ldr	r3, [pc, #600]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	4b95      	ldr	r3, [pc, #596]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 8007626:	4996      	ldr	r1, [pc, #600]	; (8007880 <HAL_RCC_OscConfig+0x390>)
 8007628:	400a      	ands	r2, r1
 800762a:	601a      	str	r2, [r3, #0]
 800762c:	4b93      	ldr	r3, [pc, #588]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	2380      	movs	r3, #128	; 0x80
 8007632:	025b      	lsls	r3, r3, #9
 8007634:	4013      	ands	r3, r2
 8007636:	60fb      	str	r3, [r7, #12]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	4b90      	ldr	r3, [pc, #576]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	4b8f      	ldr	r3, [pc, #572]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 8007640:	4990      	ldr	r1, [pc, #576]	; (8007884 <HAL_RCC_OscConfig+0x394>)
 8007642:	400a      	ands	r2, r1
 8007644:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d015      	beq.n	800767a <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800764e:	f7ff f909 	bl	8006864 <HAL_GetTick>
 8007652:	0003      	movs	r3, r0
 8007654:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007656:	e009      	b.n	800766c <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007658:	f7ff f904 	bl	8006864 <HAL_GetTick>
 800765c:	0002      	movs	r2, r0
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	2b64      	cmp	r3, #100	; 0x64
 8007664:	d902      	bls.n	800766c <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	f000 fccf 	bl	800800a <HAL_RCC_OscConfig+0xb1a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800766c:	4b83      	ldr	r3, [pc, #524]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	2380      	movs	r3, #128	; 0x80
 8007672:	029b      	lsls	r3, r3, #10
 8007674:	4013      	ands	r3, r2
 8007676:	d0ef      	beq.n	8007658 <HAL_RCC_OscConfig+0x168>
 8007678:	e016      	b.n	80076a8 <HAL_RCC_OscConfig+0x1b8>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800767a:	f7ff f8f3 	bl	8006864 <HAL_GetTick>
 800767e:	0003      	movs	r3, r0
 8007680:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007682:	e009      	b.n	8007698 <HAL_RCC_OscConfig+0x1a8>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007684:	f7ff f8ee 	bl	8006864 <HAL_GetTick>
 8007688:	0002      	movs	r2, r0
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	2b64      	cmp	r3, #100	; 0x64
 8007690:	d902      	bls.n	8007698 <HAL_RCC_OscConfig+0x1a8>
          {
            return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	f000 fcb9 	bl	800800a <HAL_RCC_OscConfig+0xb1a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007698:	4b78      	ldr	r3, [pc, #480]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	2380      	movs	r3, #128	; 0x80
 800769e:	029b      	lsls	r3, r3, #10
 80076a0:	4013      	ands	r3, r2
 80076a2:	d1ef      	bne.n	8007684 <HAL_RCC_OscConfig+0x194>
 80076a4:	e000      	b.n	80076a8 <HAL_RCC_OscConfig+0x1b8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076a6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2202      	movs	r2, #2
 80076ae:	4013      	ands	r3, r2
 80076b0:	d100      	bne.n	80076b4 <HAL_RCC_OscConfig+0x1c4>
 80076b2:	e0c9      	b.n	8007848 <HAL_RCC_OscConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d01a      	beq.n	80076f2 <HAL_RCC_OscConfig+0x202>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d016      	beq.n	80076f2 <HAL_RCC_OscConfig+0x202>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	2b09      	cmp	r3, #9
 80076ca:	d012      	beq.n	80076f2 <HAL_RCC_OscConfig+0x202>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	2b20      	cmp	r3, #32
 80076d2:	d00e      	beq.n	80076f2 <HAL_RCC_OscConfig+0x202>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	2b21      	cmp	r3, #33	; 0x21
 80076da:	d00a      	beq.n	80076f2 <HAL_RCC_OscConfig+0x202>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	2b29      	cmp	r3, #41	; 0x29
 80076e2:	d006      	beq.n	80076f2 <HAL_RCC_OscConfig+0x202>
 80076e4:	23ce      	movs	r3, #206	; 0xce
 80076e6:	005a      	lsls	r2, r3, #1
 80076e8:	4b63      	ldr	r3, [pc, #396]	; (8007878 <HAL_RCC_OscConfig+0x388>)
 80076ea:	0011      	movs	r1, r2
 80076ec:	0018      	movs	r0, r3
 80076ee:	f7fd ffcd 	bl	800568c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	2b1f      	cmp	r3, #31
 80076f8:	d907      	bls.n	800770a <HAL_RCC_OscConfig+0x21a>
 80076fa:	239e      	movs	r3, #158	; 0x9e
 80076fc:	33ff      	adds	r3, #255	; 0xff
 80076fe:	001a      	movs	r2, r3
 8007700:	4b5d      	ldr	r3, [pc, #372]	; (8007878 <HAL_RCC_OscConfig+0x388>)
 8007702:	0011      	movs	r1, r2
 8007704:	0018      	movs	r0, r3
 8007706:	f7fd ffc1 	bl	800568c <assert_failed>

    hsi_state = RCC_OscInitStruct->HSIState;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	2220      	movs	r2, #32
 8007714:	4013      	ands	r3, r2
 8007716:	d009      	beq.n	800772c <HAL_RCC_OscConfig+0x23c>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8007718:	4b58      	ldr	r3, [pc, #352]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	4b57      	ldr	r3, [pc, #348]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 800771e:	2120      	movs	r1, #32
 8007720:	430a      	orrs	r2, r1
 8007722:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	2220      	movs	r2, #32
 8007728:	4393      	bics	r3, r2
 800772a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	2b04      	cmp	r3, #4
 8007730:	d005      	beq.n	800773e <HAL_RCC_OscConfig+0x24e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	2b0c      	cmp	r3, #12
 8007736:	d141      	bne.n	80077bc <HAL_RCC_OscConfig+0x2cc>
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d13e      	bne.n	80077bc <HAL_RCC_OscConfig+0x2cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800773e:	4b4f      	ldr	r3, [pc, #316]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2204      	movs	r2, #4
 8007744:	4013      	ands	r3, r2
 8007746:	d005      	beq.n	8007754 <HAL_RCC_OscConfig+0x264>
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774a:	2b00      	cmp	r3, #0
 800774c:	d102      	bne.n	8007754 <HAL_RCC_OscConfig+0x264>
      {
        return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	f000 fc5b 	bl	800800a <HAL_RCC_OscConfig+0xb1a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007754:	4b49      	ldr	r3, [pc, #292]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	4a4b      	ldr	r2, [pc, #300]	; (8007888 <HAL_RCC_OscConfig+0x398>)
 800775a:	4013      	ands	r3, r2
 800775c:	0019      	movs	r1, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	021a      	lsls	r2, r3, #8
 8007764:	4b45      	ldr	r3, [pc, #276]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 8007766:	430a      	orrs	r2, r1
 8007768:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800776a:	4b44      	ldr	r3, [pc, #272]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2209      	movs	r2, #9
 8007770:	4393      	bics	r3, r2
 8007772:	0019      	movs	r1, r3
 8007774:	4b41      	ldr	r3, [pc, #260]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 8007776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007778:	430a      	orrs	r2, r1
 800777a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800777c:	f000 fe52 	bl	8008424 <HAL_RCC_GetSysClockFreq>
 8007780:	0001      	movs	r1, r0
 8007782:	4b3e      	ldr	r3, [pc, #248]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	091b      	lsrs	r3, r3, #4
 8007788:	220f      	movs	r2, #15
 800778a:	4013      	ands	r3, r2
 800778c:	4a3f      	ldr	r2, [pc, #252]	; (800788c <HAL_RCC_OscConfig+0x39c>)
 800778e:	5cd3      	ldrb	r3, [r2, r3]
 8007790:	000a      	movs	r2, r1
 8007792:	40da      	lsrs	r2, r3
 8007794:	4b3e      	ldr	r3, [pc, #248]	; (8007890 <HAL_RCC_OscConfig+0x3a0>)
 8007796:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8007798:	4b3e      	ldr	r3, [pc, #248]	; (8007894 <HAL_RCC_OscConfig+0x3a4>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2513      	movs	r5, #19
 800779e:	197c      	adds	r4, r7, r5
 80077a0:	0018      	movs	r0, r3
 80077a2:	f7ff f819 	bl	80067d8 <HAL_InitTick>
 80077a6:	0003      	movs	r3, r0
 80077a8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80077aa:	197b      	adds	r3, r7, r5
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d04a      	beq.n	8007848 <HAL_RCC_OscConfig+0x358>
      {
        return status;
 80077b2:	2313      	movs	r3, #19
 80077b4:	18fb      	adds	r3, r7, r3
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	f000 fc27 	bl	800800a <HAL_RCC_OscConfig+0xb1a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d028      	beq.n	8007814 <HAL_RCC_OscConfig+0x324>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80077c2:	4b2e      	ldr	r3, [pc, #184]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2209      	movs	r2, #9
 80077c8:	4393      	bics	r3, r2
 80077ca:	0019      	movs	r1, r3
 80077cc:	4b2b      	ldr	r3, [pc, #172]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 80077ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077d0:	430a      	orrs	r2, r1
 80077d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077d4:	f7ff f846 	bl	8006864 <HAL_GetTick>
 80077d8:	0003      	movs	r3, r0
 80077da:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077dc:	e009      	b.n	80077f2 <HAL_RCC_OscConfig+0x302>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077de:	f7ff f841 	bl	8006864 <HAL_GetTick>
 80077e2:	0002      	movs	r2, r0
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d902      	bls.n	80077f2 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	f000 fc0c 	bl	800800a <HAL_RCC_OscConfig+0xb1a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077f2:	4b22      	ldr	r3, [pc, #136]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2204      	movs	r2, #4
 80077f8:	4013      	ands	r3, r2
 80077fa:	d0f0      	beq.n	80077de <HAL_RCC_OscConfig+0x2ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077fc:	4b1f      	ldr	r3, [pc, #124]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	4a21      	ldr	r2, [pc, #132]	; (8007888 <HAL_RCC_OscConfig+0x398>)
 8007802:	4013      	ands	r3, r2
 8007804:	0019      	movs	r1, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	021a      	lsls	r2, r3, #8
 800780c:	4b1b      	ldr	r3, [pc, #108]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 800780e:	430a      	orrs	r2, r1
 8007810:	605a      	str	r2, [r3, #4]
 8007812:	e019      	b.n	8007848 <HAL_RCC_OscConfig+0x358>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007814:	4b19      	ldr	r3, [pc, #100]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	4b18      	ldr	r3, [pc, #96]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 800781a:	2101      	movs	r1, #1
 800781c:	438a      	bics	r2, r1
 800781e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007820:	f7ff f820 	bl	8006864 <HAL_GetTick>
 8007824:	0003      	movs	r3, r0
 8007826:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007828:	e009      	b.n	800783e <HAL_RCC_OscConfig+0x34e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800782a:	f7ff f81b 	bl	8006864 <HAL_GetTick>
 800782e:	0002      	movs	r2, r0
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	2b02      	cmp	r3, #2
 8007836:	d902      	bls.n	800783e <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	f000 fbe6 	bl	800800a <HAL_RCC_OscConfig+0xb1a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800783e:	4b0f      	ldr	r3, [pc, #60]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2204      	movs	r2, #4
 8007844:	4013      	ands	r3, r2
 8007846:	d1f0      	bne.n	800782a <HAL_RCC_OscConfig+0x33a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2210      	movs	r2, #16
 800784e:	4013      	ands	r3, r2
 8007850:	d100      	bne.n	8007854 <HAL_RCC_OscConfig+0x364>
 8007852:	e129      	b.n	8007aa8 <HAL_RCC_OscConfig+0x5b8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d000      	beq.n	800785c <HAL_RCC_OscConfig+0x36c>
 800785a:	e08e      	b.n	800797a <HAL_RCC_OscConfig+0x48a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800785c:	4b07      	ldr	r3, [pc, #28]	; (800787c <HAL_RCC_OscConfig+0x38c>)
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	2380      	movs	r3, #128	; 0x80
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4013      	ands	r3, r2
 8007866:	d017      	beq.n	8007898 <HAL_RCC_OscConfig+0x3a8>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	69db      	ldr	r3, [r3, #28]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d113      	bne.n	8007898 <HAL_RCC_OscConfig+0x3a8>
      {
        return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	f000 fbca 	bl	800800a <HAL_RCC_OscConfig+0xb1a>
 8007876:	46c0      	nop			; (mov r8, r8)
 8007878:	0800b970 	.word	0x0800b970
 800787c:	40021000 	.word	0x40021000
 8007880:	fffeffff 	.word	0xfffeffff
 8007884:	fffbffff 	.word	0xfffbffff
 8007888:	ffffe0ff 	.word	0xffffe0ff
 800788c:	0800cd44 	.word	0x0800cd44
 8007890:	20000048 	.word	0x20000048
 8007894:	2000004c 	.word	0x2000004c
      }
      /* Otherwise, just the calibration and MSI range change are allowed */
      else
      {
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a1b      	ldr	r3, [r3, #32]
 800789c:	2bff      	cmp	r3, #255	; 0xff
 800789e:	d906      	bls.n	80078ae <HAL_RCC_OscConfig+0x3be>
 80078a0:	2380      	movs	r3, #128	; 0x80
 80078a2:	009a      	lsls	r2, r3, #2
 80078a4:	4bcb      	ldr	r3, [pc, #812]	; (8007bd4 <HAL_RCC_OscConfig+0x6e4>)
 80078a6:	0011      	movs	r1, r2
 80078a8:	0018      	movs	r0, r3
 80078aa:	f7fd feef 	bl	800568c <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d029      	beq.n	800790a <HAL_RCC_OscConfig+0x41a>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078ba:	2380      	movs	r3, #128	; 0x80
 80078bc:	019b      	lsls	r3, r3, #6
 80078be:	429a      	cmp	r2, r3
 80078c0:	d023      	beq.n	800790a <HAL_RCC_OscConfig+0x41a>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078c6:	2380      	movs	r3, #128	; 0x80
 80078c8:	01db      	lsls	r3, r3, #7
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d01d      	beq.n	800790a <HAL_RCC_OscConfig+0x41a>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078d2:	23c0      	movs	r3, #192	; 0xc0
 80078d4:	01db      	lsls	r3, r3, #7
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d017      	beq.n	800790a <HAL_RCC_OscConfig+0x41a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078de:	2380      	movs	r3, #128	; 0x80
 80078e0:	021b      	lsls	r3, r3, #8
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d011      	beq.n	800790a <HAL_RCC_OscConfig+0x41a>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078ea:	23a0      	movs	r3, #160	; 0xa0
 80078ec:	021b      	lsls	r3, r3, #8
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d00b      	beq.n	800790a <HAL_RCC_OscConfig+0x41a>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078f6:	23c0      	movs	r3, #192	; 0xc0
 80078f8:	021b      	lsls	r3, r3, #8
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d005      	beq.n	800790a <HAL_RCC_OscConfig+0x41a>
 80078fe:	4ab6      	ldr	r2, [pc, #728]	; (8007bd8 <HAL_RCC_OscConfig+0x6e8>)
 8007900:	4bb4      	ldr	r3, [pc, #720]	; (8007bd4 <HAL_RCC_OscConfig+0x6e4>)
 8007902:	0011      	movs	r1, r2
 8007904:	0018      	movs	r0, r3
 8007906:	f7fd fec1 	bl	800568c <assert_failed>

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800790a:	4bb4      	ldr	r3, [pc, #720]	; (8007bdc <HAL_RCC_OscConfig+0x6ec>)
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	4ab4      	ldr	r2, [pc, #720]	; (8007be0 <HAL_RCC_OscConfig+0x6f0>)
 8007910:	4013      	ands	r3, r2
 8007912:	0019      	movs	r1, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007918:	4bb0      	ldr	r3, [pc, #704]	; (8007bdc <HAL_RCC_OscConfig+0x6ec>)
 800791a:	430a      	orrs	r2, r1
 800791c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800791e:	4baf      	ldr	r3, [pc, #700]	; (8007bdc <HAL_RCC_OscConfig+0x6ec>)
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	021b      	lsls	r3, r3, #8
 8007924:	0a19      	lsrs	r1, r3, #8
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	061a      	lsls	r2, r3, #24
 800792c:	4bab      	ldr	r3, [pc, #684]	; (8007bdc <HAL_RCC_OscConfig+0x6ec>)
 800792e:	430a      	orrs	r2, r1
 8007930:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007936:	0b5b      	lsrs	r3, r3, #13
 8007938:	3301      	adds	r3, #1
 800793a:	2280      	movs	r2, #128	; 0x80
 800793c:	0212      	lsls	r2, r2, #8
 800793e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007940:	4ba6      	ldr	r3, [pc, #664]	; (8007bdc <HAL_RCC_OscConfig+0x6ec>)
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	091b      	lsrs	r3, r3, #4
 8007946:	210f      	movs	r1, #15
 8007948:	400b      	ands	r3, r1
 800794a:	49a6      	ldr	r1, [pc, #664]	; (8007be4 <HAL_RCC_OscConfig+0x6f4>)
 800794c:	5ccb      	ldrb	r3, [r1, r3]
 800794e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007950:	4ba5      	ldr	r3, [pc, #660]	; (8007be8 <HAL_RCC_OscConfig+0x6f8>)
 8007952:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8007954:	4ba5      	ldr	r3, [pc, #660]	; (8007bec <HAL_RCC_OscConfig+0x6fc>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2513      	movs	r5, #19
 800795a:	197c      	adds	r4, r7, r5
 800795c:	0018      	movs	r0, r3
 800795e:	f7fe ff3b 	bl	80067d8 <HAL_InitTick>
 8007962:	0003      	movs	r3, r0
 8007964:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8007966:	197b      	adds	r3, r7, r5
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d100      	bne.n	8007970 <HAL_RCC_OscConfig+0x480>
 800796e:	e09b      	b.n	8007aa8 <HAL_RCC_OscConfig+0x5b8>
        {
          return status;
 8007970:	2313      	movs	r3, #19
 8007972:	18fb      	adds	r3, r7, r3
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	f000 fb48 	bl	800800a <HAL_RCC_OscConfig+0xb1a>
      }
    }
    else
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00a      	beq.n	8007998 <HAL_RCC_OscConfig+0x4a8>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d006      	beq.n	8007998 <HAL_RCC_OscConfig+0x4a8>
 800798a:	2386      	movs	r3, #134	; 0x86
 800798c:	009a      	lsls	r2, r3, #2
 800798e:	4b91      	ldr	r3, [pc, #580]	; (8007bd4 <HAL_RCC_OscConfig+0x6e4>)
 8007990:	0011      	movs	r1, r2
 8007992:	0018      	movs	r0, r3
 8007994:	f7fd fe7a 	bl	800568c <assert_failed>

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	69db      	ldr	r3, [r3, #28]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d100      	bne.n	80079a2 <HAL_RCC_OscConfig+0x4b2>
 80079a0:	e068      	b.n	8007a74 <HAL_RCC_OscConfig+0x584>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80079a2:	4b8e      	ldr	r3, [pc, #568]	; (8007bdc <HAL_RCC_OscConfig+0x6ec>)
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	4b8d      	ldr	r3, [pc, #564]	; (8007bdc <HAL_RCC_OscConfig+0x6ec>)
 80079a8:	2180      	movs	r1, #128	; 0x80
 80079aa:	0049      	lsls	r1, r1, #1
 80079ac:	430a      	orrs	r2, r1
 80079ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079b0:	f7fe ff58 	bl	8006864 <HAL_GetTick>
 80079b4:	0003      	movs	r3, r0
 80079b6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80079b8:	e008      	b.n	80079cc <HAL_RCC_OscConfig+0x4dc>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80079ba:	f7fe ff53 	bl	8006864 <HAL_GetTick>
 80079be:	0002      	movs	r2, r0
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d901      	bls.n	80079cc <HAL_RCC_OscConfig+0x4dc>
          {
            return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e31e      	b.n	800800a <HAL_RCC_OscConfig+0xb1a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80079cc:	4b83      	ldr	r3, [pc, #524]	; (8007bdc <HAL_RCC_OscConfig+0x6ec>)
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	2380      	movs	r3, #128	; 0x80
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4013      	ands	r3, r2
 80079d6:	d0f0      	beq.n	80079ba <HAL_RCC_OscConfig+0x4ca>
          }
        }
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	2bff      	cmp	r3, #255	; 0xff
 80079de:	d906      	bls.n	80079ee <HAL_RCC_OscConfig+0x4fe>
 80079e0:	238b      	movs	r3, #139	; 0x8b
 80079e2:	009a      	lsls	r2, r3, #2
 80079e4:	4b7b      	ldr	r3, [pc, #492]	; (8007bd4 <HAL_RCC_OscConfig+0x6e4>)
 80079e6:	0011      	movs	r1, r2
 80079e8:	0018      	movs	r0, r3
 80079ea:	f7fd fe4f 	bl	800568c <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d029      	beq.n	8007a4a <HAL_RCC_OscConfig+0x55a>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079fa:	2380      	movs	r3, #128	; 0x80
 80079fc:	019b      	lsls	r3, r3, #6
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d023      	beq.n	8007a4a <HAL_RCC_OscConfig+0x55a>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a06:	2380      	movs	r3, #128	; 0x80
 8007a08:	01db      	lsls	r3, r3, #7
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d01d      	beq.n	8007a4a <HAL_RCC_OscConfig+0x55a>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a12:	23c0      	movs	r3, #192	; 0xc0
 8007a14:	01db      	lsls	r3, r3, #7
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d017      	beq.n	8007a4a <HAL_RCC_OscConfig+0x55a>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a1e:	2380      	movs	r3, #128	; 0x80
 8007a20:	021b      	lsls	r3, r3, #8
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d011      	beq.n	8007a4a <HAL_RCC_OscConfig+0x55a>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a2a:	23a0      	movs	r3, #160	; 0xa0
 8007a2c:	021b      	lsls	r3, r3, #8
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d00b      	beq.n	8007a4a <HAL_RCC_OscConfig+0x55a>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a36:	23c0      	movs	r3, #192	; 0xc0
 8007a38:	021b      	lsls	r3, r3, #8
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d005      	beq.n	8007a4a <HAL_RCC_OscConfig+0x55a>
 8007a3e:	4a6c      	ldr	r2, [pc, #432]	; (8007bf0 <HAL_RCC_OscConfig+0x700>)
 8007a40:	4b64      	ldr	r3, [pc, #400]	; (8007bd4 <HAL_RCC_OscConfig+0x6e4>)
 8007a42:	0011      	movs	r1, r2
 8007a44:	0018      	movs	r0, r3
 8007a46:	f7fd fe21 	bl	800568c <assert_failed>

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007a4a:	4b64      	ldr	r3, [pc, #400]	; (8007bdc <HAL_RCC_OscConfig+0x6ec>)
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	4a64      	ldr	r2, [pc, #400]	; (8007be0 <HAL_RCC_OscConfig+0x6f0>)
 8007a50:	4013      	ands	r3, r2
 8007a52:	0019      	movs	r1, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a58:	4b60      	ldr	r3, [pc, #384]	; (8007bdc <HAL_RCC_OscConfig+0x6ec>)
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007a5e:	4b5f      	ldr	r3, [pc, #380]	; (8007bdc <HAL_RCC_OscConfig+0x6ec>)
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	021b      	lsls	r3, r3, #8
 8007a64:	0a19      	lsrs	r1, r3, #8
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	061a      	lsls	r2, r3, #24
 8007a6c:	4b5b      	ldr	r3, [pc, #364]	; (8007bdc <HAL_RCC_OscConfig+0x6ec>)
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	605a      	str	r2, [r3, #4]
 8007a72:	e019      	b.n	8007aa8 <HAL_RCC_OscConfig+0x5b8>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007a74:	4b59      	ldr	r3, [pc, #356]	; (8007bdc <HAL_RCC_OscConfig+0x6ec>)
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	4b58      	ldr	r3, [pc, #352]	; (8007bdc <HAL_RCC_OscConfig+0x6ec>)
 8007a7a:	495e      	ldr	r1, [pc, #376]	; (8007bf4 <HAL_RCC_OscConfig+0x704>)
 8007a7c:	400a      	ands	r2, r1
 8007a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a80:	f7fe fef0 	bl	8006864 <HAL_GetTick>
 8007a84:	0003      	movs	r3, r0
 8007a86:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007a88:	e008      	b.n	8007a9c <HAL_RCC_OscConfig+0x5ac>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007a8a:	f7fe feeb 	bl	8006864 <HAL_GetTick>
 8007a8e:	0002      	movs	r2, r0
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d901      	bls.n	8007a9c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e2b6      	b.n	800800a <HAL_RCC_OscConfig+0xb1a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007a9c:	4b4f      	ldr	r3, [pc, #316]	; (8007bdc <HAL_RCC_OscConfig+0x6ec>)
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	2380      	movs	r3, #128	; 0x80
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	d1f0      	bne.n	8007a8a <HAL_RCC_OscConfig+0x59a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2208      	movs	r2, #8
 8007aae:	4013      	ands	r3, r2
 8007ab0:	d044      	beq.n	8007b3c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d009      	beq.n	8007ace <HAL_RCC_OscConfig+0x5de>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d005      	beq.n	8007ace <HAL_RCC_OscConfig+0x5de>
 8007ac2:	4a4d      	ldr	r2, [pc, #308]	; (8007bf8 <HAL_RCC_OscConfig+0x708>)
 8007ac4:	4b43      	ldr	r3, [pc, #268]	; (8007bd4 <HAL_RCC_OscConfig+0x6e4>)
 8007ac6:	0011      	movs	r1, r2
 8007ac8:	0018      	movs	r0, r3
 8007aca:	f7fd fddf 	bl	800568c <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d019      	beq.n	8007b0a <HAL_RCC_OscConfig+0x61a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ad6:	4b41      	ldr	r3, [pc, #260]	; (8007bdc <HAL_RCC_OscConfig+0x6ec>)
 8007ad8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ada:	4b40      	ldr	r3, [pc, #256]	; (8007bdc <HAL_RCC_OscConfig+0x6ec>)
 8007adc:	2101      	movs	r1, #1
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ae2:	f7fe febf 	bl	8006864 <HAL_GetTick>
 8007ae6:	0003      	movs	r3, r0
 8007ae8:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007aea:	e008      	b.n	8007afe <HAL_RCC_OscConfig+0x60e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007aec:	f7fe feba 	bl	8006864 <HAL_GetTick>
 8007af0:	0002      	movs	r2, r0
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d901      	bls.n	8007afe <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e285      	b.n	800800a <HAL_RCC_OscConfig+0xb1a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007afe:	4b37      	ldr	r3, [pc, #220]	; (8007bdc <HAL_RCC_OscConfig+0x6ec>)
 8007b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b02:	2202      	movs	r2, #2
 8007b04:	4013      	ands	r3, r2
 8007b06:	d0f1      	beq.n	8007aec <HAL_RCC_OscConfig+0x5fc>
 8007b08:	e018      	b.n	8007b3c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b0a:	4b34      	ldr	r3, [pc, #208]	; (8007bdc <HAL_RCC_OscConfig+0x6ec>)
 8007b0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b0e:	4b33      	ldr	r3, [pc, #204]	; (8007bdc <HAL_RCC_OscConfig+0x6ec>)
 8007b10:	2101      	movs	r1, #1
 8007b12:	438a      	bics	r2, r1
 8007b14:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b16:	f7fe fea5 	bl	8006864 <HAL_GetTick>
 8007b1a:	0003      	movs	r3, r0
 8007b1c:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007b1e:	e008      	b.n	8007b32 <HAL_RCC_OscConfig+0x642>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b20:	f7fe fea0 	bl	8006864 <HAL_GetTick>
 8007b24:	0002      	movs	r2, r0
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d901      	bls.n	8007b32 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e26b      	b.n	800800a <HAL_RCC_OscConfig+0xb1a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007b32:	4b2a      	ldr	r3, [pc, #168]	; (8007bdc <HAL_RCC_OscConfig+0x6ec>)
 8007b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b36:	2202      	movs	r2, #2
 8007b38:	4013      	ands	r3, r2
 8007b3a:	d1f1      	bne.n	8007b20 <HAL_RCC_OscConfig+0x630>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2204      	movs	r2, #4
 8007b42:	4013      	ands	r3, r2
 8007b44:	d100      	bne.n	8007b48 <HAL_RCC_OscConfig+0x658>
 8007b46:	e0dd      	b.n	8007d04 <HAL_RCC_OscConfig+0x814>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b48:	2323      	movs	r3, #35	; 0x23
 8007b4a:	18fb      	adds	r3, r7, r3
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d011      	beq.n	8007b7c <HAL_RCC_OscConfig+0x68c>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	689a      	ldr	r2, [r3, #8]
 8007b5c:	2380      	movs	r3, #128	; 0x80
 8007b5e:	005b      	lsls	r3, r3, #1
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d00b      	beq.n	8007b7c <HAL_RCC_OscConfig+0x68c>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	23a0      	movs	r3, #160	; 0xa0
 8007b6a:	00db      	lsls	r3, r3, #3
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d005      	beq.n	8007b7c <HAL_RCC_OscConfig+0x68c>
 8007b70:	4a22      	ldr	r2, [pc, #136]	; (8007bfc <HAL_RCC_OscConfig+0x70c>)
 8007b72:	4b18      	ldr	r3, [pc, #96]	; (8007bd4 <HAL_RCC_OscConfig+0x6e4>)
 8007b74:	0011      	movs	r1, r2
 8007b76:	0018      	movs	r0, r3
 8007b78:	f7fd fd88 	bl	800568c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b7c:	4b17      	ldr	r3, [pc, #92]	; (8007bdc <HAL_RCC_OscConfig+0x6ec>)
 8007b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b80:	2380      	movs	r3, #128	; 0x80
 8007b82:	055b      	lsls	r3, r3, #21
 8007b84:	4013      	ands	r3, r2
 8007b86:	d10a      	bne.n	8007b9e <HAL_RCC_OscConfig+0x6ae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b88:	4b14      	ldr	r3, [pc, #80]	; (8007bdc <HAL_RCC_OscConfig+0x6ec>)
 8007b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b8c:	4b13      	ldr	r3, [pc, #76]	; (8007bdc <HAL_RCC_OscConfig+0x6ec>)
 8007b8e:	2180      	movs	r1, #128	; 0x80
 8007b90:	0549      	lsls	r1, r1, #21
 8007b92:	430a      	orrs	r2, r1
 8007b94:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8007b96:	2323      	movs	r3, #35	; 0x23
 8007b98:	18fb      	adds	r3, r7, r3
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b9e:	4b18      	ldr	r3, [pc, #96]	; (8007c00 <HAL_RCC_OscConfig+0x710>)
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	2380      	movs	r3, #128	; 0x80
 8007ba4:	005b      	lsls	r3, r3, #1
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	d132      	bne.n	8007c10 <HAL_RCC_OscConfig+0x720>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007baa:	4b15      	ldr	r3, [pc, #84]	; (8007c00 <HAL_RCC_OscConfig+0x710>)
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	4b14      	ldr	r3, [pc, #80]	; (8007c00 <HAL_RCC_OscConfig+0x710>)
 8007bb0:	2180      	movs	r1, #128	; 0x80
 8007bb2:	0049      	lsls	r1, r1, #1
 8007bb4:	430a      	orrs	r2, r1
 8007bb6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bb8:	f7fe fe54 	bl	8006864 <HAL_GetTick>
 8007bbc:	0003      	movs	r3, r0
 8007bbe:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bc0:	e020      	b.n	8007c04 <HAL_RCC_OscConfig+0x714>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bc2:	f7fe fe4f 	bl	8006864 <HAL_GetTick>
 8007bc6:	0002      	movs	r2, r0
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	2b64      	cmp	r3, #100	; 0x64
 8007bce:	d919      	bls.n	8007c04 <HAL_RCC_OscConfig+0x714>
        {
          return HAL_TIMEOUT;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e21a      	b.n	800800a <HAL_RCC_OscConfig+0xb1a>
 8007bd4:	0800b970 	.word	0x0800b970
 8007bd8:	00000201 	.word	0x00000201
 8007bdc:	40021000 	.word	0x40021000
 8007be0:	ffff1fff 	.word	0xffff1fff
 8007be4:	0800cd44 	.word	0x0800cd44
 8007be8:	20000048 	.word	0x20000048
 8007bec:	2000004c 	.word	0x2000004c
 8007bf0:	0000022d 	.word	0x0000022d
 8007bf4:	fffffeff 	.word	0xfffffeff
 8007bf8:	0000024b 	.word	0x0000024b
 8007bfc:	00000277 	.word	0x00000277
 8007c00:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c04:	4bca      	ldr	r3, [pc, #808]	; (8007f30 <HAL_RCC_OscConfig+0xa40>)
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	2380      	movs	r3, #128	; 0x80
 8007c0a:	005b      	lsls	r3, r3, #1
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	d0d8      	beq.n	8007bc2 <HAL_RCC_OscConfig+0x6d2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	689a      	ldr	r2, [r3, #8]
 8007c14:	2380      	movs	r3, #128	; 0x80
 8007c16:	005b      	lsls	r3, r3, #1
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d107      	bne.n	8007c2c <HAL_RCC_OscConfig+0x73c>
 8007c1c:	4bc5      	ldr	r3, [pc, #788]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007c1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c20:	4bc4      	ldr	r3, [pc, #784]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007c22:	2180      	movs	r1, #128	; 0x80
 8007c24:	0049      	lsls	r1, r1, #1
 8007c26:	430a      	orrs	r2, r1
 8007c28:	651a      	str	r2, [r3, #80]	; 0x50
 8007c2a:	e031      	b.n	8007c90 <HAL_RCC_OscConfig+0x7a0>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10c      	bne.n	8007c4e <HAL_RCC_OscConfig+0x75e>
 8007c34:	4bbf      	ldr	r3, [pc, #764]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007c36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c38:	4bbe      	ldr	r3, [pc, #760]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007c3a:	49bf      	ldr	r1, [pc, #764]	; (8007f38 <HAL_RCC_OscConfig+0xa48>)
 8007c3c:	400a      	ands	r2, r1
 8007c3e:	651a      	str	r2, [r3, #80]	; 0x50
 8007c40:	4bbc      	ldr	r3, [pc, #752]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007c42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c44:	4bbb      	ldr	r3, [pc, #748]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007c46:	49bd      	ldr	r1, [pc, #756]	; (8007f3c <HAL_RCC_OscConfig+0xa4c>)
 8007c48:	400a      	ands	r2, r1
 8007c4a:	651a      	str	r2, [r3, #80]	; 0x50
 8007c4c:	e020      	b.n	8007c90 <HAL_RCC_OscConfig+0x7a0>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	689a      	ldr	r2, [r3, #8]
 8007c52:	23a0      	movs	r3, #160	; 0xa0
 8007c54:	00db      	lsls	r3, r3, #3
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d10e      	bne.n	8007c78 <HAL_RCC_OscConfig+0x788>
 8007c5a:	4bb6      	ldr	r3, [pc, #728]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007c5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c5e:	4bb5      	ldr	r3, [pc, #724]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007c60:	2180      	movs	r1, #128	; 0x80
 8007c62:	00c9      	lsls	r1, r1, #3
 8007c64:	430a      	orrs	r2, r1
 8007c66:	651a      	str	r2, [r3, #80]	; 0x50
 8007c68:	4bb2      	ldr	r3, [pc, #712]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007c6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c6c:	4bb1      	ldr	r3, [pc, #708]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007c6e:	2180      	movs	r1, #128	; 0x80
 8007c70:	0049      	lsls	r1, r1, #1
 8007c72:	430a      	orrs	r2, r1
 8007c74:	651a      	str	r2, [r3, #80]	; 0x50
 8007c76:	e00b      	b.n	8007c90 <HAL_RCC_OscConfig+0x7a0>
 8007c78:	4bae      	ldr	r3, [pc, #696]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007c7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c7c:	4bad      	ldr	r3, [pc, #692]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007c7e:	49ae      	ldr	r1, [pc, #696]	; (8007f38 <HAL_RCC_OscConfig+0xa48>)
 8007c80:	400a      	ands	r2, r1
 8007c82:	651a      	str	r2, [r3, #80]	; 0x50
 8007c84:	4bab      	ldr	r3, [pc, #684]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007c86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c88:	4baa      	ldr	r3, [pc, #680]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007c8a:	49ac      	ldr	r1, [pc, #688]	; (8007f3c <HAL_RCC_OscConfig+0xa4c>)
 8007c8c:	400a      	ands	r2, r1
 8007c8e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d015      	beq.n	8007cc4 <HAL_RCC_OscConfig+0x7d4>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c98:	f7fe fde4 	bl	8006864 <HAL_GetTick>
 8007c9c:	0003      	movs	r3, r0
 8007c9e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ca0:	e009      	b.n	8007cb6 <HAL_RCC_OscConfig+0x7c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ca2:	f7fe fddf 	bl	8006864 <HAL_GetTick>
 8007ca6:	0002      	movs	r2, r0
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	4aa4      	ldr	r2, [pc, #656]	; (8007f40 <HAL_RCC_OscConfig+0xa50>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d901      	bls.n	8007cb6 <HAL_RCC_OscConfig+0x7c6>
        {
          return HAL_TIMEOUT;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e1a9      	b.n	800800a <HAL_RCC_OscConfig+0xb1a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007cb6:	4b9f      	ldr	r3, [pc, #636]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007cb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007cba:	2380      	movs	r3, #128	; 0x80
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	d0ef      	beq.n	8007ca2 <HAL_RCC_OscConfig+0x7b2>
 8007cc2:	e014      	b.n	8007cee <HAL_RCC_OscConfig+0x7fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cc4:	f7fe fdce 	bl	8006864 <HAL_GetTick>
 8007cc8:	0003      	movs	r3, r0
 8007cca:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007ccc:	e009      	b.n	8007ce2 <HAL_RCC_OscConfig+0x7f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cce:	f7fe fdc9 	bl	8006864 <HAL_GetTick>
 8007cd2:	0002      	movs	r2, r0
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	4a99      	ldr	r2, [pc, #612]	; (8007f40 <HAL_RCC_OscConfig+0xa50>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d901      	bls.n	8007ce2 <HAL_RCC_OscConfig+0x7f2>
        {
          return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e193      	b.n	800800a <HAL_RCC_OscConfig+0xb1a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007ce2:	4b94      	ldr	r3, [pc, #592]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007ce4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ce6:	2380      	movs	r3, #128	; 0x80
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4013      	ands	r3, r2
 8007cec:	d1ef      	bne.n	8007cce <HAL_RCC_OscConfig+0x7de>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007cee:	2323      	movs	r3, #35	; 0x23
 8007cf0:	18fb      	adds	r3, r7, r3
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d105      	bne.n	8007d04 <HAL_RCC_OscConfig+0x814>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cf8:	4b8e      	ldr	r3, [pc, #568]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007cfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cfc:	4b8d      	ldr	r3, [pc, #564]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007cfe:	4991      	ldr	r1, [pc, #580]	; (8007f44 <HAL_RCC_OscConfig+0xa54>)
 8007d00:	400a      	ands	r2, r1
 8007d02:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2220      	movs	r2, #32
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	d057      	beq.n	8007dbe <HAL_RCC_OscConfig+0x8ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d009      	beq.n	8007d2a <HAL_RCC_OscConfig+0x83a>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d005      	beq.n	8007d2a <HAL_RCC_OscConfig+0x83a>
 8007d1e:	4a8a      	ldr	r2, [pc, #552]	; (8007f48 <HAL_RCC_OscConfig+0xa58>)
 8007d20:	4b8a      	ldr	r3, [pc, #552]	; (8007f4c <HAL_RCC_OscConfig+0xa5c>)
 8007d22:	0011      	movs	r1, r2
 8007d24:	0018      	movs	r0, r3
 8007d26:	f7fd fcb1 	bl	800568c <assert_failed>

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d026      	beq.n	8007d80 <HAL_RCC_OscConfig+0x890>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8007d32:	4b80      	ldr	r3, [pc, #512]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007d34:	689a      	ldr	r2, [r3, #8]
 8007d36:	4b7f      	ldr	r3, [pc, #508]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007d38:	2101      	movs	r1, #1
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	609a      	str	r2, [r3, #8]
 8007d3e:	4b7d      	ldr	r3, [pc, #500]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d42:	4b7c      	ldr	r3, [pc, #496]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007d44:	2101      	movs	r1, #1
 8007d46:	430a      	orrs	r2, r1
 8007d48:	635a      	str	r2, [r3, #52]	; 0x34
 8007d4a:	4b81      	ldr	r3, [pc, #516]	; (8007f50 <HAL_RCC_OscConfig+0xa60>)
 8007d4c:	6a1a      	ldr	r2, [r3, #32]
 8007d4e:	4b80      	ldr	r3, [pc, #512]	; (8007f50 <HAL_RCC_OscConfig+0xa60>)
 8007d50:	2180      	movs	r1, #128	; 0x80
 8007d52:	0189      	lsls	r1, r1, #6
 8007d54:	430a      	orrs	r2, r1
 8007d56:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d58:	f7fe fd84 	bl	8006864 <HAL_GetTick>
 8007d5c:	0003      	movs	r3, r0
 8007d5e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007d60:	e008      	b.n	8007d74 <HAL_RCC_OscConfig+0x884>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d62:	f7fe fd7f 	bl	8006864 <HAL_GetTick>
 8007d66:	0002      	movs	r2, r0
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	1ad3      	subs	r3, r2, r3
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d901      	bls.n	8007d74 <HAL_RCC_OscConfig+0x884>
          {
            return HAL_TIMEOUT;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e14a      	b.n	800800a <HAL_RCC_OscConfig+0xb1a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007d74:	4b6f      	ldr	r3, [pc, #444]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	2202      	movs	r2, #2
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	d0f1      	beq.n	8007d62 <HAL_RCC_OscConfig+0x872>
 8007d7e:	e01e      	b.n	8007dbe <HAL_RCC_OscConfig+0x8ce>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8007d80:	4b6c      	ldr	r3, [pc, #432]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007d82:	689a      	ldr	r2, [r3, #8]
 8007d84:	4b6b      	ldr	r3, [pc, #428]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007d86:	2101      	movs	r1, #1
 8007d88:	438a      	bics	r2, r1
 8007d8a:	609a      	str	r2, [r3, #8]
 8007d8c:	4b70      	ldr	r3, [pc, #448]	; (8007f50 <HAL_RCC_OscConfig+0xa60>)
 8007d8e:	6a1a      	ldr	r2, [r3, #32]
 8007d90:	4b6f      	ldr	r3, [pc, #444]	; (8007f50 <HAL_RCC_OscConfig+0xa60>)
 8007d92:	4970      	ldr	r1, [pc, #448]	; (8007f54 <HAL_RCC_OscConfig+0xa64>)
 8007d94:	400a      	ands	r2, r1
 8007d96:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d98:	f7fe fd64 	bl	8006864 <HAL_GetTick>
 8007d9c:	0003      	movs	r3, r0
 8007d9e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007da0:	e008      	b.n	8007db4 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007da2:	f7fe fd5f 	bl	8006864 <HAL_GetTick>
 8007da6:	0002      	movs	r2, r0
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	1ad3      	subs	r3, r2, r3
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d901      	bls.n	8007db4 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e12a      	b.n	800800a <HAL_RCC_OscConfig+0xb1a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007db4:	4b5f      	ldr	r3, [pc, #380]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	2202      	movs	r2, #2
 8007dba:	4013      	ands	r3, r2
 8007dbc:	d1f1      	bne.n	8007da2 <HAL_RCC_OscConfig+0x8b2>
  }
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00d      	beq.n	8007de2 <HAL_RCC_OscConfig+0x8f2>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d009      	beq.n	8007de2 <HAL_RCC_OscConfig+0x8f2>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d005      	beq.n	8007de2 <HAL_RCC_OscConfig+0x8f2>
 8007dd6:	4a60      	ldr	r2, [pc, #384]	; (8007f58 <HAL_RCC_OscConfig+0xa68>)
 8007dd8:	4b5c      	ldr	r3, [pc, #368]	; (8007f4c <HAL_RCC_OscConfig+0xa5c>)
 8007dda:	0011      	movs	r1, r2
 8007ddc:	0018      	movs	r0, r3
 8007dde:	f7fd fc55 	bl	800568c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d100      	bne.n	8007dec <HAL_RCC_OscConfig+0x8fc>
 8007dea:	e10d      	b.n	8008008 <HAL_RCC_OscConfig+0xb18>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	2b0c      	cmp	r3, #12
 8007df0:	d100      	bne.n	8007df4 <HAL_RCC_OscConfig+0x904>
 8007df2:	e0e6      	b.n	8007fc2 <HAL_RCC_OscConfig+0xad2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d000      	beq.n	8007dfe <HAL_RCC_OscConfig+0x90e>
 8007dfc:	e0c6      	b.n	8007f8c <HAL_RCC_OscConfig+0xa9c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00b      	beq.n	8007e1e <HAL_RCC_OscConfig+0x92e>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e0a:	2380      	movs	r3, #128	; 0x80
 8007e0c:	025b      	lsls	r3, r3, #9
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d005      	beq.n	8007e1e <HAL_RCC_OscConfig+0x92e>
 8007e12:	4a52      	ldr	r2, [pc, #328]	; (8007f5c <HAL_RCC_OscConfig+0xa6c>)
 8007e14:	4b4d      	ldr	r3, [pc, #308]	; (8007f4c <HAL_RCC_OscConfig+0xa5c>)
 8007e16:	0011      	movs	r1, r2
 8007e18:	0018      	movs	r0, r3
 8007e1a:	f7fd fc37 	bl	800568c <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d035      	beq.n	8007e92 <HAL_RCC_OscConfig+0x9a2>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e2a:	2380      	movs	r3, #128	; 0x80
 8007e2c:	02db      	lsls	r3, r3, #11
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d02f      	beq.n	8007e92 <HAL_RCC_OscConfig+0x9a2>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e36:	2380      	movs	r3, #128	; 0x80
 8007e38:	031b      	lsls	r3, r3, #12
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d029      	beq.n	8007e92 <HAL_RCC_OscConfig+0x9a2>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e42:	23c0      	movs	r3, #192	; 0xc0
 8007e44:	031b      	lsls	r3, r3, #12
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d023      	beq.n	8007e92 <HAL_RCC_OscConfig+0x9a2>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e4e:	2380      	movs	r3, #128	; 0x80
 8007e50:	035b      	lsls	r3, r3, #13
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d01d      	beq.n	8007e92 <HAL_RCC_OscConfig+0x9a2>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e5a:	23a0      	movs	r3, #160	; 0xa0
 8007e5c:	035b      	lsls	r3, r3, #13
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d017      	beq.n	8007e92 <HAL_RCC_OscConfig+0x9a2>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e66:	23c0      	movs	r3, #192	; 0xc0
 8007e68:	035b      	lsls	r3, r3, #13
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d011      	beq.n	8007e92 <HAL_RCC_OscConfig+0x9a2>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e72:	23e0      	movs	r3, #224	; 0xe0
 8007e74:	035b      	lsls	r3, r3, #13
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d00b      	beq.n	8007e92 <HAL_RCC_OscConfig+0x9a2>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e7e:	2380      	movs	r3, #128	; 0x80
 8007e80:	039b      	lsls	r3, r3, #14
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d005      	beq.n	8007e92 <HAL_RCC_OscConfig+0x9a2>
 8007e86:	4a36      	ldr	r2, [pc, #216]	; (8007f60 <HAL_RCC_OscConfig+0xa70>)
 8007e88:	4b30      	ldr	r3, [pc, #192]	; (8007f4c <HAL_RCC_OscConfig+0xa5c>)
 8007e8a:	0011      	movs	r1, r2
 8007e8c:	0018      	movs	r0, r3
 8007e8e:	f7fd fbfd 	bl	800568c <assert_failed>
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e96:	2380      	movs	r3, #128	; 0x80
 8007e98:	03db      	lsls	r3, r3, #15
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d012      	beq.n	8007ec4 <HAL_RCC_OscConfig+0x9d4>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ea2:	2380      	movs	r3, #128	; 0x80
 8007ea4:	041b      	lsls	r3, r3, #16
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d00c      	beq.n	8007ec4 <HAL_RCC_OscConfig+0x9d4>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eae:	23c0      	movs	r3, #192	; 0xc0
 8007eb0:	041b      	lsls	r3, r3, #16
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d006      	beq.n	8007ec4 <HAL_RCC_OscConfig+0x9d4>
 8007eb6:	23bd      	movs	r3, #189	; 0xbd
 8007eb8:	009a      	lsls	r2, r3, #2
 8007eba:	4b24      	ldr	r3, [pc, #144]	; (8007f4c <HAL_RCC_OscConfig+0xa5c>)
 8007ebc:	0011      	movs	r1, r2
 8007ebe:	0018      	movs	r0, r3
 8007ec0:	f7fd fbe4 	bl	800568c <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ec4:	4b1b      	ldr	r3, [pc, #108]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	4b1a      	ldr	r3, [pc, #104]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007eca:	4926      	ldr	r1, [pc, #152]	; (8007f64 <HAL_RCC_OscConfig+0xa74>)
 8007ecc:	400a      	ands	r2, r1
 8007ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ed0:	f7fe fcc8 	bl	8006864 <HAL_GetTick>
 8007ed4:	0003      	movs	r3, r0
 8007ed6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007ed8:	e008      	b.n	8007eec <HAL_RCC_OscConfig+0x9fc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007eda:	f7fe fcc3 	bl	8006864 <HAL_GetTick>
 8007ede:	0002      	movs	r2, r0
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d901      	bls.n	8007eec <HAL_RCC_OscConfig+0x9fc>
          {
            return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e08e      	b.n	800800a <HAL_RCC_OscConfig+0xb1a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007eec:	4b11      	ldr	r3, [pc, #68]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	2380      	movs	r3, #128	; 0x80
 8007ef2:	049b      	lsls	r3, r3, #18
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	d1f0      	bne.n	8007eda <HAL_RCC_OscConfig+0x9ea>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ef8:	4b0e      	ldr	r3, [pc, #56]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	4a1a      	ldr	r2, [pc, #104]	; (8007f68 <HAL_RCC_OscConfig+0xa78>)
 8007efe:	4013      	ands	r3, r2
 8007f00:	0019      	movs	r1, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0a:	431a      	orrs	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f10:	431a      	orrs	r2, r3
 8007f12:	4b08      	ldr	r3, [pc, #32]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007f14:	430a      	orrs	r2, r1
 8007f16:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f18:	4b06      	ldr	r3, [pc, #24]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	4b05      	ldr	r3, [pc, #20]	; (8007f34 <HAL_RCC_OscConfig+0xa44>)
 8007f1e:	2180      	movs	r1, #128	; 0x80
 8007f20:	0449      	lsls	r1, r1, #17
 8007f22:	430a      	orrs	r2, r1
 8007f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f26:	f7fe fc9d 	bl	8006864 <HAL_GetTick>
 8007f2a:	0003      	movs	r3, r0
 8007f2c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8007f2e:	e026      	b.n	8007f7e <HAL_RCC_OscConfig+0xa8e>
 8007f30:	40007000 	.word	0x40007000
 8007f34:	40021000 	.word	0x40021000
 8007f38:	fffffeff 	.word	0xfffffeff
 8007f3c:	fffffbff 	.word	0xfffffbff
 8007f40:	00001388 	.word	0x00001388
 8007f44:	efffffff 	.word	0xefffffff
 8007f48:	000002bf 	.word	0x000002bf
 8007f4c:	0800b970 	.word	0x0800b970
 8007f50:	40010000 	.word	0x40010000
 8007f54:	ffffdfff 	.word	0xffffdfff
 8007f58:	000002e9 	.word	0x000002e9
 8007f5c:	000002f2 	.word	0x000002f2
 8007f60:	000002f3 	.word	0x000002f3
 8007f64:	feffffff 	.word	0xfeffffff
 8007f68:	ff02ffff 	.word	0xff02ffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f6c:	f7fe fc7a 	bl	8006864 <HAL_GetTick>
 8007f70:	0002      	movs	r2, r0
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d901      	bls.n	8007f7e <HAL_RCC_OscConfig+0xa8e>
          {
            return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e045      	b.n	800800a <HAL_RCC_OscConfig+0xb1a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8007f7e:	4b25      	ldr	r3, [pc, #148]	; (8008014 <HAL_RCC_OscConfig+0xb24>)
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	2380      	movs	r3, #128	; 0x80
 8007f84:	049b      	lsls	r3, r3, #18
 8007f86:	4013      	ands	r3, r2
 8007f88:	d0f0      	beq.n	8007f6c <HAL_RCC_OscConfig+0xa7c>
 8007f8a:	e03d      	b.n	8008008 <HAL_RCC_OscConfig+0xb18>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f8c:	4b21      	ldr	r3, [pc, #132]	; (8008014 <HAL_RCC_OscConfig+0xb24>)
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	4b20      	ldr	r3, [pc, #128]	; (8008014 <HAL_RCC_OscConfig+0xb24>)
 8007f92:	4921      	ldr	r1, [pc, #132]	; (8008018 <HAL_RCC_OscConfig+0xb28>)
 8007f94:	400a      	ands	r2, r1
 8007f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f98:	f7fe fc64 	bl	8006864 <HAL_GetTick>
 8007f9c:	0003      	movs	r3, r0
 8007f9e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007fa0:	e008      	b.n	8007fb4 <HAL_RCC_OscConfig+0xac4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fa2:	f7fe fc5f 	bl	8006864 <HAL_GetTick>
 8007fa6:	0002      	movs	r2, r0
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d901      	bls.n	8007fb4 <HAL_RCC_OscConfig+0xac4>
          {
            return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e02a      	b.n	800800a <HAL_RCC_OscConfig+0xb1a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007fb4:	4b17      	ldr	r3, [pc, #92]	; (8008014 <HAL_RCC_OscConfig+0xb24>)
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	2380      	movs	r3, #128	; 0x80
 8007fba:	049b      	lsls	r3, r3, #18
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	d1f0      	bne.n	8007fa2 <HAL_RCC_OscConfig+0xab2>
 8007fc0:	e022      	b.n	8008008 <HAL_RCC_OscConfig+0xb18>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d101      	bne.n	8007fce <HAL_RCC_OscConfig+0xade>
      {
        return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e01d      	b.n	800800a <HAL_RCC_OscConfig+0xb1a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007fce:	4b11      	ldr	r3, [pc, #68]	; (8008014 <HAL_RCC_OscConfig+0xb24>)
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fd4:	69ba      	ldr	r2, [r7, #24]
 8007fd6:	2380      	movs	r3, #128	; 0x80
 8007fd8:	025b      	lsls	r3, r3, #9
 8007fda:	401a      	ands	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d10f      	bne.n	8008004 <HAL_RCC_OscConfig+0xb14>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	23f0      	movs	r3, #240	; 0xf0
 8007fe8:	039b      	lsls	r3, r3, #14
 8007fea:	401a      	ands	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d107      	bne.n	8008004 <HAL_RCC_OscConfig+0xb14>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8007ff4:	69ba      	ldr	r2, [r7, #24]
 8007ff6:	23c0      	movs	r3, #192	; 0xc0
 8007ff8:	041b      	lsls	r3, r3, #16
 8007ffa:	401a      	ands	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008000:	429a      	cmp	r2, r3
 8008002:	d001      	beq.n	8008008 <HAL_RCC_OscConfig+0xb18>
        {
          return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e000      	b.n	800800a <HAL_RCC_OscConfig+0xb1a>
        }
      }
    }
  }
  return HAL_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	0018      	movs	r0, r3
 800800c:	46bd      	mov	sp, r7
 800800e:	b00a      	add	sp, #40	; 0x28
 8008010:	bdb0      	pop	{r4, r5, r7, pc}
 8008012:	46c0      	nop			; (mov r8, r8)
 8008014:	40021000 	.word	0x40021000
 8008018:	feffffff 	.word	0xfeffffff

0800801c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800801c:	b5b0      	push	{r4, r5, r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d101      	bne.n	8008030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e1e2      	b.n	80083f6 <HAL_RCC_ClockConfig+0x3da>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2201      	movs	r2, #1
 8008036:	4013      	ands	r3, r2
 8008038:	d114      	bne.n	8008064 <HAL_RCC_ClockConfig+0x48>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2202      	movs	r2, #2
 8008040:	4013      	ands	r3, r2
 8008042:	d10f      	bne.n	8008064 <HAL_RCC_ClockConfig+0x48>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2204      	movs	r2, #4
 800804a:	4013      	ands	r3, r2
 800804c:	d10a      	bne.n	8008064 <HAL_RCC_ClockConfig+0x48>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2208      	movs	r2, #8
 8008054:	4013      	ands	r3, r2
 8008056:	d105      	bne.n	8008064 <HAL_RCC_ClockConfig+0x48>
 8008058:	4a9b      	ldr	r2, [pc, #620]	; (80082c8 <HAL_RCC_ClockConfig+0x2ac>)
 800805a:	4b9c      	ldr	r3, [pc, #624]	; (80082cc <HAL_RCC_ClockConfig+0x2b0>)
 800805c:	0011      	movs	r1, r2
 800805e:	0018      	movs	r0, r3
 8008060:	f7fd fb14 	bl	800568c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d009      	beq.n	800807e <HAL_RCC_ClockConfig+0x62>
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d006      	beq.n	800807e <HAL_RCC_ClockConfig+0x62>
 8008070:	23da      	movs	r3, #218	; 0xda
 8008072:	009a      	lsls	r2, r3, #2
 8008074:	4b95      	ldr	r3, [pc, #596]	; (80082cc <HAL_RCC_ClockConfig+0x2b0>)
 8008076:	0011      	movs	r1, r2
 8008078:	0018      	movs	r0, r3
 800807a:	f7fd fb07 	bl	800568c <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800807e:	4b94      	ldr	r3, [pc, #592]	; (80082d0 <HAL_RCC_ClockConfig+0x2b4>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2201      	movs	r2, #1
 8008084:	4013      	ands	r3, r2
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	429a      	cmp	r2, r3
 800808a:	d91e      	bls.n	80080ca <HAL_RCC_ClockConfig+0xae>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800808c:	4b90      	ldr	r3, [pc, #576]	; (80082d0 <HAL_RCC_ClockConfig+0x2b4>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2201      	movs	r2, #1
 8008092:	4393      	bics	r3, r2
 8008094:	0019      	movs	r1, r3
 8008096:	4b8e      	ldr	r3, [pc, #568]	; (80082d0 <HAL_RCC_ClockConfig+0x2b4>)
 8008098:	683a      	ldr	r2, [r7, #0]
 800809a:	430a      	orrs	r2, r1
 800809c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800809e:	f7fe fbe1 	bl	8006864 <HAL_GetTick>
 80080a2:	0003      	movs	r3, r0
 80080a4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080a6:	e009      	b.n	80080bc <HAL_RCC_ClockConfig+0xa0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080a8:	f7fe fbdc 	bl	8006864 <HAL_GetTick>
 80080ac:	0002      	movs	r2, r0
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	4a88      	ldr	r2, [pc, #544]	; (80082d4 <HAL_RCC_ClockConfig+0x2b8>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d901      	bls.n	80080bc <HAL_RCC_ClockConfig+0xa0>
      {
        return HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	e19c      	b.n	80083f6 <HAL_RCC_ClockConfig+0x3da>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080bc:	4b84      	ldr	r3, [pc, #528]	; (80082d0 <HAL_RCC_ClockConfig+0x2b4>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2201      	movs	r2, #1
 80080c2:	4013      	ands	r3, r2
 80080c4:	683a      	ldr	r2, [r7, #0]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d1ee      	bne.n	80080a8 <HAL_RCC_ClockConfig+0x8c>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2202      	movs	r2, #2
 80080d0:	4013      	ands	r3, r2
 80080d2:	d034      	beq.n	800813e <HAL_RCC_ClockConfig+0x122>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d026      	beq.n	800812a <HAL_RCC_ClockConfig+0x10e>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	2b80      	cmp	r3, #128	; 0x80
 80080e2:	d022      	beq.n	800812a <HAL_RCC_ClockConfig+0x10e>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	2b90      	cmp	r3, #144	; 0x90
 80080ea:	d01e      	beq.n	800812a <HAL_RCC_ClockConfig+0x10e>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	2ba0      	cmp	r3, #160	; 0xa0
 80080f2:	d01a      	beq.n	800812a <HAL_RCC_ClockConfig+0x10e>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	2bb0      	cmp	r3, #176	; 0xb0
 80080fa:	d016      	beq.n	800812a <HAL_RCC_ClockConfig+0x10e>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	2bc0      	cmp	r3, #192	; 0xc0
 8008102:	d012      	beq.n	800812a <HAL_RCC_ClockConfig+0x10e>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	2bd0      	cmp	r3, #208	; 0xd0
 800810a:	d00e      	beq.n	800812a <HAL_RCC_ClockConfig+0x10e>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	2be0      	cmp	r3, #224	; 0xe0
 8008112:	d00a      	beq.n	800812a <HAL_RCC_ClockConfig+0x10e>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	2bf0      	cmp	r3, #240	; 0xf0
 800811a:	d006      	beq.n	800812a <HAL_RCC_ClockConfig+0x10e>
 800811c:	23e1      	movs	r3, #225	; 0xe1
 800811e:	009a      	lsls	r2, r3, #2
 8008120:	4b6a      	ldr	r3, [pc, #424]	; (80082cc <HAL_RCC_ClockConfig+0x2b0>)
 8008122:	0011      	movs	r1, r2
 8008124:	0018      	movs	r0, r3
 8008126:	f7fd fab1 	bl	800568c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800812a:	4b6b      	ldr	r3, [pc, #428]	; (80082d8 <HAL_RCC_ClockConfig+0x2bc>)
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	22f0      	movs	r2, #240	; 0xf0
 8008130:	4393      	bics	r3, r2
 8008132:	0019      	movs	r1, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	689a      	ldr	r2, [r3, #8]
 8008138:	4b67      	ldr	r3, [pc, #412]	; (80082d8 <HAL_RCC_ClockConfig+0x2bc>)
 800813a:	430a      	orrs	r2, r1
 800813c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2201      	movs	r2, #1
 8008144:	4013      	ands	r3, r2
 8008146:	d100      	bne.n	800814a <HAL_RCC_ClockConfig+0x12e>
 8008148:	e09f      	b.n	800828a <HAL_RCC_ClockConfig+0x26e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d011      	beq.n	8008176 <HAL_RCC_ClockConfig+0x15a>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	2b01      	cmp	r3, #1
 8008158:	d00d      	beq.n	8008176 <HAL_RCC_ClockConfig+0x15a>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	2b02      	cmp	r3, #2
 8008160:	d009      	beq.n	8008176 <HAL_RCC_ClockConfig+0x15a>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	2b03      	cmp	r3, #3
 8008168:	d005      	beq.n	8008176 <HAL_RCC_ClockConfig+0x15a>
 800816a:	4a5c      	ldr	r2, [pc, #368]	; (80082dc <HAL_RCC_ClockConfig+0x2c0>)
 800816c:	4b57      	ldr	r3, [pc, #348]	; (80082cc <HAL_RCC_ClockConfig+0x2b0>)
 800816e:	0011      	movs	r1, r2
 8008170:	0018      	movs	r0, r3
 8008172:	f7fd fa8b 	bl	800568c <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	2b02      	cmp	r3, #2
 800817c:	d107      	bne.n	800818e <HAL_RCC_ClockConfig+0x172>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800817e:	4b56      	ldr	r3, [pc, #344]	; (80082d8 <HAL_RCC_ClockConfig+0x2bc>)
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	2380      	movs	r3, #128	; 0x80
 8008184:	029b      	lsls	r3, r3, #10
 8008186:	4013      	ands	r3, r2
 8008188:	d120      	bne.n	80081cc <HAL_RCC_ClockConfig+0x1b0>
      {
        return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e133      	b.n	80083f6 <HAL_RCC_ClockConfig+0x3da>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	2b03      	cmp	r3, #3
 8008194:	d107      	bne.n	80081a6 <HAL_RCC_ClockConfig+0x18a>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008196:	4b50      	ldr	r3, [pc, #320]	; (80082d8 <HAL_RCC_ClockConfig+0x2bc>)
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	2380      	movs	r3, #128	; 0x80
 800819c:	049b      	lsls	r3, r3, #18
 800819e:	4013      	ands	r3, r2
 80081a0:	d114      	bne.n	80081cc <HAL_RCC_ClockConfig+0x1b0>
      {
        return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e127      	b.n	80083f6 <HAL_RCC_ClockConfig+0x3da>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d106      	bne.n	80081bc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081ae:	4b4a      	ldr	r3, [pc, #296]	; (80082d8 <HAL_RCC_ClockConfig+0x2bc>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2204      	movs	r2, #4
 80081b4:	4013      	ands	r3, r2
 80081b6:	d109      	bne.n	80081cc <HAL_RCC_ClockConfig+0x1b0>
      {
        return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e11c      	b.n	80083f6 <HAL_RCC_ClockConfig+0x3da>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80081bc:	4b46      	ldr	r3, [pc, #280]	; (80082d8 <HAL_RCC_ClockConfig+0x2bc>)
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	2380      	movs	r3, #128	; 0x80
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	4013      	ands	r3, r2
 80081c6:	d101      	bne.n	80081cc <HAL_RCC_ClockConfig+0x1b0>
      {
        return HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e114      	b.n	80083f6 <HAL_RCC_ClockConfig+0x3da>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80081cc:	4b42      	ldr	r3, [pc, #264]	; (80082d8 <HAL_RCC_ClockConfig+0x2bc>)
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	2203      	movs	r2, #3
 80081d2:	4393      	bics	r3, r2
 80081d4:	0019      	movs	r1, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685a      	ldr	r2, [r3, #4]
 80081da:	4b3f      	ldr	r3, [pc, #252]	; (80082d8 <HAL_RCC_ClockConfig+0x2bc>)
 80081dc:	430a      	orrs	r2, r1
 80081de:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80081e0:	f7fe fb40 	bl	8006864 <HAL_GetTick>
 80081e4:	0003      	movs	r3, r0
 80081e6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d111      	bne.n	8008214 <HAL_RCC_ClockConfig+0x1f8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80081f0:	e009      	b.n	8008206 <HAL_RCC_ClockConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081f2:	f7fe fb37 	bl	8006864 <HAL_GetTick>
 80081f6:	0002      	movs	r2, r0
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	1ad3      	subs	r3, r2, r3
 80081fc:	4a35      	ldr	r2, [pc, #212]	; (80082d4 <HAL_RCC_ClockConfig+0x2b8>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d901      	bls.n	8008206 <HAL_RCC_ClockConfig+0x1ea>
        {
          return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e0f7      	b.n	80083f6 <HAL_RCC_ClockConfig+0x3da>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008206:	4b34      	ldr	r3, [pc, #208]	; (80082d8 <HAL_RCC_ClockConfig+0x2bc>)
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	220c      	movs	r2, #12
 800820c:	4013      	ands	r3, r2
 800820e:	2b08      	cmp	r3, #8
 8008210:	d1ef      	bne.n	80081f2 <HAL_RCC_ClockConfig+0x1d6>
 8008212:	e03a      	b.n	800828a <HAL_RCC_ClockConfig+0x26e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	2b03      	cmp	r3, #3
 800821a:	d111      	bne.n	8008240 <HAL_RCC_ClockConfig+0x224>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800821c:	e009      	b.n	8008232 <HAL_RCC_ClockConfig+0x216>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800821e:	f7fe fb21 	bl	8006864 <HAL_GetTick>
 8008222:	0002      	movs	r2, r0
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	4a2a      	ldr	r2, [pc, #168]	; (80082d4 <HAL_RCC_ClockConfig+0x2b8>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d901      	bls.n	8008232 <HAL_RCC_ClockConfig+0x216>
        {
          return HAL_TIMEOUT;
 800822e:	2303      	movs	r3, #3
 8008230:	e0e1      	b.n	80083f6 <HAL_RCC_ClockConfig+0x3da>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008232:	4b29      	ldr	r3, [pc, #164]	; (80082d8 <HAL_RCC_ClockConfig+0x2bc>)
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	220c      	movs	r2, #12
 8008238:	4013      	ands	r3, r2
 800823a:	2b0c      	cmp	r3, #12
 800823c:	d1ef      	bne.n	800821e <HAL_RCC_ClockConfig+0x202>
 800823e:	e024      	b.n	800828a <HAL_RCC_ClockConfig+0x26e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d11b      	bne.n	8008280 <HAL_RCC_ClockConfig+0x264>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008248:	e009      	b.n	800825e <HAL_RCC_ClockConfig+0x242>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800824a:	f7fe fb0b 	bl	8006864 <HAL_GetTick>
 800824e:	0002      	movs	r2, r0
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	4a1f      	ldr	r2, [pc, #124]	; (80082d4 <HAL_RCC_ClockConfig+0x2b8>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d901      	bls.n	800825e <HAL_RCC_ClockConfig+0x242>
        {
          return HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	e0cb      	b.n	80083f6 <HAL_RCC_ClockConfig+0x3da>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800825e:	4b1e      	ldr	r3, [pc, #120]	; (80082d8 <HAL_RCC_ClockConfig+0x2bc>)
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	220c      	movs	r2, #12
 8008264:	4013      	ands	r3, r2
 8008266:	2b04      	cmp	r3, #4
 8008268:	d1ef      	bne.n	800824a <HAL_RCC_ClockConfig+0x22e>
 800826a:	e00e      	b.n	800828a <HAL_RCC_ClockConfig+0x26e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800826c:	f7fe fafa 	bl	8006864 <HAL_GetTick>
 8008270:	0002      	movs	r2, r0
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	4a17      	ldr	r2, [pc, #92]	; (80082d4 <HAL_RCC_ClockConfig+0x2b8>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d901      	bls.n	8008280 <HAL_RCC_ClockConfig+0x264>
        {
          return HAL_TIMEOUT;
 800827c:	2303      	movs	r3, #3
 800827e:	e0ba      	b.n	80083f6 <HAL_RCC_ClockConfig+0x3da>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008280:	4b15      	ldr	r3, [pc, #84]	; (80082d8 <HAL_RCC_ClockConfig+0x2bc>)
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	220c      	movs	r2, #12
 8008286:	4013      	ands	r3, r2
 8008288:	d1f0      	bne.n	800826c <HAL_RCC_ClockConfig+0x250>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800828a:	4b11      	ldr	r3, [pc, #68]	; (80082d0 <HAL_RCC_ClockConfig+0x2b4>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2201      	movs	r2, #1
 8008290:	4013      	ands	r3, r2
 8008292:	683a      	ldr	r2, [r7, #0]
 8008294:	429a      	cmp	r2, r3
 8008296:	d22a      	bcs.n	80082ee <HAL_RCC_ClockConfig+0x2d2>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008298:	4b0d      	ldr	r3, [pc, #52]	; (80082d0 <HAL_RCC_ClockConfig+0x2b4>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2201      	movs	r2, #1
 800829e:	4393      	bics	r3, r2
 80082a0:	0019      	movs	r1, r3
 80082a2:	4b0b      	ldr	r3, [pc, #44]	; (80082d0 <HAL_RCC_ClockConfig+0x2b4>)
 80082a4:	683a      	ldr	r2, [r7, #0]
 80082a6:	430a      	orrs	r2, r1
 80082a8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80082aa:	f7fe fadb 	bl	8006864 <HAL_GetTick>
 80082ae:	0003      	movs	r3, r0
 80082b0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082b2:	e015      	b.n	80082e0 <HAL_RCC_ClockConfig+0x2c4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082b4:	f7fe fad6 	bl	8006864 <HAL_GetTick>
 80082b8:	0002      	movs	r2, r0
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	4a05      	ldr	r2, [pc, #20]	; (80082d4 <HAL_RCC_ClockConfig+0x2b8>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d90d      	bls.n	80082e0 <HAL_RCC_ClockConfig+0x2c4>
      {
        return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e096      	b.n	80083f6 <HAL_RCC_ClockConfig+0x3da>
 80082c8:	00000367 	.word	0x00000367
 80082cc:	0800b970 	.word	0x0800b970
 80082d0:	40022000 	.word	0x40022000
 80082d4:	00001388 	.word	0x00001388
 80082d8:	40021000 	.word	0x40021000
 80082dc:	0000038b 	.word	0x0000038b
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082e0:	4b47      	ldr	r3, [pc, #284]	; (8008400 <HAL_RCC_ClockConfig+0x3e4>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2201      	movs	r2, #1
 80082e6:	4013      	ands	r3, r2
 80082e8:	683a      	ldr	r2, [r7, #0]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d1e2      	bne.n	80082b4 <HAL_RCC_ClockConfig+0x298>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2204      	movs	r2, #4
 80082f4:	4013      	ands	r3, r2
 80082f6:	d02b      	beq.n	8008350 <HAL_RCC_ClockConfig+0x334>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d01d      	beq.n	800833c <HAL_RCC_ClockConfig+0x320>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	68da      	ldr	r2, [r3, #12]
 8008304:	2380      	movs	r3, #128	; 0x80
 8008306:	00db      	lsls	r3, r3, #3
 8008308:	429a      	cmp	r2, r3
 800830a:	d017      	beq.n	800833c <HAL_RCC_ClockConfig+0x320>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	68da      	ldr	r2, [r3, #12]
 8008310:	23a0      	movs	r3, #160	; 0xa0
 8008312:	00db      	lsls	r3, r3, #3
 8008314:	429a      	cmp	r2, r3
 8008316:	d011      	beq.n	800833c <HAL_RCC_ClockConfig+0x320>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	68da      	ldr	r2, [r3, #12]
 800831c:	23c0      	movs	r3, #192	; 0xc0
 800831e:	00db      	lsls	r3, r3, #3
 8008320:	429a      	cmp	r2, r3
 8008322:	d00b      	beq.n	800833c <HAL_RCC_ClockConfig+0x320>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68da      	ldr	r2, [r3, #12]
 8008328:	23e0      	movs	r3, #224	; 0xe0
 800832a:	00db      	lsls	r3, r3, #3
 800832c:	429a      	cmp	r2, r3
 800832e:	d005      	beq.n	800833c <HAL_RCC_ClockConfig+0x320>
 8008330:	4a34      	ldr	r2, [pc, #208]	; (8008404 <HAL_RCC_ClockConfig+0x3e8>)
 8008332:	4b35      	ldr	r3, [pc, #212]	; (8008408 <HAL_RCC_ClockConfig+0x3ec>)
 8008334:	0011      	movs	r1, r2
 8008336:	0018      	movs	r0, r3
 8008338:	f7fd f9a8 	bl	800568c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800833c:	4b33      	ldr	r3, [pc, #204]	; (800840c <HAL_RCC_ClockConfig+0x3f0>)
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	4a33      	ldr	r2, [pc, #204]	; (8008410 <HAL_RCC_ClockConfig+0x3f4>)
 8008342:	4013      	ands	r3, r2
 8008344:	0019      	movs	r1, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68da      	ldr	r2, [r3, #12]
 800834a:	4b30      	ldr	r3, [pc, #192]	; (800840c <HAL_RCC_ClockConfig+0x3f0>)
 800834c:	430a      	orrs	r2, r1
 800834e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2208      	movs	r2, #8
 8008356:	4013      	ands	r3, r2
 8008358:	d02d      	beq.n	80083b6 <HAL_RCC_ClockConfig+0x39a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d01e      	beq.n	80083a0 <HAL_RCC_ClockConfig+0x384>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	691a      	ldr	r2, [r3, #16]
 8008366:	2380      	movs	r3, #128	; 0x80
 8008368:	00db      	lsls	r3, r3, #3
 800836a:	429a      	cmp	r2, r3
 800836c:	d018      	beq.n	80083a0 <HAL_RCC_ClockConfig+0x384>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	691a      	ldr	r2, [r3, #16]
 8008372:	23a0      	movs	r3, #160	; 0xa0
 8008374:	00db      	lsls	r3, r3, #3
 8008376:	429a      	cmp	r2, r3
 8008378:	d012      	beq.n	80083a0 <HAL_RCC_ClockConfig+0x384>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	691a      	ldr	r2, [r3, #16]
 800837e:	23c0      	movs	r3, #192	; 0xc0
 8008380:	00db      	lsls	r3, r3, #3
 8008382:	429a      	cmp	r2, r3
 8008384:	d00c      	beq.n	80083a0 <HAL_RCC_ClockConfig+0x384>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	691a      	ldr	r2, [r3, #16]
 800838a:	23e0      	movs	r3, #224	; 0xe0
 800838c:	00db      	lsls	r3, r3, #3
 800838e:	429a      	cmp	r2, r3
 8008390:	d006      	beq.n	80083a0 <HAL_RCC_ClockConfig+0x384>
 8008392:	23ff      	movs	r3, #255	; 0xff
 8008394:	009a      	lsls	r2, r3, #2
 8008396:	4b1c      	ldr	r3, [pc, #112]	; (8008408 <HAL_RCC_ClockConfig+0x3ec>)
 8008398:	0011      	movs	r1, r2
 800839a:	0018      	movs	r0, r3
 800839c:	f7fd f976 	bl	800568c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80083a0:	4b1a      	ldr	r3, [pc, #104]	; (800840c <HAL_RCC_ClockConfig+0x3f0>)
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	4a1b      	ldr	r2, [pc, #108]	; (8008414 <HAL_RCC_ClockConfig+0x3f8>)
 80083a6:	4013      	ands	r3, r2
 80083a8:	0019      	movs	r1, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	00da      	lsls	r2, r3, #3
 80083b0:	4b16      	ldr	r3, [pc, #88]	; (800840c <HAL_RCC_ClockConfig+0x3f0>)
 80083b2:	430a      	orrs	r2, r1
 80083b4:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80083b6:	f000 f835 	bl	8008424 <HAL_RCC_GetSysClockFreq>
 80083ba:	0001      	movs	r1, r0
 80083bc:	4b13      	ldr	r3, [pc, #76]	; (800840c <HAL_RCC_ClockConfig+0x3f0>)
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	091b      	lsrs	r3, r3, #4
 80083c2:	220f      	movs	r2, #15
 80083c4:	4013      	ands	r3, r2
 80083c6:	4a14      	ldr	r2, [pc, #80]	; (8008418 <HAL_RCC_ClockConfig+0x3fc>)
 80083c8:	5cd3      	ldrb	r3, [r2, r3]
 80083ca:	000a      	movs	r2, r1
 80083cc:	40da      	lsrs	r2, r3
 80083ce:	4b13      	ldr	r3, [pc, #76]	; (800841c <HAL_RCC_ClockConfig+0x400>)
 80083d0:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80083d2:	4b13      	ldr	r3, [pc, #76]	; (8008420 <HAL_RCC_ClockConfig+0x404>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	250b      	movs	r5, #11
 80083d8:	197c      	adds	r4, r7, r5
 80083da:	0018      	movs	r0, r3
 80083dc:	f7fe f9fc 	bl	80067d8 <HAL_InitTick>
 80083e0:	0003      	movs	r3, r0
 80083e2:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80083e4:	197b      	adds	r3, r7, r5
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d003      	beq.n	80083f4 <HAL_RCC_ClockConfig+0x3d8>
  {
    return status;
 80083ec:	230b      	movs	r3, #11
 80083ee:	18fb      	adds	r3, r7, r3
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	e000      	b.n	80083f6 <HAL_RCC_ClockConfig+0x3da>
  }

  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	0018      	movs	r0, r3
 80083f8:	46bd      	mov	sp, r7
 80083fa:	b004      	add	sp, #16
 80083fc:	bdb0      	pop	{r4, r5, r7, pc}
 80083fe:	46c0      	nop			; (mov r8, r8)
 8008400:	40022000 	.word	0x40022000
 8008404:	000003f5 	.word	0x000003f5
 8008408:	0800b970 	.word	0x0800b970
 800840c:	40021000 	.word	0x40021000
 8008410:	fffff8ff 	.word	0xfffff8ff
 8008414:	ffffc7ff 	.word	0xffffc7ff
 8008418:	0800cd44 	.word	0x0800cd44
 800841c:	20000048 	.word	0x20000048
 8008420:	2000004c 	.word	0x2000004c

08008424 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008426:	b08f      	sub	sp, #60	; 0x3c
 8008428:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800842a:	4b4a      	ldr	r3, [pc, #296]	; (8008554 <HAL_RCC_GetSysClockFreq+0x130>)
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008432:	230c      	movs	r3, #12
 8008434:	4013      	ands	r3, r2
 8008436:	2b08      	cmp	r3, #8
 8008438:	d00f      	beq.n	800845a <HAL_RCC_GetSysClockFreq+0x36>
 800843a:	2b0c      	cmp	r3, #12
 800843c:	d010      	beq.n	8008460 <HAL_RCC_GetSysClockFreq+0x3c>
 800843e:	2b04      	cmp	r3, #4
 8008440:	d000      	beq.n	8008444 <HAL_RCC_GetSysClockFreq+0x20>
 8008442:	e073      	b.n	800852c <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008444:	4b43      	ldr	r3, [pc, #268]	; (8008554 <HAL_RCC_GetSysClockFreq+0x130>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2210      	movs	r2, #16
 800844a:	4013      	ands	r3, r2
 800844c:	d002      	beq.n	8008454 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800844e:	4b42      	ldr	r3, [pc, #264]	; (8008558 <HAL_RCC_GetSysClockFreq+0x134>)
 8008450:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8008452:	e079      	b.n	8008548 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8008454:	4b41      	ldr	r3, [pc, #260]	; (800855c <HAL_RCC_GetSysClockFreq+0x138>)
 8008456:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008458:	e076      	b.n	8008548 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800845a:	4b41      	ldr	r3, [pc, #260]	; (8008560 <HAL_RCC_GetSysClockFreq+0x13c>)
 800845c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800845e:	e073      	b.n	8008548 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8008460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008462:	0c9a      	lsrs	r2, r3, #18
 8008464:	230f      	movs	r3, #15
 8008466:	401a      	ands	r2, r3
 8008468:	4b3e      	ldr	r3, [pc, #248]	; (8008564 <HAL_RCC_GetSysClockFreq+0x140>)
 800846a:	5c9b      	ldrb	r3, [r3, r2]
 800846c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800846e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008470:	0d9a      	lsrs	r2, r3, #22
 8008472:	2303      	movs	r3, #3
 8008474:	4013      	ands	r3, r2
 8008476:	3301      	adds	r3, #1
 8008478:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800847a:	4b36      	ldr	r3, [pc, #216]	; (8008554 <HAL_RCC_GetSysClockFreq+0x130>)
 800847c:	68da      	ldr	r2, [r3, #12]
 800847e:	2380      	movs	r3, #128	; 0x80
 8008480:	025b      	lsls	r3, r3, #9
 8008482:	4013      	ands	r3, r2
 8008484:	d019      	beq.n	80084ba <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008488:	61bb      	str	r3, [r7, #24]
 800848a:	2300      	movs	r3, #0
 800848c:	61fb      	str	r3, [r7, #28]
 800848e:	4a34      	ldr	r2, [pc, #208]	; (8008560 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008490:	2300      	movs	r3, #0
 8008492:	69b8      	ldr	r0, [r7, #24]
 8008494:	69f9      	ldr	r1, [r7, #28]
 8008496:	f7f7 fff1 	bl	800047c <__aeabi_lmul>
 800849a:	0003      	movs	r3, r0
 800849c:	000c      	movs	r4, r1
 800849e:	0018      	movs	r0, r3
 80084a0:	0021      	movs	r1, r4
 80084a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a4:	613b      	str	r3, [r7, #16]
 80084a6:	2300      	movs	r3, #0
 80084a8:	617b      	str	r3, [r7, #20]
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	f7f7 ffc5 	bl	800043c <__aeabi_uldivmod>
 80084b2:	0003      	movs	r3, r0
 80084b4:	000c      	movs	r4, r1
 80084b6:	637b      	str	r3, [r7, #52]	; 0x34
 80084b8:	e035      	b.n	8008526 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80084ba:	4b26      	ldr	r3, [pc, #152]	; (8008554 <HAL_RCC_GetSysClockFreq+0x130>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2210      	movs	r2, #16
 80084c0:	4013      	ands	r3, r2
 80084c2:	d019      	beq.n	80084f8 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80084c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c6:	60bb      	str	r3, [r7, #8]
 80084c8:	2300      	movs	r3, #0
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	4a22      	ldr	r2, [pc, #136]	; (8008558 <HAL_RCC_GetSysClockFreq+0x134>)
 80084ce:	2300      	movs	r3, #0
 80084d0:	68b8      	ldr	r0, [r7, #8]
 80084d2:	68f9      	ldr	r1, [r7, #12]
 80084d4:	f7f7 ffd2 	bl	800047c <__aeabi_lmul>
 80084d8:	0003      	movs	r3, r0
 80084da:	000c      	movs	r4, r1
 80084dc:	0018      	movs	r0, r3
 80084de:	0021      	movs	r1, r4
 80084e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e2:	603b      	str	r3, [r7, #0]
 80084e4:	2300      	movs	r3, #0
 80084e6:	607b      	str	r3, [r7, #4]
 80084e8:	683a      	ldr	r2, [r7, #0]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f7f7 ffa6 	bl	800043c <__aeabi_uldivmod>
 80084f0:	0003      	movs	r3, r0
 80084f2:	000c      	movs	r4, r1
 80084f4:	637b      	str	r3, [r7, #52]	; 0x34
 80084f6:	e016      	b.n	8008526 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80084f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fa:	0018      	movs	r0, r3
 80084fc:	2300      	movs	r3, #0
 80084fe:	0019      	movs	r1, r3
 8008500:	4a16      	ldr	r2, [pc, #88]	; (800855c <HAL_RCC_GetSysClockFreq+0x138>)
 8008502:	2300      	movs	r3, #0
 8008504:	f7f7 ffba 	bl	800047c <__aeabi_lmul>
 8008508:	0003      	movs	r3, r0
 800850a:	000c      	movs	r4, r1
 800850c:	0018      	movs	r0, r3
 800850e:	0021      	movs	r1, r4
 8008510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008512:	001d      	movs	r5, r3
 8008514:	2300      	movs	r3, #0
 8008516:	001e      	movs	r6, r3
 8008518:	002a      	movs	r2, r5
 800851a:	0033      	movs	r3, r6
 800851c:	f7f7 ff8e 	bl	800043c <__aeabi_uldivmod>
 8008520:	0003      	movs	r3, r0
 8008522:	000c      	movs	r4, r1
 8008524:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8008526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008528:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800852a:	e00d      	b.n	8008548 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800852c:	4b09      	ldr	r3, [pc, #36]	; (8008554 <HAL_RCC_GetSysClockFreq+0x130>)
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	0b5b      	lsrs	r3, r3, #13
 8008532:	2207      	movs	r2, #7
 8008534:	4013      	ands	r3, r2
 8008536:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8008538:	6a3b      	ldr	r3, [r7, #32]
 800853a:	3301      	adds	r3, #1
 800853c:	2280      	movs	r2, #128	; 0x80
 800853e:	0212      	lsls	r2, r2, #8
 8008540:	409a      	lsls	r2, r3
 8008542:	0013      	movs	r3, r2
 8008544:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008546:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8008548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800854a:	0018      	movs	r0, r3
 800854c:	46bd      	mov	sp, r7
 800854e:	b00f      	add	sp, #60	; 0x3c
 8008550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008552:	46c0      	nop			; (mov r8, r8)
 8008554:	40021000 	.word	0x40021000
 8008558:	003d0900 	.word	0x003d0900
 800855c:	00f42400 	.word	0x00f42400
 8008560:	007a1200 	.word	0x007a1200
 8008564:	0800cd5c 	.word	0x0800cd5c

08008568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800856c:	4b02      	ldr	r3, [pc, #8]	; (8008578 <HAL_RCC_GetHCLKFreq+0x10>)
 800856e:	681b      	ldr	r3, [r3, #0]
}
 8008570:	0018      	movs	r0, r3
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	46c0      	nop			; (mov r8, r8)
 8008578:	20000048 	.word	0x20000048

0800857c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008580:	f7ff fff2 	bl	8008568 <HAL_RCC_GetHCLKFreq>
 8008584:	0001      	movs	r1, r0
 8008586:	4b06      	ldr	r3, [pc, #24]	; (80085a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	0a1b      	lsrs	r3, r3, #8
 800858c:	2207      	movs	r2, #7
 800858e:	4013      	ands	r3, r2
 8008590:	4a04      	ldr	r2, [pc, #16]	; (80085a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008592:	5cd3      	ldrb	r3, [r2, r3]
 8008594:	40d9      	lsrs	r1, r3
 8008596:	000b      	movs	r3, r1
}
 8008598:	0018      	movs	r0, r3
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	46c0      	nop			; (mov r8, r8)
 80085a0:	40021000 	.word	0x40021000
 80085a4:	0800cd54 	.word	0x0800cd54

080085a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80085ac:	f7ff ffdc 	bl	8008568 <HAL_RCC_GetHCLKFreq>
 80085b0:	0001      	movs	r1, r0
 80085b2:	4b06      	ldr	r3, [pc, #24]	; (80085cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	0adb      	lsrs	r3, r3, #11
 80085b8:	2207      	movs	r2, #7
 80085ba:	4013      	ands	r3, r2
 80085bc:	4a04      	ldr	r2, [pc, #16]	; (80085d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80085be:	5cd3      	ldrb	r3, [r2, r3]
 80085c0:	40d9      	lsrs	r1, r3
 80085c2:	000b      	movs	r3, r1
}
 80085c4:	0018      	movs	r0, r3
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	46c0      	nop			; (mov r8, r8)
 80085cc:	40021000 	.word	0x40021000
 80085d0:	0800cd54 	.word	0x0800cd54

080085d4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80085dc:	2317      	movs	r3, #23
 80085de:	18fb      	adds	r3, r7, r3
 80085e0:	2200      	movs	r2, #0
 80085e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a90      	ldr	r2, [pc, #576]	; (800882c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d904      	bls.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80085ee:	4b90      	ldr	r3, [pc, #576]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80085f0:	2168      	movs	r1, #104	; 0x68
 80085f2:	0018      	movs	r0, r3
 80085f4:	f7fd f84a 	bl	800568c <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2220      	movs	r2, #32
 80085fe:	4013      	ands	r3, r2
 8008600:	d106      	bne.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x3c>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	2380      	movs	r3, #128	; 0x80
 8008608:	011b      	lsls	r3, r3, #4
 800860a:	4013      	ands	r3, r2
 800860c:	d100      	bne.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800860e:	e14c      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
#endif /* LCD */
     )
  {
    /* check for RTC Parameters used to output RTCCLK */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2220      	movs	r2, #32
 8008616:	4013      	ands	r3, r2
 8008618:	d02c      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d028      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	685a      	ldr	r2, [r3, #4]
 8008626:	2380      	movs	r3, #128	; 0x80
 8008628:	025b      	lsls	r3, r3, #9
 800862a:	429a      	cmp	r2, r3
 800862c:	d022      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	2380      	movs	r3, #128	; 0x80
 8008634:	029b      	lsls	r3, r3, #10
 8008636:	429a      	cmp	r2, r3
 8008638:	d01c      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685a      	ldr	r2, [r3, #4]
 800863e:	23c0      	movs	r3, #192	; 0xc0
 8008640:	029b      	lsls	r3, r3, #10
 8008642:	429a      	cmp	r2, r3
 8008644:	d016      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	685a      	ldr	r2, [r3, #4]
 800864a:	2398      	movs	r3, #152	; 0x98
 800864c:	035b      	lsls	r3, r3, #13
 800864e:	429a      	cmp	r2, r3
 8008650:	d010      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685a      	ldr	r2, [r3, #4]
 8008656:	238c      	movs	r3, #140	; 0x8c
 8008658:	039b      	lsls	r3, r3, #14
 800865a:	429a      	cmp	r2, r3
 800865c:	d00a      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685a      	ldr	r2, [r3, #4]
 8008662:	23cc      	movs	r3, #204	; 0xcc
 8008664:	039b      	lsls	r3, r3, #14
 8008666:	429a      	cmp	r2, r3
 8008668:	d004      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800866a:	4b71      	ldr	r3, [pc, #452]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800866c:	2174      	movs	r1, #116	; 0x74
 800866e:	0018      	movs	r0, r3
 8008670:	f7fd f80c 	bl	800568c <assert_failed>
    }

#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	2380      	movs	r3, #128	; 0x80
 800867a:	011b      	lsls	r3, r3, #4
 800867c:	4013      	ands	r3, r2
 800867e:	d02c      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d028      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	689a      	ldr	r2, [r3, #8]
 800868c:	2380      	movs	r3, #128	; 0x80
 800868e:	025b      	lsls	r3, r3, #9
 8008690:	429a      	cmp	r2, r3
 8008692:	d022      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	689a      	ldr	r2, [r3, #8]
 8008698:	2380      	movs	r3, #128	; 0x80
 800869a:	029b      	lsls	r3, r3, #10
 800869c:	429a      	cmp	r2, r3
 800869e:	d01c      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x106>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	689a      	ldr	r2, [r3, #8]
 80086a4:	23c0      	movs	r3, #192	; 0xc0
 80086a6:	029b      	lsls	r3, r3, #10
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d016      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x106>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	689a      	ldr	r2, [r3, #8]
 80086b0:	2398      	movs	r3, #152	; 0x98
 80086b2:	035b      	lsls	r3, r3, #13
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d010      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x106>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	689a      	ldr	r2, [r3, #8]
 80086bc:	238c      	movs	r3, #140	; 0x8c
 80086be:	039b      	lsls	r3, r3, #14
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d00a      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x106>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	689a      	ldr	r2, [r3, #8]
 80086c8:	23cc      	movs	r3, #204	; 0xcc
 80086ca:	039b      	lsls	r3, r3, #14
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d004      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x106>
 80086d0:	4b57      	ldr	r3, [pc, #348]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80086d2:	217a      	movs	r1, #122	; 0x7a
 80086d4:	0018      	movs	r0, r3
 80086d6:	f7fc ffd9 	bl	800568c <assert_failed>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086da:	4b56      	ldr	r3, [pc, #344]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80086dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086de:	2380      	movs	r3, #128	; 0x80
 80086e0:	055b      	lsls	r3, r3, #21
 80086e2:	4013      	ands	r3, r2
 80086e4:	d10a      	bne.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x128>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086e6:	4b53      	ldr	r3, [pc, #332]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80086e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086ea:	4b52      	ldr	r3, [pc, #328]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80086ec:	2180      	movs	r1, #128	; 0x80
 80086ee:	0549      	lsls	r1, r1, #21
 80086f0:	430a      	orrs	r2, r1
 80086f2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80086f4:	2317      	movs	r3, #23
 80086f6:	18fb      	adds	r3, r7, r3
 80086f8:	2201      	movs	r2, #1
 80086fa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086fc:	4b4e      	ldr	r3, [pc, #312]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	2380      	movs	r3, #128	; 0x80
 8008702:	005b      	lsls	r3, r3, #1
 8008704:	4013      	ands	r3, r2
 8008706:	d11a      	bne.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x16a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008708:	4b4b      	ldr	r3, [pc, #300]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	4b4a      	ldr	r3, [pc, #296]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800870e:	2180      	movs	r1, #128	; 0x80
 8008710:	0049      	lsls	r1, r1, #1
 8008712:	430a      	orrs	r2, r1
 8008714:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008716:	f7fe f8a5 	bl	8006864 <HAL_GetTick>
 800871a:	0003      	movs	r3, r0
 800871c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800871e:	e008      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x15e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008720:	f7fe f8a0 	bl	8006864 <HAL_GetTick>
 8008724:	0002      	movs	r2, r0
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	2b64      	cmp	r3, #100	; 0x64
 800872c:	d901      	bls.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x15e>
        {
          return HAL_TIMEOUT;
 800872e:	2303      	movs	r3, #3
 8008730:	e1c6      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008732:	4b41      	ldr	r3, [pc, #260]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	2380      	movs	r3, #128	; 0x80
 8008738:	005b      	lsls	r3, r3, #1
 800873a:	4013      	ands	r3, r2
 800873c:	d0f0      	beq.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x14c>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800873e:	4b3d      	ldr	r3, [pc, #244]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	23c0      	movs	r3, #192	; 0xc0
 8008744:	039b      	lsls	r3, r3, #14
 8008746:	4013      	ands	r3, r2
 8008748:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	685a      	ldr	r2, [r3, #4]
 800874e:	23c0      	movs	r3, #192	; 0xc0
 8008750:	039b      	lsls	r3, r3, #14
 8008752:	4013      	ands	r3, r2
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	429a      	cmp	r2, r3
 8008758:	d107      	bne.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x196>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	689a      	ldr	r2, [r3, #8]
 800875e:	23c0      	movs	r3, #192	; 0xc0
 8008760:	039b      	lsls	r3, r3, #14
 8008762:	4013      	ands	r3, r2
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	429a      	cmp	r2, r3
 8008768:	d013      	beq.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x1be>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	685a      	ldr	r2, [r3, #4]
 800876e:	23c0      	movs	r3, #192	; 0xc0
 8008770:	029b      	lsls	r3, r3, #10
 8008772:	401a      	ands	r2, r3
 8008774:	23c0      	movs	r3, #192	; 0xc0
 8008776:	029b      	lsls	r3, r3, #10
 8008778:	429a      	cmp	r2, r3
 800877a:	d10a      	bne.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x1be>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800877c:	4b2d      	ldr	r3, [pc, #180]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	2380      	movs	r3, #128	; 0x80
 8008782:	029b      	lsls	r3, r3, #10
 8008784:	401a      	ands	r2, r3
 8008786:	2380      	movs	r3, #128	; 0x80
 8008788:	029b      	lsls	r3, r3, #10
 800878a:	429a      	cmp	r2, r3
 800878c:	d101      	bne.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e196      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8008792:	4b28      	ldr	r3, [pc, #160]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008794:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008796:	23c0      	movs	r3, #192	; 0xc0
 8008798:	029b      	lsls	r3, r3, #10
 800879a:	4013      	ands	r3, r2
 800879c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d057      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x280>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685a      	ldr	r2, [r3, #4]
 80087a8:	23c0      	movs	r3, #192	; 0xc0
 80087aa:	029b      	lsls	r3, r3, #10
 80087ac:	4013      	ands	r3, r2
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d004      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2220      	movs	r2, #32
 80087ba:	4013      	ands	r3, r2
 80087bc:	d10d      	bne.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x206>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	689a      	ldr	r2, [r3, #8]
 80087c2:	23c0      	movs	r3, #192	; 0xc0
 80087c4:	029b      	lsls	r3, r3, #10
 80087c6:	4013      	ands	r3, r2
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d042      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x280>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	2380      	movs	r3, #128	; 0x80
 80087d4:	011b      	lsls	r3, r3, #4
 80087d6:	4013      	ands	r3, r2
 80087d8:	d03c      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x280>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80087da:	4b16      	ldr	r3, [pc, #88]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80087dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087de:	4a17      	ldr	r2, [pc, #92]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80087e0:	4013      	ands	r3, r2
 80087e2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80087e4:	4b13      	ldr	r3, [pc, #76]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80087e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80087e8:	4b12      	ldr	r3, [pc, #72]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80087ea:	2180      	movs	r1, #128	; 0x80
 80087ec:	0309      	lsls	r1, r1, #12
 80087ee:	430a      	orrs	r2, r1
 80087f0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80087f2:	4b10      	ldr	r3, [pc, #64]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80087f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80087f6:	4b0f      	ldr	r3, [pc, #60]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80087f8:	4911      	ldr	r1, [pc, #68]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80087fa:	400a      	ands	r2, r1
 80087fc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80087fe:	4b0d      	ldr	r3, [pc, #52]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	2380      	movs	r3, #128	; 0x80
 8008808:	005b      	lsls	r3, r3, #1
 800880a:	4013      	ands	r3, r2
 800880c:	d022      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x280>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800880e:	f7fe f829 	bl	8006864 <HAL_GetTick>
 8008812:	0003      	movs	r3, r0
 8008814:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008816:	e017      	b.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x274>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008818:	f7fe f824 	bl	8006864 <HAL_GetTick>
 800881c:	0002      	movs	r2, r0
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	4a08      	ldr	r2, [pc, #32]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d90f      	bls.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x274>
          {
            return HAL_TIMEOUT;
 8008828:	2303      	movs	r3, #3
 800882a:	e149      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800882c:	000009ff 	.word	0x000009ff
 8008830:	0800b9a8 	.word	0x0800b9a8
 8008834:	40021000 	.word	0x40021000
 8008838:	40007000 	.word	0x40007000
 800883c:	fffcffff 	.word	0xfffcffff
 8008840:	fff7ffff 	.word	0xfff7ffff
 8008844:	00001388 	.word	0x00001388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008848:	4b9f      	ldr	r3, [pc, #636]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 800884a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800884c:	2380      	movs	r3, #128	; 0x80
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	4013      	ands	r3, r2
 8008852:	d0e1      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x244>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	685a      	ldr	r2, [r3, #4]
 8008858:	23c0      	movs	r3, #192	; 0xc0
 800885a:	029b      	lsls	r3, r3, #10
 800885c:	401a      	ands	r2, r3
 800885e:	23c0      	movs	r3, #192	; 0xc0
 8008860:	029b      	lsls	r3, r3, #10
 8008862:	429a      	cmp	r2, r3
 8008864:	d10c      	bne.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8008866:	4b98      	ldr	r3, [pc, #608]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a98      	ldr	r2, [pc, #608]	; (8008acc <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800886c:	4013      	ands	r3, r2
 800886e:	0019      	movs	r1, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685a      	ldr	r2, [r3, #4]
 8008874:	23c0      	movs	r3, #192	; 0xc0
 8008876:	039b      	lsls	r3, r3, #14
 8008878:	401a      	ands	r2, r3
 800887a:	4b93      	ldr	r3, [pc, #588]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 800887c:	430a      	orrs	r2, r1
 800887e:	601a      	str	r2, [r3, #0]
 8008880:	4b91      	ldr	r3, [pc, #580]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8008882:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	685a      	ldr	r2, [r3, #4]
 8008888:	23c0      	movs	r3, #192	; 0xc0
 800888a:	029b      	lsls	r3, r3, #10
 800888c:	401a      	ands	r2, r3
 800888e:	4b8e      	ldr	r3, [pc, #568]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8008890:	430a      	orrs	r2, r1
 8008892:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008894:	2317      	movs	r3, #23
 8008896:	18fb      	adds	r3, r7, r3
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d105      	bne.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800889e:	4b8a      	ldr	r3, [pc, #552]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 80088a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088a2:	4b89      	ldr	r3, [pc, #548]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 80088a4:	498a      	ldr	r1, [pc, #552]	; (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80088a6:	400a      	ands	r2, r1
 80088a8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2201      	movs	r2, #1
 80088b0:	4013      	ands	r3, r2
 80088b2:	d01e      	beq.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d010      	beq.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d00c      	beq.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	2b03      	cmp	r3, #3
 80088ca:	d008      	beq.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	d004      	beq.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80088d4:	4b7f      	ldr	r3, [pc, #508]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x500>)
 80088d6:	21dd      	movs	r1, #221	; 0xdd
 80088d8:	0018      	movs	r0, r3
 80088da:	f7fc fed7 	bl	800568c <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80088de:	4b7a      	ldr	r3, [pc, #488]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 80088e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088e2:	2203      	movs	r2, #3
 80088e4:	4393      	bics	r3, r2
 80088e6:	0019      	movs	r1, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	68da      	ldr	r2, [r3, #12]
 80088ec:	4b76      	ldr	r3, [pc, #472]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 80088ee:	430a      	orrs	r2, r1
 80088f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2202      	movs	r2, #2
 80088f8:	4013      	ands	r3, r2
 80088fa:	d01e      	beq.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d010      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	2b04      	cmp	r3, #4
 800890a:	d00c      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x352>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	2b0c      	cmp	r3, #12
 8008912:	d008      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	2b08      	cmp	r3, #8
 800891a:	d004      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x352>
 800891c:	4b6d      	ldr	r3, [pc, #436]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x500>)
 800891e:	21e8      	movs	r1, #232	; 0xe8
 8008920:	0018      	movs	r0, r3
 8008922:	f7fc feb3 	bl	800568c <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008926:	4b68      	ldr	r3, [pc, #416]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8008928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800892a:	220c      	movs	r2, #12
 800892c:	4393      	bics	r3, r2
 800892e:	0019      	movs	r1, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	691a      	ldr	r2, [r3, #16]
 8008934:	4b64      	ldr	r3, [pc, #400]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8008936:	430a      	orrs	r2, r1
 8008938:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2204      	movs	r2, #4
 8008940:	4013      	ands	r3, r2
 8008942:	d024      	beq.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	695b      	ldr	r3, [r3, #20]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d016      	beq.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	695a      	ldr	r2, [r3, #20]
 8008950:	2380      	movs	r3, #128	; 0x80
 8008952:	00db      	lsls	r3, r3, #3
 8008954:	429a      	cmp	r2, r3
 8008956:	d010      	beq.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	695a      	ldr	r2, [r3, #20]
 800895c:	23c0      	movs	r3, #192	; 0xc0
 800895e:	011b      	lsls	r3, r3, #4
 8008960:	429a      	cmp	r2, r3
 8008962:	d00a      	beq.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	695a      	ldr	r2, [r3, #20]
 8008968:	2380      	movs	r3, #128	; 0x80
 800896a:	011b      	lsls	r3, r3, #4
 800896c:	429a      	cmp	r2, r3
 800896e:	d004      	beq.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8008970:	4b58      	ldr	r3, [pc, #352]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x500>)
 8008972:	21f2      	movs	r1, #242	; 0xf2
 8008974:	0018      	movs	r0, r3
 8008976:	f7fc fe89 	bl	800568c <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800897a:	4b53      	ldr	r3, [pc, #332]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 800897c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800897e:	4a56      	ldr	r2, [pc, #344]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008980:	4013      	ands	r3, r2
 8008982:	0019      	movs	r1, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	695a      	ldr	r2, [r3, #20]
 8008988:	4b4f      	ldr	r3, [pc, #316]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 800898a:	430a      	orrs	r2, r1
 800898c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2208      	movs	r2, #8
 8008994:	4013      	ands	r3, r2
 8008996:	d01e      	beq.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x402>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d010      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	699a      	ldr	r2, [r3, #24]
 80089a4:	2380      	movs	r3, #128	; 0x80
 80089a6:	015b      	lsls	r3, r3, #5
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d00a      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	699a      	ldr	r2, [r3, #24]
 80089b0:	2380      	movs	r3, #128	; 0x80
 80089b2:	019b      	lsls	r3, r3, #6
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d004      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 80089b8:	4b46      	ldr	r3, [pc, #280]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x500>)
 80089ba:	21fc      	movs	r1, #252	; 0xfc
 80089bc:	0018      	movs	r0, r3
 80089be:	f7fc fe65 	bl	800568c <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80089c2:	4b41      	ldr	r3, [pc, #260]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 80089c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089c6:	4a45      	ldr	r2, [pc, #276]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x508>)
 80089c8:	4013      	ands	r3, r2
 80089ca:	0019      	movs	r1, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	699a      	ldr	r2, [r3, #24]
 80089d0:	4b3d      	ldr	r3, [pc, #244]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 80089d2:	430a      	orrs	r2, r1
 80089d4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	2380      	movs	r3, #128	; 0x80
 80089dc:	005b      	lsls	r3, r3, #1
 80089de:	4013      	ands	r3, r2
 80089e0:	d021      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	69db      	ldr	r3, [r3, #28]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d013      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	69da      	ldr	r2, [r3, #28]
 80089ee:	2380      	movs	r3, #128	; 0x80
 80089f0:	025b      	lsls	r3, r3, #9
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d00d      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	69da      	ldr	r2, [r3, #28]
 80089fa:	2380      	movs	r3, #128	; 0x80
 80089fc:	029b      	lsls	r3, r3, #10
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d007      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8008a02:	2308      	movs	r3, #8
 8008a04:	33ff      	adds	r3, #255	; 0xff
 8008a06:	001a      	movs	r2, r3
 8008a08:	4b32      	ldr	r3, [pc, #200]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x500>)
 8008a0a:	0011      	movs	r1, r2
 8008a0c:	0018      	movs	r0, r3
 8008a0e:	f7fc fe3d 	bl	800568c <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008a12:	4b2d      	ldr	r3, [pc, #180]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8008a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a16:	4a32      	ldr	r2, [pc, #200]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008a18:	4013      	ands	r3, r2
 8008a1a:	0019      	movs	r1, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	69da      	ldr	r2, [r3, #28]
 8008a20:	4b29      	ldr	r3, [pc, #164]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8008a22:	430a      	orrs	r2, r1
 8008a24:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2240      	movs	r2, #64	; 0x40
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	d01a      	beq.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x492>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a34:	2380      	movs	r3, #128	; 0x80
 8008a36:	04db      	lsls	r3, r3, #19
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d00a      	beq.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d006      	beq.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8008a44:	2389      	movs	r3, #137	; 0x89
 8008a46:	005a      	lsls	r2, r3, #1
 8008a48:	4b22      	ldr	r3, [pc, #136]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x500>)
 8008a4a:	0011      	movs	r1, r2
 8008a4c:	0018      	movs	r0, r3
 8008a4e:	f7fc fe1d 	bl	800568c <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a52:	4b1d      	ldr	r3, [pc, #116]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8008a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a56:	4a23      	ldr	r2, [pc, #140]	; (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8008a58:	4013      	ands	r3, r2
 8008a5a:	0019      	movs	r1, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a60:	4b19      	ldr	r3, [pc, #100]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8008a62:	430a      	orrs	r2, r1
 8008a64:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2280      	movs	r2, #128	; 0x80
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	d026      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x4ea>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a1b      	ldr	r3, [r3, #32]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d018      	beq.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x4d6>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6a1a      	ldr	r2, [r3, #32]
 8008a7c:	2380      	movs	r3, #128	; 0x80
 8008a7e:	02db      	lsls	r3, r3, #11
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d012      	beq.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x4d6>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a1a      	ldr	r2, [r3, #32]
 8008a88:	2380      	movs	r3, #128	; 0x80
 8008a8a:	031b      	lsls	r3, r3, #12
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d00c      	beq.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x4d6>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a1a      	ldr	r2, [r3, #32]
 8008a94:	23c0      	movs	r3, #192	; 0xc0
 8008a96:	031b      	lsls	r3, r3, #12
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d006      	beq.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x4d6>
 8008a9c:	238d      	movs	r3, #141	; 0x8d
 8008a9e:	005a      	lsls	r2, r3, #1
 8008aa0:	4b0c      	ldr	r3, [pc, #48]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x500>)
 8008aa2:	0011      	movs	r1, r2
 8008aa4:	0018      	movs	r0, r3
 8008aa6:	f7fc fdf1 	bl	800568c <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8008aaa:	4b07      	ldr	r3, [pc, #28]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8008aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aae:	4a0e      	ldr	r2, [pc, #56]	; (8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	0019      	movs	r1, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a1a      	ldr	r2, [r3, #32]
 8008ab8:	4b03      	ldr	r3, [pc, #12]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8008aba:	430a      	orrs	r2, r1
 8008abc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	0018      	movs	r0, r3
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	b006      	add	sp, #24
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	40021000 	.word	0x40021000
 8008acc:	ffcfffff 	.word	0xffcfffff
 8008ad0:	efffffff 	.word	0xefffffff
 8008ad4:	0800b9a8 	.word	0x0800b9a8
 8008ad8:	fffff3ff 	.word	0xfffff3ff
 8008adc:	ffffcfff 	.word	0xffffcfff
 8008ae0:	fffcffff 	.word	0xfffcffff
 8008ae4:	fbffffff 	.word	0xfbffffff
 8008ae8:	fff3ffff 	.word	0xfff3ffff

08008aec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d101      	bne.n	8008afe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e1a4      	b.n	8008e48 <HAL_SPI_Init+0x35c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a7f      	ldr	r2, [pc, #508]	; (8008d00 <HAL_SPI_Init+0x214>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d00b      	beq.n	8008b20 <HAL_SPI_Init+0x34>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a7d      	ldr	r2, [pc, #500]	; (8008d04 <HAL_SPI_Init+0x218>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d006      	beq.n	8008b20 <HAL_SPI_Init+0x34>
 8008b12:	23a5      	movs	r3, #165	; 0xa5
 8008b14:	005a      	lsls	r2, r3, #1
 8008b16:	4b7c      	ldr	r3, [pc, #496]	; (8008d08 <HAL_SPI_Init+0x21c>)
 8008b18:	0011      	movs	r1, r2
 8008b1a:	0018      	movs	r0, r3
 8008b1c:	f7fc fdb6 	bl	800568c <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00d      	beq.n	8008b44 <HAL_SPI_Init+0x58>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	2382      	movs	r3, #130	; 0x82
 8008b2e:	005b      	lsls	r3, r3, #1
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d007      	beq.n	8008b44 <HAL_SPI_Init+0x58>
 8008b34:	234c      	movs	r3, #76	; 0x4c
 8008b36:	33ff      	adds	r3, #255	; 0xff
 8008b38:	001a      	movs	r2, r3
 8008b3a:	4b73      	ldr	r3, [pc, #460]	; (8008d08 <HAL_SPI_Init+0x21c>)
 8008b3c:	0011      	movs	r1, r2
 8008b3e:	0018      	movs	r0, r3
 8008b40:	f7fc fda4 	bl	800568c <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d012      	beq.n	8008b72 <HAL_SPI_Init+0x86>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	689a      	ldr	r2, [r3, #8]
 8008b50:	2380      	movs	r3, #128	; 0x80
 8008b52:	00db      	lsls	r3, r3, #3
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d00c      	beq.n	8008b72 <HAL_SPI_Init+0x86>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	689a      	ldr	r2, [r3, #8]
 8008b5c:	2380      	movs	r3, #128	; 0x80
 8008b5e:	021b      	lsls	r3, r3, #8
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d006      	beq.n	8008b72 <HAL_SPI_Init+0x86>
 8008b64:	23a6      	movs	r3, #166	; 0xa6
 8008b66:	005a      	lsls	r2, r3, #1
 8008b68:	4b67      	ldr	r3, [pc, #412]	; (8008d08 <HAL_SPI_Init+0x21c>)
 8008b6a:	0011      	movs	r1, r2
 8008b6c:	0018      	movs	r0, r3
 8008b6e:	f7fc fd8d 	bl	800568c <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	68da      	ldr	r2, [r3, #12]
 8008b76:	2380      	movs	r3, #128	; 0x80
 8008b78:	011b      	lsls	r3, r3, #4
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d00b      	beq.n	8008b96 <HAL_SPI_Init+0xaa>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d007      	beq.n	8008b96 <HAL_SPI_Init+0xaa>
 8008b86:	234e      	movs	r3, #78	; 0x4e
 8008b88:	33ff      	adds	r3, #255	; 0xff
 8008b8a:	001a      	movs	r2, r3
 8008b8c:	4b5e      	ldr	r3, [pc, #376]	; (8008d08 <HAL_SPI_Init+0x21c>)
 8008b8e:	0011      	movs	r1, r2
 8008b90:	0018      	movs	r0, r3
 8008b92:	f7fc fd7b 	bl	800568c <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	699a      	ldr	r2, [r3, #24]
 8008b9a:	2380      	movs	r3, #128	; 0x80
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d010      	beq.n	8008bc4 <HAL_SPI_Init+0xd8>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00c      	beq.n	8008bc4 <HAL_SPI_Init+0xd8>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	699a      	ldr	r2, [r3, #24]
 8008bae:	2380      	movs	r3, #128	; 0x80
 8008bb0:	02db      	lsls	r3, r3, #11
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d006      	beq.n	8008bc4 <HAL_SPI_Init+0xd8>
 8008bb6:	23a7      	movs	r3, #167	; 0xa7
 8008bb8:	005a      	lsls	r2, r3, #1
 8008bba:	4b53      	ldr	r3, [pc, #332]	; (8008d08 <HAL_SPI_Init+0x21c>)
 8008bbc:	0011      	movs	r1, r2
 8008bbe:	0018      	movs	r0, r3
 8008bc0:	f7fc fd64 	bl	800568c <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	69db      	ldr	r3, [r3, #28]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d023      	beq.n	8008c14 <HAL_SPI_Init+0x128>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	69db      	ldr	r3, [r3, #28]
 8008bd0:	2b08      	cmp	r3, #8
 8008bd2:	d01f      	beq.n	8008c14 <HAL_SPI_Init+0x128>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	69db      	ldr	r3, [r3, #28]
 8008bd8:	2b10      	cmp	r3, #16
 8008bda:	d01b      	beq.n	8008c14 <HAL_SPI_Init+0x128>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	69db      	ldr	r3, [r3, #28]
 8008be0:	2b18      	cmp	r3, #24
 8008be2:	d017      	beq.n	8008c14 <HAL_SPI_Init+0x128>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	69db      	ldr	r3, [r3, #28]
 8008be8:	2b20      	cmp	r3, #32
 8008bea:	d013      	beq.n	8008c14 <HAL_SPI_Init+0x128>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	69db      	ldr	r3, [r3, #28]
 8008bf0:	2b28      	cmp	r3, #40	; 0x28
 8008bf2:	d00f      	beq.n	8008c14 <HAL_SPI_Init+0x128>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	69db      	ldr	r3, [r3, #28]
 8008bf8:	2b30      	cmp	r3, #48	; 0x30
 8008bfa:	d00b      	beq.n	8008c14 <HAL_SPI_Init+0x128>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	69db      	ldr	r3, [r3, #28]
 8008c00:	2b38      	cmp	r3, #56	; 0x38
 8008c02:	d007      	beq.n	8008c14 <HAL_SPI_Init+0x128>
 8008c04:	2350      	movs	r3, #80	; 0x50
 8008c06:	33ff      	adds	r3, #255	; 0xff
 8008c08:	001a      	movs	r2, r3
 8008c0a:	4b3f      	ldr	r3, [pc, #252]	; (8008d08 <HAL_SPI_Init+0x21c>)
 8008c0c:	0011      	movs	r1, r2
 8008c0e:	0018      	movs	r0, r3
 8008c10:	f7fc fd3c 	bl	800568c <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a1b      	ldr	r3, [r3, #32]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00a      	beq.n	8008c32 <HAL_SPI_Init+0x146>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
 8008c20:	2b80      	cmp	r3, #128	; 0x80
 8008c22:	d006      	beq.n	8008c32 <HAL_SPI_Init+0x146>
 8008c24:	23a8      	movs	r3, #168	; 0xa8
 8008c26:	005a      	lsls	r2, r3, #1
 8008c28:	4b37      	ldr	r3, [pc, #220]	; (8008d08 <HAL_SPI_Init+0x21c>)
 8008c2a:	0011      	movs	r1, r2
 8008c2c:	0018      	movs	r0, r3
 8008c2e:	f7fc fd2d 	bl	800568c <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00b      	beq.n	8008c52 <HAL_SPI_Init+0x166>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3e:	2b10      	cmp	r3, #16
 8008c40:	d007      	beq.n	8008c52 <HAL_SPI_Init+0x166>
 8008c42:	2352      	movs	r3, #82	; 0x52
 8008c44:	33ff      	adds	r3, #255	; 0xff
 8008c46:	001a      	movs	r2, r3
 8008c48:	4b2f      	ldr	r3, [pc, #188]	; (8008d08 <HAL_SPI_Init+0x21c>)
 8008c4a:	0011      	movs	r1, r2
 8008c4c:	0018      	movs	r0, r3
 8008c4e:	f7fc fd1d 	bl	800568c <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d158      	bne.n	8008d0c <HAL_SPI_Init+0x220>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00a      	beq.n	8008c78 <HAL_SPI_Init+0x18c>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d006      	beq.n	8008c78 <HAL_SPI_Init+0x18c>
 8008c6a:	23aa      	movs	r3, #170	; 0xaa
 8008c6c:	005a      	lsls	r2, r3, #1
 8008c6e:	4b26      	ldr	r3, [pc, #152]	; (8008d08 <HAL_SPI_Init+0x21c>)
 8008c70:	0011      	movs	r1, r2
 8008c72:	0018      	movs	r0, r3
 8008c74:	f7fc fd0a 	bl	800568c <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	695b      	ldr	r3, [r3, #20]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00b      	beq.n	8008c98 <HAL_SPI_Init+0x1ac>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	695b      	ldr	r3, [r3, #20]
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d007      	beq.n	8008c98 <HAL_SPI_Init+0x1ac>
 8008c88:	2356      	movs	r3, #86	; 0x56
 8008c8a:	33ff      	adds	r3, #255	; 0xff
 8008c8c:	001a      	movs	r2, r3
 8008c8e:	4b1e      	ldr	r3, [pc, #120]	; (8008d08 <HAL_SPI_Init+0x21c>)
 8008c90:	0011      	movs	r1, r2
 8008c92:	0018      	movs	r0, r3
 8008c94:	f7fc fcfa 	bl	800568c <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	685a      	ldr	r2, [r3, #4]
 8008c9c:	2382      	movs	r3, #130	; 0x82
 8008c9e:	005b      	lsls	r3, r3, #1
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d129      	bne.n	8008cf8 <HAL_SPI_Init+0x20c>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	69db      	ldr	r3, [r3, #28]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d100      	bne.n	8008cae <HAL_SPI_Init+0x1c2>
 8008cac:	e05c      	b.n	8008d68 <HAL_SPI_Init+0x27c>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	2b08      	cmp	r3, #8
 8008cb4:	d058      	beq.n	8008d68 <HAL_SPI_Init+0x27c>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	69db      	ldr	r3, [r3, #28]
 8008cba:	2b10      	cmp	r3, #16
 8008cbc:	d054      	beq.n	8008d68 <HAL_SPI_Init+0x27c>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	2b18      	cmp	r3, #24
 8008cc4:	d050      	beq.n	8008d68 <HAL_SPI_Init+0x27c>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	69db      	ldr	r3, [r3, #28]
 8008cca:	2b20      	cmp	r3, #32
 8008ccc:	d04c      	beq.n	8008d68 <HAL_SPI_Init+0x27c>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	69db      	ldr	r3, [r3, #28]
 8008cd2:	2b28      	cmp	r3, #40	; 0x28
 8008cd4:	d048      	beq.n	8008d68 <HAL_SPI_Init+0x27c>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	69db      	ldr	r3, [r3, #28]
 8008cda:	2b30      	cmp	r3, #48	; 0x30
 8008cdc:	d044      	beq.n	8008d68 <HAL_SPI_Init+0x27c>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	69db      	ldr	r3, [r3, #28]
 8008ce2:	2b38      	cmp	r3, #56	; 0x38
 8008ce4:	d040      	beq.n	8008d68 <HAL_SPI_Init+0x27c>
 8008ce6:	235a      	movs	r3, #90	; 0x5a
 8008ce8:	33ff      	adds	r3, #255	; 0xff
 8008cea:	001a      	movs	r2, r3
 8008cec:	4b06      	ldr	r3, [pc, #24]	; (8008d08 <HAL_SPI_Init+0x21c>)
 8008cee:	0011      	movs	r1, r2
 8008cf0:	0018      	movs	r0, r3
 8008cf2:	f7fc fccb 	bl	800568c <assert_failed>
 8008cf6:	e037      	b.n	8008d68 <HAL_SPI_Init+0x27c>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	61da      	str	r2, [r3, #28]
 8008cfe:	e033      	b.n	8008d68 <HAL_SPI_Init+0x27c>
 8008d00:	40013000 	.word	0x40013000
 8008d04:	40003800 	.word	0x40003800
 8008d08:	0800b9e4 	.word	0x0800b9e4
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	69db      	ldr	r3, [r3, #28]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d023      	beq.n	8008d5c <HAL_SPI_Init+0x270>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	69db      	ldr	r3, [r3, #28]
 8008d18:	2b08      	cmp	r3, #8
 8008d1a:	d01f      	beq.n	8008d5c <HAL_SPI_Init+0x270>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	69db      	ldr	r3, [r3, #28]
 8008d20:	2b10      	cmp	r3, #16
 8008d22:	d01b      	beq.n	8008d5c <HAL_SPI_Init+0x270>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	69db      	ldr	r3, [r3, #28]
 8008d28:	2b18      	cmp	r3, #24
 8008d2a:	d017      	beq.n	8008d5c <HAL_SPI_Init+0x270>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	69db      	ldr	r3, [r3, #28]
 8008d30:	2b20      	cmp	r3, #32
 8008d32:	d013      	beq.n	8008d5c <HAL_SPI_Init+0x270>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	69db      	ldr	r3, [r3, #28]
 8008d38:	2b28      	cmp	r3, #40	; 0x28
 8008d3a:	d00f      	beq.n	8008d5c <HAL_SPI_Init+0x270>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	69db      	ldr	r3, [r3, #28]
 8008d40:	2b30      	cmp	r3, #48	; 0x30
 8008d42:	d00b      	beq.n	8008d5c <HAL_SPI_Init+0x270>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	69db      	ldr	r3, [r3, #28]
 8008d48:	2b38      	cmp	r3, #56	; 0x38
 8008d4a:	d007      	beq.n	8008d5c <HAL_SPI_Init+0x270>
 8008d4c:	2364      	movs	r3, #100	; 0x64
 8008d4e:	33ff      	adds	r3, #255	; 0xff
 8008d50:	001a      	movs	r2, r3
 8008d52:	4b3f      	ldr	r3, [pc, #252]	; (8008e50 <HAL_SPI_Init+0x364>)
 8008d54:	0011      	movs	r1, r2
 8008d56:	0018      	movs	r0, r3
 8008d58:	f7fc fc98 	bl	800568c <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2251      	movs	r2, #81	; 0x51
 8008d72:	5c9b      	ldrb	r3, [r3, r2]
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d107      	bne.n	8008d8a <HAL_SPI_Init+0x29e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2250      	movs	r2, #80	; 0x50
 8008d7e:	2100      	movs	r1, #0
 8008d80:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	0018      	movs	r0, r3
 8008d86:	f7fd fbd5 	bl	8006534 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2251      	movs	r2, #81	; 0x51
 8008d8e:	2102      	movs	r1, #2
 8008d90:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2140      	movs	r1, #64	; 0x40
 8008d9e:	438a      	bics	r2, r1
 8008da0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	685a      	ldr	r2, [r3, #4]
 8008da6:	2382      	movs	r3, #130	; 0x82
 8008da8:	005b      	lsls	r3, r3, #1
 8008daa:	401a      	ands	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6899      	ldr	r1, [r3, #8]
 8008db0:	2384      	movs	r3, #132	; 0x84
 8008db2:	021b      	lsls	r3, r3, #8
 8008db4:	400b      	ands	r3, r1
 8008db6:	431a      	orrs	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	68d9      	ldr	r1, [r3, #12]
 8008dbc:	2380      	movs	r3, #128	; 0x80
 8008dbe:	011b      	lsls	r3, r3, #4
 8008dc0:	400b      	ands	r3, r1
 8008dc2:	431a      	orrs	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	2102      	movs	r1, #2
 8008dca:	400b      	ands	r3, r1
 8008dcc:	431a      	orrs	r2, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	695b      	ldr	r3, [r3, #20]
 8008dd2:	2101      	movs	r1, #1
 8008dd4:	400b      	ands	r3, r1
 8008dd6:	431a      	orrs	r2, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6999      	ldr	r1, [r3, #24]
 8008ddc:	2380      	movs	r3, #128	; 0x80
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	400b      	ands	r3, r1
 8008de2:	431a      	orrs	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	69db      	ldr	r3, [r3, #28]
 8008de8:	2138      	movs	r1, #56	; 0x38
 8008dea:	400b      	ands	r3, r1
 8008dec:	431a      	orrs	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a1b      	ldr	r3, [r3, #32]
 8008df2:	2180      	movs	r1, #128	; 0x80
 8008df4:	400b      	ands	r3, r1
 8008df6:	431a      	orrs	r2, r3
 8008df8:	0011      	movs	r1, r2
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008dfe:	2380      	movs	r3, #128	; 0x80
 8008e00:	019b      	lsls	r3, r3, #6
 8008e02:	401a      	ands	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	430a      	orrs	r2, r1
 8008e0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	699b      	ldr	r3, [r3, #24]
 8008e10:	0c1b      	lsrs	r3, r3, #16
 8008e12:	2204      	movs	r2, #4
 8008e14:	4013      	ands	r3, r2
 8008e16:	0019      	movs	r1, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1c:	2210      	movs	r2, #16
 8008e1e:	401a      	ands	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	430a      	orrs	r2, r1
 8008e26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	69da      	ldr	r2, [r3, #28]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4908      	ldr	r1, [pc, #32]	; (8008e54 <HAL_SPI_Init+0x368>)
 8008e34:	400a      	ands	r2, r1
 8008e36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2251      	movs	r2, #81	; 0x51
 8008e42:	2101      	movs	r1, #1
 8008e44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	0018      	movs	r0, r3
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	b002      	add	sp, #8
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	0800b9e4 	.word	0x0800b9e4
 8008e54:	fffff7ff 	.word	0xfffff7ff

08008e58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b08c      	sub	sp, #48	; 0x30
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
 8008e64:	001a      	movs	r2, r3
 8008e66:	1cbb      	adds	r3, r7, #2
 8008e68:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008e6e:	232b      	movs	r3, #43	; 0x2b
 8008e70:	18fb      	adds	r3, r7, r3
 8008e72:	2200      	movs	r2, #0
 8008e74:	701a      	strb	r2, [r3, #0]

  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d014      	beq.n	8008ea8 <HAL_SPI_TransmitReceive+0x50>
  {
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pTxData));
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	2201      	movs	r2, #1
 8008e82:	4013      	ands	r3, r2
 8008e84:	d005      	beq.n	8008e92 <HAL_SPI_TransmitReceive+0x3a>
 8008e86:	4ac7      	ldr	r2, [pc, #796]	; (80091a4 <HAL_SPI_TransmitReceive+0x34c>)
 8008e88:	4bc7      	ldr	r3, [pc, #796]	; (80091a8 <HAL_SPI_TransmitReceive+0x350>)
 8008e8a:	0011      	movs	r1, r2
 8008e8c:	0018      	movs	r0, r3
 8008e8e:	f7fc fbfd 	bl	800568c <assert_failed>
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pRxData));
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2201      	movs	r2, #1
 8008e96:	4013      	ands	r3, r2
 8008e98:	d006      	beq.n	8008ea8 <HAL_SPI_TransmitReceive+0x50>
 8008e9a:	2392      	movs	r3, #146	; 0x92
 8008e9c:	00da      	lsls	r2, r3, #3
 8008e9e:	4bc2      	ldr	r3, [pc, #776]	; (80091a8 <HAL_SPI_TransmitReceive+0x350>)
 8008ea0:	0011      	movs	r1, r2
 8008ea2:	0018      	movs	r0, r3
 8008ea4:	f7fc fbf2 	bl	800568c <assert_failed>
  }

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d005      	beq.n	8008ebc <HAL_SPI_TransmitReceive+0x64>
 8008eb0:	4abe      	ldr	r2, [pc, #760]	; (80091ac <HAL_SPI_TransmitReceive+0x354>)
 8008eb2:	4bbd      	ldr	r3, [pc, #756]	; (80091a8 <HAL_SPI_TransmitReceive+0x350>)
 8008eb4:	0011      	movs	r1, r2
 8008eb6:	0018      	movs	r0, r3
 8008eb8:	f7fc fbe8 	bl	800568c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2250      	movs	r2, #80	; 0x50
 8008ec0:	5c9b      	ldrb	r3, [r3, r2]
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d101      	bne.n	8008eca <HAL_SPI_TransmitReceive+0x72>
 8008ec6:	2302      	movs	r3, #2
 8008ec8:	e1a8      	b.n	800921c <HAL_SPI_TransmitReceive+0x3c4>
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2250      	movs	r2, #80	; 0x50
 8008ece:	2101      	movs	r1, #1
 8008ed0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ed2:	f7fd fcc7 	bl	8006864 <HAL_GetTick>
 8008ed6:	0003      	movs	r3, r0
 8008ed8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008eda:	2023      	movs	r0, #35	; 0x23
 8008edc:	183b      	adds	r3, r7, r0
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	2151      	movs	r1, #81	; 0x51
 8008ee2:	5c52      	ldrb	r2, [r2, r1]
 8008ee4:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008eec:	231a      	movs	r3, #26
 8008eee:	18fb      	adds	r3, r7, r3
 8008ef0:	1cba      	adds	r2, r7, #2
 8008ef2:	8812      	ldrh	r2, [r2, #0]
 8008ef4:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008ef6:	183b      	adds	r3, r7, r0
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d012      	beq.n	8008f24 <HAL_SPI_TransmitReceive+0xcc>
 8008efe:	69fa      	ldr	r2, [r7, #28]
 8008f00:	2382      	movs	r3, #130	; 0x82
 8008f02:	005b      	lsls	r3, r3, #1
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d108      	bne.n	8008f1a <HAL_SPI_TransmitReceive+0xc2>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d104      	bne.n	8008f1a <HAL_SPI_TransmitReceive+0xc2>
 8008f10:	2323      	movs	r3, #35	; 0x23
 8008f12:	18fb      	adds	r3, r7, r3
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	2b04      	cmp	r3, #4
 8008f18:	d004      	beq.n	8008f24 <HAL_SPI_TransmitReceive+0xcc>
  {
    errorcode = HAL_BUSY;
 8008f1a:	232b      	movs	r3, #43	; 0x2b
 8008f1c:	18fb      	adds	r3, r7, r3
 8008f1e:	2202      	movs	r2, #2
 8008f20:	701a      	strb	r2, [r3, #0]
    goto error;
 8008f22:	e170      	b.n	8009206 <HAL_SPI_TransmitReceive+0x3ae>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d006      	beq.n	8008f38 <HAL_SPI_TransmitReceive+0xe0>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d003      	beq.n	8008f38 <HAL_SPI_TransmitReceive+0xe0>
 8008f30:	1cbb      	adds	r3, r7, #2
 8008f32:	881b      	ldrh	r3, [r3, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d104      	bne.n	8008f42 <HAL_SPI_TransmitReceive+0xea>
  {
    errorcode = HAL_ERROR;
 8008f38:	232b      	movs	r3, #43	; 0x2b
 8008f3a:	18fb      	adds	r3, r7, r3
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	701a      	strb	r2, [r3, #0]
    goto error;
 8008f40:	e161      	b.n	8009206 <HAL_SPI_TransmitReceive+0x3ae>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2251      	movs	r2, #81	; 0x51
 8008f46:	5c9b      	ldrb	r3, [r3, r2]
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b04      	cmp	r3, #4
 8008f4c:	d003      	beq.n	8008f56 <HAL_SPI_TransmitReceive+0xfe>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2251      	movs	r2, #81	; 0x51
 8008f52:	2105      	movs	r1, #5
 8008f54:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	1cba      	adds	r2, r7, #2
 8008f66:	8812      	ldrh	r2, [r2, #0]
 8008f68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	1cba      	adds	r2, r7, #2
 8008f6e:	8812      	ldrh	r2, [r2, #0]
 8008f70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	1cba      	adds	r2, r7, #2
 8008f7c:	8812      	ldrh	r2, [r2, #0]
 8008f7e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	1cba      	adds	r2, r7, #2
 8008f84:	8812      	ldrh	r2, [r2, #0]
 8008f86:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2200      	movs	r2, #0
 8008f92:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2240      	movs	r2, #64	; 0x40
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	2b40      	cmp	r3, #64	; 0x40
 8008fa0:	d007      	beq.n	8008fb2 <HAL_SPI_TransmitReceive+0x15a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2140      	movs	r1, #64	; 0x40
 8008fae:	430a      	orrs	r2, r1
 8008fb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	68da      	ldr	r2, [r3, #12]
 8008fb6:	2380      	movs	r3, #128	; 0x80
 8008fb8:	011b      	lsls	r3, r3, #4
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d000      	beq.n	8008fc0 <HAL_SPI_TransmitReceive+0x168>
 8008fbe:	e07a      	b.n	80090b6 <HAL_SPI_TransmitReceive+0x25e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d004      	beq.n	8008fd2 <HAL_SPI_TransmitReceive+0x17a>
 8008fc8:	231a      	movs	r3, #26
 8008fca:	18fb      	adds	r3, r7, r3
 8008fcc:	881b      	ldrh	r3, [r3, #0]
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d166      	bne.n	80090a0 <HAL_SPI_TransmitReceive+0x248>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd6:	881a      	ldrh	r2, [r3, #0]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe2:	1c9a      	adds	r2, r3, #2
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ff6:	e053      	b.n	80090a0 <HAL_SPI_TransmitReceive+0x248>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	2202      	movs	r2, #2
 8009000:	4013      	ands	r3, r2
 8009002:	2b02      	cmp	r3, #2
 8009004:	d11b      	bne.n	800903e <HAL_SPI_TransmitReceive+0x1e6>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800900a:	b29b      	uxth	r3, r3
 800900c:	2b00      	cmp	r3, #0
 800900e:	d016      	beq.n	800903e <HAL_SPI_TransmitReceive+0x1e6>
 8009010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009012:	2b01      	cmp	r3, #1
 8009014:	d113      	bne.n	800903e <HAL_SPI_TransmitReceive+0x1e6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800901a:	881a      	ldrh	r2, [r3, #0]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009026:	1c9a      	adds	r2, r3, #2
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009030:	b29b      	uxth	r3, r3
 8009032:	3b01      	subs	r3, #1
 8009034:	b29a      	uxth	r2, r3
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800903a:	2300      	movs	r3, #0
 800903c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	2201      	movs	r2, #1
 8009046:	4013      	ands	r3, r2
 8009048:	2b01      	cmp	r3, #1
 800904a:	d119      	bne.n	8009080 <HAL_SPI_TransmitReceive+0x228>
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009050:	b29b      	uxth	r3, r3
 8009052:	2b00      	cmp	r3, #0
 8009054:	d014      	beq.n	8009080 <HAL_SPI_TransmitReceive+0x228>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68da      	ldr	r2, [r3, #12]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009060:	b292      	uxth	r2, r2
 8009062:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009068:	1c9a      	adds	r2, r3, #2
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009072:	b29b      	uxth	r3, r3
 8009074:	3b01      	subs	r3, #1
 8009076:	b29a      	uxth	r2, r3
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800907c:	2301      	movs	r3, #1
 800907e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009080:	f7fd fbf0 	bl	8006864 <HAL_GetTick>
 8009084:	0002      	movs	r2, r0
 8009086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800908c:	429a      	cmp	r2, r3
 800908e:	d807      	bhi.n	80090a0 <HAL_SPI_TransmitReceive+0x248>
 8009090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009092:	3301      	adds	r3, #1
 8009094:	d004      	beq.n	80090a0 <HAL_SPI_TransmitReceive+0x248>
      {
        errorcode = HAL_TIMEOUT;
 8009096:	232b      	movs	r3, #43	; 0x2b
 8009098:	18fb      	adds	r3, r7, r3
 800909a:	2203      	movs	r2, #3
 800909c:	701a      	strb	r2, [r3, #0]
        goto error;
 800909e:	e0b2      	b.n	8009206 <HAL_SPI_TransmitReceive+0x3ae>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1a6      	bne.n	8008ff8 <HAL_SPI_TransmitReceive+0x1a0>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1a1      	bne.n	8008ff8 <HAL_SPI_TransmitReceive+0x1a0>
 80090b4:	e086      	b.n	80091c4 <HAL_SPI_TransmitReceive+0x36c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d005      	beq.n	80090ca <HAL_SPI_TransmitReceive+0x272>
 80090be:	231a      	movs	r3, #26
 80090c0:	18fb      	adds	r3, r7, r3
 80090c2:	881b      	ldrh	r3, [r3, #0]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d000      	beq.n	80090ca <HAL_SPI_TransmitReceive+0x272>
 80090c8:	e072      	b.n	80091b0 <HAL_SPI_TransmitReceive+0x358>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	330c      	adds	r3, #12
 80090d4:	7812      	ldrb	r2, [r2, #0]
 80090d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090dc:	1c5a      	adds	r2, r3, #1
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	3b01      	subs	r3, #1
 80090ea:	b29a      	uxth	r2, r3
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090f0:	e05e      	b.n	80091b0 <HAL_SPI_TransmitReceive+0x358>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	2202      	movs	r2, #2
 80090fa:	4013      	ands	r3, r2
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	d11c      	bne.n	800913a <HAL_SPI_TransmitReceive+0x2e2>
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009104:	b29b      	uxth	r3, r3
 8009106:	2b00      	cmp	r3, #0
 8009108:	d017      	beq.n	800913a <HAL_SPI_TransmitReceive+0x2e2>
 800910a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910c:	2b01      	cmp	r3, #1
 800910e:	d114      	bne.n	800913a <HAL_SPI_TransmitReceive+0x2e2>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	330c      	adds	r3, #12
 800911a:	7812      	ldrb	r2, [r2, #0]
 800911c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009122:	1c5a      	adds	r2, r3, #1
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800912c:	b29b      	uxth	r3, r3
 800912e:	3b01      	subs	r3, #1
 8009130:	b29a      	uxth	r2, r3
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009136:	2300      	movs	r3, #0
 8009138:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	2201      	movs	r2, #1
 8009142:	4013      	ands	r3, r2
 8009144:	2b01      	cmp	r3, #1
 8009146:	d119      	bne.n	800917c <HAL_SPI_TransmitReceive+0x324>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800914c:	b29b      	uxth	r3, r3
 800914e:	2b00      	cmp	r3, #0
 8009150:	d014      	beq.n	800917c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68da      	ldr	r2, [r3, #12]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800915c:	b2d2      	uxtb	r2, r2
 800915e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009164:	1c5a      	adds	r2, r3, #1
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800916e:	b29b      	uxth	r3, r3
 8009170:	3b01      	subs	r3, #1
 8009172:	b29a      	uxth	r2, r3
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009178:	2301      	movs	r3, #1
 800917a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800917c:	f7fd fb72 	bl	8006864 <HAL_GetTick>
 8009180:	0002      	movs	r2, r0
 8009182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009184:	1ad3      	subs	r3, r2, r3
 8009186:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009188:	429a      	cmp	r2, r3
 800918a:	d802      	bhi.n	8009192 <HAL_SPI_TransmitReceive+0x33a>
 800918c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918e:	3301      	adds	r3, #1
 8009190:	d102      	bne.n	8009198 <HAL_SPI_TransmitReceive+0x340>
 8009192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009194:	2b00      	cmp	r3, #0
 8009196:	d10b      	bne.n	80091b0 <HAL_SPI_TransmitReceive+0x358>
      {
        errorcode = HAL_TIMEOUT;
 8009198:	232b      	movs	r3, #43	; 0x2b
 800919a:	18fb      	adds	r3, r7, r3
 800919c:	2203      	movs	r2, #3
 800919e:	701a      	strb	r2, [r3, #0]
        goto error;
 80091a0:	e031      	b.n	8009206 <HAL_SPI_TransmitReceive+0x3ae>
 80091a2:	46c0      	nop			; (mov r8, r8)
 80091a4:	0000048f 	.word	0x0000048f
 80091a8:	0800b9e4 	.word	0x0800b9e4
 80091ac:	00000494 	.word	0x00000494
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d19b      	bne.n	80090f2 <HAL_SPI_TransmitReceive+0x29a>
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091be:	b29b      	uxth	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d196      	bne.n	80090f2 <HAL_SPI_TransmitReceive+0x29a>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80091c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	0018      	movs	r0, r3
 80091cc:	f000 f8b8 	bl	8009340 <SPI_EndRxTxTransaction>
 80091d0:	1e03      	subs	r3, r0, #0
 80091d2:	d007      	beq.n	80091e4 <HAL_SPI_TransmitReceive+0x38c>
  {
    errorcode = HAL_ERROR;
 80091d4:	232b      	movs	r3, #43	; 0x2b
 80091d6:	18fb      	adds	r3, r7, r3
 80091d8:	2201      	movs	r2, #1
 80091da:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2220      	movs	r2, #32
 80091e0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80091e2:	e010      	b.n	8009206 <HAL_SPI_TransmitReceive+0x3ae>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d10b      	bne.n	8009204 <HAL_SPI_TransmitReceive+0x3ac>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091ec:	2300      	movs	r3, #0
 80091ee:	617b      	str	r3, [r7, #20]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	617b      	str	r3, [r7, #20]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	617b      	str	r3, [r7, #20]
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	e000      	b.n	8009206 <HAL_SPI_TransmitReceive+0x3ae>
  }

error :
 8009204:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2251      	movs	r2, #81	; 0x51
 800920a:	2101      	movs	r1, #1
 800920c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2250      	movs	r2, #80	; 0x50
 8009212:	2100      	movs	r1, #0
 8009214:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009216:	232b      	movs	r3, #43	; 0x2b
 8009218:	18fb      	adds	r3, r7, r3
 800921a:	781b      	ldrb	r3, [r3, #0]
}
 800921c:	0018      	movs	r0, r3
 800921e:	46bd      	mov	sp, r7
 8009220:	b00c      	add	sp, #48	; 0x30
 8009222:	bd80      	pop	{r7, pc}

08009224 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b088      	sub	sp, #32
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	603b      	str	r3, [r7, #0]
 8009230:	1dfb      	adds	r3, r7, #7
 8009232:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009234:	f7fd fb16 	bl	8006864 <HAL_GetTick>
 8009238:	0002      	movs	r2, r0
 800923a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923c:	1a9b      	subs	r3, r3, r2
 800923e:	683a      	ldr	r2, [r7, #0]
 8009240:	18d3      	adds	r3, r2, r3
 8009242:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009244:	f7fd fb0e 	bl	8006864 <HAL_GetTick>
 8009248:	0003      	movs	r3, r0
 800924a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800924c:	4b3a      	ldr	r3, [pc, #232]	; (8009338 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	015b      	lsls	r3, r3, #5
 8009252:	0d1b      	lsrs	r3, r3, #20
 8009254:	69fa      	ldr	r2, [r7, #28]
 8009256:	4353      	muls	r3, r2
 8009258:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800925a:	e058      	b.n	800930e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	3301      	adds	r3, #1
 8009260:	d055      	beq.n	800930e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009262:	f7fd faff 	bl	8006864 <HAL_GetTick>
 8009266:	0002      	movs	r2, r0
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	1ad3      	subs	r3, r2, r3
 800926c:	69fa      	ldr	r2, [r7, #28]
 800926e:	429a      	cmp	r2, r3
 8009270:	d902      	bls.n	8009278 <SPI_WaitFlagStateUntilTimeout+0x54>
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d142      	bne.n	80092fe <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	685a      	ldr	r2, [r3, #4]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	21e0      	movs	r1, #224	; 0xe0
 8009284:	438a      	bics	r2, r1
 8009286:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	2382      	movs	r3, #130	; 0x82
 800928e:	005b      	lsls	r3, r3, #1
 8009290:	429a      	cmp	r2, r3
 8009292:	d113      	bne.n	80092bc <SPI_WaitFlagStateUntilTimeout+0x98>
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	689a      	ldr	r2, [r3, #8]
 8009298:	2380      	movs	r3, #128	; 0x80
 800929a:	021b      	lsls	r3, r3, #8
 800929c:	429a      	cmp	r2, r3
 800929e:	d005      	beq.n	80092ac <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	689a      	ldr	r2, [r3, #8]
 80092a4:	2380      	movs	r3, #128	; 0x80
 80092a6:	00db      	lsls	r3, r3, #3
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d107      	bne.n	80092bc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2140      	movs	r1, #64	; 0x40
 80092b8:	438a      	bics	r2, r1
 80092ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092c0:	2380      	movs	r3, #128	; 0x80
 80092c2:	019b      	lsls	r3, r3, #6
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d110      	bne.n	80092ea <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	491a      	ldr	r1, [pc, #104]	; (800933c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80092d4:	400a      	ands	r2, r1
 80092d6:	601a      	str	r2, [r3, #0]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2180      	movs	r1, #128	; 0x80
 80092e4:	0189      	lsls	r1, r1, #6
 80092e6:	430a      	orrs	r2, r1
 80092e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2251      	movs	r2, #81	; 0x51
 80092ee:	2101      	movs	r1, #1
 80092f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2250      	movs	r2, #80	; 0x50
 80092f6:	2100      	movs	r1, #0
 80092f8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80092fa:	2303      	movs	r3, #3
 80092fc:	e017      	b.n	800932e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d101      	bne.n	8009308 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009304:	2300      	movs	r3, #0
 8009306:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	3b01      	subs	r3, #1
 800930c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	4013      	ands	r3, r2
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	425a      	negs	r2, r3
 800931e:	4153      	adcs	r3, r2
 8009320:	b2db      	uxtb	r3, r3
 8009322:	001a      	movs	r2, r3
 8009324:	1dfb      	adds	r3, r7, #7
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	429a      	cmp	r2, r3
 800932a:	d197      	bne.n	800925c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	0018      	movs	r0, r3
 8009330:	46bd      	mov	sp, r7
 8009332:	b008      	add	sp, #32
 8009334:	bd80      	pop	{r7, pc}
 8009336:	46c0      	nop			; (mov r8, r8)
 8009338:	20000048 	.word	0x20000048
 800933c:	ffffdfff 	.word	0xffffdfff

08009340 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b088      	sub	sp, #32
 8009344:	af02      	add	r7, sp, #8
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800934c:	4b1d      	ldr	r3, [pc, #116]	; (80093c4 <SPI_EndRxTxTransaction+0x84>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	491d      	ldr	r1, [pc, #116]	; (80093c8 <SPI_EndRxTxTransaction+0x88>)
 8009352:	0018      	movs	r0, r3
 8009354:	f7f6 fed8 	bl	8000108 <__udivsi3>
 8009358:	0003      	movs	r3, r0
 800935a:	001a      	movs	r2, r3
 800935c:	0013      	movs	r3, r2
 800935e:	015b      	lsls	r3, r3, #5
 8009360:	1a9b      	subs	r3, r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	189b      	adds	r3, r3, r2
 8009366:	00db      	lsls	r3, r3, #3
 8009368:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	2382      	movs	r3, #130	; 0x82
 8009370:	005b      	lsls	r3, r3, #1
 8009372:	429a      	cmp	r2, r3
 8009374:	d112      	bne.n	800939c <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	9300      	str	r3, [sp, #0]
 800937e:	0013      	movs	r3, r2
 8009380:	2200      	movs	r2, #0
 8009382:	2180      	movs	r1, #128	; 0x80
 8009384:	f7ff ff4e 	bl	8009224 <SPI_WaitFlagStateUntilTimeout>
 8009388:	1e03      	subs	r3, r0, #0
 800938a:	d016      	beq.n	80093ba <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009390:	2220      	movs	r2, #32
 8009392:	431a      	orrs	r2, r3
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009398:	2303      	movs	r3, #3
 800939a:	e00f      	b.n	80093bc <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00a      	beq.n	80093b8 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	3b01      	subs	r3, #1
 80093a6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	2280      	movs	r2, #128	; 0x80
 80093b0:	4013      	ands	r3, r2
 80093b2:	2b80      	cmp	r3, #128	; 0x80
 80093b4:	d0f2      	beq.n	800939c <SPI_EndRxTxTransaction+0x5c>
 80093b6:	e000      	b.n	80093ba <SPI_EndRxTxTransaction+0x7a>
        break;
 80093b8:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	0018      	movs	r0, r3
 80093be:	46bd      	mov	sp, r7
 80093c0:	b006      	add	sp, #24
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	20000048 	.word	0x20000048
 80093c8:	016e3600 	.word	0x016e3600

080093cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d101      	bne.n	80093de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	e0b4      	b.n	8009548 <HAL_TIM_Base_Init+0x17c>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	2380      	movs	r3, #128	; 0x80
 80093e4:	05db      	lsls	r3, r3, #23
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d01f      	beq.n	800942a <HAL_TIM_Base_Init+0x5e>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a58      	ldr	r2, [pc, #352]	; (8009550 <HAL_TIM_Base_Init+0x184>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d01a      	beq.n	800942a <HAL_TIM_Base_Init+0x5e>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a56      	ldr	r2, [pc, #344]	; (8009554 <HAL_TIM_Base_Init+0x188>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d015      	beq.n	800942a <HAL_TIM_Base_Init+0x5e>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a55      	ldr	r2, [pc, #340]	; (8009558 <HAL_TIM_Base_Init+0x18c>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d010      	beq.n	800942a <HAL_TIM_Base_Init+0x5e>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a53      	ldr	r2, [pc, #332]	; (800955c <HAL_TIM_Base_Init+0x190>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d00b      	beq.n	800942a <HAL_TIM_Base_Init+0x5e>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a52      	ldr	r2, [pc, #328]	; (8009560 <HAL_TIM_Base_Init+0x194>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d006      	beq.n	800942a <HAL_TIM_Base_Init+0x5e>
 800941c:	238b      	movs	r3, #139	; 0x8b
 800941e:	005a      	lsls	r2, r3, #1
 8009420:	4b50      	ldr	r3, [pc, #320]	; (8009564 <HAL_TIM_Base_Init+0x198>)
 8009422:	0011      	movs	r1, r2
 8009424:	0018      	movs	r0, r3
 8009426:	f7fc f931 	bl	800568c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d017      	beq.n	8009462 <HAL_TIM_Base_Init+0x96>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	2b10      	cmp	r3, #16
 8009438:	d013      	beq.n	8009462 <HAL_TIM_Base_Init+0x96>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	2b20      	cmp	r3, #32
 8009440:	d00f      	beq.n	8009462 <HAL_TIM_Base_Init+0x96>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	2b40      	cmp	r3, #64	; 0x40
 8009448:	d00b      	beq.n	8009462 <HAL_TIM_Base_Init+0x96>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	2b60      	cmp	r3, #96	; 0x60
 8009450:	d007      	beq.n	8009462 <HAL_TIM_Base_Init+0x96>
 8009452:	2318      	movs	r3, #24
 8009454:	33ff      	adds	r3, #255	; 0xff
 8009456:	001a      	movs	r2, r3
 8009458:	4b42      	ldr	r3, [pc, #264]	; (8009564 <HAL_TIM_Base_Init+0x198>)
 800945a:	0011      	movs	r1, r2
 800945c:	0018      	movs	r0, r3
 800945e:	f7fc f915 	bl	800568c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d012      	beq.n	8009490 <HAL_TIM_Base_Init+0xc4>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	691a      	ldr	r2, [r3, #16]
 800946e:	2380      	movs	r3, #128	; 0x80
 8009470:	005b      	lsls	r3, r3, #1
 8009472:	429a      	cmp	r2, r3
 8009474:	d00c      	beq.n	8009490 <HAL_TIM_Base_Init+0xc4>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	691a      	ldr	r2, [r3, #16]
 800947a:	2380      	movs	r3, #128	; 0x80
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	429a      	cmp	r2, r3
 8009480:	d006      	beq.n	8009490 <HAL_TIM_Base_Init+0xc4>
 8009482:	238c      	movs	r3, #140	; 0x8c
 8009484:	005a      	lsls	r2, r3, #1
 8009486:	4b37      	ldr	r3, [pc, #220]	; (8009564 <HAL_TIM_Base_Init+0x198>)
 8009488:	0011      	movs	r1, r2
 800948a:	0018      	movs	r0, r3
 800948c:	f7fc f8fe 	bl	800568c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	4a34      	ldr	r2, [pc, #208]	; (8009568 <HAL_TIM_Base_Init+0x19c>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d907      	bls.n	80094aa <HAL_TIM_Base_Init+0xde>
 800949a:	231a      	movs	r3, #26
 800949c:	33ff      	adds	r3, #255	; 0xff
 800949e:	001a      	movs	r2, r3
 80094a0:	4b30      	ldr	r3, [pc, #192]	; (8009564 <HAL_TIM_Base_Init+0x198>)
 80094a2:	0011      	movs	r1, r2
 80094a4:	0018      	movs	r0, r3
 80094a6:	f7fc f8f1 	bl	800568c <assert_failed>
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	4a2e      	ldr	r2, [pc, #184]	; (8009568 <HAL_TIM_Base_Init+0x19c>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d906      	bls.n	80094c2 <HAL_TIM_Base_Init+0xf6>
 80094b4:	238d      	movs	r3, #141	; 0x8d
 80094b6:	005a      	lsls	r2, r3, #1
 80094b8:	4b2a      	ldr	r3, [pc, #168]	; (8009564 <HAL_TIM_Base_Init+0x198>)
 80094ba:	0011      	movs	r1, r2
 80094bc:	0018      	movs	r0, r3
 80094be:	f7fc f8e5 	bl	800568c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	695b      	ldr	r3, [r3, #20]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00b      	beq.n	80094e2 <HAL_TIM_Base_Init+0x116>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	695b      	ldr	r3, [r3, #20]
 80094ce:	2b80      	cmp	r3, #128	; 0x80
 80094d0:	d007      	beq.n	80094e2 <HAL_TIM_Base_Init+0x116>
 80094d2:	231c      	movs	r3, #28
 80094d4:	33ff      	adds	r3, #255	; 0xff
 80094d6:	001a      	movs	r2, r3
 80094d8:	4b22      	ldr	r3, [pc, #136]	; (8009564 <HAL_TIM_Base_Init+0x198>)
 80094da:	0011      	movs	r1, r2
 80094dc:	0018      	movs	r0, r3
 80094de:	f7fc f8d5 	bl	800568c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2239      	movs	r2, #57	; 0x39
 80094e6:	5c9b      	ldrb	r3, [r3, r2]
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d107      	bne.n	80094fe <HAL_TIM_Base_Init+0x132>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2238      	movs	r2, #56	; 0x38
 80094f2:	2100      	movs	r1, #0
 80094f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	0018      	movs	r0, r3
 80094fa:	f7fd f883 	bl	8006604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2239      	movs	r2, #57	; 0x39
 8009502:	2102      	movs	r1, #2
 8009504:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	3304      	adds	r3, #4
 800950e:	0019      	movs	r1, r3
 8009510:	0010      	movs	r0, r2
 8009512:	f000 fe5f 	bl	800a1d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	223e      	movs	r2, #62	; 0x3e
 800951a:	2101      	movs	r1, #1
 800951c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	223a      	movs	r2, #58	; 0x3a
 8009522:	2101      	movs	r1, #1
 8009524:	5499      	strb	r1, [r3, r2]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	223b      	movs	r2, #59	; 0x3b
 800952a:	2101      	movs	r1, #1
 800952c:	5499      	strb	r1, [r3, r2]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	223c      	movs	r2, #60	; 0x3c
 8009532:	2101      	movs	r1, #1
 8009534:	5499      	strb	r1, [r3, r2]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	223d      	movs	r2, #61	; 0x3d
 800953a:	2101      	movs	r1, #1
 800953c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2239      	movs	r2, #57	; 0x39
 8009542:	2101      	movs	r1, #1
 8009544:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	0018      	movs	r0, r3
 800954a:	46bd      	mov	sp, r7
 800954c:	b002      	add	sp, #8
 800954e:	bd80      	pop	{r7, pc}
 8009550:	40000400 	.word	0x40000400
 8009554:	40001000 	.word	0x40001000
 8009558:	40001400 	.word	0x40001400
 800955c:	40010800 	.word	0x40010800
 8009560:	40011400 	.word	0x40011400
 8009564:	0800ba1c 	.word	0x0800ba1c
 8009568:	0000ffff 	.word	0x0000ffff

0800956c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	2380      	movs	r3, #128	; 0x80
 800957a:	05db      	lsls	r3, r3, #23
 800957c:	429a      	cmp	r2, r3
 800957e:	d01f      	beq.n	80095c0 <HAL_TIM_Base_Start_IT+0x54>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a32      	ldr	r2, [pc, #200]	; (8009650 <HAL_TIM_Base_Start_IT+0xe4>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d01a      	beq.n	80095c0 <HAL_TIM_Base_Start_IT+0x54>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a31      	ldr	r2, [pc, #196]	; (8009654 <HAL_TIM_Base_Start_IT+0xe8>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d015      	beq.n	80095c0 <HAL_TIM_Base_Start_IT+0x54>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a2f      	ldr	r2, [pc, #188]	; (8009658 <HAL_TIM_Base_Start_IT+0xec>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d010      	beq.n	80095c0 <HAL_TIM_Base_Start_IT+0x54>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a2e      	ldr	r2, [pc, #184]	; (800965c <HAL_TIM_Base_Start_IT+0xf0>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d00b      	beq.n	80095c0 <HAL_TIM_Base_Start_IT+0x54>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a2c      	ldr	r2, [pc, #176]	; (8009660 <HAL_TIM_Base_Start_IT+0xf4>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d006      	beq.n	80095c0 <HAL_TIM_Base_Start_IT+0x54>
 80095b2:	23e9      	movs	r3, #233	; 0xe9
 80095b4:	005a      	lsls	r2, r3, #1
 80095b6:	4b2b      	ldr	r3, [pc, #172]	; (8009664 <HAL_TIM_Base_Start_IT+0xf8>)
 80095b8:	0011      	movs	r1, r2
 80095ba:	0018      	movs	r0, r3
 80095bc:	f7fc f866 	bl	800568c <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2239      	movs	r2, #57	; 0x39
 80095c4:	5c9b      	ldrb	r3, [r3, r2]
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d001      	beq.n	80095d0 <HAL_TIM_Base_Start_IT+0x64>
  {
    return HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	e03b      	b.n	8009648 <HAL_TIM_Base_Start_IT+0xdc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2239      	movs	r2, #57	; 0x39
 80095d4:	2102      	movs	r1, #2
 80095d6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68da      	ldr	r2, [r3, #12]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2101      	movs	r1, #1
 80095e4:	430a      	orrs	r2, r1
 80095e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	2380      	movs	r3, #128	; 0x80
 80095ee:	05db      	lsls	r3, r3, #23
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d00e      	beq.n	8009612 <HAL_TIM_Base_Start_IT+0xa6>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a15      	ldr	r2, [pc, #84]	; (8009650 <HAL_TIM_Base_Start_IT+0xe4>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d009      	beq.n	8009612 <HAL_TIM_Base_Start_IT+0xa6>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a16      	ldr	r2, [pc, #88]	; (800965c <HAL_TIM_Base_Start_IT+0xf0>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d004      	beq.n	8009612 <HAL_TIM_Base_Start_IT+0xa6>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a14      	ldr	r2, [pc, #80]	; (8009660 <HAL_TIM_Base_Start_IT+0xf4>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d111      	bne.n	8009636 <HAL_TIM_Base_Start_IT+0xca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	2207      	movs	r2, #7
 800961a:	4013      	ands	r3, r2
 800961c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2b06      	cmp	r3, #6
 8009622:	d010      	beq.n	8009646 <HAL_TIM_Base_Start_IT+0xda>
    {
      __HAL_TIM_ENABLE(htim);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2101      	movs	r1, #1
 8009630:	430a      	orrs	r2, r1
 8009632:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009634:	e007      	b.n	8009646 <HAL_TIM_Base_Start_IT+0xda>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2101      	movs	r1, #1
 8009642:	430a      	orrs	r2, r1
 8009644:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	0018      	movs	r0, r3
 800964a:	46bd      	mov	sp, r7
 800964c:	b004      	add	sp, #16
 800964e:	bd80      	pop	{r7, pc}
 8009650:	40000400 	.word	0x40000400
 8009654:	40001000 	.word	0x40001000
 8009658:	40001400 	.word	0x40001400
 800965c:	40010800 	.word	0x40010800
 8009660:	40011400 	.word	0x40011400
 8009664:	0800ba1c 	.word	0x0800ba1c

08009668 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d101      	bne.n	800967a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	e0ad      	b.n	80097d6 <HAL_TIM_OC_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	2380      	movs	r3, #128	; 0x80
 8009680:	05db      	lsls	r3, r3, #23
 8009682:	429a      	cmp	r2, r3
 8009684:	d01f      	beq.n	80096c6 <HAL_TIM_OC_Init+0x5e>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a55      	ldr	r2, [pc, #340]	; (80097e0 <HAL_TIM_OC_Init+0x178>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d01a      	beq.n	80096c6 <HAL_TIM_OC_Init+0x5e>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a53      	ldr	r2, [pc, #332]	; (80097e4 <HAL_TIM_OC_Init+0x17c>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d015      	beq.n	80096c6 <HAL_TIM_OC_Init+0x5e>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a52      	ldr	r2, [pc, #328]	; (80097e8 <HAL_TIM_OC_Init+0x180>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d010      	beq.n	80096c6 <HAL_TIM_OC_Init+0x5e>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a50      	ldr	r2, [pc, #320]	; (80097ec <HAL_TIM_OC_Init+0x184>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d00b      	beq.n	80096c6 <HAL_TIM_OC_Init+0x5e>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a4f      	ldr	r2, [pc, #316]	; (80097f0 <HAL_TIM_OC_Init+0x188>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d006      	beq.n	80096c6 <HAL_TIM_OC_Init+0x5e>
 80096b8:	23a5      	movs	r3, #165	; 0xa5
 80096ba:	009a      	lsls	r2, r3, #2
 80096bc:	4b4d      	ldr	r3, [pc, #308]	; (80097f4 <HAL_TIM_OC_Init+0x18c>)
 80096be:	0011      	movs	r1, r2
 80096c0:	0018      	movs	r0, r3
 80096c2:	f7fb ffe3 	bl	800568c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d015      	beq.n	80096fa <HAL_TIM_OC_Init+0x92>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	2b10      	cmp	r3, #16
 80096d4:	d011      	beq.n	80096fa <HAL_TIM_OC_Init+0x92>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	2b20      	cmp	r3, #32
 80096dc:	d00d      	beq.n	80096fa <HAL_TIM_OC_Init+0x92>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	2b40      	cmp	r3, #64	; 0x40
 80096e4:	d009      	beq.n	80096fa <HAL_TIM_OC_Init+0x92>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	2b60      	cmp	r3, #96	; 0x60
 80096ec:	d005      	beq.n	80096fa <HAL_TIM_OC_Init+0x92>
 80096ee:	4a42      	ldr	r2, [pc, #264]	; (80097f8 <HAL_TIM_OC_Init+0x190>)
 80096f0:	4b40      	ldr	r3, [pc, #256]	; (80097f4 <HAL_TIM_OC_Init+0x18c>)
 80096f2:	0011      	movs	r1, r2
 80096f4:	0018      	movs	r0, r3
 80096f6:	f7fb ffc9 	bl	800568c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	691b      	ldr	r3, [r3, #16]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d011      	beq.n	8009726 <HAL_TIM_OC_Init+0xbe>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	691a      	ldr	r2, [r3, #16]
 8009706:	2380      	movs	r3, #128	; 0x80
 8009708:	005b      	lsls	r3, r3, #1
 800970a:	429a      	cmp	r2, r3
 800970c:	d00b      	beq.n	8009726 <HAL_TIM_OC_Init+0xbe>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	691a      	ldr	r2, [r3, #16]
 8009712:	2380      	movs	r3, #128	; 0x80
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	429a      	cmp	r2, r3
 8009718:	d005      	beq.n	8009726 <HAL_TIM_OC_Init+0xbe>
 800971a:	4a38      	ldr	r2, [pc, #224]	; (80097fc <HAL_TIM_OC_Init+0x194>)
 800971c:	4b35      	ldr	r3, [pc, #212]	; (80097f4 <HAL_TIM_OC_Init+0x18c>)
 800971e:	0011      	movs	r1, r2
 8009720:	0018      	movs	r0, r3
 8009722:	f7fb ffb3 	bl	800568c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	4a35      	ldr	r2, [pc, #212]	; (8009800 <HAL_TIM_OC_Init+0x198>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d905      	bls.n	800973c <HAL_TIM_OC_Init+0xd4>
 8009730:	4a34      	ldr	r2, [pc, #208]	; (8009804 <HAL_TIM_OC_Init+0x19c>)
 8009732:	4b30      	ldr	r3, [pc, #192]	; (80097f4 <HAL_TIM_OC_Init+0x18c>)
 8009734:	0011      	movs	r1, r2
 8009736:	0018      	movs	r0, r3
 8009738:	f7fb ffa8 	bl	800568c <assert_failed>
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	4a2f      	ldr	r2, [pc, #188]	; (8009800 <HAL_TIM_OC_Init+0x198>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d906      	bls.n	8009754 <HAL_TIM_OC_Init+0xec>
 8009746:	23a6      	movs	r3, #166	; 0xa6
 8009748:	009a      	lsls	r2, r3, #2
 800974a:	4b2a      	ldr	r3, [pc, #168]	; (80097f4 <HAL_TIM_OC_Init+0x18c>)
 800974c:	0011      	movs	r1, r2
 800974e:	0018      	movs	r0, r3
 8009750:	f7fb ff9c 	bl	800568c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	695b      	ldr	r3, [r3, #20]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d009      	beq.n	8009770 <HAL_TIM_OC_Init+0x108>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	695b      	ldr	r3, [r3, #20]
 8009760:	2b80      	cmp	r3, #128	; 0x80
 8009762:	d005      	beq.n	8009770 <HAL_TIM_OC_Init+0x108>
 8009764:	4a28      	ldr	r2, [pc, #160]	; (8009808 <HAL_TIM_OC_Init+0x1a0>)
 8009766:	4b23      	ldr	r3, [pc, #140]	; (80097f4 <HAL_TIM_OC_Init+0x18c>)
 8009768:	0011      	movs	r1, r2
 800976a:	0018      	movs	r0, r3
 800976c:	f7fb ff8e 	bl	800568c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2239      	movs	r2, #57	; 0x39
 8009774:	5c9b      	ldrb	r3, [r3, r2]
 8009776:	b2db      	uxtb	r3, r3
 8009778:	2b00      	cmp	r3, #0
 800977a:	d107      	bne.n	800978c <HAL_TIM_OC_Init+0x124>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2238      	movs	r2, #56	; 0x38
 8009780:	2100      	movs	r1, #0
 8009782:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	0018      	movs	r0, r3
 8009788:	f000 f840 	bl	800980c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2239      	movs	r2, #57	; 0x39
 8009790:	2102      	movs	r1, #2
 8009792:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	3304      	adds	r3, #4
 800979c:	0019      	movs	r1, r3
 800979e:	0010      	movs	r0, r2
 80097a0:	f000 fd18 	bl	800a1d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	223e      	movs	r2, #62	; 0x3e
 80097a8:	2101      	movs	r1, #1
 80097aa:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	223a      	movs	r2, #58	; 0x3a
 80097b0:	2101      	movs	r1, #1
 80097b2:	5499      	strb	r1, [r3, r2]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	223b      	movs	r2, #59	; 0x3b
 80097b8:	2101      	movs	r1, #1
 80097ba:	5499      	strb	r1, [r3, r2]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	223c      	movs	r2, #60	; 0x3c
 80097c0:	2101      	movs	r1, #1
 80097c2:	5499      	strb	r1, [r3, r2]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	223d      	movs	r2, #61	; 0x3d
 80097c8:	2101      	movs	r1, #1
 80097ca:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2239      	movs	r2, #57	; 0x39
 80097d0:	2101      	movs	r1, #1
 80097d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	0018      	movs	r0, r3
 80097d8:	46bd      	mov	sp, r7
 80097da:	b002      	add	sp, #8
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	46c0      	nop			; (mov r8, r8)
 80097e0:	40000400 	.word	0x40000400
 80097e4:	40001000 	.word	0x40001000
 80097e8:	40001400 	.word	0x40001400
 80097ec:	40010800 	.word	0x40010800
 80097f0:	40011400 	.word	0x40011400
 80097f4:	0800ba1c 	.word	0x0800ba1c
 80097f8:	00000295 	.word	0x00000295
 80097fc:	00000296 	.word	0x00000296
 8009800:	0000ffff 	.word	0x0000ffff
 8009804:	00000297 	.word	0x00000297
 8009808:	00000299 	.word	0x00000299

0800980c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009814:	46c0      	nop			; (mov r8, r8)
 8009816:	46bd      	mov	sp, r7
 8009818:	b002      	add	sp, #8
 800981a:	bd80      	pop	{r7, pc}

0800981c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	2202      	movs	r2, #2
 800982c:	4013      	ands	r3, r2
 800982e:	2b02      	cmp	r3, #2
 8009830:	d124      	bne.n	800987c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	2202      	movs	r2, #2
 800983a:	4013      	ands	r3, r2
 800983c:	2b02      	cmp	r3, #2
 800983e:	d11d      	bne.n	800987c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2203      	movs	r2, #3
 8009846:	4252      	negs	r2, r2
 8009848:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2201      	movs	r2, #1
 800984e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	699b      	ldr	r3, [r3, #24]
 8009856:	2203      	movs	r2, #3
 8009858:	4013      	ands	r3, r2
 800985a:	d004      	beq.n	8009866 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	0018      	movs	r0, r3
 8009860:	f000 fca0 	bl	800a1a4 <HAL_TIM_IC_CaptureCallback>
 8009864:	e007      	b.n	8009876 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	0018      	movs	r0, r3
 800986a:	f000 fc93 	bl	800a194 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	0018      	movs	r0, r3
 8009872:	f000 fc9f 	bl	800a1b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	2204      	movs	r2, #4
 8009884:	4013      	ands	r3, r2
 8009886:	2b04      	cmp	r3, #4
 8009888:	d125      	bne.n	80098d6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	2204      	movs	r2, #4
 8009892:	4013      	ands	r3, r2
 8009894:	2b04      	cmp	r3, #4
 8009896:	d11e      	bne.n	80098d6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2205      	movs	r2, #5
 800989e:	4252      	negs	r2, r2
 80098a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2202      	movs	r2, #2
 80098a6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	699a      	ldr	r2, [r3, #24]
 80098ae:	23c0      	movs	r3, #192	; 0xc0
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4013      	ands	r3, r2
 80098b4:	d004      	beq.n	80098c0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	0018      	movs	r0, r3
 80098ba:	f000 fc73 	bl	800a1a4 <HAL_TIM_IC_CaptureCallback>
 80098be:	e007      	b.n	80098d0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	0018      	movs	r0, r3
 80098c4:	f000 fc66 	bl	800a194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	0018      	movs	r0, r3
 80098cc:	f000 fc72 	bl	800a1b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	691b      	ldr	r3, [r3, #16]
 80098dc:	2208      	movs	r2, #8
 80098de:	4013      	ands	r3, r2
 80098e0:	2b08      	cmp	r3, #8
 80098e2:	d124      	bne.n	800992e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	2208      	movs	r2, #8
 80098ec:	4013      	ands	r3, r2
 80098ee:	2b08      	cmp	r3, #8
 80098f0:	d11d      	bne.n	800992e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2209      	movs	r2, #9
 80098f8:	4252      	negs	r2, r2
 80098fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2204      	movs	r2, #4
 8009900:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	69db      	ldr	r3, [r3, #28]
 8009908:	2203      	movs	r2, #3
 800990a:	4013      	ands	r3, r2
 800990c:	d004      	beq.n	8009918 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	0018      	movs	r0, r3
 8009912:	f000 fc47 	bl	800a1a4 <HAL_TIM_IC_CaptureCallback>
 8009916:	e007      	b.n	8009928 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	0018      	movs	r0, r3
 800991c:	f000 fc3a 	bl	800a194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	0018      	movs	r0, r3
 8009924:	f000 fc46 	bl	800a1b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	2210      	movs	r2, #16
 8009936:	4013      	ands	r3, r2
 8009938:	2b10      	cmp	r3, #16
 800993a:	d125      	bne.n	8009988 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	2210      	movs	r2, #16
 8009944:	4013      	ands	r3, r2
 8009946:	2b10      	cmp	r3, #16
 8009948:	d11e      	bne.n	8009988 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2211      	movs	r2, #17
 8009950:	4252      	negs	r2, r2
 8009952:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2208      	movs	r2, #8
 8009958:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	69da      	ldr	r2, [r3, #28]
 8009960:	23c0      	movs	r3, #192	; 0xc0
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	4013      	ands	r3, r2
 8009966:	d004      	beq.n	8009972 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	0018      	movs	r0, r3
 800996c:	f000 fc1a 	bl	800a1a4 <HAL_TIM_IC_CaptureCallback>
 8009970:	e007      	b.n	8009982 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	0018      	movs	r0, r3
 8009976:	f000 fc0d 	bl	800a194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	0018      	movs	r0, r3
 800997e:	f000 fc19 	bl	800a1b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	2201      	movs	r2, #1
 8009990:	4013      	ands	r3, r2
 8009992:	2b01      	cmp	r3, #1
 8009994:	d10f      	bne.n	80099b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	2201      	movs	r2, #1
 800999e:	4013      	ands	r3, r2
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d108      	bne.n	80099b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2202      	movs	r2, #2
 80099aa:	4252      	negs	r2, r2
 80099ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	0018      	movs	r0, r3
 80099b2:	f7f7 feef 	bl	8001794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	2240      	movs	r2, #64	; 0x40
 80099be:	4013      	ands	r3, r2
 80099c0:	2b40      	cmp	r3, #64	; 0x40
 80099c2:	d10f      	bne.n	80099e4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	2240      	movs	r2, #64	; 0x40
 80099cc:	4013      	ands	r3, r2
 80099ce:	2b40      	cmp	r3, #64	; 0x40
 80099d0:	d108      	bne.n	80099e4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2241      	movs	r2, #65	; 0x41
 80099d8:	4252      	negs	r2, r2
 80099da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	0018      	movs	r0, r3
 80099e0:	f000 fbf0 	bl	800a1c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80099e4:	46c0      	nop			; (mov r8, r8)
 80099e6:	46bd      	mov	sp, r7
 80099e8:	b002      	add	sp, #8
 80099ea:	bd80      	pop	{r7, pc}

080099ec <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d011      	beq.n	8009a22 <HAL_TIM_OC_ConfigChannel+0x36>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2b04      	cmp	r3, #4
 8009a02:	d00e      	beq.n	8009a22 <HAL_TIM_OC_ConfigChannel+0x36>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2b08      	cmp	r3, #8
 8009a08:	d00b      	beq.n	8009a22 <HAL_TIM_OC_ConfigChannel+0x36>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2b0c      	cmp	r3, #12
 8009a0e:	d008      	beq.n	8009a22 <HAL_TIM_OC_ConfigChannel+0x36>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2b3c      	cmp	r3, #60	; 0x3c
 8009a14:	d005      	beq.n	8009a22 <HAL_TIM_OC_ConfigChannel+0x36>
 8009a16:	4a65      	ldr	r2, [pc, #404]	; (8009bac <HAL_TIM_OC_ConfigChannel+0x1c0>)
 8009a18:	4b65      	ldr	r3, [pc, #404]	; (8009bb0 <HAL_TIM_OC_ConfigChannel+0x1c4>)
 8009a1a:	0011      	movs	r1, r2
 8009a1c:	0018      	movs	r0, r3
 8009a1e:	f7fb fe35 	bl	800568c <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d019      	beq.n	8009a5e <HAL_TIM_OC_ConfigChannel+0x72>
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2b10      	cmp	r3, #16
 8009a30:	d015      	beq.n	8009a5e <HAL_TIM_OC_ConfigChannel+0x72>
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2b20      	cmp	r3, #32
 8009a38:	d011      	beq.n	8009a5e <HAL_TIM_OC_ConfigChannel+0x72>
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b30      	cmp	r3, #48	; 0x30
 8009a40:	d00d      	beq.n	8009a5e <HAL_TIM_OC_ConfigChannel+0x72>
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2b50      	cmp	r3, #80	; 0x50
 8009a48:	d009      	beq.n	8009a5e <HAL_TIM_OC_ConfigChannel+0x72>
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2b40      	cmp	r3, #64	; 0x40
 8009a50:	d005      	beq.n	8009a5e <HAL_TIM_OC_ConfigChannel+0x72>
 8009a52:	4a58      	ldr	r2, [pc, #352]	; (8009bb4 <HAL_TIM_OC_ConfigChannel+0x1c8>)
 8009a54:	4b56      	ldr	r3, [pc, #344]	; (8009bb0 <HAL_TIM_OC_ConfigChannel+0x1c4>)
 8009a56:	0011      	movs	r1, r2
 8009a58:	0018      	movs	r0, r3
 8009a5a:	f7fb fe17 	bl	800568c <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d009      	beq.n	8009a7a <HAL_TIM_OC_ConfigChannel+0x8e>
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d005      	beq.n	8009a7a <HAL_TIM_OC_ConfigChannel+0x8e>
 8009a6e:	4a52      	ldr	r2, [pc, #328]	; (8009bb8 <HAL_TIM_OC_ConfigChannel+0x1cc>)
 8009a70:	4b4f      	ldr	r3, [pc, #316]	; (8009bb0 <HAL_TIM_OC_ConfigChannel+0x1c4>)
 8009a72:	0011      	movs	r1, r2
 8009a74:	0018      	movs	r0, r3
 8009a76:	f7fb fe09 	bl	800568c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2238      	movs	r2, #56	; 0x38
 8009a7e:	5c9b      	ldrb	r3, [r3, r2]
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d101      	bne.n	8009a88 <HAL_TIM_OC_ConfigChannel+0x9c>
 8009a84:	2302      	movs	r3, #2
 8009a86:	e08d      	b.n	8009ba4 <HAL_TIM_OC_ConfigChannel+0x1b8>
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2238      	movs	r2, #56	; 0x38
 8009a8c:	2101      	movs	r1, #1
 8009a8e:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2b04      	cmp	r3, #4
 8009a94:	d02b      	beq.n	8009aee <HAL_TIM_OC_ConfigChannel+0x102>
 8009a96:	d802      	bhi.n	8009a9e <HAL_TIM_OC_ConfigChannel+0xb2>
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d005      	beq.n	8009aa8 <HAL_TIM_OC_ConfigChannel+0xbc>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 8009a9c:	e07d      	b.n	8009b9a <HAL_TIM_OC_ConfigChannel+0x1ae>
  switch (Channel)
 8009a9e:	2b08      	cmp	r3, #8
 8009aa0:	d048      	beq.n	8009b34 <HAL_TIM_OC_ConfigChannel+0x148>
 8009aa2:	2b0c      	cmp	r3, #12
 8009aa4:	d05f      	beq.n	8009b66 <HAL_TIM_OC_ConfigChannel+0x17a>
      break;
 8009aa6:	e078      	b.n	8009b9a <HAL_TIM_OC_ConfigChannel+0x1ae>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	2380      	movs	r3, #128	; 0x80
 8009aae:	05db      	lsls	r3, r3, #23
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d014      	beq.n	8009ade <HAL_TIM_OC_ConfigChannel+0xf2>
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a40      	ldr	r2, [pc, #256]	; (8009bbc <HAL_TIM_OC_ConfigChannel+0x1d0>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d00f      	beq.n	8009ade <HAL_TIM_OC_ConfigChannel+0xf2>
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a3f      	ldr	r2, [pc, #252]	; (8009bc0 <HAL_TIM_OC_ConfigChannel+0x1d4>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d00a      	beq.n	8009ade <HAL_TIM_OC_ConfigChannel+0xf2>
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a3d      	ldr	r2, [pc, #244]	; (8009bc4 <HAL_TIM_OC_ConfigChannel+0x1d8>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d005      	beq.n	8009ade <HAL_TIM_OC_ConfigChannel+0xf2>
 8009ad2:	4a3d      	ldr	r2, [pc, #244]	; (8009bc8 <HAL_TIM_OC_ConfigChannel+0x1dc>)
 8009ad4:	4b36      	ldr	r3, [pc, #216]	; (8009bb0 <HAL_TIM_OC_ConfigChannel+0x1c4>)
 8009ad6:	0011      	movs	r1, r2
 8009ad8:	0018      	movs	r0, r3
 8009ada:	f7fb fdd7 	bl	800568c <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68ba      	ldr	r2, [r7, #8]
 8009ae4:	0011      	movs	r1, r2
 8009ae6:	0018      	movs	r0, r3
 8009ae8:	f000 fbd2 	bl	800a290 <TIM_OC1_SetConfig>
      break;
 8009aec:	e055      	b.n	8009b9a <HAL_TIM_OC_ConfigChannel+0x1ae>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	2380      	movs	r3, #128	; 0x80
 8009af4:	05db      	lsls	r3, r3, #23
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d014      	beq.n	8009b24 <HAL_TIM_OC_ConfigChannel+0x138>
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a2f      	ldr	r2, [pc, #188]	; (8009bbc <HAL_TIM_OC_ConfigChannel+0x1d0>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d00f      	beq.n	8009b24 <HAL_TIM_OC_ConfigChannel+0x138>
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a2d      	ldr	r2, [pc, #180]	; (8009bc0 <HAL_TIM_OC_ConfigChannel+0x1d4>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d00a      	beq.n	8009b24 <HAL_TIM_OC_ConfigChannel+0x138>
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a2c      	ldr	r2, [pc, #176]	; (8009bc4 <HAL_TIM_OC_ConfigChannel+0x1d8>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d005      	beq.n	8009b24 <HAL_TIM_OC_ConfigChannel+0x138>
 8009b18:	4a2c      	ldr	r2, [pc, #176]	; (8009bcc <HAL_TIM_OC_ConfigChannel+0x1e0>)
 8009b1a:	4b25      	ldr	r3, [pc, #148]	; (8009bb0 <HAL_TIM_OC_ConfigChannel+0x1c4>)
 8009b1c:	0011      	movs	r1, r2
 8009b1e:	0018      	movs	r0, r3
 8009b20:	f7fb fdb4 	bl	800568c <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	0011      	movs	r1, r2
 8009b2c:	0018      	movs	r0, r3
 8009b2e:	f000 fbeb 	bl	800a308 <TIM_OC2_SetConfig>
      break;
 8009b32:	e032      	b.n	8009b9a <HAL_TIM_OC_ConfigChannel+0x1ae>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	2380      	movs	r3, #128	; 0x80
 8009b3a:	05db      	lsls	r3, r3, #23
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d00a      	beq.n	8009b56 <HAL_TIM_OC_ConfigChannel+0x16a>
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a1d      	ldr	r2, [pc, #116]	; (8009bbc <HAL_TIM_OC_ConfigChannel+0x1d0>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d005      	beq.n	8009b56 <HAL_TIM_OC_ConfigChannel+0x16a>
 8009b4a:	4a21      	ldr	r2, [pc, #132]	; (8009bd0 <HAL_TIM_OC_ConfigChannel+0x1e4>)
 8009b4c:	4b18      	ldr	r3, [pc, #96]	; (8009bb0 <HAL_TIM_OC_ConfigChannel+0x1c4>)
 8009b4e:	0011      	movs	r1, r2
 8009b50:	0018      	movs	r0, r3
 8009b52:	f7fb fd9b 	bl	800568c <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	68ba      	ldr	r2, [r7, #8]
 8009b5c:	0011      	movs	r1, r2
 8009b5e:	0018      	movs	r0, r3
 8009b60:	f000 fc14 	bl	800a38c <TIM_OC3_SetConfig>
      break;
 8009b64:	e019      	b.n	8009b9a <HAL_TIM_OC_ConfigChannel+0x1ae>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	2380      	movs	r3, #128	; 0x80
 8009b6c:	05db      	lsls	r3, r3, #23
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d00b      	beq.n	8009b8a <HAL_TIM_OC_ConfigChannel+0x19e>
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a11      	ldr	r2, [pc, #68]	; (8009bbc <HAL_TIM_OC_ConfigChannel+0x1d0>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d006      	beq.n	8009b8a <HAL_TIM_OC_ConfigChannel+0x19e>
 8009b7c:	23ed      	movs	r3, #237	; 0xed
 8009b7e:	011a      	lsls	r2, r3, #4
 8009b80:	4b0b      	ldr	r3, [pc, #44]	; (8009bb0 <HAL_TIM_OC_ConfigChannel+0x1c4>)
 8009b82:	0011      	movs	r1, r2
 8009b84:	0018      	movs	r0, r3
 8009b86:	f7fb fd81 	bl	800568c <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68ba      	ldr	r2, [r7, #8]
 8009b90:	0011      	movs	r1, r2
 8009b92:	0018      	movs	r0, r3
 8009b94:	f000 fc3a 	bl	800a40c <TIM_OC4_SetConfig>
      break;
 8009b98:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2238      	movs	r2, #56	; 0x38
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	0018      	movs	r0, r3
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	b004      	add	sp, #16
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	00000ea6 	.word	0x00000ea6
 8009bb0:	0800ba1c 	.word	0x0800ba1c
 8009bb4:	00000ea7 	.word	0x00000ea7
 8009bb8:	00000ea8 	.word	0x00000ea8
 8009bbc:	40000400 	.word	0x40000400
 8009bc0:	40010800 	.word	0x40010800
 8009bc4:	40011400 	.word	0x40011400
 8009bc8:	00000eb2 	.word	0x00000eb2
 8009bcc:	00000ebc 	.word	0x00000ebc
 8009bd0:	00000ec6 	.word	0x00000ec6

08009bd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2238      	movs	r2, #56	; 0x38
 8009be2:	5c9b      	ldrb	r3, [r3, r2]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d101      	bne.n	8009bec <HAL_TIM_ConfigClockSource+0x18>
 8009be8:	2302      	movs	r3, #2
 8009bea:	e2b3      	b.n	800a154 <HAL_TIM_ConfigClockSource+0x580>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2238      	movs	r2, #56	; 0x38
 8009bf0:	2101      	movs	r1, #1
 8009bf2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2239      	movs	r2, #57	; 0x39
 8009bf8:	2102      	movs	r1, #2
 8009bfa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	2380      	movs	r3, #128	; 0x80
 8009c02:	015b      	lsls	r3, r3, #5
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d02b      	beq.n	8009c60 <HAL_TIM_ConfigClockSource+0x8c>
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	2380      	movs	r3, #128	; 0x80
 8009c0e:	019b      	lsls	r3, r3, #6
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d025      	beq.n	8009c60 <HAL_TIM_ConfigClockSource+0x8c>
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d021      	beq.n	8009c60 <HAL_TIM_ConfigClockSource+0x8c>
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b10      	cmp	r3, #16
 8009c22:	d01d      	beq.n	8009c60 <HAL_TIM_ConfigClockSource+0x8c>
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2b20      	cmp	r3, #32
 8009c2a:	d019      	beq.n	8009c60 <HAL_TIM_ConfigClockSource+0x8c>
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	2b30      	cmp	r3, #48	; 0x30
 8009c32:	d015      	beq.n	8009c60 <HAL_TIM_ConfigClockSource+0x8c>
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b40      	cmp	r3, #64	; 0x40
 8009c3a:	d011      	beq.n	8009c60 <HAL_TIM_ConfigClockSource+0x8c>
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2b50      	cmp	r3, #80	; 0x50
 8009c42:	d00d      	beq.n	8009c60 <HAL_TIM_ConfigClockSource+0x8c>
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2b60      	cmp	r3, #96	; 0x60
 8009c4a:	d009      	beq.n	8009c60 <HAL_TIM_ConfigClockSource+0x8c>
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2b70      	cmp	r3, #112	; 0x70
 8009c52:	d005      	beq.n	8009c60 <HAL_TIM_ConfigClockSource+0x8c>
 8009c54:	4aa5      	ldr	r2, [pc, #660]	; (8009eec <HAL_TIM_ConfigClockSource+0x318>)
 8009c56:	4ba6      	ldr	r3, [pc, #664]	; (8009ef0 <HAL_TIM_ConfigClockSource+0x31c>)
 8009c58:	0011      	movs	r1, r2
 8009c5a:	0018      	movs	r0, r3
 8009c5c:	f7fb fd16 	bl	800568c <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	689b      	ldr	r3, [r3, #8]
 8009c66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2277      	movs	r2, #119	; 0x77
 8009c6c:	4393      	bics	r3, r2
 8009c6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	4aa0      	ldr	r2, [pc, #640]	; (8009ef4 <HAL_TIM_ConfigClockSource+0x320>)
 8009c74:	4013      	ands	r3, r2
 8009c76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2b40      	cmp	r3, #64	; 0x40
 8009c86:	d100      	bne.n	8009c8a <HAL_TIM_ConfigClockSource+0xb6>
 8009c88:	e1ea      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x48c>
 8009c8a:	d80e      	bhi.n	8009caa <HAL_TIM_ConfigClockSource+0xd6>
 8009c8c:	2b10      	cmp	r3, #16
 8009c8e:	d100      	bne.n	8009c92 <HAL_TIM_ConfigClockSource+0xbe>
 8009c90:	e232      	b.n	800a0f8 <HAL_TIM_ConfigClockSource+0x524>
 8009c92:	d803      	bhi.n	8009c9c <HAL_TIM_ConfigClockSource+0xc8>
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d100      	bne.n	8009c9a <HAL_TIM_ConfigClockSource+0xc6>
 8009c98:	e22e      	b.n	800a0f8 <HAL_TIM_ConfigClockSource+0x524>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009c9a:	e252      	b.n	800a142 <HAL_TIM_ConfigClockSource+0x56e>
  switch (sClockSourceConfig->ClockSource)
 8009c9c:	2b20      	cmp	r3, #32
 8009c9e:	d100      	bne.n	8009ca2 <HAL_TIM_ConfigClockSource+0xce>
 8009ca0:	e22a      	b.n	800a0f8 <HAL_TIM_ConfigClockSource+0x524>
 8009ca2:	2b30      	cmp	r3, #48	; 0x30
 8009ca4:	d100      	bne.n	8009ca8 <HAL_TIM_ConfigClockSource+0xd4>
 8009ca6:	e227      	b.n	800a0f8 <HAL_TIM_ConfigClockSource+0x524>
      break;
 8009ca8:	e24b      	b.n	800a142 <HAL_TIM_ConfigClockSource+0x56e>
  switch (sClockSourceConfig->ClockSource)
 8009caa:	2b70      	cmp	r3, #112	; 0x70
 8009cac:	d03d      	beq.n	8009d2a <HAL_TIM_ConfigClockSource+0x156>
 8009cae:	d806      	bhi.n	8009cbe <HAL_TIM_ConfigClockSource+0xea>
 8009cb0:	2b50      	cmp	r3, #80	; 0x50
 8009cb2:	d100      	bne.n	8009cb6 <HAL_TIM_ConfigClockSource+0xe2>
 8009cb4:	e13c      	b.n	8009f30 <HAL_TIM_ConfigClockSource+0x35c>
 8009cb6:	2b60      	cmp	r3, #96	; 0x60
 8009cb8:	d100      	bne.n	8009cbc <HAL_TIM_ConfigClockSource+0xe8>
 8009cba:	e185      	b.n	8009fc8 <HAL_TIM_ConfigClockSource+0x3f4>
      break;
 8009cbc:	e241      	b.n	800a142 <HAL_TIM_ConfigClockSource+0x56e>
  switch (sClockSourceConfig->ClockSource)
 8009cbe:	2280      	movs	r2, #128	; 0x80
 8009cc0:	0152      	lsls	r2, r2, #5
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d005      	beq.n	8009cd2 <HAL_TIM_ConfigClockSource+0xfe>
 8009cc6:	2280      	movs	r2, #128	; 0x80
 8009cc8:	0192      	lsls	r2, r2, #6
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d100      	bne.n	8009cd0 <HAL_TIM_ConfigClockSource+0xfc>
 8009cce:	e09b      	b.n	8009e08 <HAL_TIM_ConfigClockSource+0x234>
      break;
 8009cd0:	e237      	b.n	800a142 <HAL_TIM_ConfigClockSource+0x56e>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	2380      	movs	r3, #128	; 0x80
 8009cd8:	05db      	lsls	r3, r3, #23
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d100      	bne.n	8009ce0 <HAL_TIM_ConfigClockSource+0x10c>
 8009cde:	e22f      	b.n	800a140 <HAL_TIM_ConfigClockSource+0x56c>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a84      	ldr	r2, [pc, #528]	; (8009ef8 <HAL_TIM_ConfigClockSource+0x324>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d100      	bne.n	8009cec <HAL_TIM_ConfigClockSource+0x118>
 8009cea:	e229      	b.n	800a140 <HAL_TIM_ConfigClockSource+0x56c>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a82      	ldr	r2, [pc, #520]	; (8009efc <HAL_TIM_ConfigClockSource+0x328>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d100      	bne.n	8009cf8 <HAL_TIM_ConfigClockSource+0x124>
 8009cf6:	e223      	b.n	800a140 <HAL_TIM_ConfigClockSource+0x56c>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a80      	ldr	r2, [pc, #512]	; (8009f00 <HAL_TIM_ConfigClockSource+0x32c>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d100      	bne.n	8009d04 <HAL_TIM_ConfigClockSource+0x130>
 8009d02:	e21d      	b.n	800a140 <HAL_TIM_ConfigClockSource+0x56c>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a7e      	ldr	r2, [pc, #504]	; (8009f04 <HAL_TIM_ConfigClockSource+0x330>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d100      	bne.n	8009d10 <HAL_TIM_ConfigClockSource+0x13c>
 8009d0e:	e217      	b.n	800a140 <HAL_TIM_ConfigClockSource+0x56c>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a7c      	ldr	r2, [pc, #496]	; (8009f08 <HAL_TIM_ConfigClockSource+0x334>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d100      	bne.n	8009d1c <HAL_TIM_ConfigClockSource+0x148>
 8009d1a:	e211      	b.n	800a140 <HAL_TIM_ConfigClockSource+0x56c>
 8009d1c:	4a7b      	ldr	r2, [pc, #492]	; (8009f0c <HAL_TIM_ConfigClockSource+0x338>)
 8009d1e:	4b74      	ldr	r3, [pc, #464]	; (8009ef0 <HAL_TIM_ConfigClockSource+0x31c>)
 8009d20:	0011      	movs	r1, r2
 8009d22:	0018      	movs	r0, r3
 8009d24:	f7fb fcb2 	bl	800568c <assert_failed>
      break;
 8009d28:	e20a      	b.n	800a140 <HAL_TIM_ConfigClockSource+0x56c>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	2380      	movs	r3, #128	; 0x80
 8009d30:	05db      	lsls	r3, r3, #23
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d00f      	beq.n	8009d56 <HAL_TIM_ConfigClockSource+0x182>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a6f      	ldr	r2, [pc, #444]	; (8009ef8 <HAL_TIM_ConfigClockSource+0x324>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d00a      	beq.n	8009d56 <HAL_TIM_ConfigClockSource+0x182>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a6f      	ldr	r2, [pc, #444]	; (8009f04 <HAL_TIM_ConfigClockSource+0x330>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d005      	beq.n	8009d56 <HAL_TIM_ConfigClockSource+0x182>
 8009d4a:	4a71      	ldr	r2, [pc, #452]	; (8009f10 <HAL_TIM_ConfigClockSource+0x33c>)
 8009d4c:	4b68      	ldr	r3, [pc, #416]	; (8009ef0 <HAL_TIM_ConfigClockSource+0x31c>)
 8009d4e:	0011      	movs	r1, r2
 8009d50:	0018      	movs	r0, r3
 8009d52:	f7fb fc9b 	bl	800568c <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d017      	beq.n	8009d8e <HAL_TIM_ConfigClockSource+0x1ba>
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	689a      	ldr	r2, [r3, #8]
 8009d62:	2380      	movs	r3, #128	; 0x80
 8009d64:	015b      	lsls	r3, r3, #5
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d011      	beq.n	8009d8e <HAL_TIM_ConfigClockSource+0x1ba>
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	689a      	ldr	r2, [r3, #8]
 8009d6e:	2380      	movs	r3, #128	; 0x80
 8009d70:	019b      	lsls	r3, r3, #6
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d00b      	beq.n	8009d8e <HAL_TIM_ConfigClockSource+0x1ba>
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	689a      	ldr	r2, [r3, #8]
 8009d7a:	23c0      	movs	r3, #192	; 0xc0
 8009d7c:	019b      	lsls	r3, r3, #6
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d005      	beq.n	8009d8e <HAL_TIM_ConfigClockSource+0x1ba>
 8009d82:	4a64      	ldr	r2, [pc, #400]	; (8009f14 <HAL_TIM_ConfigClockSource+0x340>)
 8009d84:	4b5a      	ldr	r3, [pc, #360]	; (8009ef0 <HAL_TIM_ConfigClockSource+0x31c>)
 8009d86:	0011      	movs	r1, r2
 8009d88:	0018      	movs	r0, r3
 8009d8a:	f7fb fc7f 	bl	800568c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	685a      	ldr	r2, [r3, #4]
 8009d92:	2380      	movs	r3, #128	; 0x80
 8009d94:	021b      	lsls	r3, r3, #8
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d015      	beq.n	8009dc6 <HAL_TIM_ConfigClockSource+0x1f2>
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d011      	beq.n	8009dc6 <HAL_TIM_ConfigClockSource+0x1f2>
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00d      	beq.n	8009dc6 <HAL_TIM_ConfigClockSource+0x1f2>
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	d009      	beq.n	8009dc6 <HAL_TIM_ConfigClockSource+0x1f2>
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	2b0a      	cmp	r3, #10
 8009db8:	d005      	beq.n	8009dc6 <HAL_TIM_ConfigClockSource+0x1f2>
 8009dba:	4a57      	ldr	r2, [pc, #348]	; (8009f18 <HAL_TIM_ConfigClockSource+0x344>)
 8009dbc:	4b4c      	ldr	r3, [pc, #304]	; (8009ef0 <HAL_TIM_ConfigClockSource+0x31c>)
 8009dbe:	0011      	movs	r1, r2
 8009dc0:	0018      	movs	r0, r3
 8009dc2:	f7fb fc63 	bl	800568c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	2b0f      	cmp	r3, #15
 8009dcc:	d905      	bls.n	8009dda <HAL_TIM_ConfigClockSource+0x206>
 8009dce:	4a53      	ldr	r2, [pc, #332]	; (8009f1c <HAL_TIM_ConfigClockSource+0x348>)
 8009dd0:	4b47      	ldr	r3, [pc, #284]	; (8009ef0 <HAL_TIM_ConfigClockSource+0x31c>)
 8009dd2:	0011      	movs	r1, r2
 8009dd4:	0018      	movs	r0, r3
 8009dd6:	f7fb fc59 	bl	800568c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6818      	ldr	r0, [r3, #0]
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	6899      	ldr	r1, [r3, #8]
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	685a      	ldr	r2, [r3, #4]
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	f000 fbcf 	bl	800a58c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2277      	movs	r2, #119	; 0x77
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	609a      	str	r2, [r3, #8]
      break;
 8009e06:	e19c      	b.n	800a142 <HAL_TIM_ConfigClockSource+0x56e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	2380      	movs	r3, #128	; 0x80
 8009e0e:	05db      	lsls	r3, r3, #23
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d014      	beq.n	8009e3e <HAL_TIM_ConfigClockSource+0x26a>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a37      	ldr	r2, [pc, #220]	; (8009ef8 <HAL_TIM_ConfigClockSource+0x324>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d00f      	beq.n	8009e3e <HAL_TIM_ConfigClockSource+0x26a>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a38      	ldr	r2, [pc, #224]	; (8009f04 <HAL_TIM_ConfigClockSource+0x330>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d00a      	beq.n	8009e3e <HAL_TIM_ConfigClockSource+0x26a>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a36      	ldr	r2, [pc, #216]	; (8009f08 <HAL_TIM_ConfigClockSource+0x334>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d005      	beq.n	8009e3e <HAL_TIM_ConfigClockSource+0x26a>
 8009e32:	4a3b      	ldr	r2, [pc, #236]	; (8009f20 <HAL_TIM_ConfigClockSource+0x34c>)
 8009e34:	4b2e      	ldr	r3, [pc, #184]	; (8009ef0 <HAL_TIM_ConfigClockSource+0x31c>)
 8009e36:	0011      	movs	r1, r2
 8009e38:	0018      	movs	r0, r3
 8009e3a:	f7fb fc27 	bl	800568c <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d017      	beq.n	8009e76 <HAL_TIM_ConfigClockSource+0x2a2>
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	689a      	ldr	r2, [r3, #8]
 8009e4a:	2380      	movs	r3, #128	; 0x80
 8009e4c:	015b      	lsls	r3, r3, #5
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d011      	beq.n	8009e76 <HAL_TIM_ConfigClockSource+0x2a2>
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	689a      	ldr	r2, [r3, #8]
 8009e56:	2380      	movs	r3, #128	; 0x80
 8009e58:	019b      	lsls	r3, r3, #6
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d00b      	beq.n	8009e76 <HAL_TIM_ConfigClockSource+0x2a2>
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	689a      	ldr	r2, [r3, #8]
 8009e62:	23c0      	movs	r3, #192	; 0xc0
 8009e64:	019b      	lsls	r3, r3, #6
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d005      	beq.n	8009e76 <HAL_TIM_ConfigClockSource+0x2a2>
 8009e6a:	4a2e      	ldr	r2, [pc, #184]	; (8009f24 <HAL_TIM_ConfigClockSource+0x350>)
 8009e6c:	4b20      	ldr	r3, [pc, #128]	; (8009ef0 <HAL_TIM_ConfigClockSource+0x31c>)
 8009e6e:	0011      	movs	r1, r2
 8009e70:	0018      	movs	r0, r3
 8009e72:	f7fb fc0b 	bl	800568c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	685a      	ldr	r2, [r3, #4]
 8009e7a:	2380      	movs	r3, #128	; 0x80
 8009e7c:	021b      	lsls	r3, r3, #8
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d015      	beq.n	8009eae <HAL_TIM_ConfigClockSource+0x2da>
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d011      	beq.n	8009eae <HAL_TIM_ConfigClockSource+0x2da>
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d00d      	beq.n	8009eae <HAL_TIM_ConfigClockSource+0x2da>
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	2b02      	cmp	r3, #2
 8009e98:	d009      	beq.n	8009eae <HAL_TIM_ConfigClockSource+0x2da>
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	2b0a      	cmp	r3, #10
 8009ea0:	d005      	beq.n	8009eae <HAL_TIM_ConfigClockSource+0x2da>
 8009ea2:	4a21      	ldr	r2, [pc, #132]	; (8009f28 <HAL_TIM_ConfigClockSource+0x354>)
 8009ea4:	4b12      	ldr	r3, [pc, #72]	; (8009ef0 <HAL_TIM_ConfigClockSource+0x31c>)
 8009ea6:	0011      	movs	r1, r2
 8009ea8:	0018      	movs	r0, r3
 8009eaa:	f7fb fbef 	bl	800568c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	2b0f      	cmp	r3, #15
 8009eb4:	d905      	bls.n	8009ec2 <HAL_TIM_ConfigClockSource+0x2ee>
 8009eb6:	4a1d      	ldr	r2, [pc, #116]	; (8009f2c <HAL_TIM_ConfigClockSource+0x358>)
 8009eb8:	4b0d      	ldr	r3, [pc, #52]	; (8009ef0 <HAL_TIM_ConfigClockSource+0x31c>)
 8009eba:	0011      	movs	r1, r2
 8009ebc:	0018      	movs	r0, r3
 8009ebe:	f7fb fbe5 	bl	800568c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6818      	ldr	r0, [r3, #0]
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	6899      	ldr	r1, [r3, #8]
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	685a      	ldr	r2, [r3, #4]
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	f000 fb5b 	bl	800a58c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	689a      	ldr	r2, [r3, #8]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	2180      	movs	r1, #128	; 0x80
 8009ee2:	01c9      	lsls	r1, r1, #7
 8009ee4:	430a      	orrs	r2, r1
 8009ee6:	609a      	str	r2, [r3, #8]
      break;
 8009ee8:	e12b      	b.n	800a142 <HAL_TIM_ConfigClockSource+0x56e>
 8009eea:	46c0      	nop			; (mov r8, r8)
 8009eec:	0000131c 	.word	0x0000131c
 8009ef0:	0800ba1c 	.word	0x0800ba1c
 8009ef4:	ffff00ff 	.word	0xffff00ff
 8009ef8:	40000400 	.word	0x40000400
 8009efc:	40001000 	.word	0x40001000
 8009f00:	40001400 	.word	0x40001400
 8009f04:	40010800 	.word	0x40010800
 8009f08:	40011400 	.word	0x40011400
 8009f0c:	00001328 	.word	0x00001328
 8009f10:	0000132f 	.word	0x0000132f
 8009f14:	00001332 	.word	0x00001332
 8009f18:	00001333 	.word	0x00001333
 8009f1c:	00001334 	.word	0x00001334
 8009f20:	00001347 	.word	0x00001347
 8009f24:	0000134a 	.word	0x0000134a
 8009f28:	0000134b 	.word	0x0000134b
 8009f2c:	0000134c 	.word	0x0000134c
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	2380      	movs	r3, #128	; 0x80
 8009f36:	05db      	lsls	r3, r3, #23
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d00f      	beq.n	8009f5c <HAL_TIM_ConfigClockSource+0x388>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a86      	ldr	r2, [pc, #536]	; (800a15c <HAL_TIM_ConfigClockSource+0x588>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d00a      	beq.n	8009f5c <HAL_TIM_ConfigClockSource+0x388>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a85      	ldr	r2, [pc, #532]	; (800a160 <HAL_TIM_ConfigClockSource+0x58c>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d005      	beq.n	8009f5c <HAL_TIM_ConfigClockSource+0x388>
 8009f50:	4a84      	ldr	r2, [pc, #528]	; (800a164 <HAL_TIM_ConfigClockSource+0x590>)
 8009f52:	4b85      	ldr	r3, [pc, #532]	; (800a168 <HAL_TIM_ConfigClockSource+0x594>)
 8009f54:	0011      	movs	r1, r2
 8009f56:	0018      	movs	r0, r3
 8009f58:	f7fb fb98 	bl	800568c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	2380      	movs	r3, #128	; 0x80
 8009f62:	021b      	lsls	r3, r3, #8
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d015      	beq.n	8009f94 <HAL_TIM_ConfigClockSource+0x3c0>
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d011      	beq.n	8009f94 <HAL_TIM_ConfigClockSource+0x3c0>
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00d      	beq.n	8009f94 <HAL_TIM_ConfigClockSource+0x3c0>
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d009      	beq.n	8009f94 <HAL_TIM_ConfigClockSource+0x3c0>
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	2b0a      	cmp	r3, #10
 8009f86:	d005      	beq.n	8009f94 <HAL_TIM_ConfigClockSource+0x3c0>
 8009f88:	4a78      	ldr	r2, [pc, #480]	; (800a16c <HAL_TIM_ConfigClockSource+0x598>)
 8009f8a:	4b77      	ldr	r3, [pc, #476]	; (800a168 <HAL_TIM_ConfigClockSource+0x594>)
 8009f8c:	0011      	movs	r1, r2
 8009f8e:	0018      	movs	r0, r3
 8009f90:	f7fb fb7c 	bl	800568c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	2b0f      	cmp	r3, #15
 8009f9a:	d905      	bls.n	8009fa8 <HAL_TIM_ConfigClockSource+0x3d4>
 8009f9c:	4a74      	ldr	r2, [pc, #464]	; (800a170 <HAL_TIM_ConfigClockSource+0x59c>)
 8009f9e:	4b72      	ldr	r3, [pc, #456]	; (800a168 <HAL_TIM_ConfigClockSource+0x594>)
 8009fa0:	0011      	movs	r1, r2
 8009fa2:	0018      	movs	r0, r3
 8009fa4:	f7fb fb72 	bl	800568c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6818      	ldr	r0, [r3, #0]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	6859      	ldr	r1, [r3, #4]
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	68db      	ldr	r3, [r3, #12]
 8009fb4:	001a      	movs	r2, r3
 8009fb6:	f000 fa6f 	bl	800a498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2150      	movs	r1, #80	; 0x50
 8009fc0:	0018      	movs	r0, r3
 8009fc2:	f000 fac9 	bl	800a558 <TIM_ITRx_SetConfig>
      break;
 8009fc6:	e0bc      	b.n	800a142 <HAL_TIM_ConfigClockSource+0x56e>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	2380      	movs	r3, #128	; 0x80
 8009fce:	05db      	lsls	r3, r3, #23
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d00f      	beq.n	8009ff4 <HAL_TIM_ConfigClockSource+0x420>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a60      	ldr	r2, [pc, #384]	; (800a15c <HAL_TIM_ConfigClockSource+0x588>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d00a      	beq.n	8009ff4 <HAL_TIM_ConfigClockSource+0x420>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a5f      	ldr	r2, [pc, #380]	; (800a160 <HAL_TIM_ConfigClockSource+0x58c>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d005      	beq.n	8009ff4 <HAL_TIM_ConfigClockSource+0x420>
 8009fe8:	4a62      	ldr	r2, [pc, #392]	; (800a174 <HAL_TIM_ConfigClockSource+0x5a0>)
 8009fea:	4b5f      	ldr	r3, [pc, #380]	; (800a168 <HAL_TIM_ConfigClockSource+0x594>)
 8009fec:	0011      	movs	r1, r2
 8009fee:	0018      	movs	r0, r3
 8009ff0:	f7fb fb4c 	bl	800568c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	685a      	ldr	r2, [r3, #4]
 8009ff8:	2380      	movs	r3, #128	; 0x80
 8009ffa:	021b      	lsls	r3, r3, #8
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d015      	beq.n	800a02c <HAL_TIM_ConfigClockSource+0x458>
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d011      	beq.n	800a02c <HAL_TIM_ConfigClockSource+0x458>
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d00d      	beq.n	800a02c <HAL_TIM_ConfigClockSource+0x458>
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	2b02      	cmp	r3, #2
 800a016:	d009      	beq.n	800a02c <HAL_TIM_ConfigClockSource+0x458>
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	2b0a      	cmp	r3, #10
 800a01e:	d005      	beq.n	800a02c <HAL_TIM_ConfigClockSource+0x458>
 800a020:	4a55      	ldr	r2, [pc, #340]	; (800a178 <HAL_TIM_ConfigClockSource+0x5a4>)
 800a022:	4b51      	ldr	r3, [pc, #324]	; (800a168 <HAL_TIM_ConfigClockSource+0x594>)
 800a024:	0011      	movs	r1, r2
 800a026:	0018      	movs	r0, r3
 800a028:	f7fb fb30 	bl	800568c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	2b0f      	cmp	r3, #15
 800a032:	d905      	bls.n	800a040 <HAL_TIM_ConfigClockSource+0x46c>
 800a034:	4a51      	ldr	r2, [pc, #324]	; (800a17c <HAL_TIM_ConfigClockSource+0x5a8>)
 800a036:	4b4c      	ldr	r3, [pc, #304]	; (800a168 <HAL_TIM_ConfigClockSource+0x594>)
 800a038:	0011      	movs	r1, r2
 800a03a:	0018      	movs	r0, r3
 800a03c:	f7fb fb26 	bl	800568c <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6818      	ldr	r0, [r3, #0]
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	6859      	ldr	r1, [r3, #4]
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	001a      	movs	r2, r3
 800a04e:	f000 fa51 	bl	800a4f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2160      	movs	r1, #96	; 0x60
 800a058:	0018      	movs	r0, r3
 800a05a:	f000 fa7d 	bl	800a558 <TIM_ITRx_SetConfig>
      break;
 800a05e:	e070      	b.n	800a142 <HAL_TIM_ConfigClockSource+0x56e>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	2380      	movs	r3, #128	; 0x80
 800a066:	05db      	lsls	r3, r3, #23
 800a068:	429a      	cmp	r2, r3
 800a06a:	d00f      	beq.n	800a08c <HAL_TIM_ConfigClockSource+0x4b8>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a3a      	ldr	r2, [pc, #232]	; (800a15c <HAL_TIM_ConfigClockSource+0x588>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d00a      	beq.n	800a08c <HAL_TIM_ConfigClockSource+0x4b8>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a39      	ldr	r2, [pc, #228]	; (800a160 <HAL_TIM_ConfigClockSource+0x58c>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d005      	beq.n	800a08c <HAL_TIM_ConfigClockSource+0x4b8>
 800a080:	4a3f      	ldr	r2, [pc, #252]	; (800a180 <HAL_TIM_ConfigClockSource+0x5ac>)
 800a082:	4b39      	ldr	r3, [pc, #228]	; (800a168 <HAL_TIM_ConfigClockSource+0x594>)
 800a084:	0011      	movs	r1, r2
 800a086:	0018      	movs	r0, r3
 800a088:	f7fb fb00 	bl	800568c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	685a      	ldr	r2, [r3, #4]
 800a090:	2380      	movs	r3, #128	; 0x80
 800a092:	021b      	lsls	r3, r3, #8
 800a094:	429a      	cmp	r2, r3
 800a096:	d015      	beq.n	800a0c4 <HAL_TIM_ConfigClockSource+0x4f0>
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d011      	beq.n	800a0c4 <HAL_TIM_ConfigClockSource+0x4f0>
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d00d      	beq.n	800a0c4 <HAL_TIM_ConfigClockSource+0x4f0>
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	2b02      	cmp	r3, #2
 800a0ae:	d009      	beq.n	800a0c4 <HAL_TIM_ConfigClockSource+0x4f0>
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	2b0a      	cmp	r3, #10
 800a0b6:	d005      	beq.n	800a0c4 <HAL_TIM_ConfigClockSource+0x4f0>
 800a0b8:	4a32      	ldr	r2, [pc, #200]	; (800a184 <HAL_TIM_ConfigClockSource+0x5b0>)
 800a0ba:	4b2b      	ldr	r3, [pc, #172]	; (800a168 <HAL_TIM_ConfigClockSource+0x594>)
 800a0bc:	0011      	movs	r1, r2
 800a0be:	0018      	movs	r0, r3
 800a0c0:	f7fb fae4 	bl	800568c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	2b0f      	cmp	r3, #15
 800a0ca:	d905      	bls.n	800a0d8 <HAL_TIM_ConfigClockSource+0x504>
 800a0cc:	4a2e      	ldr	r2, [pc, #184]	; (800a188 <HAL_TIM_ConfigClockSource+0x5b4>)
 800a0ce:	4b26      	ldr	r3, [pc, #152]	; (800a168 <HAL_TIM_ConfigClockSource+0x594>)
 800a0d0:	0011      	movs	r1, r2
 800a0d2:	0018      	movs	r0, r3
 800a0d4:	f7fb fada 	bl	800568c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6818      	ldr	r0, [r3, #0]
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	6859      	ldr	r1, [r3, #4]
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	001a      	movs	r2, r3
 800a0e6:	f000 f9d7 	bl	800a498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2140      	movs	r1, #64	; 0x40
 800a0f0:	0018      	movs	r0, r3
 800a0f2:	f000 fa31 	bl	800a558 <TIM_ITRx_SetConfig>
      break;
 800a0f6:	e024      	b.n	800a142 <HAL_TIM_ConfigClockSource+0x56e>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	2380      	movs	r3, #128	; 0x80
 800a0fe:	05db      	lsls	r3, r3, #23
 800a100:	429a      	cmp	r2, r3
 800a102:	d014      	beq.n	800a12e <HAL_TIM_ConfigClockSource+0x55a>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a14      	ldr	r2, [pc, #80]	; (800a15c <HAL_TIM_ConfigClockSource+0x588>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d00f      	beq.n	800a12e <HAL_TIM_ConfigClockSource+0x55a>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a13      	ldr	r2, [pc, #76]	; (800a160 <HAL_TIM_ConfigClockSource+0x58c>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d00a      	beq.n	800a12e <HAL_TIM_ConfigClockSource+0x55a>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a1b      	ldr	r2, [pc, #108]	; (800a18c <HAL_TIM_ConfigClockSource+0x5b8>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d005      	beq.n	800a12e <HAL_TIM_ConfigClockSource+0x55a>
 800a122:	4a1b      	ldr	r2, [pc, #108]	; (800a190 <HAL_TIM_ConfigClockSource+0x5bc>)
 800a124:	4b10      	ldr	r3, [pc, #64]	; (800a168 <HAL_TIM_ConfigClockSource+0x594>)
 800a126:	0011      	movs	r1, r2
 800a128:	0018      	movs	r0, r3
 800a12a:	f7fb faaf 	bl	800568c <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	0019      	movs	r1, r3
 800a138:	0010      	movs	r0, r2
 800a13a:	f000 fa0d 	bl	800a558 <TIM_ITRx_SetConfig>
        break;
 800a13e:	e000      	b.n	800a142 <HAL_TIM_ConfigClockSource+0x56e>
      break;
 800a140:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2239      	movs	r2, #57	; 0x39
 800a146:	2101      	movs	r1, #1
 800a148:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2238      	movs	r2, #56	; 0x38
 800a14e:	2100      	movs	r1, #0
 800a150:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	0018      	movs	r0, r3
 800a156:	46bd      	mov	sp, r7
 800a158:	b004      	add	sp, #16
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	40000400 	.word	0x40000400
 800a160:	40010800 	.word	0x40010800
 800a164:	0000135b 	.word	0x0000135b
 800a168:	0800ba1c 	.word	0x0800ba1c
 800a16c:	0000135e 	.word	0x0000135e
 800a170:	0000135f 	.word	0x0000135f
 800a174:	0000136b 	.word	0x0000136b
 800a178:	0000136e 	.word	0x0000136e
 800a17c:	0000136f 	.word	0x0000136f
 800a180:	0000137b 	.word	0x0000137b
 800a184:	0000137e 	.word	0x0000137e
 800a188:	0000137f 	.word	0x0000137f
 800a18c:	40011400 	.word	0x40011400
 800a190:	0000138e 	.word	0x0000138e

0800a194 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a19c:	46c0      	nop			; (mov r8, r8)
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	b002      	add	sp, #8
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a1ac:	46c0      	nop			; (mov r8, r8)
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	b002      	add	sp, #8
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a1bc:	46c0      	nop			; (mov r8, r8)
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	b002      	add	sp, #8
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a1cc:	46c0      	nop			; (mov r8, r8)
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	b002      	add	sp, #8
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	2380      	movs	r3, #128	; 0x80
 800a1e8:	05db      	lsls	r3, r3, #23
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d00b      	beq.n	800a206 <TIM_Base_SetConfig+0x32>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4a23      	ldr	r2, [pc, #140]	; (800a280 <TIM_Base_SetConfig+0xac>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d007      	beq.n	800a206 <TIM_Base_SetConfig+0x32>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	4a22      	ldr	r2, [pc, #136]	; (800a284 <TIM_Base_SetConfig+0xb0>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d003      	beq.n	800a206 <TIM_Base_SetConfig+0x32>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4a21      	ldr	r2, [pc, #132]	; (800a288 <TIM_Base_SetConfig+0xb4>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d108      	bne.n	800a218 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2270      	movs	r2, #112	; 0x70
 800a20a:	4393      	bics	r3, r2
 800a20c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	68fa      	ldr	r2, [r7, #12]
 800a214:	4313      	orrs	r3, r2
 800a216:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	2380      	movs	r3, #128	; 0x80
 800a21c:	05db      	lsls	r3, r3, #23
 800a21e:	429a      	cmp	r2, r3
 800a220:	d00b      	beq.n	800a23a <TIM_Base_SetConfig+0x66>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4a16      	ldr	r2, [pc, #88]	; (800a280 <TIM_Base_SetConfig+0xac>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d007      	beq.n	800a23a <TIM_Base_SetConfig+0x66>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	4a15      	ldr	r2, [pc, #84]	; (800a284 <TIM_Base_SetConfig+0xb0>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d003      	beq.n	800a23a <TIM_Base_SetConfig+0x66>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	4a14      	ldr	r2, [pc, #80]	; (800a288 <TIM_Base_SetConfig+0xb4>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d108      	bne.n	800a24c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	4a13      	ldr	r2, [pc, #76]	; (800a28c <TIM_Base_SetConfig+0xb8>)
 800a23e:	4013      	ands	r3, r2
 800a240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	68db      	ldr	r3, [r3, #12]
 800a246:	68fa      	ldr	r2, [r7, #12]
 800a248:	4313      	orrs	r3, r2
 800a24a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2280      	movs	r2, #128	; 0x80
 800a250:	4393      	bics	r3, r2
 800a252:	001a      	movs	r2, r3
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	4313      	orrs	r3, r2
 800a25a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	68fa      	ldr	r2, [r7, #12]
 800a260:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	689a      	ldr	r2, [r3, #8]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2201      	movs	r2, #1
 800a276:	615a      	str	r2, [r3, #20]
}
 800a278:	46c0      	nop			; (mov r8, r8)
 800a27a:	46bd      	mov	sp, r7
 800a27c:	b004      	add	sp, #16
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	40000400 	.word	0x40000400
 800a284:	40010800 	.word	0x40010800
 800a288:	40011400 	.word	0x40011400
 800a28c:	fffffcff 	.word	0xfffffcff

0800a290 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b086      	sub	sp, #24
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a1b      	ldr	r3, [r3, #32]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	4393      	bics	r3, r2
 800a2a2:	001a      	movs	r2, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6a1b      	ldr	r3, [r3, #32]
 800a2ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	699b      	ldr	r3, [r3, #24]
 800a2b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2270      	movs	r2, #112	; 0x70
 800a2be:	4393      	bics	r3, r2
 800a2c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2203      	movs	r2, #3
 800a2c6:	4393      	bics	r3, r2
 800a2c8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	2202      	movs	r2, #2
 800a2d8:	4393      	bics	r3, r2
 800a2da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	697a      	ldr	r2, [r7, #20]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	693a      	ldr	r2, [r7, #16]
 800a2ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	685a      	ldr	r2, [r3, #4]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	697a      	ldr	r2, [r7, #20]
 800a2fe:	621a      	str	r2, [r3, #32]
}
 800a300:	46c0      	nop			; (mov r8, r8)
 800a302:	46bd      	mov	sp, r7
 800a304:	b006      	add	sp, #24
 800a306:	bd80      	pop	{r7, pc}

0800a308 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b086      	sub	sp, #24
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6a1b      	ldr	r3, [r3, #32]
 800a316:	2210      	movs	r2, #16
 800a318:	4393      	bics	r3, r2
 800a31a:	001a      	movs	r2, r3
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6a1b      	ldr	r3, [r3, #32]
 800a324:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	699b      	ldr	r3, [r3, #24]
 800a330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	4a13      	ldr	r2, [pc, #76]	; (800a384 <TIM_OC2_SetConfig+0x7c>)
 800a336:	4013      	ands	r3, r2
 800a338:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	4a12      	ldr	r2, [pc, #72]	; (800a388 <TIM_OC2_SetConfig+0x80>)
 800a33e:	4013      	ands	r3, r2
 800a340:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	021b      	lsls	r3, r3, #8
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	4313      	orrs	r3, r2
 800a34c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	2220      	movs	r2, #32
 800a352:	4393      	bics	r3, r2
 800a354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	011b      	lsls	r3, r3, #4
 800a35c:	697a      	ldr	r2, [r7, #20]
 800a35e:	4313      	orrs	r3, r2
 800a360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	693a      	ldr	r2, [r7, #16]
 800a366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	68fa      	ldr	r2, [r7, #12]
 800a36c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	685a      	ldr	r2, [r3, #4]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	697a      	ldr	r2, [r7, #20]
 800a37a:	621a      	str	r2, [r3, #32]
}
 800a37c:	46c0      	nop			; (mov r8, r8)
 800a37e:	46bd      	mov	sp, r7
 800a380:	b006      	add	sp, #24
 800a382:	bd80      	pop	{r7, pc}
 800a384:	ffff8fff 	.word	0xffff8fff
 800a388:	fffffcff 	.word	0xfffffcff

0800a38c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b086      	sub	sp, #24
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6a1b      	ldr	r3, [r3, #32]
 800a39a:	4a1a      	ldr	r2, [pc, #104]	; (800a404 <TIM_OC3_SetConfig+0x78>)
 800a39c:	401a      	ands	r2, r3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a1b      	ldr	r3, [r3, #32]
 800a3a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	69db      	ldr	r3, [r3, #28]
 800a3b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2270      	movs	r2, #112	; 0x70
 800a3b8:	4393      	bics	r3, r2
 800a3ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2203      	movs	r2, #3
 800a3c0:	4393      	bics	r3, r2
 800a3c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	4a0d      	ldr	r2, [pc, #52]	; (800a408 <TIM_OC3_SetConfig+0x7c>)
 800a3d2:	4013      	ands	r3, r2
 800a3d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	021b      	lsls	r3, r3, #8
 800a3dc:	697a      	ldr	r2, [r7, #20]
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	693a      	ldr	r2, [r7, #16]
 800a3e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	68fa      	ldr	r2, [r7, #12]
 800a3ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	685a      	ldr	r2, [r3, #4]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	697a      	ldr	r2, [r7, #20]
 800a3fa:	621a      	str	r2, [r3, #32]
}
 800a3fc:	46c0      	nop			; (mov r8, r8)
 800a3fe:	46bd      	mov	sp, r7
 800a400:	b006      	add	sp, #24
 800a402:	bd80      	pop	{r7, pc}
 800a404:	fffffeff 	.word	0xfffffeff
 800a408:	fffffdff 	.word	0xfffffdff

0800a40c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b086      	sub	sp, #24
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a1b      	ldr	r3, [r3, #32]
 800a41a:	4a1b      	ldr	r2, [pc, #108]	; (800a488 <TIM_OC4_SetConfig+0x7c>)
 800a41c:	401a      	ands	r2, r3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6a1b      	ldr	r3, [r3, #32]
 800a426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	69db      	ldr	r3, [r3, #28]
 800a432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	4a15      	ldr	r2, [pc, #84]	; (800a48c <TIM_OC4_SetConfig+0x80>)
 800a438:	4013      	ands	r3, r2
 800a43a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	4a14      	ldr	r2, [pc, #80]	; (800a490 <TIM_OC4_SetConfig+0x84>)
 800a440:	4013      	ands	r3, r2
 800a442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	021b      	lsls	r3, r3, #8
 800a44a:	68fa      	ldr	r2, [r7, #12]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	4a10      	ldr	r2, [pc, #64]	; (800a494 <TIM_OC4_SetConfig+0x88>)
 800a454:	4013      	ands	r3, r2
 800a456:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	031b      	lsls	r3, r3, #12
 800a45e:	697a      	ldr	r2, [r7, #20]
 800a460:	4313      	orrs	r3, r2
 800a462:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	693a      	ldr	r2, [r7, #16]
 800a468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	685a      	ldr	r2, [r3, #4]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	697a      	ldr	r2, [r7, #20]
 800a47c:	621a      	str	r2, [r3, #32]
}
 800a47e:	46c0      	nop			; (mov r8, r8)
 800a480:	46bd      	mov	sp, r7
 800a482:	b006      	add	sp, #24
 800a484:	bd80      	pop	{r7, pc}
 800a486:	46c0      	nop			; (mov r8, r8)
 800a488:	ffffefff 	.word	0xffffefff
 800a48c:	ffff8fff 	.word	0xffff8fff
 800a490:	fffffcff 	.word	0xfffffcff
 800a494:	ffffdfff 	.word	0xffffdfff

0800a498 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b086      	sub	sp, #24
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6a1b      	ldr	r3, [r3, #32]
 800a4a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6a1b      	ldr	r3, [r3, #32]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	4393      	bics	r3, r2
 800a4b2:	001a      	movs	r2, r3
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	699b      	ldr	r3, [r3, #24]
 800a4bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	22f0      	movs	r2, #240	; 0xf0
 800a4c2:	4393      	bics	r3, r2
 800a4c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	011b      	lsls	r3, r3, #4
 800a4ca:	693a      	ldr	r2, [r7, #16]
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	220a      	movs	r2, #10
 800a4d4:	4393      	bics	r3, r2
 800a4d6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a4d8:	697a      	ldr	r2, [r7, #20]
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	693a      	ldr	r2, [r7, #16]
 800a4e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	697a      	ldr	r2, [r7, #20]
 800a4ea:	621a      	str	r2, [r3, #32]
}
 800a4ec:	46c0      	nop			; (mov r8, r8)
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	b006      	add	sp, #24
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b086      	sub	sp, #24
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6a1b      	ldr	r3, [r3, #32]
 800a504:	2210      	movs	r2, #16
 800a506:	4393      	bics	r3, r2
 800a508:	001a      	movs	r2, r3
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	699b      	ldr	r3, [r3, #24]
 800a512:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	6a1b      	ldr	r3, [r3, #32]
 800a518:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	4a0d      	ldr	r2, [pc, #52]	; (800a554 <TIM_TI2_ConfigInputStage+0x60>)
 800a51e:	4013      	ands	r3, r2
 800a520:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	031b      	lsls	r3, r3, #12
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	4313      	orrs	r3, r2
 800a52a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	22a0      	movs	r2, #160	; 0xa0
 800a530:	4393      	bics	r3, r2
 800a532:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	011b      	lsls	r3, r3, #4
 800a538:	693a      	ldr	r2, [r7, #16]
 800a53a:	4313      	orrs	r3, r2
 800a53c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	697a      	ldr	r2, [r7, #20]
 800a542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	693a      	ldr	r2, [r7, #16]
 800a548:	621a      	str	r2, [r3, #32]
}
 800a54a:	46c0      	nop			; (mov r8, r8)
 800a54c:	46bd      	mov	sp, r7
 800a54e:	b006      	add	sp, #24
 800a550:	bd80      	pop	{r7, pc}
 800a552:	46c0      	nop			; (mov r8, r8)
 800a554:	ffff0fff 	.word	0xffff0fff

0800a558 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2270      	movs	r2, #112	; 0x70
 800a56c:	4393      	bics	r3, r2
 800a56e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a570:	683a      	ldr	r2, [r7, #0]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	4313      	orrs	r3, r2
 800a576:	2207      	movs	r2, #7
 800a578:	4313      	orrs	r3, r2
 800a57a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	68fa      	ldr	r2, [r7, #12]
 800a580:	609a      	str	r2, [r3, #8]
}
 800a582:	46c0      	nop			; (mov r8, r8)
 800a584:	46bd      	mov	sp, r7
 800a586:	b004      	add	sp, #16
 800a588:	bd80      	pop	{r7, pc}
	...

0800a58c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b086      	sub	sp, #24
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
 800a598:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	4a09      	ldr	r2, [pc, #36]	; (800a5c8 <TIM_ETR_SetConfig+0x3c>)
 800a5a4:	4013      	ands	r3, r2
 800a5a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	021a      	lsls	r2, r3, #8
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	431a      	orrs	r2, r3
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	697a      	ldr	r2, [r7, #20]
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	697a      	ldr	r2, [r7, #20]
 800a5be:	609a      	str	r2, [r3, #8]
}
 800a5c0:	46c0      	nop			; (mov r8, r8)
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	b006      	add	sp, #24
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	ffff00ff 	.word	0xffff00ff

0800a5cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	2380      	movs	r3, #128	; 0x80
 800a5dc:	05db      	lsls	r3, r3, #23
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d01d      	beq.n	800a61e <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4a50      	ldr	r2, [pc, #320]	; (800a728 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d018      	beq.n	800a61e <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a4e      	ldr	r2, [pc, #312]	; (800a72c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d013      	beq.n	800a61e <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4a4d      	ldr	r2, [pc, #308]	; (800a730 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d00e      	beq.n	800a61e <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a4b      	ldr	r2, [pc, #300]	; (800a734 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d009      	beq.n	800a61e <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a4a      	ldr	r2, [pc, #296]	; (800a738 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d004      	beq.n	800a61e <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800a614:	4b49      	ldr	r3, [pc, #292]	; (800a73c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a616:	2159      	movs	r1, #89	; 0x59
 800a618:	0018      	movs	r0, r3
 800a61a:	f7fb f837 	bl	800568c <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d020      	beq.n	800a668 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2b10      	cmp	r3, #16
 800a62c:	d01c      	beq.n	800a668 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2b20      	cmp	r3, #32
 800a634:	d018      	beq.n	800a668 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2b30      	cmp	r3, #48	; 0x30
 800a63c:	d014      	beq.n	800a668 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	2b40      	cmp	r3, #64	; 0x40
 800a644:	d010      	beq.n	800a668 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2b50      	cmp	r3, #80	; 0x50
 800a64c:	d00c      	beq.n	800a668 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	2b60      	cmp	r3, #96	; 0x60
 800a654:	d008      	beq.n	800a668 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2b70      	cmp	r3, #112	; 0x70
 800a65c:	d004      	beq.n	800a668 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800a65e:	4b37      	ldr	r3, [pc, #220]	; (800a73c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a660:	215a      	movs	r1, #90	; 0x5a
 800a662:	0018      	movs	r0, r3
 800a664:	f7fb f812 	bl	800568c <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	2b80      	cmp	r3, #128	; 0x80
 800a66e:	d008      	beq.n	800a682 <HAL_TIMEx_MasterConfigSynchronization+0xb6>
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d004      	beq.n	800a682 <HAL_TIMEx_MasterConfigSynchronization+0xb6>
 800a678:	4b30      	ldr	r3, [pc, #192]	; (800a73c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a67a:	215b      	movs	r1, #91	; 0x5b
 800a67c:	0018      	movs	r0, r3
 800a67e:	f7fb f805 	bl	800568c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2238      	movs	r2, #56	; 0x38
 800a686:	5c9b      	ldrb	r3, [r3, r2]
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d101      	bne.n	800a690 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800a68c:	2302      	movs	r3, #2
 800a68e:	e047      	b.n	800a720 <HAL_TIMEx_MasterConfigSynchronization+0x154>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2238      	movs	r2, #56	; 0x38
 800a694:	2101      	movs	r1, #1
 800a696:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2239      	movs	r2, #57	; 0x39
 800a69c:	2102      	movs	r1, #2
 800a69e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2270      	movs	r2, #112	; 0x70
 800a6b4:	4393      	bics	r3, r2
 800a6b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	68fa      	ldr	r2, [r7, #12]
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	2380      	movs	r3, #128	; 0x80
 800a6d0:	05db      	lsls	r3, r3, #23
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d00e      	beq.n	800a6f4 <HAL_TIMEx_MasterConfigSynchronization+0x128>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a13      	ldr	r2, [pc, #76]	; (800a728 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d009      	beq.n	800a6f4 <HAL_TIMEx_MasterConfigSynchronization+0x128>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a13      	ldr	r2, [pc, #76]	; (800a734 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d004      	beq.n	800a6f4 <HAL_TIMEx_MasterConfigSynchronization+0x128>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a12      	ldr	r2, [pc, #72]	; (800a738 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d10c      	bne.n	800a70e <HAL_TIMEx_MasterConfigSynchronization+0x142>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	2280      	movs	r2, #128	; 0x80
 800a6f8:	4393      	bics	r3, r2
 800a6fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	68ba      	ldr	r2, [r7, #8]
 800a702:	4313      	orrs	r3, r2
 800a704:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2239      	movs	r2, #57	; 0x39
 800a712:	2101      	movs	r1, #1
 800a714:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2238      	movs	r2, #56	; 0x38
 800a71a:	2100      	movs	r1, #0
 800a71c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a71e:	2300      	movs	r3, #0
}
 800a720:	0018      	movs	r0, r3
 800a722:	46bd      	mov	sp, r7
 800a724:	b004      	add	sp, #16
 800a726:	bd80      	pop	{r7, pc}
 800a728:	40000400 	.word	0x40000400
 800a72c:	40001000 	.word	0x40001000
 800a730:	40001400 	.word	0x40001400
 800a734:	40010800 	.word	0x40010800
 800a738:	40011400 	.word	0x40011400
 800a73c:	0800ba54 	.word	0x0800ba54

0800a740 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d101      	bne.n	800a752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a74e:	2301      	movs	r3, #1
 800a750:	e08a      	b.n	800a868 <HAL_UART_Init+0x128>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	699b      	ldr	r3, [r3, #24]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d021      	beq.n	800a79e <HAL_UART_Init+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4a44      	ldr	r2, [pc, #272]	; (800a870 <HAL_UART_Init+0x130>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d03c      	beq.n	800a7de <HAL_UART_Init+0x9e>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a42      	ldr	r2, [pc, #264]	; (800a874 <HAL_UART_Init+0x134>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d037      	beq.n	800a7de <HAL_UART_Init+0x9e>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4a41      	ldr	r2, [pc, #260]	; (800a878 <HAL_UART_Init+0x138>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d032      	beq.n	800a7de <HAL_UART_Init+0x9e>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a3f      	ldr	r2, [pc, #252]	; (800a87c <HAL_UART_Init+0x13c>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d02d      	beq.n	800a7de <HAL_UART_Init+0x9e>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a3e      	ldr	r2, [pc, #248]	; (800a880 <HAL_UART_Init+0x140>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d028      	beq.n	800a7de <HAL_UART_Init+0x9e>
 800a78c:	232e      	movs	r3, #46	; 0x2e
 800a78e:	33ff      	adds	r3, #255	; 0xff
 800a790:	001a      	movs	r2, r3
 800a792:	4b3c      	ldr	r3, [pc, #240]	; (800a884 <HAL_UART_Init+0x144>)
 800a794:	0011      	movs	r1, r2
 800a796:	0018      	movs	r0, r3
 800a798:	f7fa ff78 	bl	800568c <assert_failed>
 800a79c:	e01f      	b.n	800a7de <HAL_UART_Init+0x9e>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a33      	ldr	r2, [pc, #204]	; (800a870 <HAL_UART_Init+0x130>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d01a      	beq.n	800a7de <HAL_UART_Init+0x9e>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a31      	ldr	r2, [pc, #196]	; (800a874 <HAL_UART_Init+0x134>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d015      	beq.n	800a7de <HAL_UART_Init+0x9e>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a30      	ldr	r2, [pc, #192]	; (800a878 <HAL_UART_Init+0x138>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d010      	beq.n	800a7de <HAL_UART_Init+0x9e>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a2e      	ldr	r2, [pc, #184]	; (800a87c <HAL_UART_Init+0x13c>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d00b      	beq.n	800a7de <HAL_UART_Init+0x9e>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a2d      	ldr	r2, [pc, #180]	; (800a880 <HAL_UART_Init+0x140>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d006      	beq.n	800a7de <HAL_UART_Init+0x9e>
 800a7d0:	2399      	movs	r3, #153	; 0x99
 800a7d2:	005a      	lsls	r2, r3, #1
 800a7d4:	4b2b      	ldr	r3, [pc, #172]	; (800a884 <HAL_UART_Init+0x144>)
 800a7d6:	0011      	movs	r1, r2
 800a7d8:	0018      	movs	r0, r3
 800a7da:	f7fa ff57 	bl	800568c <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d107      	bne.n	800a7f6 <HAL_UART_Init+0xb6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2274      	movs	r2, #116	; 0x74
 800a7ea:	2100      	movs	r1, #0
 800a7ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	0018      	movs	r0, r3
 800a7f2:	f7fb ff27 	bl	8006644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2224      	movs	r2, #36	; 0x24
 800a7fa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2101      	movs	r1, #1
 800a808:	438a      	bics	r2, r1
 800a80a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	0018      	movs	r0, r3
 800a810:	f000 f8e4 	bl	800a9dc <UART_SetConfig>
 800a814:	0003      	movs	r3, r0
 800a816:	2b01      	cmp	r3, #1
 800a818:	d101      	bne.n	800a81e <HAL_UART_Init+0xde>
  {
    return HAL_ERROR;
 800a81a:	2301      	movs	r3, #1
 800a81c:	e024      	b.n	800a868 <HAL_UART_Init+0x128>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a822:	2b00      	cmp	r3, #0
 800a824:	d003      	beq.n	800a82e <HAL_UART_Init+0xee>
  {
    UART_AdvFeatureConfig(huart);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	0018      	movs	r0, r3
 800a82a:	f000 fc5b 	bl	800b0e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	685a      	ldr	r2, [r3, #4]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4913      	ldr	r1, [pc, #76]	; (800a888 <HAL_UART_Init+0x148>)
 800a83a:	400a      	ands	r2, r1
 800a83c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	689a      	ldr	r2, [r3, #8]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	212a      	movs	r1, #42	; 0x2a
 800a84a:	438a      	bics	r2, r1
 800a84c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	2101      	movs	r1, #1
 800a85a:	430a      	orrs	r2, r1
 800a85c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	0018      	movs	r0, r3
 800a862:	f000 fdc5 	bl	800b3f0 <UART_CheckIdleState>
 800a866:	0003      	movs	r3, r0
}
 800a868:	0018      	movs	r0, r3
 800a86a:	46bd      	mov	sp, r7
 800a86c:	b002      	add	sp, #8
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	40013800 	.word	0x40013800
 800a874:	40004400 	.word	0x40004400
 800a878:	40004c00 	.word	0x40004c00
 800a87c:	40005000 	.word	0x40005000
 800a880:	40004800 	.word	0x40004800
 800a884:	0800ba90 	.word	0x0800ba90
 800a888:	ffffb7ff 	.word	0xffffb7ff

0800a88c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b08a      	sub	sp, #40	; 0x28
 800a890:	af02      	add	r7, sp, #8
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	603b      	str	r3, [r7, #0]
 800a898:	1dbb      	adds	r3, r7, #6
 800a89a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8a0:	2b20      	cmp	r3, #32
 800a8a2:	d000      	beq.n	800a8a6 <HAL_UART_Transmit+0x1a>
 800a8a4:	e095      	b.n	800a9d2 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d003      	beq.n	800a8b4 <HAL_UART_Transmit+0x28>
 800a8ac:	1dbb      	adds	r3, r7, #6
 800a8ae:	881b      	ldrh	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d101      	bne.n	800a8b8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e08d      	b.n	800a9d4 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	689a      	ldr	r2, [r3, #8]
 800a8bc:	2380      	movs	r3, #128	; 0x80
 800a8be:	015b      	lsls	r3, r3, #5
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d109      	bne.n	800a8d8 <HAL_UART_Transmit+0x4c>
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	691b      	ldr	r3, [r3, #16]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d105      	bne.n	800a8d8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	4013      	ands	r3, r2
 800a8d2:	d001      	beq.n	800a8d8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	e07d      	b.n	800a9d4 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2274      	movs	r2, #116	; 0x74
 800a8dc:	5c9b      	ldrb	r3, [r3, r2]
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d101      	bne.n	800a8e6 <HAL_UART_Transmit+0x5a>
 800a8e2:	2302      	movs	r3, #2
 800a8e4:	e076      	b.n	800a9d4 <HAL_UART_Transmit+0x148>
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2274      	movs	r2, #116	; 0x74
 800a8ea:	2101      	movs	r1, #1
 800a8ec:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2280      	movs	r2, #128	; 0x80
 800a8f2:	2100      	movs	r1, #0
 800a8f4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2221      	movs	r2, #33	; 0x21
 800a8fa:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a8fc:	f7fb ffb2 	bl	8006864 <HAL_GetTick>
 800a900:	0003      	movs	r3, r0
 800a902:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	1dba      	adds	r2, r7, #6
 800a908:	2150      	movs	r1, #80	; 0x50
 800a90a:	8812      	ldrh	r2, [r2, #0]
 800a90c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	1dba      	adds	r2, r7, #6
 800a912:	2152      	movs	r1, #82	; 0x52
 800a914:	8812      	ldrh	r2, [r2, #0]
 800a916:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	689a      	ldr	r2, [r3, #8]
 800a91c:	2380      	movs	r3, #128	; 0x80
 800a91e:	015b      	lsls	r3, r3, #5
 800a920:	429a      	cmp	r2, r3
 800a922:	d108      	bne.n	800a936 <HAL_UART_Transmit+0xaa>
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	691b      	ldr	r3, [r3, #16]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d104      	bne.n	800a936 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800a92c:	2300      	movs	r3, #0
 800a92e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	61bb      	str	r3, [r7, #24]
 800a934:	e003      	b.n	800a93e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a93a:	2300      	movs	r3, #0
 800a93c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2274      	movs	r2, #116	; 0x74
 800a942:	2100      	movs	r1, #0
 800a944:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800a946:	e02c      	b.n	800a9a2 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a948:	697a      	ldr	r2, [r7, #20]
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	9300      	str	r3, [sp, #0]
 800a950:	0013      	movs	r3, r2
 800a952:	2200      	movs	r2, #0
 800a954:	2180      	movs	r1, #128	; 0x80
 800a956:	f000 fd95 	bl	800b484 <UART_WaitOnFlagUntilTimeout>
 800a95a:	1e03      	subs	r3, r0, #0
 800a95c:	d001      	beq.n	800a962 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800a95e:	2303      	movs	r3, #3
 800a960:	e038      	b.n	800a9d4 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d10b      	bne.n	800a980 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a968:	69bb      	ldr	r3, [r7, #24]
 800a96a:	881b      	ldrh	r3, [r3, #0]
 800a96c:	001a      	movs	r2, r3
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	05d2      	lsls	r2, r2, #23
 800a974:	0dd2      	lsrs	r2, r2, #23
 800a976:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a978:	69bb      	ldr	r3, [r7, #24]
 800a97a:	3302      	adds	r3, #2
 800a97c:	61bb      	str	r3, [r7, #24]
 800a97e:	e007      	b.n	800a990 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	781a      	ldrb	r2, [r3, #0]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	3301      	adds	r3, #1
 800a98e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2252      	movs	r2, #82	; 0x52
 800a994:	5a9b      	ldrh	r3, [r3, r2]
 800a996:	b29b      	uxth	r3, r3
 800a998:	3b01      	subs	r3, #1
 800a99a:	b299      	uxth	r1, r3
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2252      	movs	r2, #82	; 0x52
 800a9a0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2252      	movs	r2, #82	; 0x52
 800a9a6:	5a9b      	ldrh	r3, [r3, r2]
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d1cc      	bne.n	800a948 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a9ae:	697a      	ldr	r2, [r7, #20]
 800a9b0:	68f8      	ldr	r0, [r7, #12]
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	9300      	str	r3, [sp, #0]
 800a9b6:	0013      	movs	r3, r2
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	2140      	movs	r1, #64	; 0x40
 800a9bc:	f000 fd62 	bl	800b484 <UART_WaitOnFlagUntilTimeout>
 800a9c0:	1e03      	subs	r3, r0, #0
 800a9c2:	d001      	beq.n	800a9c8 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 800a9c4:	2303      	movs	r3, #3
 800a9c6:	e005      	b.n	800a9d4 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2220      	movs	r2, #32
 800a9cc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	e000      	b.n	800a9d4 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800a9d2:	2302      	movs	r3, #2
  }
}
 800a9d4:	0018      	movs	r0, r3
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	b008      	add	sp, #32
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9dc:	b5b0      	push	{r4, r5, r7, lr}
 800a9de:	b08e      	sub	sp, #56	; 0x38
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a9e4:	231a      	movs	r3, #26
 800a9e6:	2218      	movs	r2, #24
 800a9e8:	4694      	mov	ip, r2
 800a9ea:	44bc      	add	ip, r7
 800a9ec:	4463      	add	r3, ip
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	701a      	strb	r2, [r3, #0]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800a9f2:	69fb      	ldr	r3, [r7, #28]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	4ac9      	ldr	r2, [pc, #804]	; (800ad1c <UART_SetConfig+0x340>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d905      	bls.n	800aa08 <UART_SetConfig+0x2c>
 800a9fc:	4ac8      	ldr	r2, [pc, #800]	; (800ad20 <UART_SetConfig+0x344>)
 800a9fe:	4bc9      	ldr	r3, [pc, #804]	; (800ad24 <UART_SetConfig+0x348>)
 800aa00:	0011      	movs	r1, r2
 800aa02:	0018      	movs	r0, r3
 800aa04:	f7fa fe42 	bl	800568c <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800aa08:	69fb      	ldr	r3, [r7, #28]
 800aa0a:	689a      	ldr	r2, [r3, #8]
 800aa0c:	2380      	movs	r3, #128	; 0x80
 800aa0e:	055b      	lsls	r3, r3, #21
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d00f      	beq.n	800aa34 <UART_SetConfig+0x58>
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	689b      	ldr	r3, [r3, #8]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00b      	beq.n	800aa34 <UART_SetConfig+0x58>
 800aa1c:	69fb      	ldr	r3, [r7, #28]
 800aa1e:	689a      	ldr	r2, [r3, #8]
 800aa20:	2380      	movs	r3, #128	; 0x80
 800aa22:	015b      	lsls	r3, r3, #5
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d005      	beq.n	800aa34 <UART_SetConfig+0x58>
 800aa28:	4abf      	ldr	r2, [pc, #764]	; (800ad28 <UART_SetConfig+0x34c>)
 800aa2a:	4bbe      	ldr	r3, [pc, #760]	; (800ad24 <UART_SetConfig+0x348>)
 800aa2c:	0011      	movs	r1, r2
 800aa2e:	0018      	movs	r0, r3
 800aa30:	f7fa fe2c 	bl	800568c <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4abc      	ldr	r2, [pc, #752]	; (800ad2c <UART_SetConfig+0x350>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d110      	bne.n	800aa60 <UART_SetConfig+0x84>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d038      	beq.n	800aab8 <UART_SetConfig+0xdc>
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	68da      	ldr	r2, [r3, #12]
 800aa4a:	2380      	movs	r3, #128	; 0x80
 800aa4c:	019b      	lsls	r3, r3, #6
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d032      	beq.n	800aab8 <UART_SetConfig+0xdc>
 800aa52:	4ab7      	ldr	r2, [pc, #732]	; (800ad30 <UART_SetConfig+0x354>)
 800aa54:	4bb3      	ldr	r3, [pc, #716]	; (800ad24 <UART_SetConfig+0x348>)
 800aa56:	0011      	movs	r1, r2
 800aa58:	0018      	movs	r0, r3
 800aa5a:	f7fa fe17 	bl	800568c <assert_failed>
 800aa5e:	e02b      	b.n	800aab8 <UART_SetConfig+0xdc>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800aa60:	69fb      	ldr	r3, [r7, #28]
 800aa62:	68da      	ldr	r2, [r3, #12]
 800aa64:	2380      	movs	r3, #128	; 0x80
 800aa66:	015b      	lsls	r3, r3, #5
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d015      	beq.n	800aa98 <UART_SetConfig+0xbc>
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d011      	beq.n	800aa98 <UART_SetConfig+0xbc>
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	68da      	ldr	r2, [r3, #12]
 800aa78:	23c0      	movs	r3, #192	; 0xc0
 800aa7a:	019b      	lsls	r3, r3, #6
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d00b      	beq.n	800aa98 <UART_SetConfig+0xbc>
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	68da      	ldr	r2, [r3, #12]
 800aa84:	2380      	movs	r3, #128	; 0x80
 800aa86:	019b      	lsls	r3, r3, #6
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d005      	beq.n	800aa98 <UART_SetConfig+0xbc>
 800aa8c:	4aa9      	ldr	r2, [pc, #676]	; (800ad34 <UART_SetConfig+0x358>)
 800aa8e:	4ba5      	ldr	r3, [pc, #660]	; (800ad24 <UART_SetConfig+0x348>)
 800aa90:	0011      	movs	r1, r2
 800aa92:	0018      	movs	r0, r3
 800aa94:	f7fa fdfa 	bl	800568c <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	6a1b      	ldr	r3, [r3, #32]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d00b      	beq.n	800aab8 <UART_SetConfig+0xdc>
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	6a1a      	ldr	r2, [r3, #32]
 800aaa4:	2380      	movs	r3, #128	; 0x80
 800aaa6:	011b      	lsls	r3, r3, #4
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d005      	beq.n	800aab8 <UART_SetConfig+0xdc>
 800aaac:	4aa2      	ldr	r2, [pc, #648]	; (800ad38 <UART_SetConfig+0x35c>)
 800aaae:	4b9d      	ldr	r3, [pc, #628]	; (800ad24 <UART_SetConfig+0x348>)
 800aab0:	0011      	movs	r1, r2
 800aab2:	0018      	movs	r0, r3
 800aab4:	f7fa fdea 	bl	800568c <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	691b      	ldr	r3, [r3, #16]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d011      	beq.n	800aae4 <UART_SetConfig+0x108>
 800aac0:	69fb      	ldr	r3, [r7, #28]
 800aac2:	691a      	ldr	r2, [r3, #16]
 800aac4:	2380      	movs	r3, #128	; 0x80
 800aac6:	00db      	lsls	r3, r3, #3
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d00b      	beq.n	800aae4 <UART_SetConfig+0x108>
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	691a      	ldr	r2, [r3, #16]
 800aad0:	23c0      	movs	r3, #192	; 0xc0
 800aad2:	00db      	lsls	r3, r3, #3
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d005      	beq.n	800aae4 <UART_SetConfig+0x108>
 800aad8:	4a98      	ldr	r2, [pc, #608]	; (800ad3c <UART_SetConfig+0x360>)
 800aada:	4b92      	ldr	r3, [pc, #584]	; (800ad24 <UART_SetConfig+0x348>)
 800aadc:	0011      	movs	r1, r2
 800aade:	0018      	movs	r0, r3
 800aae0:	f7fa fdd4 	bl	800568c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	695b      	ldr	r3, [r3, #20]
 800aae8:	220c      	movs	r2, #12
 800aaea:	4393      	bics	r3, r2
 800aaec:	d103      	bne.n	800aaf6 <UART_SetConfig+0x11a>
 800aaee:	69fb      	ldr	r3, [r7, #28]
 800aaf0:	695b      	ldr	r3, [r3, #20]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d105      	bne.n	800ab02 <UART_SetConfig+0x126>
 800aaf6:	4a92      	ldr	r2, [pc, #584]	; (800ad40 <UART_SetConfig+0x364>)
 800aaf8:	4b8a      	ldr	r3, [pc, #552]	; (800ad24 <UART_SetConfig+0x348>)
 800aafa:	0011      	movs	r1, r2
 800aafc:	0018      	movs	r0, r3
 800aafe:	f7fa fdc5 	bl	800568c <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	699b      	ldr	r3, [r3, #24]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d017      	beq.n	800ab3a <UART_SetConfig+0x15e>
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	699a      	ldr	r2, [r3, #24]
 800ab0e:	2380      	movs	r3, #128	; 0x80
 800ab10:	005b      	lsls	r3, r3, #1
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d011      	beq.n	800ab3a <UART_SetConfig+0x15e>
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	699a      	ldr	r2, [r3, #24]
 800ab1a:	2380      	movs	r3, #128	; 0x80
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d00b      	beq.n	800ab3a <UART_SetConfig+0x15e>
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	699a      	ldr	r2, [r3, #24]
 800ab26:	23c0      	movs	r3, #192	; 0xc0
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d005      	beq.n	800ab3a <UART_SetConfig+0x15e>
 800ab2e:	4a85      	ldr	r2, [pc, #532]	; (800ad44 <UART_SetConfig+0x368>)
 800ab30:	4b7c      	ldr	r3, [pc, #496]	; (800ad24 <UART_SetConfig+0x348>)
 800ab32:	0011      	movs	r1, r2
 800ab34:	0018      	movs	r0, r3
 800ab36:	f7fa fda9 	bl	800568c <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800ab3a:	69fb      	ldr	r3, [r7, #28]
 800ab3c:	69db      	ldr	r3, [r3, #28]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d00b      	beq.n	800ab5a <UART_SetConfig+0x17e>
 800ab42:	69fb      	ldr	r3, [r7, #28]
 800ab44:	69da      	ldr	r2, [r3, #28]
 800ab46:	2380      	movs	r3, #128	; 0x80
 800ab48:	021b      	lsls	r3, r3, #8
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d005      	beq.n	800ab5a <UART_SetConfig+0x17e>
 800ab4e:	4a7e      	ldr	r2, [pc, #504]	; (800ad48 <UART_SetConfig+0x36c>)
 800ab50:	4b74      	ldr	r3, [pc, #464]	; (800ad24 <UART_SetConfig+0x348>)
 800ab52:	0011      	movs	r1, r2
 800ab54:	0018      	movs	r0, r3
 800ab56:	f7fa fd99 	bl	800568c <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	689a      	ldr	r2, [r3, #8]
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	691b      	ldr	r3, [r3, #16]
 800ab62:	431a      	orrs	r2, r3
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	695b      	ldr	r3, [r3, #20]
 800ab68:	431a      	orrs	r2, r3
 800ab6a:	69fb      	ldr	r3, [r7, #28]
 800ab6c:	69db      	ldr	r3, [r3, #28]
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab72:	69fb      	ldr	r3, [r7, #28]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a74      	ldr	r2, [pc, #464]	; (800ad4c <UART_SetConfig+0x370>)
 800ab7a:	4013      	ands	r3, r2
 800ab7c:	0019      	movs	r1, r3
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab84:	430a      	orrs	r2, r1
 800ab86:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	4a70      	ldr	r2, [pc, #448]	; (800ad50 <UART_SetConfig+0x374>)
 800ab90:	4013      	ands	r3, r2
 800ab92:	0019      	movs	r1, r3
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	68da      	ldr	r2, [r3, #12]
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	430a      	orrs	r2, r1
 800ab9e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	699b      	ldr	r3, [r3, #24]
 800aba4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a60      	ldr	r2, [pc, #384]	; (800ad2c <UART_SetConfig+0x350>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d004      	beq.n	800abba <UART_SetConfig+0x1de>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	6a1b      	ldr	r3, [r3, #32]
 800abb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abb6:	4313      	orrs	r3, r2
 800abb8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	4a64      	ldr	r2, [pc, #400]	; (800ad54 <UART_SetConfig+0x378>)
 800abc2:	4013      	ands	r3, r2
 800abc4:	0019      	movs	r1, r3
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abcc:	430a      	orrs	r2, r1
 800abce:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a60      	ldr	r2, [pc, #384]	; (800ad58 <UART_SetConfig+0x37c>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d134      	bne.n	800ac44 <UART_SetConfig+0x268>
 800abda:	4b60      	ldr	r3, [pc, #384]	; (800ad5c <UART_SetConfig+0x380>)
 800abdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abde:	2203      	movs	r2, #3
 800abe0:	4013      	ands	r3, r2
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d015      	beq.n	800ac12 <UART_SetConfig+0x236>
 800abe6:	d304      	bcc.n	800abf2 <UART_SetConfig+0x216>
 800abe8:	2b02      	cmp	r3, #2
 800abea:	d00a      	beq.n	800ac02 <UART_SetConfig+0x226>
 800abec:	2b03      	cmp	r3, #3
 800abee:	d018      	beq.n	800ac22 <UART_SetConfig+0x246>
 800abf0:	e01f      	b.n	800ac32 <UART_SetConfig+0x256>
 800abf2:	231b      	movs	r3, #27
 800abf4:	2218      	movs	r2, #24
 800abf6:	4694      	mov	ip, r2
 800abf8:	44bc      	add	ip, r7
 800abfa:	4463      	add	r3, ip
 800abfc:	2201      	movs	r2, #1
 800abfe:	701a      	strb	r2, [r3, #0]
 800ac00:	e0ed      	b.n	800adde <UART_SetConfig+0x402>
 800ac02:	231b      	movs	r3, #27
 800ac04:	2218      	movs	r2, #24
 800ac06:	4694      	mov	ip, r2
 800ac08:	44bc      	add	ip, r7
 800ac0a:	4463      	add	r3, ip
 800ac0c:	2202      	movs	r2, #2
 800ac0e:	701a      	strb	r2, [r3, #0]
 800ac10:	e0e5      	b.n	800adde <UART_SetConfig+0x402>
 800ac12:	231b      	movs	r3, #27
 800ac14:	2218      	movs	r2, #24
 800ac16:	4694      	mov	ip, r2
 800ac18:	44bc      	add	ip, r7
 800ac1a:	4463      	add	r3, ip
 800ac1c:	2204      	movs	r2, #4
 800ac1e:	701a      	strb	r2, [r3, #0]
 800ac20:	e0dd      	b.n	800adde <UART_SetConfig+0x402>
 800ac22:	231b      	movs	r3, #27
 800ac24:	2218      	movs	r2, #24
 800ac26:	4694      	mov	ip, r2
 800ac28:	44bc      	add	ip, r7
 800ac2a:	4463      	add	r3, ip
 800ac2c:	2208      	movs	r2, #8
 800ac2e:	701a      	strb	r2, [r3, #0]
 800ac30:	e0d5      	b.n	800adde <UART_SetConfig+0x402>
 800ac32:	231b      	movs	r3, #27
 800ac34:	2218      	movs	r2, #24
 800ac36:	4694      	mov	ip, r2
 800ac38:	44bc      	add	ip, r7
 800ac3a:	4463      	add	r3, ip
 800ac3c:	2210      	movs	r2, #16
 800ac3e:	701a      	strb	r2, [r3, #0]
 800ac40:	46c0      	nop			; (mov r8, r8)
 800ac42:	e0cc      	b.n	800adde <UART_SetConfig+0x402>
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a45      	ldr	r2, [pc, #276]	; (800ad60 <UART_SetConfig+0x384>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d137      	bne.n	800acbe <UART_SetConfig+0x2e2>
 800ac4e:	4b43      	ldr	r3, [pc, #268]	; (800ad5c <UART_SetConfig+0x380>)
 800ac50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac52:	220c      	movs	r2, #12
 800ac54:	4013      	ands	r3, r2
 800ac56:	2b04      	cmp	r3, #4
 800ac58:	d018      	beq.n	800ac8c <UART_SetConfig+0x2b0>
 800ac5a:	d802      	bhi.n	800ac62 <UART_SetConfig+0x286>
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d005      	beq.n	800ac6c <UART_SetConfig+0x290>
 800ac60:	e024      	b.n	800acac <UART_SetConfig+0x2d0>
 800ac62:	2b08      	cmp	r3, #8
 800ac64:	d00a      	beq.n	800ac7c <UART_SetConfig+0x2a0>
 800ac66:	2b0c      	cmp	r3, #12
 800ac68:	d018      	beq.n	800ac9c <UART_SetConfig+0x2c0>
 800ac6a:	e01f      	b.n	800acac <UART_SetConfig+0x2d0>
 800ac6c:	231b      	movs	r3, #27
 800ac6e:	2218      	movs	r2, #24
 800ac70:	4694      	mov	ip, r2
 800ac72:	44bc      	add	ip, r7
 800ac74:	4463      	add	r3, ip
 800ac76:	2200      	movs	r2, #0
 800ac78:	701a      	strb	r2, [r3, #0]
 800ac7a:	e0b0      	b.n	800adde <UART_SetConfig+0x402>
 800ac7c:	231b      	movs	r3, #27
 800ac7e:	2218      	movs	r2, #24
 800ac80:	4694      	mov	ip, r2
 800ac82:	44bc      	add	ip, r7
 800ac84:	4463      	add	r3, ip
 800ac86:	2202      	movs	r2, #2
 800ac88:	701a      	strb	r2, [r3, #0]
 800ac8a:	e0a8      	b.n	800adde <UART_SetConfig+0x402>
 800ac8c:	231b      	movs	r3, #27
 800ac8e:	2218      	movs	r2, #24
 800ac90:	4694      	mov	ip, r2
 800ac92:	44bc      	add	ip, r7
 800ac94:	4463      	add	r3, ip
 800ac96:	2204      	movs	r2, #4
 800ac98:	701a      	strb	r2, [r3, #0]
 800ac9a:	e0a0      	b.n	800adde <UART_SetConfig+0x402>
 800ac9c:	231b      	movs	r3, #27
 800ac9e:	2218      	movs	r2, #24
 800aca0:	4694      	mov	ip, r2
 800aca2:	44bc      	add	ip, r7
 800aca4:	4463      	add	r3, ip
 800aca6:	2208      	movs	r2, #8
 800aca8:	701a      	strb	r2, [r3, #0]
 800acaa:	e098      	b.n	800adde <UART_SetConfig+0x402>
 800acac:	231b      	movs	r3, #27
 800acae:	2218      	movs	r2, #24
 800acb0:	4694      	mov	ip, r2
 800acb2:	44bc      	add	ip, r7
 800acb4:	4463      	add	r3, ip
 800acb6:	2210      	movs	r2, #16
 800acb8:	701a      	strb	r2, [r3, #0]
 800acba:	46c0      	nop			; (mov r8, r8)
 800acbc:	e08f      	b.n	800adde <UART_SetConfig+0x402>
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a28      	ldr	r2, [pc, #160]	; (800ad64 <UART_SetConfig+0x388>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d107      	bne.n	800acd8 <UART_SetConfig+0x2fc>
 800acc8:	231b      	movs	r3, #27
 800acca:	2218      	movs	r2, #24
 800accc:	4694      	mov	ip, r2
 800acce:	44bc      	add	ip, r7
 800acd0:	4463      	add	r3, ip
 800acd2:	2200      	movs	r2, #0
 800acd4:	701a      	strb	r2, [r3, #0]
 800acd6:	e082      	b.n	800adde <UART_SetConfig+0x402>
 800acd8:	69fb      	ldr	r3, [r7, #28]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a22      	ldr	r2, [pc, #136]	; (800ad68 <UART_SetConfig+0x38c>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d107      	bne.n	800acf2 <UART_SetConfig+0x316>
 800ace2:	231b      	movs	r3, #27
 800ace4:	2218      	movs	r2, #24
 800ace6:	4694      	mov	ip, r2
 800ace8:	44bc      	add	ip, r7
 800acea:	4463      	add	r3, ip
 800acec:	2200      	movs	r2, #0
 800acee:	701a      	strb	r2, [r3, #0]
 800acf0:	e075      	b.n	800adde <UART_SetConfig+0x402>
 800acf2:	69fb      	ldr	r3, [r7, #28]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a0d      	ldr	r2, [pc, #52]	; (800ad2c <UART_SetConfig+0x350>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d169      	bne.n	800add0 <UART_SetConfig+0x3f4>
 800acfc:	4b17      	ldr	r3, [pc, #92]	; (800ad5c <UART_SetConfig+0x380>)
 800acfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad00:	23c0      	movs	r3, #192	; 0xc0
 800ad02:	011b      	lsls	r3, r3, #4
 800ad04:	4013      	ands	r3, r2
 800ad06:	2280      	movs	r2, #128	; 0x80
 800ad08:	00d2      	lsls	r2, r2, #3
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d047      	beq.n	800ad9e <UART_SetConfig+0x3c2>
 800ad0e:	2280      	movs	r2, #128	; 0x80
 800ad10:	00d2      	lsls	r2, r2, #3
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d82a      	bhi.n	800ad6c <UART_SetConfig+0x390>
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d031      	beq.n	800ad7e <UART_SetConfig+0x3a2>
 800ad1a:	e050      	b.n	800adbe <UART_SetConfig+0x3e2>
 800ad1c:	003d0900 	.word	0x003d0900
 800ad20:	00000bb6 	.word	0x00000bb6
 800ad24:	0800ba90 	.word	0x0800ba90
 800ad28:	00000bb7 	.word	0x00000bb7
 800ad2c:	40004800 	.word	0x40004800
 800ad30:	00000bba 	.word	0x00000bba
 800ad34:	00000bbe 	.word	0x00000bbe
 800ad38:	00000bbf 	.word	0x00000bbf
 800ad3c:	00000bc2 	.word	0x00000bc2
 800ad40:	00000bc3 	.word	0x00000bc3
 800ad44:	00000bc4 	.word	0x00000bc4
 800ad48:	00000bc5 	.word	0x00000bc5
 800ad4c:	efff69f3 	.word	0xefff69f3
 800ad50:	ffffcfff 	.word	0xffffcfff
 800ad54:	fffff4ff 	.word	0xfffff4ff
 800ad58:	40013800 	.word	0x40013800
 800ad5c:	40021000 	.word	0x40021000
 800ad60:	40004400 	.word	0x40004400
 800ad64:	40004c00 	.word	0x40004c00
 800ad68:	40005000 	.word	0x40005000
 800ad6c:	2280      	movs	r2, #128	; 0x80
 800ad6e:	0112      	lsls	r2, r2, #4
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d00c      	beq.n	800ad8e <UART_SetConfig+0x3b2>
 800ad74:	22c0      	movs	r2, #192	; 0xc0
 800ad76:	0112      	lsls	r2, r2, #4
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d018      	beq.n	800adae <UART_SetConfig+0x3d2>
 800ad7c:	e01f      	b.n	800adbe <UART_SetConfig+0x3e2>
 800ad7e:	231b      	movs	r3, #27
 800ad80:	2218      	movs	r2, #24
 800ad82:	4694      	mov	ip, r2
 800ad84:	44bc      	add	ip, r7
 800ad86:	4463      	add	r3, ip
 800ad88:	2200      	movs	r2, #0
 800ad8a:	701a      	strb	r2, [r3, #0]
 800ad8c:	e027      	b.n	800adde <UART_SetConfig+0x402>
 800ad8e:	231b      	movs	r3, #27
 800ad90:	2218      	movs	r2, #24
 800ad92:	4694      	mov	ip, r2
 800ad94:	44bc      	add	ip, r7
 800ad96:	4463      	add	r3, ip
 800ad98:	2202      	movs	r2, #2
 800ad9a:	701a      	strb	r2, [r3, #0]
 800ad9c:	e01f      	b.n	800adde <UART_SetConfig+0x402>
 800ad9e:	231b      	movs	r3, #27
 800ada0:	2218      	movs	r2, #24
 800ada2:	4694      	mov	ip, r2
 800ada4:	44bc      	add	ip, r7
 800ada6:	4463      	add	r3, ip
 800ada8:	2204      	movs	r2, #4
 800adaa:	701a      	strb	r2, [r3, #0]
 800adac:	e017      	b.n	800adde <UART_SetConfig+0x402>
 800adae:	231b      	movs	r3, #27
 800adb0:	2218      	movs	r2, #24
 800adb2:	4694      	mov	ip, r2
 800adb4:	44bc      	add	ip, r7
 800adb6:	4463      	add	r3, ip
 800adb8:	2208      	movs	r2, #8
 800adba:	701a      	strb	r2, [r3, #0]
 800adbc:	e00f      	b.n	800adde <UART_SetConfig+0x402>
 800adbe:	231b      	movs	r3, #27
 800adc0:	2218      	movs	r2, #24
 800adc2:	4694      	mov	ip, r2
 800adc4:	44bc      	add	ip, r7
 800adc6:	4463      	add	r3, ip
 800adc8:	2210      	movs	r2, #16
 800adca:	701a      	strb	r2, [r3, #0]
 800adcc:	46c0      	nop			; (mov r8, r8)
 800adce:	e006      	b.n	800adde <UART_SetConfig+0x402>
 800add0:	231b      	movs	r3, #27
 800add2:	2218      	movs	r2, #24
 800add4:	4694      	mov	ip, r2
 800add6:	44bc      	add	ip, r7
 800add8:	4463      	add	r3, ip
 800adda:	2210      	movs	r2, #16
 800addc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800adde:	69fb      	ldr	r3, [r7, #28]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4ab7      	ldr	r2, [pc, #732]	; (800b0c0 <UART_SetConfig+0x6e4>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d000      	beq.n	800adea <UART_SetConfig+0x40e>
 800ade8:	e085      	b.n	800aef6 <UART_SetConfig+0x51a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800adea:	231b      	movs	r3, #27
 800adec:	2218      	movs	r2, #24
 800adee:	4694      	mov	ip, r2
 800adf0:	44bc      	add	ip, r7
 800adf2:	4463      	add	r3, ip
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	2b02      	cmp	r3, #2
 800adf8:	d00d      	beq.n	800ae16 <UART_SetConfig+0x43a>
 800adfa:	dc02      	bgt.n	800ae02 <UART_SetConfig+0x426>
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d005      	beq.n	800ae0c <UART_SetConfig+0x430>
 800ae00:	e01d      	b.n	800ae3e <UART_SetConfig+0x462>
 800ae02:	2b04      	cmp	r3, #4
 800ae04:	d012      	beq.n	800ae2c <UART_SetConfig+0x450>
 800ae06:	2b08      	cmp	r3, #8
 800ae08:	d015      	beq.n	800ae36 <UART_SetConfig+0x45a>
 800ae0a:	e018      	b.n	800ae3e <UART_SetConfig+0x462>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae0c:	f7fd fbb6 	bl	800857c <HAL_RCC_GetPCLK1Freq>
 800ae10:	0003      	movs	r3, r0
 800ae12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae14:	e01d      	b.n	800ae52 <UART_SetConfig+0x476>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae16:	4bab      	ldr	r3, [pc, #684]	; (800b0c4 <UART_SetConfig+0x6e8>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	2210      	movs	r2, #16
 800ae1c:	4013      	ands	r3, r2
 800ae1e:	d002      	beq.n	800ae26 <UART_SetConfig+0x44a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800ae20:	4ba9      	ldr	r3, [pc, #676]	; (800b0c8 <UART_SetConfig+0x6ec>)
 800ae22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae24:	e015      	b.n	800ae52 <UART_SetConfig+0x476>
          pclk = (uint32_t) HSI_VALUE;
 800ae26:	4ba9      	ldr	r3, [pc, #676]	; (800b0cc <UART_SetConfig+0x6f0>)
 800ae28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae2a:	e012      	b.n	800ae52 <UART_SetConfig+0x476>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae2c:	f7fd fafa 	bl	8008424 <HAL_RCC_GetSysClockFreq>
 800ae30:	0003      	movs	r3, r0
 800ae32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae34:	e00d      	b.n	800ae52 <UART_SetConfig+0x476>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae36:	2380      	movs	r3, #128	; 0x80
 800ae38:	021b      	lsls	r3, r3, #8
 800ae3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae3c:	e009      	b.n	800ae52 <UART_SetConfig+0x476>
      default:
        pclk = 0U;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ae42:	231a      	movs	r3, #26
 800ae44:	2218      	movs	r2, #24
 800ae46:	4694      	mov	ip, r2
 800ae48:	44bc      	add	ip, r7
 800ae4a:	4463      	add	r3, ip
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	701a      	strb	r2, [r3, #0]
        break;
 800ae50:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ae52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d100      	bne.n	800ae5a <UART_SetConfig+0x47e>
 800ae58:	e121      	b.n	800b09e <UART_SetConfig+0x6c2>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ae5a:	69fb      	ldr	r3, [r7, #28]
 800ae5c:	685a      	ldr	r2, [r3, #4]
 800ae5e:	0013      	movs	r3, r2
 800ae60:	005b      	lsls	r3, r3, #1
 800ae62:	189b      	adds	r3, r3, r2
 800ae64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d305      	bcc.n	800ae76 <UART_SetConfig+0x49a>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ae70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d907      	bls.n	800ae86 <UART_SetConfig+0x4aa>
      {
        ret = HAL_ERROR;
 800ae76:	231a      	movs	r3, #26
 800ae78:	2218      	movs	r2, #24
 800ae7a:	4694      	mov	ip, r2
 800ae7c:	44bc      	add	ip, r7
 800ae7e:	4463      	add	r3, ip
 800ae80:	2201      	movs	r2, #1
 800ae82:	701a      	strb	r2, [r3, #0]
 800ae84:	e10b      	b.n	800b09e <UART_SetConfig+0x6c2>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ae86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae88:	613b      	str	r3, [r7, #16]
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	617b      	str	r3, [r7, #20]
 800ae8e:	6939      	ldr	r1, [r7, #16]
 800ae90:	697a      	ldr	r2, [r7, #20]
 800ae92:	000b      	movs	r3, r1
 800ae94:	0e1b      	lsrs	r3, r3, #24
 800ae96:	0010      	movs	r0, r2
 800ae98:	0205      	lsls	r5, r0, #8
 800ae9a:	431d      	orrs	r5, r3
 800ae9c:	000b      	movs	r3, r1
 800ae9e:	021c      	lsls	r4, r3, #8
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	085b      	lsrs	r3, r3, #1
 800aea6:	60bb      	str	r3, [r7, #8]
 800aea8:	2300      	movs	r3, #0
 800aeaa:	60fb      	str	r3, [r7, #12]
 800aeac:	68b8      	ldr	r0, [r7, #8]
 800aeae:	68f9      	ldr	r1, [r7, #12]
 800aeb0:	1900      	adds	r0, r0, r4
 800aeb2:	4169      	adcs	r1, r5
 800aeb4:	69fb      	ldr	r3, [r7, #28]
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	603b      	str	r3, [r7, #0]
 800aeba:	2300      	movs	r3, #0
 800aebc:	607b      	str	r3, [r7, #4]
 800aebe:	683a      	ldr	r2, [r7, #0]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f7f5 fabb 	bl	800043c <__aeabi_uldivmod>
 800aec6:	0003      	movs	r3, r0
 800aec8:	000c      	movs	r4, r1
 800aeca:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aece:	4a80      	ldr	r2, [pc, #512]	; (800b0d0 <UART_SetConfig+0x6f4>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d908      	bls.n	800aee6 <UART_SetConfig+0x50a>
 800aed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed6:	4a7f      	ldr	r2, [pc, #508]	; (800b0d4 <UART_SetConfig+0x6f8>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d804      	bhi.n	800aee6 <UART_SetConfig+0x50a>
        {
          huart->Instance->BRR = usartdiv;
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aee2:	60da      	str	r2, [r3, #12]
 800aee4:	e0db      	b.n	800b09e <UART_SetConfig+0x6c2>
        }
        else
        {
          ret = HAL_ERROR;
 800aee6:	231a      	movs	r3, #26
 800aee8:	2218      	movs	r2, #24
 800aeea:	4694      	mov	ip, r2
 800aeec:	44bc      	add	ip, r7
 800aeee:	4463      	add	r3, ip
 800aef0:	2201      	movs	r2, #1
 800aef2:	701a      	strb	r2, [r3, #0]
 800aef4:	e0d3      	b.n	800b09e <UART_SetConfig+0x6c2>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aef6:	69fb      	ldr	r3, [r7, #28]
 800aef8:	69da      	ldr	r2, [r3, #28]
 800aefa:	2380      	movs	r3, #128	; 0x80
 800aefc:	021b      	lsls	r3, r3, #8
 800aefe:	429a      	cmp	r2, r3
 800af00:	d000      	beq.n	800af04 <UART_SetConfig+0x528>
 800af02:	e073      	b.n	800afec <UART_SetConfig+0x610>
  {
    switch (clocksource)
 800af04:	231b      	movs	r3, #27
 800af06:	2218      	movs	r2, #24
 800af08:	4694      	mov	ip, r2
 800af0a:	44bc      	add	ip, r7
 800af0c:	4463      	add	r3, ip
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	2b08      	cmp	r3, #8
 800af12:	d822      	bhi.n	800af5a <UART_SetConfig+0x57e>
 800af14:	009a      	lsls	r2, r3, #2
 800af16:	4b70      	ldr	r3, [pc, #448]	; (800b0d8 <UART_SetConfig+0x6fc>)
 800af18:	18d3      	adds	r3, r2, r3
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af1e:	f7fd fb2d 	bl	800857c <HAL_RCC_GetPCLK1Freq>
 800af22:	0003      	movs	r3, r0
 800af24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af26:	e022      	b.n	800af6e <UART_SetConfig+0x592>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af28:	f7fd fb3e 	bl	80085a8 <HAL_RCC_GetPCLK2Freq>
 800af2c:	0003      	movs	r3, r0
 800af2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af30:	e01d      	b.n	800af6e <UART_SetConfig+0x592>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af32:	4b64      	ldr	r3, [pc, #400]	; (800b0c4 <UART_SetConfig+0x6e8>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2210      	movs	r2, #16
 800af38:	4013      	ands	r3, r2
 800af3a:	d002      	beq.n	800af42 <UART_SetConfig+0x566>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800af3c:	4b62      	ldr	r3, [pc, #392]	; (800b0c8 <UART_SetConfig+0x6ec>)
 800af3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af40:	e015      	b.n	800af6e <UART_SetConfig+0x592>
          pclk = (uint32_t) HSI_VALUE;
 800af42:	4b62      	ldr	r3, [pc, #392]	; (800b0cc <UART_SetConfig+0x6f0>)
 800af44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af46:	e012      	b.n	800af6e <UART_SetConfig+0x592>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af48:	f7fd fa6c 	bl	8008424 <HAL_RCC_GetSysClockFreq>
 800af4c:	0003      	movs	r3, r0
 800af4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af50:	e00d      	b.n	800af6e <UART_SetConfig+0x592>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af52:	2380      	movs	r3, #128	; 0x80
 800af54:	021b      	lsls	r3, r3, #8
 800af56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af58:	e009      	b.n	800af6e <UART_SetConfig+0x592>
      default:
        pclk = 0U;
 800af5a:	2300      	movs	r3, #0
 800af5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800af5e:	231a      	movs	r3, #26
 800af60:	2218      	movs	r2, #24
 800af62:	4694      	mov	ip, r2
 800af64:	44bc      	add	ip, r7
 800af66:	4463      	add	r3, ip
 800af68:	2201      	movs	r2, #1
 800af6a:	701a      	strb	r2, [r3, #0]
        break;
 800af6c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af70:	2b00      	cmp	r3, #0
 800af72:	d100      	bne.n	800af76 <UART_SetConfig+0x59a>
 800af74:	e093      	b.n	800b09e <UART_SetConfig+0x6c2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af78:	005a      	lsls	r2, r3, #1
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	085b      	lsrs	r3, r3, #1
 800af80:	18d2      	adds	r2, r2, r3
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	0019      	movs	r1, r3
 800af88:	0010      	movs	r0, r2
 800af8a:	f7f5 f8bd 	bl	8000108 <__udivsi3>
 800af8e:	0003      	movs	r3, r0
 800af90:	b29b      	uxth	r3, r3
 800af92:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af96:	2b0f      	cmp	r3, #15
 800af98:	d920      	bls.n	800afdc <UART_SetConfig+0x600>
 800af9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9c:	4a4f      	ldr	r2, [pc, #316]	; (800b0dc <UART_SetConfig+0x700>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d81c      	bhi.n	800afdc <UART_SetConfig+0x600>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800afa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa4:	b29a      	uxth	r2, r3
 800afa6:	200e      	movs	r0, #14
 800afa8:	2418      	movs	r4, #24
 800afaa:	193b      	adds	r3, r7, r4
 800afac:	181b      	adds	r3, r3, r0
 800afae:	210f      	movs	r1, #15
 800afb0:	438a      	bics	r2, r1
 800afb2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800afb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb6:	085b      	lsrs	r3, r3, #1
 800afb8:	b29b      	uxth	r3, r3
 800afba:	2207      	movs	r2, #7
 800afbc:	4013      	ands	r3, r2
 800afbe:	b299      	uxth	r1, r3
 800afc0:	193b      	adds	r3, r7, r4
 800afc2:	181b      	adds	r3, r3, r0
 800afc4:	193a      	adds	r2, r7, r4
 800afc6:	1812      	adds	r2, r2, r0
 800afc8:	8812      	ldrh	r2, [r2, #0]
 800afca:	430a      	orrs	r2, r1
 800afcc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800afce:	69fb      	ldr	r3, [r7, #28]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	193a      	adds	r2, r7, r4
 800afd4:	1812      	adds	r2, r2, r0
 800afd6:	8812      	ldrh	r2, [r2, #0]
 800afd8:	60da      	str	r2, [r3, #12]
 800afda:	e060      	b.n	800b09e <UART_SetConfig+0x6c2>
      }
      else
      {
        ret = HAL_ERROR;
 800afdc:	231a      	movs	r3, #26
 800afde:	2218      	movs	r2, #24
 800afe0:	4694      	mov	ip, r2
 800afe2:	44bc      	add	ip, r7
 800afe4:	4463      	add	r3, ip
 800afe6:	2201      	movs	r2, #1
 800afe8:	701a      	strb	r2, [r3, #0]
 800afea:	e058      	b.n	800b09e <UART_SetConfig+0x6c2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800afec:	231b      	movs	r3, #27
 800afee:	2218      	movs	r2, #24
 800aff0:	4694      	mov	ip, r2
 800aff2:	44bc      	add	ip, r7
 800aff4:	4463      	add	r3, ip
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	2b08      	cmp	r3, #8
 800affa:	d822      	bhi.n	800b042 <UART_SetConfig+0x666>
 800affc:	009a      	lsls	r2, r3, #2
 800affe:	4b38      	ldr	r3, [pc, #224]	; (800b0e0 <UART_SetConfig+0x704>)
 800b000:	18d3      	adds	r3, r2, r3
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b006:	f7fd fab9 	bl	800857c <HAL_RCC_GetPCLK1Freq>
 800b00a:	0003      	movs	r3, r0
 800b00c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b00e:	e022      	b.n	800b056 <UART_SetConfig+0x67a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b010:	f7fd faca 	bl	80085a8 <HAL_RCC_GetPCLK2Freq>
 800b014:	0003      	movs	r3, r0
 800b016:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b018:	e01d      	b.n	800b056 <UART_SetConfig+0x67a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b01a:	4b2a      	ldr	r3, [pc, #168]	; (800b0c4 <UART_SetConfig+0x6e8>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	2210      	movs	r2, #16
 800b020:	4013      	ands	r3, r2
 800b022:	d002      	beq.n	800b02a <UART_SetConfig+0x64e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b024:	4b28      	ldr	r3, [pc, #160]	; (800b0c8 <UART_SetConfig+0x6ec>)
 800b026:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b028:	e015      	b.n	800b056 <UART_SetConfig+0x67a>
          pclk = (uint32_t) HSI_VALUE;
 800b02a:	4b28      	ldr	r3, [pc, #160]	; (800b0cc <UART_SetConfig+0x6f0>)
 800b02c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b02e:	e012      	b.n	800b056 <UART_SetConfig+0x67a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b030:	f7fd f9f8 	bl	8008424 <HAL_RCC_GetSysClockFreq>
 800b034:	0003      	movs	r3, r0
 800b036:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b038:	e00d      	b.n	800b056 <UART_SetConfig+0x67a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b03a:	2380      	movs	r3, #128	; 0x80
 800b03c:	021b      	lsls	r3, r3, #8
 800b03e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b040:	e009      	b.n	800b056 <UART_SetConfig+0x67a>
      default:
        pclk = 0U;
 800b042:	2300      	movs	r3, #0
 800b044:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b046:	231a      	movs	r3, #26
 800b048:	2218      	movs	r2, #24
 800b04a:	4694      	mov	ip, r2
 800b04c:	44bc      	add	ip, r7
 800b04e:	4463      	add	r3, ip
 800b050:	2201      	movs	r2, #1
 800b052:	701a      	strb	r2, [r3, #0]
        break;
 800b054:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800b056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d020      	beq.n	800b09e <UART_SetConfig+0x6c2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	085a      	lsrs	r2, r3, #1
 800b062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b064:	18d2      	adds	r2, r2, r3
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	0019      	movs	r1, r3
 800b06c:	0010      	movs	r0, r2
 800b06e:	f7f5 f84b 	bl	8000108 <__udivsi3>
 800b072:	0003      	movs	r3, r0
 800b074:	b29b      	uxth	r3, r3
 800b076:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b07a:	2b0f      	cmp	r3, #15
 800b07c:	d908      	bls.n	800b090 <UART_SetConfig+0x6b4>
 800b07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b080:	4a16      	ldr	r2, [pc, #88]	; (800b0dc <UART_SetConfig+0x700>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d804      	bhi.n	800b090 <UART_SetConfig+0x6b4>
      {
        huart->Instance->BRR = usartdiv;
 800b086:	69fb      	ldr	r3, [r7, #28]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b08c:	60da      	str	r2, [r3, #12]
 800b08e:	e006      	b.n	800b09e <UART_SetConfig+0x6c2>
      }
      else
      {
        ret = HAL_ERROR;
 800b090:	231a      	movs	r3, #26
 800b092:	2218      	movs	r2, #24
 800b094:	4694      	mov	ip, r2
 800b096:	44bc      	add	ip, r7
 800b098:	4463      	add	r3, ip
 800b09a:	2201      	movs	r2, #1
 800b09c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b09e:	69fb      	ldr	r3, [r7, #28]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b0a4:	69fb      	ldr	r3, [r7, #28]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b0aa:	231a      	movs	r3, #26
 800b0ac:	2218      	movs	r2, #24
 800b0ae:	4694      	mov	ip, r2
 800b0b0:	44bc      	add	ip, r7
 800b0b2:	4463      	add	r3, ip
 800b0b4:	781b      	ldrb	r3, [r3, #0]
}
 800b0b6:	0018      	movs	r0, r3
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	b00e      	add	sp, #56	; 0x38
 800b0bc:	bdb0      	pop	{r4, r5, r7, pc}
 800b0be:	46c0      	nop			; (mov r8, r8)
 800b0c0:	40004800 	.word	0x40004800
 800b0c4:	40021000 	.word	0x40021000
 800b0c8:	003d0900 	.word	0x003d0900
 800b0cc:	00f42400 	.word	0x00f42400
 800b0d0:	000002ff 	.word	0x000002ff
 800b0d4:	000fffff 	.word	0x000fffff
 800b0d8:	0800cd68 	.word	0x0800cd68
 800b0dc:	0000ffff 	.word	0x0000ffff
 800b0e0:	0800cd8c 	.word	0x0800cd8c

0800b0e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f0:	2bff      	cmp	r3, #255	; 0xff
 800b0f2:	d905      	bls.n	800b100 <UART_AdvFeatureConfig+0x1c>
 800b0f4:	4aa8      	ldr	r2, [pc, #672]	; (800b398 <UART_AdvFeatureConfig+0x2b4>)
 800b0f6:	4ba9      	ldr	r3, [pc, #676]	; (800b39c <UART_AdvFeatureConfig+0x2b8>)
 800b0f8:	0011      	movs	r1, r2
 800b0fa:	0018      	movs	r0, r3
 800b0fc:	f7fa fac6 	bl	800568c <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b104:	2201      	movs	r2, #1
 800b106:	4013      	ands	r3, r2
 800b108:	d01b      	beq.n	800b142 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d00b      	beq.n	800b12a <UART_AdvFeatureConfig+0x46>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b116:	2380      	movs	r3, #128	; 0x80
 800b118:	029b      	lsls	r3, r3, #10
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d005      	beq.n	800b12a <UART_AdvFeatureConfig+0x46>
 800b11e:	4aa0      	ldr	r2, [pc, #640]	; (800b3a0 <UART_AdvFeatureConfig+0x2bc>)
 800b120:	4b9e      	ldr	r3, [pc, #632]	; (800b39c <UART_AdvFeatureConfig+0x2b8>)
 800b122:	0011      	movs	r1, r2
 800b124:	0018      	movs	r0, r3
 800b126:	f7fa fab1 	bl	800568c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	4a9c      	ldr	r2, [pc, #624]	; (800b3a4 <UART_AdvFeatureConfig+0x2c0>)
 800b132:	4013      	ands	r3, r2
 800b134:	0019      	movs	r1, r3
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	430a      	orrs	r2, r1
 800b140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b146:	2202      	movs	r2, #2
 800b148:	4013      	ands	r3, r2
 800b14a:	d01b      	beq.n	800b184 <UART_AdvFeatureConfig+0xa0>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b150:	2b00      	cmp	r3, #0
 800b152:	d00b      	beq.n	800b16c <UART_AdvFeatureConfig+0x88>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b158:	2380      	movs	r3, #128	; 0x80
 800b15a:	025b      	lsls	r3, r3, #9
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d005      	beq.n	800b16c <UART_AdvFeatureConfig+0x88>
 800b160:	4a91      	ldr	r2, [pc, #580]	; (800b3a8 <UART_AdvFeatureConfig+0x2c4>)
 800b162:	4b8e      	ldr	r3, [pc, #568]	; (800b39c <UART_AdvFeatureConfig+0x2b8>)
 800b164:	0011      	movs	r1, r2
 800b166:	0018      	movs	r0, r3
 800b168:	f7fa fa90 	bl	800568c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	4a8e      	ldr	r2, [pc, #568]	; (800b3ac <UART_AdvFeatureConfig+0x2c8>)
 800b174:	4013      	ands	r3, r2
 800b176:	0019      	movs	r1, r3
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	430a      	orrs	r2, r1
 800b182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b188:	2204      	movs	r2, #4
 800b18a:	4013      	ands	r3, r2
 800b18c:	d01b      	beq.n	800b1c6 <UART_AdvFeatureConfig+0xe2>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b192:	2b00      	cmp	r3, #0
 800b194:	d00b      	beq.n	800b1ae <UART_AdvFeatureConfig+0xca>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b19a:	2380      	movs	r3, #128	; 0x80
 800b19c:	02db      	lsls	r3, r3, #11
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d005      	beq.n	800b1ae <UART_AdvFeatureConfig+0xca>
 800b1a2:	4a83      	ldr	r2, [pc, #524]	; (800b3b0 <UART_AdvFeatureConfig+0x2cc>)
 800b1a4:	4b7d      	ldr	r3, [pc, #500]	; (800b39c <UART_AdvFeatureConfig+0x2b8>)
 800b1a6:	0011      	movs	r1, r2
 800b1a8:	0018      	movs	r0, r3
 800b1aa:	f7fa fa6f 	bl	800568c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	4a7f      	ldr	r2, [pc, #508]	; (800b3b4 <UART_AdvFeatureConfig+0x2d0>)
 800b1b6:	4013      	ands	r3, r2
 800b1b8:	0019      	movs	r1, r3
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	430a      	orrs	r2, r1
 800b1c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ca:	2208      	movs	r2, #8
 800b1cc:	4013      	ands	r3, r2
 800b1ce:	d01b      	beq.n	800b208 <UART_AdvFeatureConfig+0x124>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d00b      	beq.n	800b1f0 <UART_AdvFeatureConfig+0x10c>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1dc:	2380      	movs	r3, #128	; 0x80
 800b1de:	021b      	lsls	r3, r3, #8
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d005      	beq.n	800b1f0 <UART_AdvFeatureConfig+0x10c>
 800b1e4:	4a74      	ldr	r2, [pc, #464]	; (800b3b8 <UART_AdvFeatureConfig+0x2d4>)
 800b1e6:	4b6d      	ldr	r3, [pc, #436]	; (800b39c <UART_AdvFeatureConfig+0x2b8>)
 800b1e8:	0011      	movs	r1, r2
 800b1ea:	0018      	movs	r0, r3
 800b1ec:	f7fa fa4e 	bl	800568c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	4a71      	ldr	r2, [pc, #452]	; (800b3bc <UART_AdvFeatureConfig+0x2d8>)
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	0019      	movs	r1, r3
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	430a      	orrs	r2, r1
 800b206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20c:	2210      	movs	r2, #16
 800b20e:	4013      	ands	r3, r2
 800b210:	d01c      	beq.n	800b24c <UART_AdvFeatureConfig+0x168>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00c      	beq.n	800b234 <UART_AdvFeatureConfig+0x150>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b21e:	2380      	movs	r3, #128	; 0x80
 800b220:	015b      	lsls	r3, r3, #5
 800b222:	429a      	cmp	r2, r3
 800b224:	d006      	beq.n	800b234 <UART_AdvFeatureConfig+0x150>
 800b226:	23cb      	movs	r3, #203	; 0xcb
 800b228:	011a      	lsls	r2, r3, #4
 800b22a:	4b5c      	ldr	r3, [pc, #368]	; (800b39c <UART_AdvFeatureConfig+0x2b8>)
 800b22c:	0011      	movs	r1, r2
 800b22e:	0018      	movs	r0, r3
 800b230:	f7fa fa2c 	bl	800568c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	689b      	ldr	r3, [r3, #8]
 800b23a:	4a61      	ldr	r2, [pc, #388]	; (800b3c0 <UART_AdvFeatureConfig+0x2dc>)
 800b23c:	4013      	ands	r3, r2
 800b23e:	0019      	movs	r1, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	430a      	orrs	r2, r1
 800b24a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b250:	2220      	movs	r2, #32
 800b252:	4013      	ands	r3, r2
 800b254:	d01b      	beq.n	800b28e <UART_AdvFeatureConfig+0x1aa>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d00b      	beq.n	800b276 <UART_AdvFeatureConfig+0x192>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b262:	2380      	movs	r3, #128	; 0x80
 800b264:	019b      	lsls	r3, r3, #6
 800b266:	429a      	cmp	r2, r3
 800b268:	d005      	beq.n	800b276 <UART_AdvFeatureConfig+0x192>
 800b26a:	4a56      	ldr	r2, [pc, #344]	; (800b3c4 <UART_AdvFeatureConfig+0x2e0>)
 800b26c:	4b4b      	ldr	r3, [pc, #300]	; (800b39c <UART_AdvFeatureConfig+0x2b8>)
 800b26e:	0011      	movs	r1, r2
 800b270:	0018      	movs	r0, r3
 800b272:	f7fa fa0b 	bl	800568c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	689b      	ldr	r3, [r3, #8]
 800b27c:	4a52      	ldr	r2, [pc, #328]	; (800b3c8 <UART_AdvFeatureConfig+0x2e4>)
 800b27e:	4013      	ands	r3, r2
 800b280:	0019      	movs	r1, r3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	430a      	orrs	r2, r1
 800b28c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b292:	2240      	movs	r2, #64	; 0x40
 800b294:	4013      	ands	r3, r2
 800b296:	d059      	beq.n	800b34c <UART_AdvFeatureConfig+0x268>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a4b      	ldr	r2, [pc, #300]	; (800b3cc <UART_AdvFeatureConfig+0x2e8>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d00a      	beq.n	800b2b8 <UART_AdvFeatureConfig+0x1d4>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4a4a      	ldr	r2, [pc, #296]	; (800b3d0 <UART_AdvFeatureConfig+0x2ec>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d005      	beq.n	800b2b8 <UART_AdvFeatureConfig+0x1d4>
 800b2ac:	4a49      	ldr	r2, [pc, #292]	; (800b3d4 <UART_AdvFeatureConfig+0x2f0>)
 800b2ae:	4b3b      	ldr	r3, [pc, #236]	; (800b39c <UART_AdvFeatureConfig+0x2b8>)
 800b2b0:	0011      	movs	r1, r2
 800b2b2:	0018      	movs	r0, r3
 800b2b4:	f7fa f9ea 	bl	800568c <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00b      	beq.n	800b2d8 <UART_AdvFeatureConfig+0x1f4>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b2c4:	2380      	movs	r3, #128	; 0x80
 800b2c6:	035b      	lsls	r3, r3, #13
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d005      	beq.n	800b2d8 <UART_AdvFeatureConfig+0x1f4>
 800b2cc:	4a42      	ldr	r2, [pc, #264]	; (800b3d8 <UART_AdvFeatureConfig+0x2f4>)
 800b2ce:	4b33      	ldr	r3, [pc, #204]	; (800b39c <UART_AdvFeatureConfig+0x2b8>)
 800b2d0:	0011      	movs	r1, r2
 800b2d2:	0018      	movs	r0, r3
 800b2d4:	f7fa f9da 	bl	800568c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	4a3f      	ldr	r2, [pc, #252]	; (800b3dc <UART_AdvFeatureConfig+0x2f8>)
 800b2e0:	4013      	ands	r3, r2
 800b2e2:	0019      	movs	r1, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	430a      	orrs	r2, r1
 800b2ee:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b2f4:	2380      	movs	r3, #128	; 0x80
 800b2f6:	035b      	lsls	r3, r3, #13
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d127      	bne.n	800b34c <UART_AdvFeatureConfig+0x268>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b300:	2b00      	cmp	r3, #0
 800b302:	d017      	beq.n	800b334 <UART_AdvFeatureConfig+0x250>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b308:	2380      	movs	r3, #128	; 0x80
 800b30a:	039b      	lsls	r3, r3, #14
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d011      	beq.n	800b334 <UART_AdvFeatureConfig+0x250>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b314:	2380      	movs	r3, #128	; 0x80
 800b316:	03db      	lsls	r3, r3, #15
 800b318:	429a      	cmp	r2, r3
 800b31a:	d00b      	beq.n	800b334 <UART_AdvFeatureConfig+0x250>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b320:	23c0      	movs	r3, #192	; 0xc0
 800b322:	03db      	lsls	r3, r3, #15
 800b324:	429a      	cmp	r2, r3
 800b326:	d005      	beq.n	800b334 <UART_AdvFeatureConfig+0x250>
 800b328:	4a2d      	ldr	r2, [pc, #180]	; (800b3e0 <UART_AdvFeatureConfig+0x2fc>)
 800b32a:	4b1c      	ldr	r3, [pc, #112]	; (800b39c <UART_AdvFeatureConfig+0x2b8>)
 800b32c:	0011      	movs	r1, r2
 800b32e:	0018      	movs	r0, r3
 800b330:	f7fa f9ac 	bl	800568c <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	4a2a      	ldr	r2, [pc, #168]	; (800b3e4 <UART_AdvFeatureConfig+0x300>)
 800b33c:	4013      	ands	r3, r2
 800b33e:	0019      	movs	r1, r3
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	430a      	orrs	r2, r1
 800b34a:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b350:	2280      	movs	r2, #128	; 0x80
 800b352:	4013      	ands	r3, r2
 800b354:	d01b      	beq.n	800b38e <UART_AdvFeatureConfig+0x2aa>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d00b      	beq.n	800b376 <UART_AdvFeatureConfig+0x292>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b362:	2380      	movs	r3, #128	; 0x80
 800b364:	031b      	lsls	r3, r3, #12
 800b366:	429a      	cmp	r2, r3
 800b368:	d005      	beq.n	800b376 <UART_AdvFeatureConfig+0x292>
 800b36a:	4a1f      	ldr	r2, [pc, #124]	; (800b3e8 <UART_AdvFeatureConfig+0x304>)
 800b36c:	4b0b      	ldr	r3, [pc, #44]	; (800b39c <UART_AdvFeatureConfig+0x2b8>)
 800b36e:	0011      	movs	r1, r2
 800b370:	0018      	movs	r0, r3
 800b372:	f7fa f98b 	bl	800568c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	4a1b      	ldr	r2, [pc, #108]	; (800b3ec <UART_AdvFeatureConfig+0x308>)
 800b37e:	4013      	ands	r3, r2
 800b380:	0019      	movs	r1, r3
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	430a      	orrs	r2, r1
 800b38c:	605a      	str	r2, [r3, #4]
  }
}
 800b38e:	46c0      	nop			; (mov r8, r8)
 800b390:	46bd      	mov	sp, r7
 800b392:	b002      	add	sp, #8
 800b394:	bd80      	pop	{r7, pc}
 800b396:	46c0      	nop			; (mov r8, r8)
 800b398:	00000c8f 	.word	0x00000c8f
 800b39c:	0800ba90 	.word	0x0800ba90
 800b3a0:	00000c94 	.word	0x00000c94
 800b3a4:	fffdffff 	.word	0xfffdffff
 800b3a8:	00000c9b 	.word	0x00000c9b
 800b3ac:	fffeffff 	.word	0xfffeffff
 800b3b0:	00000ca2 	.word	0x00000ca2
 800b3b4:	fffbffff 	.word	0xfffbffff
 800b3b8:	00000ca9 	.word	0x00000ca9
 800b3bc:	ffff7fff 	.word	0xffff7fff
 800b3c0:	ffffefff 	.word	0xffffefff
 800b3c4:	00000cb7 	.word	0x00000cb7
 800b3c8:	ffffdfff 	.word	0xffffdfff
 800b3cc:	40013800 	.word	0x40013800
 800b3d0:	40004400 	.word	0x40004400
 800b3d4:	00000cbe 	.word	0x00000cbe
 800b3d8:	00000cbf 	.word	0x00000cbf
 800b3dc:	ffefffff 	.word	0xffefffff
 800b3e0:	00000cc4 	.word	0x00000cc4
 800b3e4:	ff9fffff 	.word	0xff9fffff
 800b3e8:	00000ccc 	.word	0x00000ccc
 800b3ec:	fff7ffff 	.word	0xfff7ffff

0800b3f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b086      	sub	sp, #24
 800b3f4:	af02      	add	r7, sp, #8
 800b3f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2280      	movs	r2, #128	; 0x80
 800b3fc:	2100      	movs	r1, #0
 800b3fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b400:	f7fb fa30 	bl	8006864 <HAL_GetTick>
 800b404:	0003      	movs	r3, r0
 800b406:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	2208      	movs	r2, #8
 800b410:	4013      	ands	r3, r2
 800b412:	2b08      	cmp	r3, #8
 800b414:	d10d      	bne.n	800b432 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	2380      	movs	r3, #128	; 0x80
 800b41a:	0399      	lsls	r1, r3, #14
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	4b18      	ldr	r3, [pc, #96]	; (800b480 <UART_CheckIdleState+0x90>)
 800b420:	9300      	str	r3, [sp, #0]
 800b422:	0013      	movs	r3, r2
 800b424:	2200      	movs	r2, #0
 800b426:	f000 f82d 	bl	800b484 <UART_WaitOnFlagUntilTimeout>
 800b42a:	1e03      	subs	r3, r0, #0
 800b42c:	d001      	beq.n	800b432 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b42e:	2303      	movs	r3, #3
 800b430:	e022      	b.n	800b478 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2204      	movs	r2, #4
 800b43a:	4013      	ands	r3, r2
 800b43c:	2b04      	cmp	r3, #4
 800b43e:	d10d      	bne.n	800b45c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b440:	68fa      	ldr	r2, [r7, #12]
 800b442:	2380      	movs	r3, #128	; 0x80
 800b444:	03d9      	lsls	r1, r3, #15
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	4b0d      	ldr	r3, [pc, #52]	; (800b480 <UART_CheckIdleState+0x90>)
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	0013      	movs	r3, r2
 800b44e:	2200      	movs	r2, #0
 800b450:	f000 f818 	bl	800b484 <UART_WaitOnFlagUntilTimeout>
 800b454:	1e03      	subs	r3, r0, #0
 800b456:	d001      	beq.n	800b45c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b458:	2303      	movs	r3, #3
 800b45a:	e00d      	b.n	800b478 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2220      	movs	r2, #32
 800b460:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2220      	movs	r2, #32
 800b466:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2274      	movs	r2, #116	; 0x74
 800b472:	2100      	movs	r1, #0
 800b474:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b476:	2300      	movs	r3, #0
}
 800b478:	0018      	movs	r0, r3
 800b47a:	46bd      	mov	sp, r7
 800b47c:	b004      	add	sp, #16
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	01ffffff 	.word	0x01ffffff

0800b484 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	603b      	str	r3, [r7, #0]
 800b490:	1dfb      	adds	r3, r7, #7
 800b492:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b494:	e05e      	b.n	800b554 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b496:	69bb      	ldr	r3, [r7, #24]
 800b498:	3301      	adds	r3, #1
 800b49a:	d05b      	beq.n	800b554 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b49c:	f7fb f9e2 	bl	8006864 <HAL_GetTick>
 800b4a0:	0002      	movs	r2, r0
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	1ad3      	subs	r3, r2, r3
 800b4a6:	69ba      	ldr	r2, [r7, #24]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d302      	bcc.n	800b4b2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800b4ac:	69bb      	ldr	r3, [r7, #24]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d11b      	bne.n	800b4ea <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	492f      	ldr	r1, [pc, #188]	; (800b57c <UART_WaitOnFlagUntilTimeout+0xf8>)
 800b4be:	400a      	ands	r2, r1
 800b4c0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	689a      	ldr	r2, [r3, #8]
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	2101      	movs	r1, #1
 800b4ce:	438a      	bics	r2, r1
 800b4d0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2220      	movs	r2, #32
 800b4d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2220      	movs	r2, #32
 800b4dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2274      	movs	r2, #116	; 0x74
 800b4e2:	2100      	movs	r1, #0
 800b4e4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b4e6:	2303      	movs	r3, #3
 800b4e8:	e044      	b.n	800b574 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	2204      	movs	r2, #4
 800b4f2:	4013      	ands	r3, r2
 800b4f4:	d02e      	beq.n	800b554 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	69da      	ldr	r2, [r3, #28]
 800b4fc:	2380      	movs	r3, #128	; 0x80
 800b4fe:	011b      	lsls	r3, r3, #4
 800b500:	401a      	ands	r2, r3
 800b502:	2380      	movs	r3, #128	; 0x80
 800b504:	011b      	lsls	r3, r3, #4
 800b506:	429a      	cmp	r2, r3
 800b508:	d124      	bne.n	800b554 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	2280      	movs	r2, #128	; 0x80
 800b510:	0112      	lsls	r2, r2, #4
 800b512:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4917      	ldr	r1, [pc, #92]	; (800b57c <UART_WaitOnFlagUntilTimeout+0xf8>)
 800b520:	400a      	ands	r2, r1
 800b522:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	689a      	ldr	r2, [r3, #8]
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	2101      	movs	r1, #1
 800b530:	438a      	bics	r2, r1
 800b532:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2220      	movs	r2, #32
 800b538:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2220      	movs	r2, #32
 800b53e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2280      	movs	r2, #128	; 0x80
 800b544:	2120      	movs	r1, #32
 800b546:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2274      	movs	r2, #116	; 0x74
 800b54c:	2100      	movs	r1, #0
 800b54e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b550:	2303      	movs	r3, #3
 800b552:	e00f      	b.n	800b574 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	69db      	ldr	r3, [r3, #28]
 800b55a:	68ba      	ldr	r2, [r7, #8]
 800b55c:	4013      	ands	r3, r2
 800b55e:	68ba      	ldr	r2, [r7, #8]
 800b560:	1ad3      	subs	r3, r2, r3
 800b562:	425a      	negs	r2, r3
 800b564:	4153      	adcs	r3, r2
 800b566:	b2db      	uxtb	r3, r3
 800b568:	001a      	movs	r2, r3
 800b56a:	1dfb      	adds	r3, r7, #7
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	429a      	cmp	r2, r3
 800b570:	d091      	beq.n	800b496 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b572:	2300      	movs	r3, #0
}
 800b574:	0018      	movs	r0, r3
 800b576:	46bd      	mov	sp, r7
 800b578:	b004      	add	sp, #16
 800b57a:	bd80      	pop	{r7, pc}
 800b57c:	fffffe5f 	.word	0xfffffe5f

0800b580 <__libc_init_array>:
 800b580:	b570      	push	{r4, r5, r6, lr}
 800b582:	2600      	movs	r6, #0
 800b584:	4d0c      	ldr	r5, [pc, #48]	; (800b5b8 <__libc_init_array+0x38>)
 800b586:	4c0d      	ldr	r4, [pc, #52]	; (800b5bc <__libc_init_array+0x3c>)
 800b588:	1b64      	subs	r4, r4, r5
 800b58a:	10a4      	asrs	r4, r4, #2
 800b58c:	42a6      	cmp	r6, r4
 800b58e:	d109      	bne.n	800b5a4 <__libc_init_array+0x24>
 800b590:	2600      	movs	r6, #0
 800b592:	f000 f82b 	bl	800b5ec <_init>
 800b596:	4d0a      	ldr	r5, [pc, #40]	; (800b5c0 <__libc_init_array+0x40>)
 800b598:	4c0a      	ldr	r4, [pc, #40]	; (800b5c4 <__libc_init_array+0x44>)
 800b59a:	1b64      	subs	r4, r4, r5
 800b59c:	10a4      	asrs	r4, r4, #2
 800b59e:	42a6      	cmp	r6, r4
 800b5a0:	d105      	bne.n	800b5ae <__libc_init_array+0x2e>
 800b5a2:	bd70      	pop	{r4, r5, r6, pc}
 800b5a4:	00b3      	lsls	r3, r6, #2
 800b5a6:	58eb      	ldr	r3, [r5, r3]
 800b5a8:	4798      	blx	r3
 800b5aa:	3601      	adds	r6, #1
 800b5ac:	e7ee      	b.n	800b58c <__libc_init_array+0xc>
 800b5ae:	00b3      	lsls	r3, r6, #2
 800b5b0:	58eb      	ldr	r3, [r5, r3]
 800b5b2:	4798      	blx	r3
 800b5b4:	3601      	adds	r6, #1
 800b5b6:	e7f2      	b.n	800b59e <__libc_init_array+0x1e>
 800b5b8:	0800cdb8 	.word	0x0800cdb8
 800b5bc:	0800cdb8 	.word	0x0800cdb8
 800b5c0:	0800cdb8 	.word	0x0800cdb8
 800b5c4:	0800cdbc 	.word	0x0800cdbc

0800b5c8 <memcpy>:
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	b510      	push	{r4, lr}
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d100      	bne.n	800b5d2 <memcpy+0xa>
 800b5d0:	bd10      	pop	{r4, pc}
 800b5d2:	5ccc      	ldrb	r4, [r1, r3]
 800b5d4:	54c4      	strb	r4, [r0, r3]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	e7f8      	b.n	800b5cc <memcpy+0x4>

0800b5da <memset>:
 800b5da:	0003      	movs	r3, r0
 800b5dc:	1812      	adds	r2, r2, r0
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d100      	bne.n	800b5e4 <memset+0xa>
 800b5e2:	4770      	bx	lr
 800b5e4:	7019      	strb	r1, [r3, #0]
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	e7f9      	b.n	800b5de <memset+0x4>
	...

0800b5ec <_init>:
 800b5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ee:	46c0      	nop			; (mov r8, r8)
 800b5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5f2:	bc08      	pop	{r3}
 800b5f4:	469e      	mov	lr, r3
 800b5f6:	4770      	bx	lr

0800b5f8 <_fini>:
 800b5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fa:	46c0      	nop			; (mov r8, r8)
 800b5fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5fe:	bc08      	pop	{r3}
 800b600:	469e      	mov	lr, r3
 800b602:	4770      	bx	lr
